Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-1
                                                            

       1                                ; 
       2                                ; This version of COMMAND is divided in
					to three distinct parts.  First is the 
       3                                ; resident portion, which includes hand
					lers for interrupts 22H (terminate), 
       4                                ; 23H (Cntrl-C), 24H (fatal error), and
					 27H (stay resident); it also has code 
       5                                ; to test and, if necessary, reload the
					 transient portion.  Following the 
       6                                ; resident is the init code, which is o
					verwritten after use.  Then comes the 
       7                                ; transient portion, which includes all
					 command processing (whether internal 
       8                                ; or external).  The transient portion 
					loads at the end of physical memory, 
       9                                ; and it may be overlayed by programs t
					hat need as much memory as possible. 
      10                                ; When the resident portion of command 
					regains control from a user program, a 
      11                                ; checksum is performed on the transien
					t portion to see if it must be 
      12                                ; reloaded.  Thus programs which do not
					 need maximum memory will save the time
					 
      13                                ; required to reload COMMAND when they 
					terminate. 
      14                                 
      15                                ; 
      16                                ; REV 1.17 
      17                                ;    05/19/82   Fixed bug in BADEXE err
					or (relocation error must return to 
      18                                ;               resident since the EXEL
					OAD may have overwritten the transient.
					 
      19                                ; REV 1.18 
      20                                ;    05/21/82   IBM version always look
					s on drive A 
      21                                ;               MSVER always looks on d
					efault drive 
      22                                ; 
      23                                ; REV 1.19 
      24                                ;    06/03/82   Drive spec now entered 
					in command line 
      25                                ;    06/07/82   Added VER command (prin
					t DOS version number) and VOL command 
      26                                ;               (print volume label) 
      27                                ; REV 1.20 
      28                                ;    06/09/82   Prints "directory" afte
					r directories 
      29                                ;    06/13/82   MKDIR, CHDIR, PWD, RMDI
					R added 
      30                                ; REV 1.50 
      31                                ;               Some code for new 2.0 D
					OS, sort of HACKey.  Not enough time to
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-2
                                                            

					 
      32                                ;               do it right. 
      33                                ; REV 1.70 
      34                                ;               EXEC used to fork off n
					ew processes 
      35                                ; REV 1.80 
      36                                ;               C switch for single com
					mand execution 
      37                                ; REV 1.90 
      38                                ;               Batch uses XENIX 
      39                                ; Rev 2.00 
      40                                ;               Lots of neato stuff 
      41                                ;               IBM 2.00 level 
      42                                ; Rev 2.01 
      43                                ;               'D' switch for date tim
					e suppression 
      44                                ; Rev 2.02 
      45                                ;               Default userpath is NUL
					 rather than BIN 
      46                                ;                       same as IBM 
      47                                ;               COMMAND split into piec
					es 
      48                                ; Rev 2.10 
      49                                ;               INTERNATIONAL SUPPORT 
      50                                ; Rev 2.11      COMMAND split into more
					 pieces 
      51                                 
      52                             C          INCLUDE DOSSYM.ASM 
      53                             C  include DOSMAC.ASM 
      54                             C  ; 
      55                             C  ; Macro file for MSDOS. 
      56                             C  ; 
      57                             C   
      58                             C  SUBTTL BREAK a listing into pages and g
					ive new subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-3
BREAK a listing into pages and give new subtitles           

      59                             C  PAGE 
      60                             C  BREAK MACRO subtitle 
      61                             C   SUBTTL subtitle 
      62                             C   PAGE 
      63                             C  ENDM 
      64                             C   
      65                             C  BREAK <I_NEED: declare a variable exter
					nal, if necessary, and allocate a size>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

      66                             C   
      67                             C  ; 
      68                             C  ; declare a variable external and alloc
					ate a size 
      69                             C  ; 
      70                             C  I_NEED MACRO sym,len 
      71                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
      72                             C   IFIDN <len>,<WORD> 
      73                             C   EXTRN &sym:WORD 
      74                             C   ELSE 
      75                             C   IFIDN <len>,<DWORD> 
      76                             C   EXTRN &sym:DWORD 
      77                             C   ELSE 
      78                             C   EXTRN &sym:BYTE 
      79                             C   ENDIF 
      80                             C   ENDIF 
      81                             C   DATA ENDS 
      82                             C  ENDM 
      83                             C   
      84                             C  ; 
      85                             C  ; call a procedure that may be external
					. The call will be short. 
      86                             C  ; 
      87                             C  invoke MACRO name 
      88                             C  .xcref 
      89                             C   IF2 
      90                             C   IFNDEF name 
      91                             C   EXTRN name:NEAR 
      92                             C   ENDIF 
      93                             C   ENDIF 
      94                             C  .cref 
      95                             C   CALL name 
      96                             C  ENDM 
      97                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

      98                             C  PAGE 
      99                             C  ; 
     100                             C  ; jump to a label that may be external.
					 The jump will be near. 
     101                             C  ; 
     102                             C  transfer MACRO name 
     103                             C  .xcref 
     104                             C   IF2 
     105                             C   IFNDEF name 
     106                             C   EXTRN name:NEAR 
     107                             C   ENDIF 
     108                             C   ENDIF 
     109                             C  .cref 
     110                             C   JUMP name 
     111                             C  ENDM 
     112                             C   
     113                             C  ; 
     114                             C  ; get a short address in a word 
     115                             C  ; 
     116                             C  short_addr MACRO name 
     117                             C   IFDIF <name>,<?> 
     118                             C  .xcref 
     119                             C   IF2 
     120                             C   IFNDEF name 
     121                             C   EXTRN name:NEAR 
     122                             C   ENDIF 
     123                             C   ENDIF 
     124                             C  .cref 
     125                             C   DW OFFSET DOSGROUP:name 
     126                             C   ELSE 
     127                             C   DW ? 
     128                             C   ENDIF 
     129                             C  ENDM 
     130                             C   
     131                             C  ; 
     132                             C  ; get a long address in a dword 
     133                             C  ; 
     134                             C  long_addr MACRO name 
     135                             C  .xcref 
     136                             C   IF2 
     137                             C   IFNDEF name 
     138                             C   EXTRN name:NEAR 
     139                             C   ENDIF 
     140                             C  .cref 
     141                             C   DD name 
     142                             C  ENDM 
     143                             C   
     144                             C  ; 
     145                             C  ; declare a PROC near or far but PUBLIC
					 nonetheless 
     146                             C  ; 
     147                             C  procedure MACRO name,distance 
     148                             C   PUBLIC name 
     149                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

     150                             C  ENDM 
     151                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

     152                             C  PAGE 
     153                             C  ; 
     154                             C  ; define a data item to be public and o
					f an appropriate size/type 
     155                             C  ; 
     156                             C  I_AM MACRO name,size 
     157                             C   PUBLIC name 
     158                             C   
     159                             C   IFIDN <size>,<WORD> 
     160                             C  name DW ? 
     161                             C   ELSE 
     162                             C   IFIDN <size>,<DWORD> 
     163                             C  name DD ? 
     164                             C   ELSE 
     165                             C   IFIDN <size>,<BYTE> 
     166                             C  name DB ? 
     167                             C   ELSE 
     168                             C  name DB size DUP (?) 
     169                             C   ENDIF 
     170                             C   ENDIF 
     171                             C   ENDIF 
     172                             C  ENDM 
     173                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

     174                             C  PAGE 
     175                             C  ; 
     176                             C  ; call the macro chain 
     177                             C  ; 
     178                             C  do_ext macro 
     179                             C  endm 
     180                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

     181                             C  PAGE 
     182                             C   
     183                             C  ; 
     184                             C  ; define an entry in a procedure 
     185                             C  ; 
     186                             C  entry macro name 
     187                             C   PUBLIC name 
     188                             C  name: 
     189                             C  endm 
     190                             C   
     191                             C  BREAK <ERROR - print a message and then
					 jump to a label> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-10
ERROR - print a message and then jump to a label            

     192                             C   
     193                             C  error macro code 
     194                             C   local a 
     195                             C  .xcref 
     196                             C   MOV AL,code 
     197                             C   transfer SYS_RET_ERR 
     198                             C  .cref 
     199                             C  ENDM 
     200                             C   
     201                             C  BREAK <JUMP - real jump that links up s
					hortwise> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-11
JUMP - real jump that links up shortwise                    

     202                             C  ; 
     203                             C  ; given a label <lbl> either 2 byte jum
					p to another label <lbl>_J 
     204                             C  ; if it is near enough or 3 byte jump t
					o <lbl> 
     205                             C  ; 
     206                             C   
     207                             C  jump macro lbl 
     208                             C   local a 
     209                             C  .xcref 
     210                             C   a: 
     211                             C   ifndef lbl&_J ;; is this the first inv
					ocation 
     212                             C   JMP lbl 
     213                             C   ELSE 
     214                             C   IF lbl&_J GE $ 
     215                             C   JMP lbl 
     216                             C   ELSE 
     217                             C   IF ($-lbl&_J) GT 126 ;; is the jump to
					o far away? 
     218                             C   JMP lbl 
     219                             C   ELSE ;; do the short one... 
     220                             C   JMP lbl&_J 
     221                             C   ENDIF 
     222                             C   ENDIF 
     223                             C   ENDIF 
     224                             C   lbl&_j = a 
     225                             C  .cref 
     226                             C  endm 
     227                             C   
     228                             C  BREAK <RETURN - return from a function>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-12
RETURN - return from a function                             

     229                             C   
     230                             C  return macro 
     231                             C   local a 
     232                             C  .xcref 
     233                             C  a: 
     234                             C   RET 
     235                             C  ret_l = a 
     236                             C  .cref 
     237                             C  endm 
     238                             C   
     239                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-13
CONDRET - conditional return                                

     240                             C   
     241                             C  makelab macro l,cc,ncc 
     242                             C   local a 
     243                             C   j&ncc a ;; j<NCC> a: 
     244                             C   return ;; return 
     245                             C   a: ;; a: 
     246                             C   ret_&cc = ret_l ;; define ret_<CC> to 
					be ret_l 
     247                             C  endm 
     248                             C   
     249                             C  condret macro cc,ncc 
     250                             C   local a,b 
     251                             C   ifdef ret_l ;; if ret_l is defined 
     252                             C   if (($ - ret_l) le 126) and ($ gt ret_
					l) 
     253                             C   ;; if ret_l is near enough then 
     254                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
     255                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     256                             C   else 
     257                             C   makelab a,cc,ncc 
     258                             C   endif 
     259                             C   else 
     260                             C   ifdef ret_&cc ;; if ret_<CC> defined 
     261                             C   if (($ - ret_&cc) le 126) and ($ gt re
					t_&cc) 
     262                             C   ;; if ret_<CC> is near enough 
     263                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC
					> 
     264                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     265                             C   else 
     266                             C   makelab a,cc,ncc 
     267                             C   endif 
     268                             C   else 
     269                             C   makelab a,cc,ncc 
     270                             C   endif 
     271                             C   endif 
     272                             C  endm 
     273                             C  ;condret macro cc,ncc 
     274                             C  ; local a,b 
     275                             C  ; ifdef ret_l ; if ret_l is defined 
     276                             C  ; if (($ - ret_l) le 126) and ($ gt ret
					_l) 
     277                             C  ; ; if ret_l is near enough then 
     278                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
     279                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     280                             C  ; exitm 
     281                             C  ; endif 
     282                             C  ; endif 
     283                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
     284                             C  ; if (($ - ret_&cc) le 126) and ($ gt r
					et_&cc) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-14
CONDRET - conditional return                                

     285                             C  ; ; if ret_<CC> is near enough 
     286                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC
					> 
     287                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     288                             C  ; exitm 
     289                             C  ; endif 
     290                             C  ; endif 
     291                             C  ; j&ncc a ; j<NCC> a: 
     292                             C  ; return ; return 
     293                             C  ; a: ; a: 
     294                             C  ; ret_&cc = ret_l ; define ret_<CC> to 
					be ret_l 
     295                             C  ;endm 
     296                             C  ; 
     297                             C  BREAK <RETZ - return if zero, links up 
					shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-15
RETZ - return if zero, links up shortwise if necessary      

     298                             C   
     299                             C  retz macro 
     300                             C   condret z,nz 
     301                             C  endm 
     302                             C   
     303                             C  BREAK <RETNZ - return if not zero, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-16
RETNZ - return if not zero, links up shortwise if necessary 

     304                             C   
     305                             C  retnz macro 
     306                             C   condret nz,z 
     307                             C  endm 
     308                             C   
     309                             C  BREAK <RETC - return if carry set, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-17
RETC - return if carry set, links up shortwise if necessary 

     310                             C   
     311                             C  retc macro 
     312                             C   condret c,nc 
     313                             C  endm 
     314                             C   
     315                             C  BREAK <RETNC - return if not carry, lin
					ks up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-18
RETNC - return if not carry, links up shortwise if necessary

     316                             C   
     317                             C  retnc macro 
     318                             C   condret nc,c 
     319                             C  endm 
     320                             C   
     321                             C  BREAK <CONTEXT - set the DOS context to
					 a particular register> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-19
CONTEXT - set the DOS context to a particular register      

     322                             C   
     323                             C  context macro r 
     324                             C   PUSH SS 
     325                             C   POP r 
     326                             C   ASSUME r:DOSGROUP 
     327                             C  endm 
     328                             C   
     329                             C  IF2 
     330                             C      %OUT    DOSSYM in Pass 2 
     331                             C  ENDIF 
     332                             C   
     333                             C  ENDIF 
     334                             C   
     335 = 0002                      C  DOS_MAJOR_VERSION   EQU      2 
     336 = 000B                      C  DOS_MINOR_VERSION   EQU     11 
     337                             C   
     338                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-20
Control character definitions                               

     339                             C   
     340 = 007F                      C  c_DEL       EQU     7Fh         ;    AS
					CII rubout or delete previous char 
     341 = 0008                      C  c_BS        EQU     08h         ; ^H AS
					CII backspace 
     342 = 000D                      C  c_CR        EQU     0Dh         ; ^M AS
					CII carriage return 
     343 = 000A                      C  c_LF        EQU     0Ah         ; ^J AS
					CII linefeed 
     344 = 0017                      C  c_ETB       EQU     17h         ; ^W AS
					CII end of transmission 
     345 = 0015                      C  c_NAK       EQU     15h         ; ^U AS
					CII negative acknowledge 
     346 = 0003                      C  c_ETX       EQU     03h         ; ^C AS
					CII end of text 
     347 = 0009                      C  c_HT        EQU     09h         ; ^I AS
					CII tab 
     348                             C   
     349                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-21
BPB Definition                                              

     350                             C   
     351                             C   
     352                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     353                             C  ;                                      
					                                    ; 
     354                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     355                             C  ;                                      
					                                    ; 
     356                             C  ; Certain structures, constants and sys
					tem  calls  below  are  private  to ; 
     357                             C  ; the DOS  and  are  extremely  version
					-dependent.  They may change at any ; 
     358                             C  ; time at  the  implementors'  whim.   
					As  a  result,  they  must  not  be ; 
     359                             C  ; documented to  the  general  public. 
					  If  an  extreme case arises, they ; 
     360                             C  ; must be documented with this warning.
					                                    ; 
     361                             C  ;                                      
					                                    ; 
     362                             C  ; Those structures and constants that a
					re subject to  the  above  will  be ; 
     363                             C  ; marked and bracketed with the flag:  
					                                    ; 
     364                             C  ;                                      
					                                    ; 
     365                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     366                             C  ;                                      
					                                    ; 
     367                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     368                             C   
     369                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-22
Bios Parameter Block                                        

     370                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     371                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     372                             C  ;                                      
					                                    ; 
     373                             C   
     374                             C  ; Bios Parameter Block definition 
     375                             C  ; This structure is used to build a ful
					l DPB 
     376                             C   
     377                             C  BPBLOCK STRUC 
     378 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes
					 of physical sector 
     379 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc
					 unit 
     380 0003  ????                  C  BPRES   DW      ?       ; Number of res
					erved sectors 
     381 0005  ??                    C  BPFTCNT DB      ?       ; Number of FAT
					s 
     382 0006  ????                  C  BPDRCNT DW      ?       ; Number of dir
					ectory entries 
     383 0008  ????                  C  BPSCCNT DW      ?       ; Total number 
					of sectors 
     384 000A  ??                    C  BPMEDIA DB      ?       ; Media descrip
					tor byte 
     385 000B  ????                  C  BPFTSEC DW      ?       ; Number of sec
					tors taken up by one FAT 
     386 000D                        C  BPBLOCK ENDS 
     387                             C  ;                                      
					                                    ; 
     388                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     389                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     390                             C   
     391                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-23
Disk I/O Buffer Header                                      

     392                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     393                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     394                             C  ;                                      
					                                    ; 
     395                             C   
     396                             C  ; Field definition for I/O buffer infor
					mation 
     397                             C   
     398                             C  BUFFINFO        STRUC 
     399 0000  ????????              C  NEXTBUF         DD      ?       ; Point
					er to next buffer in list 
     400                             C  ; The next two items are often refed as
					 a word 
     401 0004  ??                    C  BUFDRV          DB      ?       ; Logic
					al drive # assoc with buffer FF = free 
     402 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty
					 flag 
     403 0006  ??                    C  BUFPRI          DB      ?       ; Buffe
					r selection priority (see EQUs below) 
     404 0007  ??                    C  VISIT           DB      ?       ; Visit
					 flag for buffer pool scans 
     405 0008  ????                  C  BUFSECNO        DW      ?       ; Secto
					r number of buffer 
     406                             C  ; The next two items are often refed as
					 a word 
     407 000A  ??                    C  BUFWRTCNT       DB      ?       ; For F
					AT sectors, # times sector written out 
     408 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "
					     "   , # sectors between each write
					 
     409 000C  ????????              C  BUFDRVDP        DD      ?       ; Point
					er to drive parameters 
     410 0010                        C  BUFFINFO        ENDS 
     411                             C   
     412 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
     413                             C                                  ; Size 
					of structure in bytes 
     414                             C   
     415 = 0000                      C  FREEPRI EQU     0 
     416 = 0002                      C  LBRPRI  EQU     2               ; Last 
					byte of buffer read 
     417 = 0004                      C  LBWPRI  EQU     4               ; Last 
					byte written 
     418 = 0006                      C  RPRI    EQU     6               ; Read 
					but not last byte 
     419 = 0008                      C  WPRI    EQU     8               ; Writt
					en but not last byte 
     420 = 000F                      C  DIRPRI  EQU     15              ; Direc
					tory Sector 
     421 = 001E                      C  FATPRI  EQU     30              ; FAT s
					ector 
     422                             C  ;                                      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-24
Disk I/O Buffer Header                                      

					                                    ; 
     423                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     424                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     425                             C   
     426                             C  BREAK <User stack inside of system call
					> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-25
User stack inside of system call                            

     427                             C  ; Location of user registers relative u
					ser stack pointer 
     428                             C   
     429                             C  user_environ    STRUC 
     430 0000  ????                  C  user_AX     DW      ? 
     431 0002  ????                  C  user_BX     DW      ? 
     432 0004  ????                  C  user_CX     DW      ? 
     433 0006  ????                  C  user_DX     DW      ? 
     434 0008  ????                  C  user_SI     DW      ? 
     435 000A  ????                  C  user_DI     DW      ? 
     436 000C  ????                  C  user_BP     DW      ? 
     437 000E  ????                  C  user_DS     DW      ? 
     438 0010  ????                  C  user_ES     DW      ? 
     439 0012  ????                  C  user_IP     DW      ? 
     440 0014  ????                  C  user_CS     DW      ? 
     441 0016  ????                  C  user_F      DW      ? 
     442 0018                        C  user_environ    ENDS 
     443                             C   
     444                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-26
interrupt definitions                                       

     445                             C   
     446 = 0020                      C  INTTAB          EQU     20H 
     447 = 0080                      C  INTBASE         EQU     4 * inttab 
     448 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
     449                             C   
     450                             C          ENDIF 
     451                             C   
     452                             C  ; 
     453                             C  ; interrupt assignments 
     454                             C  ; 
     455                             C          IF      NOT ALTVECT 
     456 =                           C  int_abort           EQU     INTTAB     
					     ; abort process 
     457 = 0021                      C  int_command         EQU     int_abort+1
					     ; call MSDOS 
     458 = 0022                      C  int_terminate       EQU     int_abort+2
					     ; int to terminate address 
     459 = 0023                      C  int_ctrl_c          EQU     int_abort+3
					     ; ^c trapper 
     460 = 0024                      C  int_fatal_abort     EQU     int_abort+4
					     ; hard disk error 
     461 = 0025                      C  int_disk_read       EQU     int_abort+5
					     ; logical sector disk read 
     462 = 0026                      C  int_disk_write      EQU     int_abort+6
					     ; logical sector disk write 
     463 = 0027                      C  int_keep_process    EQU     int_abort+7
					     ; terminate program and stay 
     464                             C                                         
					     ; resident 
     465                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     466                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     467                             C  ;                                      
					                                    ; 
     468 = 0028                      C  int_spooler         EQU     int_abort+8
					     ; spooler call 
     469 = 0029                      C  int_fastcon         EQU     int_abort+9
					     ; fast CON interrupt 
     470                             C  ;                                      
					                                    ; 
     471                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     472                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     473                             C          ENDIF 
     474                             C   
     475 = 0080                      C  addr_int_abort          EQU    4 * int_
					abort 
     476 = 0084                      C  addr_int_command        EQU    4 * int_
					command 
     477 = 0088                      C  addr_int_terminate      EQU    4 * int_
					terminate 
     478 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-27
interrupt definitions                                       

					ctrl_c 
     479 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_
					fatal_abort 
     480 = 0094                      C  addr_int_disk_read      EQU    4 * int_
					disk_read 
     481 = 0098                      C  addr_int_disk_write     EQU    4 * int_
					disk_write 
     482 = 009C                      C  addr_int_keep_process   EQU    4 * int_
					keep_process 
     483                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     484                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     485                             C  ;                                      
					                                    ; 
     486 = 00A0                      C  addr_int_spooler        EQU    4 * int_
					spooler 
     487 = 00A4                      C  addr_int_fastcon        EQU    4 * int_
					fastcon 
     488                             C  ;                                      
					                                    ; 
     489                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     490                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     491                             C   
     492                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-28
Disk map                                                    

     493                             C  ;  MSDOS partitions the disk into 4 sec
					tions: 
     494                             C  ; 
     495                             C  ;  phys sector 0:   +------------------
					-+ 
     496                             C  ;       |           | boot/reserved    
					 | 
     497                             C  ;       |           +------------------
					-+ 
     498                             C  ;       |           |  File allocation 
					 | 
     499                             C  ;       v           |      table(s)    
					 | 
     500                             C  ;                   |  (multiple copies
					 | 
     501                             C  ;                   |     are kept)    
					 | 
     502                             C  ;                   +------------------
					-+ 
     503                             C  ;                   |     Directory    
					 | 
     504                             C  ;                   +------------------
					-+ 
     505                             C  ;                   |     File space   
					 | 
     506                             C  ;                   +------------------
					-+ 
     507                             C  ;                   |   Unaddressable  
					 | 
     508                             C  ;                   |  (to end of disk)
					 | 
     509                             C  ;                   +------------------
					-+ 
     510                             C  ; 
     511                             C  ; All partition boundaries are sector b
					oundaries.  The size of the FAT is 
     512                             C  ; adjusted to maximize the file space a
					ddressable. 
     513                             C   
     514                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-29
Directory entry                                             

     515                             C   
     516                             C  ; 
     517                             C  ;       +---------------------------+ 
     518                             C  ;       |  (12 BYTE) filename/ext   |  
					     0       0 
     519                             C  ;       +---------------------------+ 
     520                             C  ;       |     (BYTE) attributes     |  
					     11      B 
     521                             C  ;       +---------------------------+ 
     522                             C  ;       |    (10 BYTE) reserved     |  
					     12      C 
     523                             C  ;       +---------------------------+ 
     524                             C  ;       | (WORD) time of last write |  
					     22      16 
     525                             C  ;       +---------------------------+ 
     526                             C  ;       | (WORD) date of last write |  
					     24      18 
     527                             C  ;       +---------------------------+ 
     528                             C  ;       |   (WORD) First cluster    |  
					     26      1A 
     529                             C  ;       +---------------------------+ 
     530                             C  ;       |     (DWORD) file size     |  
					     28      1C 
     531                             C  ;       +---------------------------+ 
     532                             C  ; 
     533                             C  ;   First byte of filename  = E5 -> fre
					e directory entry 
     534                             C  ;                           = 00 -> end
					 of allocated directory 
     535                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-
					10=minute, 11-15=hour 
     536                             C  ;   Date:   Bits 0-4=day, bits 5-8=mont
					h, bits 9-15=year-1980 
     537                             C  ; 
     538                             C  dir_entry   STRUC 
     539 0000  000B[                 C  dir_name    DB      11 DUP (?)         
					 ; file name 
     540            ??               C  
     541                         ]   C  
     542                             C  
     543 000B  ??                    C  dir_attr    DB      ?                  
					 ; attribute bits 
     544 000C  000A[                 C  dir_pad     DB      10 DUP (?)         
					 ; reserved for expansion 
     545            ??               C  
     546                         ]   C  
     547                             C  
     548 0016  ????                  C  dir_time    DW      ?                  
					 ; time of last write 
     549 0018  ????                  C  dir_date    DW      ?                  
					 ; date of last write 
     550 001A  ????                  C  dir_first   DW      ?                  
					 ; first allocation unit of file 
     551 001C  ????                  C  dir_size_l  DW      ?                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-30
Directory entry                                             

					 ; low 16 bits of file size 
     552 001E  ????                  C  dir_size_h  DW      ?                  
					 ; high 16 bits of file size 
     553 0020                        C  dir_entry   ENDS 
     554                             C   
     555 = 0001                      C  attr_read_only      EQU      1h 
     556 = 0002                      C  attr_hidden         EQU      2h 
     557 = 0004                      C  attr_system         EQU      4h 
     558 = 0008                      C  attr_volume_id      EQU      8h 
     559 = 0010                      C  attr_directory      EQU     10h 
     560 = 0020                      C  attr_archive        EQU     20h 
     561                             C   
     562 = 0016                      C  attr_all            EQU     attr_hidden
					+attr_system+attr_directory 
     563                             C                                         
					 ; OR of hard attributes for FINDENTRY 
     564                             C   
     565 = 0021                      C  attr_ignore         EQU     attr_read_o
					nly+attr_archive 
     566                             C                                         
					 ; ignore this(ese) attribute(s) during
					 
     567                             C                                         
					 ; search first/next 
     568                             C   
     569 = 0027                      C  attr_changeable     EQU     attr_read_o
					nly+attr_hidden+attr_system+attr_archiv
					e 
     570                             C                                         
					 ; changeable via CHMOD 
     571                             C   
     572                             C  BREAK <File allocation Table informatio
					n> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-31
File allocation Table information                           

     573                             C  ; 
     574                             C  ; The File Allocation Table uses a 12-b
					it entry for each allocation unit on 
     575                             C  ; the disk.  These entries are packed, 
					two for every three bytes.  The content
					s 
     576                             C  ; of entry number N is found by 1) mult
					iplying N by 1.5; 2) adding the result 
     577                             C  ; to the base address of the Allocation
					 Table; 3) fetching the 16-bit word 
     578                             C  ; at this address; 4) If N was odd (so 
					that N*1.5 was not an integer), shift 
     579                             C  ; the word right four bits; 5) mask to 
					12 bits (AND with 0FFF hex).  Entry 
     580                             C  ; number zero is used as an end-of-file
					 trap in the OS and is passed to the 
     581                             C  ; BIOS to help determine disk format.  
					Entry 1 is reserved for future use. 
     582                             C  ; The first available allocation unit i
					s assigned entry number two, and even 
     583                             C  ; though it is the first, is called clu
					ster 2.  Entries greater than 0FF8H 
     584                             C  ; are end of file marks; entries of zer
					o are unallocated.  Otherwise, the 
     585                             C  ; contents of a FAT entry is the number
					 of the next cluster in the file. 
     586                             C  ; 
     587                             C  ; Clusters with bad sectors are tagged 
					with FF7H.  Any non-zero number would 
     588                             C  ; do because these clusters show as all
					ocated, but are not part of any 
     589                             C  ; allocation chain and thus will never 
					be allocated to a file.  A particular 
     590                             C  ; number is selected so that disk check
					ing programs know what to do (ie.  a 
     591                             C  ; cluster with entry FF7H which is not 
					in a chain is not an error). 
     592                             C   
     593                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-32
DPB structure                                               

     594                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     595                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     596                             C  ;                                      
					                                    ; 
     597                             C   
     598 = 0040                      C  DIRSTRLEN       EQU     64      ; Max l
					ength in bytes of directory strings 
     599                             C   
     600                             C  dpb     STRUC 
     601 0000  ??                    C  dpb_drive           DB      ?   ; Logic
					al drive # assoc with DPB (A=0,B=1,...)
					 
     602 0001  ??                    C  dpb_UNIT            DB      ?   ; Drive
					r unit number of DPB 
     603 0002  ????                  C  dpb_sector_size     DW      ?   ; Size 
					of physical sector in bytes 
     604 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Secto
					rs/cluster - 1 
     605 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 
					of sectors/cluster 
     606 0006  ????                  C  dpb_first_FAT       DW      ?   ; Start
					ing record of FATs 
     607 0008  ??                    C  dpb_FAT_count       DB      ?   ; Numbe
					r of FATs for this drive 
     608 0009  ????                  C  dpb_root_entries    DW      ?   ; Numbe
					r of directory entries 
     609 000B  ????                  C  dpb_first_sector    DW      ?   ; First
					 sector of first cluster 
     610 000D  ????                  C  dpb_max_cluster     DW      ?   ; Numbe
					r of clusters on drive + 1 
     611 000F  ??                    C  dpb_FAT_size        DB      ?   ; Numbe
					r of records occupied by FAT 
     612 0010  ????                  C  dpb_dir_sector      DW      ?   ; Start
					ing record of directory 
     613 0012  ????????              C  dpb_driver_addr     DD      ?   ; Point
					er to driver 
     614 0016  ??                    C  dpb_media           DB      ?   ; Media
					 byte 
     615 0017  ??                    C  dpb_first_access    DB      ?   ; This 
					is initialized to -1 to force a media 
     616                             C                                  ; check
					 the first time this DPB is used 
     617 0018  ????????              C  dpb_next_dpb        DD      ?   ; Point
					er to next Drive parameter block 
     618 001C  ????                  C  dpb_current_dir     DW      ?   ; Clust
					er number of start of current directory
					 
     619                             C                                  ; 0 ind
					icates root, -1 indicates invalid (disk
					 
     620                             C                                  ; ?  ch
					anged) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-33
DPB structure                                               

     621 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN D
					UP(?) 
     622            ??               C  
     623                         ]   C  
     624                             C  
     625                             C                                  ; ASCIZ
					 string of current directory 
     626 005E                        C  dpb     ENDS 
     627                             C   
     628 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size 
					of the structure in bytes 
     629                             C   
     630 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size 
					of disk (temp used during init only) 
     631                             C  ;                                      
					                                    ; 
     632                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     633                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     634                             C   
     635                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-34
File Control Block definition                               

     636                             C  ; 
     637                             C  ; Field definition for FCBs 
     638                             C  ; The FCB has the following structure: 
     639                             C  ; 
     640                             C  ;       +---------------------------+ 
     641                             C  ;       |   Drive indicator(byte)   | 
     642                             C  ;       +---------------------------+ 
     643                             C  ;       |    Filename (8 chars)     | 
     644                             C  ;       +---------------------------+ 
     645                             C  ;       |    Extension (3 chars)    | 
     646                             C  ;       +---------------------------+ 
     647                             C  ;       |   Current Extent(word)    | 
     648                             C  ;       +---------------------------+ 
     649                             C  ;       |    Record size (word)     | 
     650                             C  ;       +---------------------------+ 
     651                             C  ;       |    File Size (2 words)    | 
     652                             C  ;       +---------------------------+ 
     653                             C  ;       |       Date of write       | 
     654                             C  ;       +---------------------------+ 
     655                             C  ;       |       Time of write       | 
     656                             C  ;       +---------------------------+ 
     657                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     658                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     659                             C  ;                                      
					                                    ; 
     660                             C  ;       | Flags:                    | 
     661                             C  ;       |  bit 7=0 file/1 device    | 
     662                             C  ;       |  bit 6=0 if dirty         | 
     663                             C  ;       |  bits 0-5 deviceid        | 
     664                             C  ;       +---------------------------+ 
     665                             C  ;       |   first cluster in file   | 
     666                             C  ;       +---------------------------+ 
     667                             C  ;       | position of last cluster  | 
     668                             C  ;       +---------------------------+ 
     669                             C  ;       |   last cluster accessed   |  
					 12 bit-+--- packed in 3 bytes 
     670                             C  ;       +---------------------------+  
					        | 
     671                             C  ;       |     parent directory      |  
					 <------+ 
     672                             C  ;       +---------------------------+ 
     673                             C  ;                                      
					                                    ; 
     674                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     675                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     676                             C  ;       |    next record number     | 
     677                             C  ;       +---------------------------+ 
     678                             C  ;       |   random record number    | 
     679                             C  ;       +---------------------------+ 
     680                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-35
File Control Block definition                               

     681                             C   
     682                             C  sys_fcb     STRUC 
     683 0000  ??                    C  fcb_drive   DB      ? 
     684 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
     685            ??               C  
     686                         ]   C  
     687                             C  
     688 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
     689            ??               C  
     690                         ]   C  
     691                             C  
     692 000C  ????                  C  fcb_EXTENT  DW      ? 
     693 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of r
					ecord (user settable) 
     694 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of f
					ile in bytes; used with the following 
     695                             C                              ; word 
     696 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SE
					ARCH FIRST and SEARCH NEXT 
     697 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of l
					ast writing 
     698 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of l
					ast writing 
     699                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     700                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     701                             C  ;                                      
					                                    ; 
     702 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID
					 number, bits 0-5 if file. 
     703                             C                              ; bit 7=0 f
					or file, bit 7=1 for I/O device 
     704                             C                              ; If file, 
					bit 6=0 if dirty 
     705                             C                              ; If I/O de
					vice, bit 6=0 if EOF (input) 
     706                             C                              ;          
					     Bit 5=1 if Raw mode 
     707                             C                              ;          
					     Bit 0=1 if console input device 
     708                             C                              ;          
					     Bit 1=1 if console output device 
     709                             C                              ;          
					     Bit 2=1 if null device 
     710                             C                              ;          
					     Bit 3=1 if clock device 
     711 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First clu
					ster of file 
     712 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position 
					of last cluster accessed 
     713 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last clus
					ter accessed and directory pack 2 12 
     714 001F  ??                    C              DB      ?       ; bit numbe
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-36
File Control Block definition                               

					rs into 24 bits... 
     715                             C  ;                                      
					                                    ; 
     716                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     717                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     718 0020  ??                    C  fcb_NR      DB      ?       ; Next reco
					rd 
     719 0021  0004[                 C  fcb_RR      DB      4 DUP (?)          
					     ; Random record 
     720            ??               C  
     721                         ]   C  
     722                             C  
     723 0025                        C  sys_fcb     ENDS 
     724                             C   
     725 = 0010                      C  FILDIRENT       = fcb_FILSIZ           
					 ; Used only by SEARCH FIRST and SEARCH
					 
     726                             C                                         
					 ; NEXT 
     727                             C   
     728                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     729                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     730                             C  ;                                      
					                                    ; 
     731 = 0040                      C  devid_file_clean        EQU     40h    
					 ; true if file and not written 
     732 = 003F                      C  devid_file_mask_drive   EQU     3Fh    
					 ; mask for drive number 
     733                             C   
     734 = 0080                      C  devid_device            EQU     80h    
					 ; true if a device 
     735 = 0040                      C  devid_device_EOF        EQU     40h    
					 ; true if end of file reached 
     736 = 0020                      C  devid_device_raw        EQU     20h    
					 ; true if in raw mode 
     737 = 0010                      C  devid_device_special    EQU     10h    
					 ; true if special device 
     738 = 0008                      C  devid_device_clock      EQU     08h    
					 ; true if clock device 
     739 = 0004                      C  devid_device_null       EQU     04h    
					 ; true if null device 
     740 = 0002                      C  devid_device_con_out    EQU     02h    
					 ; true if console output 
     741 = 0001                      C  devid_device_con_in     EQU     01h    
					 ; true if consle input 
     742                             C   
     743                             C  ; 
     744                             C  ; structure of devid field as returned 
					by IOCTL is: 
     745                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-37
File Control Block definition                               

     746                             C  ;       BIT     7   6   5   4   3   2  
					 1   0 
     747                             C  ;             |---|---|---|---|---|---|
					---|---| 
     748                             C  ;             | I | E | R | S | I | I |
					 I | I | 
     749                             C  ;             | S | O | A | P | S | S |
					 S | S | 
     750                             C  ;             | D | F | W | E | C | N |
					 C | C | 
     751                             C  ;             | E |   |   | C | L | U |
					 O | I | 
     752                             C  ;             | V |   |   | L | K | L |
					 T | N | 
     753                             C  ;             |---|---|---|---|---|---|
					---|---| 
     754                             C  ;       ISDEV = 1 if this channel is a 
					device 
     755                             C  ;             = 0 if this channel is a 
					disk file 
     756                             C  ; 
     757                             C  ;       If ISDEV = 1 
     758                             C  ; 
     759                             C  ;             EOF = 0 if End Of File on
					 input 
     760                             C  ;             RAW = 1 if this device is
					 in Raw mode 
     761                             C  ;                 = 0 if this device is
					 cooked 
     762                             C  ;             ISCLK = 1 if this device 
					is the clock device 
     763                             C  ;             ISNUL = 1 if this device 
					is the null device 
     764                             C  ;             ISCOT = 1 if this device 
					is the console output 
     765                             C  ;             ISCIN = 1 if this device 
					is the console input 
     766                             C  ; 
     767                             C  ;       If ISDEV = 0 
     768                             C  ;             EOF = 0 if channel has be
					en written 
     769                             C  ;             Bits 0-5  are  the  block
					  device  number  for 
     770                             C  ;                 the channel (0 = A, 1
					 = B, ...) 
     771                             C  ; 
     772 = 0080                      C  devid_ISDEV     EQU     80h 
     773 = 0040                      C  devid_EOF       EQU     40h 
     774 = 0020                      C  devid_RAW       EQU     20h 
     775 = 0010                      C  devid_SPECIAL   EQU     10H 
     776 = 0008                      C  devid_ISCLK     EQU     08h 
     777 = 0004                      C  devid_ISNUL     EQU     04h 
     778 = 0002                      C  devid_ISCOT     EQU     02h 
     779 = 0001                      C  devid_ISCIN     EQU     01h 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-38
File Control Block definition                               

     780                             C   
     781 = 001F                      C  devid_block_dev EQU     1Fh            
					 ; mask for block device number 
     782                             C   
     783                             C  ; 
     784                             C  ; find first/next buffer 
     785                             C  ; 
     786                             C  find_buf    STRUC 
     787 0000  ??                    C  find_buf_sattr      DB  ?           ; a
					ttribute of search 
     788 0001  ??                    C  find_buf_drive      DB  ?           ; d
					rive of search 
     789 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; f
					ormatted name 
     790            ??               C  
     791                         ]   C  
     792                             C  
     793 000D  ????                  C  find_buf_LastEnt    DW  ?           ; L
					astEnt 
     794 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; T
					his DPB 
     795 0013  ????                  C  find_buf_DirStart   DW  ?           ; D
					irStart 
     796                             C  ;                                      
					                                    ; 
     797                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     798                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     799                             C   
     800 0015  ??                    C  find_buf_attr       DB  ?           ; a
					ttribute found 
     801 0016  ????                  C  find_buf_time       DW  ?           ; t
					ime 
     802 0018  ????                  C  find_buf_date       DW  ?           ; d
					ate 
     803 001A  ????                  C  find_buf_size_l     DW  ?           ; l
					ow(size) 
     804 001C  ????                  C  find_buf_size_h     DW  ?           ; h
					igh(size) 
     805 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; p
					acked name 
     806            ??               C  
     807                         ]   C  
     808                             C  
     809 002B                        C  find_buf    ENDS 
     810                             C   
     811                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-39
Process data block                                          

     812                             C  ; 
     813                             C  ; Process data block (otherwise known a
					s program header) 
     814                             C  ; 
     815                             C   
     816 = 0014                      C  FilPerProc          EQU     20 
     817                             C   
     818                             C  Process_data_block  STRUC 
     819 0000  ????                  C  PDB_Exit_Call       DW      ?          
					 ; INT int_abort system terminate 
     820 0002  ????                  C  PDB_block_len       DW      ?          
					 ; size of execution block 
     821 0004  ??                    C                      DB      ? 
     822 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)      
					 ; ancient call to system 
     823            ??               C  
     824                         ]   C  
     825                             C  
     826 000A  ????????              C  PDB_Exit            DD      ?          
					 ; pointer to exit routine 
     827 000E  ????????              C  PDB_Ctrl_C          DD      ?          
					 ; pointer to ^C routine 
     828 0012  ????????              C  PDB_Fatal_abort     DD      ?          
					 ; pointer to fatal error 
     829                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     830                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     831                             C  ;                                      
					                                    ; 
     832 0016  ????                  C  PDB_Parent_PID      DW      ?          
					 ; PID of parent (terminate PID) 
     833 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP 
					(?) 
     834            ??               C  
     835                         ]   C  
     836                             C  
     837                             C                                         
					 ; indices into system table 
     838                             C  ;                                      
					                                    ; 
     839                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     840                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     841 002C  ????                  C  PDB_environ         DW      ?          
					 ; seg addr of environment 
     842                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     843                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     844                             C  ;                                      
					                                    ; 
     845 002E  ????????              C  PDB_User_stack      DD      ?          
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-40
Process data block                                          

					 ; stack of self during system calls 
     846 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?)
					 
     847            ??               C  
     848                         ]   C  
     849                             C  
     850                             C  ;                                      
					                                    ; 
     851                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     852                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     853 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)  
					 ; portable method of system call 
     854            ??               C  
     855                         ]   C  
     856                             C  
     857                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     858                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     859                             C  ;                                      
					                                    ; 
     860 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?) 
					 ; 
     861            ??               C  
     862                         ]   C  
     863                             C  
     864                             C  ;                                      
					                                    ; 
     865                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     866                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     867 005B                        C  Process_data_block  ENDS 
     868                             C   
     869                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-41
EXEC and EXE file structures                                

     870                             C  ; 
     871                             C  ; EXEC arg block - load/go program 
     872                             C  ; 
     873                             C   
     874                             C  ; 
     875                             C  ; The following get used as arguments t
					o the EXEC system call.  They indicate 
     876                             C  ; whether or not the program is execute
					d or whether or not a program header 
     877                             C  ; gets created. 
     878                             C  ; 
     879 = 0001                      C  exec_func_no_execute    EQU 1          
					 ; no execute bit 
     880 = 0002                      C  exec_func_overlay       EQU 2          
					 ; overlay bit 
     881                             C   
     882                             C  Exec0           STRUC 
     883 0000  ????                  C  Exec0_environ   DW      ?              
					 ; seg addr of environment 
     884 0002  ????????              C  Exec0_com_line  DD      ?              
					 ; pointer to asciz command line 
     885 0006  ????????              C  Exec0_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     886 000A  ????????              C  Exec0_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     887 000E                        C  Exec0           ENDS 
     888                             C   
     889                             C  Exec1           STRUC 
     890 0000  ????                  C  Exec1_environ   DW      ?              
					 ; seg addr of environment 
     891 0002  ????????              C  Exec1_com_line  DD      ?              
					 ; pointer to asciz command line 
     892 0006  ????????              C  Exec1_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     893 000A  ????????              C  Exec1_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     894 000E  ????                  C  Exec1_SP        DW      ?              
					 ; stack pointer of program 
     895 0010  ????                  C  Exec1_SS        DW      ?              
					 ; stack seg register of program 
     896 0012  ????                  C  Exec1_IP        DW      ?              
					 ; entry point IP 
     897 0014  ????                  C  Exec1_CS        DW      ?              
					 ; entry point CS 
     898 0016                        C  Exec1           ENDS 
     899                             C   
     900                             C  Exec3           STRUC 
     901 0000  ????                  C  Exec3_load_addr DW      ?              
					 ; seg address of load point 
     902 0002  ????                  C  Exec3_reloc_fac DW      ?              
					 ; relocation factor 
     903 0004                        C  Exec3           ENDS 
     904                             C   
     905                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-42
EXEC and EXE file structures                                

     906                             C  ; Exit codes in upper byte 
     907                             C  ; 
     908 = 0000                      C  Exit_terminate      EQU     0 
     909 = 0000                      C  Exit_abort          EQU     0 
     910 = 0001                      C  Exit_Ctrl_C         EQU     1 
     911 = 0002                      C  Exit_Hard_Error     EQU     2 
     912 = 0003                      C  Exit_Keep_process   EQU     3 
     913                             C   
     914                             C  ; 
     915                             C  ; EXE file header 
     916                             C  ; 
     917                             C   
     918                             C  EXE_file    STRUC 
     919 0000  ????                  C  exe_signature   DW  ?                  
					 ; must contain 4D5A  (yay zibo!) 
     920 0002  ????                  C  exe_len_mod_512 DW  ?                  
					 ; low 9 bits of length 
     921 0004  ????                  C  exe_pages       DW  ?                  
					 ; number of 512b pages in file 
     922 0006  ????                  C  exe_rle_count   DW  ?                  
					 ; count of reloc entries 
     923 0008  ????                  C  exe_par_dir     DW  ?                  
					 ; number of paragraphs before image 
     924 000A  ????                  C  exe_min_BSS     DW  ?                  
					 ; minimum number of para of BSS 
     925 000C  ????                  C  exe_max_BSS     DW  ?                  
					 ; max number of para of BSS 
     926 000E  ????                  C  exe_SS          DW  ?                  
					 ; stack of image 
     927 0010  ????                  C  exe_SP          DW  ?                  
					 ; SP of image 
     928 0012  ????                  C  exe_chksum      DW  ?                  
					 ; checksum  of file (ignored) 
     929 0014  ????                  C  exe_IP          DW  ?                  
					 ; IP of entry 
     930 0016  ????                  C  exe_CS          DW  ?                  
					 ; CS of entry 
     931 0018  ????                  C  exe_rle_table   DW  ?                  
					 ; byte offset of reloc table 
     932 001A  ????                  C  exe_iov         DW  ?                  
					 ; overlay number (0 for root) 
     933 001C  ????????              C  exe_sym_tab     DD  ?                  
					 ; offset of symbol table in file 
     934 0020                        C  EXE_file    ENDS 
     935                             C   
     936 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
     937 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
     938                             C   
     939                             C  symbol_entry    STRUC 
     940 0000  ????????              C  sym_value       DD  ? 
     941 0004  ????                  C  sym_type        DW  ? 
     942 0006  ??                    C  sym_len         DB  ? 
     943 0007  00FF[                 C  sym_name        DB  255 dup (?) 
     944            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-43
EXEC and EXE file structures                                

     945                         ]   C  
     946                             C  
     947 0106                        C  symbol_entry    ENDS 
     948                             C   
     949                             C  BREAK <Internal system file table forma
					t> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-44
Internal system file table format                           

     950                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     951                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     952                             C  ;                                      
					                                    ; 
     953                             C  ; 
     954                             C  ; system file table 
     955                             C  ; 
     956                             C   
     957                             C  sft             STRUC 
     958 0000  ????????              C  sft_link        DD      ? 
     959 0004  ????                  C  sft_count       DW      ?              
					 ; number of entries 
     960 0006  ????                  C  sft_table       DW      ?              
					 ; beginning of array of the following 
     961 0008                        C  sft             ENDS 
     962                             C   
     963                             C  ; 
     964                             C  ; system file table entry 
     965                             C  ; 
     966                             C   
     967                             C  sf_entry        STRUC 
     968 0000  ??                    C  sf_ref_count    DB      ?              
					 ; number of processes sharing fcb 
     969 0001  ??                    C  sf_mode         DB      ?              
					 ; mode of access 
     970 0002  ??                    C  sf_attr         DB      ?              
					 ; attribute of file 
     971 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) 
					DUP (?) 
     972            ??               C  
     973                         ]   C  
     974                             C  
     975                             C                                         
					 ; actual FCB 
     976 0028                        C  sf_entry        ENDS 
     977                             C   
     978 = 0005                      C  sf_default_number   EQU     5h 
     979                             C  ;                                      
					                                    ; 
     980                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     981                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     982                             C   
     983                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-45
Memory arena structure                                      

     984                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     985                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     986                             C  ;                                      
					                                    ; 
     987                             C  ; 
     988                             C  ; arena item 
     989                             C  ; 
     990                             C  arena   STRUC 
     991 0000  ??                    C  arena_signature     DB  ?              
					 ; 4D for valid item, 5A for last item 
     992 0001  ????                  C  arena_owner         DW  ?              
					 ; owner of arena item 
     993 0003  ????                  C  arena_size          DW  ?              
					 ; size in paragraphs of item 
     994 0005                        C  arena   ENDS 
     995                             C   
     996                             C  ; 
     997                             C  ; Current structure of the data returne
					d by the international call 
     998                             C  ; 
     999                             C   
    1000                             C  internat_block STRUC 
    1001 0000  ????                  C  Date_tim_format DW      ?           ; 0
					-USA, 1-EUR, 2-JAP 
    1002 0002  ??                    C  Currency_sym    DB      ?           ; C
					urrency Symbol 5 bytes 
    1003 0003  ??                    C                  DB      ? 
    1004 0004  ??                    C                  DB      ? 
    1005 0005  ??                    C                  DB      ? 
    1006 0006  ??                    C                  DB      ? 
    1007 0007  ??                    C  Thous_sep       DB      ?           ; T
					housands separator 2 bytes 
    1008 0008  ??                    C                  DB      ? 
    1009 0009  ??                    C  Decimal_sep     DB      ?           ; D
					ecimal separator 2 bytes 
    1010 000A  ??                    C                  DB      ? 
    1011 000B  ??                    C  Date_sep        DB      ?           ; D
					ate separator 2 bytes 
    1012 000C  ??                    C                  DB      ? 
    1013 000D  ??                    C  Time_sep        DB      ?           ; D
					ecimal separator 2 bytes 
    1014 000E  ??                    C                  DB      ? 
    1015 000F  ??                    C  Bit_feild       DB      ?           ; B
					it values 
    1016                             C                                      ;  
					 Bit 0 = 0 if currency symbol first 
    1017                             C                                      ;  
					       = 1 if currency symbol last 
    1018                             C                                      ;  
					 Bit 1 = 0 if No space after currency s
					ymbol 
    1019                             C                                      ;  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-46
Memory arena structure                                      

					       = 1 if space after currency symb
					ol 
    1020 0010  ??                    C  Currency_cents  DB      ?           ; N
					umber of places after currency dec poin
					t 
    1021 0011  ??                    C  Time_24         DB      ?           ; 1
					 if 24 hour time, 0 if 12 hour time 
    1022 0012  ????                  C  Map_call        DW      ?           ; A
					ddress of case mapping call (DWORD) 
    1023 0014  ????                  C                  DW      ?           ; T
					HIS IS TWO WORDS SO IT CAN BE INITIALIZ
					ED 
    1024                             C                                      ;  
					in pieces. 
    1025 0016  ??                    C  Data_sep        DB      ?           ; D
					ata list separator character 
    1026 0017  ??                    C                  DB      ? 
    1027 0018                        C  internat_block ENDS 
    1028                             C   
    1029                             C  ; 
    1030                             C  ; Max size of the block returned by the
					 INTERNATIONAL call 
    1031                             C  ; 
    1032 = 0020                      C  internat_block_max      EQU     32 
    1033                             C   
    1034                             C  ; 
    1035                             C  ; CAUTION: The routines in ALLOC.ASM re
					ly on the fact that arena_signature 
    1036                             C  ; and arena_owner_system are all equal 
					to zero and are contained in DI.  Chang
					e 
    1037                             C  ; them and change ALLOC.ASM. 
    1038                             C   
    1039 = 0000                      C  arena_owner_system  EQU 0              
					 ; free block indication 
    1040                             C   
    1041 = 004D                      C  arena_signature_normal  EQU 4Dh        
					 ; valid signature, not end of arena 
    1042 = 005A                      C  arena_signature_end     EQU 5Ah        
					 ; valid signature, last block in arena
					 
    1043                             C  ;                                      
					                                    ; 
    1044                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1045                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1046                             C   
    1047                             C  BREAK <Machine instruction definitions>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-47
Machine instruction definitions                             

    1048                             C   
    1049 = 00CD                      C  mi_INT          EQU     0CDh 
    1050 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
    1051 = 009A                      C  mi_Long_CALL    EQU     09Ah 
    1052 = 00CB                      C  mi_Long_RET     EQU     0CBh 
    1053                             C   
    1054                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-48
Standard I/O assignments                                    

    1055                             C   
    1056 = 0000                      C  stdin       EQU     0 
    1057 = 0001                      C  stdout      EQU     1 
    1058 = 0002                      C  stderr      EQU     2 
    1059 = 0003                      C  stdaux      EQU     3 
    1060 = 0004                      C  stdprn      EQU     4 
    1061                             C   
    1062                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-49
Xenix subfunction assignments                               

    1063                             C   
    1064 = 0000                      C  open_for_read   EQU 0 
    1065 = 0001                      C  open_for_write  EQU 1 
    1066 = 0002                      C  open_for_both   EQU 2 
    1067                             C   
    1068                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-50
Xenix error codes                                           

    1069                             C   
    1070                             C  ; 
    1071                             C  ; XENIX calls all return error codes th
					rough AX.  If an error occurred then 
    1072                             C  ; the carry bit will be set and the err
					or code is in AX.  If no error occurred
					 
    1073                             C  ; then the carry bit is reset and AX co
					ntains returned info. 
    1074                             C  ; 
    1075                             C   
    1076 =                           C  no_error_occurred               EQU    
					 0                                     
					                         ? 
    1077                             C   
    1078 = 0001                      C  error_invalid_function          EQU    
					 1 
    1079 = 0002                      C  error_file_not_found            EQU    
					 2 
    1080 = 0003                      C  error_path_not_found            EQU    
					 3 
    1081 = 0004                      C  error_too_many_open_files       EQU    
					 4 
    1082 = 0005                      C  error_access_denied             EQU    
					 5 
    1083 = 0006                      C  error_invalid_handle            EQU    
					 6 
    1084 = 0007                      C  error_arena_trashed             EQU    
					 7 
    1085 = 0008                      C  error_not_enough_memory         EQU    
					 8 
    1086 = 0009                      C  error_invalid_block             EQU    
					 9 
    1087 = 000A                      C  error_bad_environment           EQU    
					 10 
    1088 = 000B                      C  error_bad_format                EQU    
					 11 
    1089 = 000C                      C  error_invalid_access            EQU    
					 12 
    1090 = 000D                      C  error_invalid_data              EQU    
					 13 
    1091                             C  ;**** unused                    EQU    
					 14 
    1092 = 000F                      C  error_invalid_drive             EQU    
					 15 
    1093 = 0010                      C  error_current_directory         EQU    
					 16 
    1094 = 0011                      C  error_not_same_device           EQU    
					 17 
    1095 = 0012                      C  error_no_more_files             EQU    
					 18 
    1096                             C   
    1097 =                           C  country_not_found               EQU    
					 error_file_not_found 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-51
Xenix error codes                                           

    1098 =                           C  alloc_not_enough_memory         EQU    
					 error_not_enough_memory 
    1099 =                           C  alloc_arena_trashed             EQU    
					 error_arena_trashed 
    1100                             C   
    1101 =                           C  close_invalid_handle            EQU    
					 error_invalid_handle 
    1102 =                           C  close_invalid_function          EQU    
					 error_invalid_function 
    1103                             C   
    1104 =                           C  chdir_path_not_found            EQU    
					 error_path_not_found 
    1105                             C   
    1106 =                           C  chmod_path_not_found            EQU    
					 error_path_not_found 
    1107 =                           C  chmod_access_denied             EQU    
					 error_access_denied 
    1108 =                           C  chmod_invalid_function          EQU    
					 error_invalid_function 
    1109                             C   
    1110 =                           C  creat_access_denied             EQU    
					 error_access_denied 
    1111 =                           C  creat_path_not_found            EQU    
					 error_path_not_found 
    1112 =                           C  creat_too_many_open_files       EQU    
					 error_too_many_open_files 
    1113                             C   
    1114 =                           C  curdir_invalid_drive            EQU    
					 error_invalid_drive 
    1115                             C   
    1116 =                           C  dealloc_invalid_block           EQU    
					 error_invalid_block 
    1117 =                           C  dealloc_arena_trashed           EQU    
					 error_arena_trashed 
    1118                             C   
    1119 =                           C  dup_invalid_handle              EQU    
					 error_invalid_handle 
    1120 =                           C  dup_too_many_open_files         EQU    
					 error_too_many_open_files 
    1121                             C   
    1122 =                           C  dup2_invalid_handle             EQU    
					 error_invalid_handle 
    1123                             C   
    1124 =                           C  exec_invalid_function           EQU    
					 error_invalid_function 
    1125 =                           C  exec_bad_environment            EQU    
					 error_bad_environment 
    1126 =                           C  exec_bad_format                 EQU    
					 error_bad_format 
    1127 =                           C  exec_not_enough_memory          EQU    
					 error_not_enough_memory 
    1128 =                           C  exec_file_not_found             EQU    
					 error_file_not_found 
    1129                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-52
Xenix error codes                                           

    1130 =                           C  filetimes_invalid_function      EQU    
					 error_invalid_function 
    1131 =                           C  filetimes_invalid_handle        EQU    
					 error_invalid_handle 
    1132                             C   
    1133 =                           C  findfirst_file_not_found        EQU    
					 error_file_not_found 
    1134 =                           C  findfirst_no_more_files         EQU    
					 error_no_more_files 
    1135 =                           C  findnext_no_more_files          EQU    
					 error_no_more_files 
    1136                             C   
    1137 =                           C  international_invalid_function  EQU    
					 error_invalid_function 
    1138                             C   
    1139 =                           C  ioctl_invalid_handle            EQU    
					 error_invalid_handle 
    1140 =                           C  ioctl_invalid_function          EQU    
					 error_invalid_function 
    1141 =                           C  ioctl_invalid_data              EQU    
					 error_invalid_data 
    1142                             C   
    1143 =                           C  lseek_invalid_handle            EQU    
					 error_invalid_handle 
    1144 =                           C  lseek_invalid_function          EQU    
					 error_invalid_function 
    1145                             C   
    1146 =                           C  mkdir_path_not_found            EQU    
					 error_path_not_found 
    1147 =                           C  mkdir_access_denied             EQU    
					 error_access_denied 
    1148                             C   
    1149 =                           C  open_invalid_access             EQU    
					 error_invalid_access 
    1150 =                           C  open_file_not_found             EQU    
					 error_file_not_found 
    1151 =                           C  open_access_denied              EQU    
					 error_access_denied 
    1152 =                           C  open_too_many_open_files        EQU    
					 error_too_many_open_files 
    1153                             C   
    1154 =                           C  read_invalid_handle             EQU    
					 error_invalid_handle 
    1155 =                           C  read_access_denied              EQU    
					 error_access_denied 
    1156                             C   
    1157 =                           C  rename_file_not_found           EQU    
					 error_file_not_found 
    1158 =                           C  rename_not_same_device          EQU    
					 error_not_same_device 
    1159 =                           C  rename_access_denied            EQU    
					 error_access_denied 
    1160                             C   
    1161 =                           C  rmdir_path_not_found            EQU    
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-53
Xenix error codes                                           

					 error_path_not_found 
    1162 =                           C  rmdir_access_denied             EQU    
					 error_access_denied 
    1163 =                           C  rmdir_current_directory         EQU    
					 error_current_directory 
    1164                             C   
    1165 =                           C  setblock_invalid_block          EQU    
					 error_invalid_block 
    1166 =                           C  setblock_arena_trashed          EQU    
					 error_arena_trashed 
    1167 =                           C  setblock_not_enough_memory      EQU    
					 error_not_enough_memory 
    1168 =                           C  setblock_invalid_function       EQU    
					 error_invalid_function 
    1169                             C   
    1170 =                           C  unlink_file_not_found           EQU    
					 error_file_not_found 
    1171 =                           C  unlink_access_denied            EQU    
					 error_access_denied 
    1172                             C   
    1173 =                           C  write_invalid_handle            EQU    
					 error_invalid_handle 
    1174 =                           C  write_access_denied             EQU    
					 error_access_denied 
    1175                             C   
    1176                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-54
system call definitions                                     

    1177                             C   
    1178 = 0000                      C  Abort                           EQU 0  
					 ;  0      0 
    1179 = 0001                      C  Std_Con_Input                   EQU 1  
					 ;  1      1 
    1180 = 0002                      C  Std_Con_Output                  EQU 2  
					 ;  2      2 
    1181 = 0003                      C  Std_Aux_Input                   EQU 3  
					 ;  3      3 
    1182 = 0004                      C  Std_Aux_Output                  EQU 4  
					 ;  4      4 
    1183 = 0005                      C  Std_Printer_Output              EQU 5  
					 ;  5      5 
    1184 = 0006                      C  Raw_Con_IO                      EQU 6  
					 ;  6      6 
    1185 = 0007                      C  Raw_Con_Input                   EQU 7  
					 ;  7      7 
    1186 = 0008                      C  Std_Con_Input_No_Echo           EQU 8  
					 ;  8      8 
    1187 = 0009                      C  Std_Con_String_Output           EQU 9  
					 ;  9      9 
    1188 = 000A                      C  Std_Con_String_Input            EQU 10 
					 ; 10      A 
    1189 = 000B                      C  Std_Con_Input_Status            EQU 11 
					 ; 11      B 
    1190 = 000C                      C  Std_Con_Input_Flush             EQU 12 
					 ; 12      C 
    1191 = 000D                      C  Disk_Reset                      EQU 13 
					 ; 13      D 
    1192 = 000E                      C  Set_Default_Drive               EQU 14 
					 ; 14      E 
    1193 = 000F                      C  FCB_Open                        EQU 15 
					 ; 15      F 
    1194 = 0010                      C  FCB_Close                       EQU 16 
					 ; 16     10 
    1195 = 0011                      C  Dir_Search_First                EQU 17 
					 ; 17     11 
    1196 = 0012                      C  Dir_Search_Next                 EQU 18 
					 ; 18     12 
    1197 = 0013                      C  FCB_Delete                      EQU 19 
					 ; 19     13 
    1198 = 0014                      C  FCB_Seq_Read                    EQU 20 
					 ; 20     14 
    1199 = 0015                      C  FCB_Seq_Write                   EQU 21 
					 ; 21     15 
    1200 = 0016                      C  FCB_Create                      EQU 22 
					 ; 22     16 
    1201 = 0017                      C  FCB_Rename                      EQU 23 
					 ; 23     17 
    1202 = 0019                      C  Get_Default_Drive               EQU 25 
					 ; 25     19 
    1203 = 001A                      C  Set_DMA                         EQU 26 
					 ; 26     1A 
    1204                             C  ;----+----+----+----+----+----+----+---
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-55
system call definitions                                     

					-+----+----+----+----+----+----+----; 
    1205                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1206                             C  ;                                      
					                                    ; 
    1207 = 001F                      C  Get_Default_DPB                 EQU 31 
					 ; 31     1F 
    1208                             C  ;                                      
					                                    ; 
    1209                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1210                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1211 = 0021                      C  FCB_Random_Read                 EQU 33 
					 ; 33     21 
    1212 = 0022                      C  FCB_Random_Write                EQU 34 
					 ; 34     22 
    1213 = 0023                      C  Get_FCB_File_Length             EQU 35 
					 ; 35     23 
    1214 = 0024                      C  Get_FCB_Position                EQU 36 
					 ; 36     24 
    1215 = 0025                      C  Set_Interrupt_Vector            EQU 37 
					 ; 37     25 
    1216 = 0026                      C  Create_Process_Data_Block       EQU 38 
					 ; 38     26 
    1217 = 0027                      C  FCB_Random_Read_Block           EQU 39 
					 ; 39     27 
    1218 = 0028                      C  FCB_Random_Write_Block          EQU 40 
					 ; 40     28 
    1219 = 0029                      C  Parse_File_Descriptor           EQU 41 
					 ; 41     29 
    1220 = 002A                      C  Get_Date                        EQU 42 
					 ; 42     2A 
    1221 = 002B                      C  Set_Date                        EQU 43 
					 ; 43     2B 
    1222 = 002C                      C  Get_Time                        EQU 44 
					 ; 44     2C 
    1223 = 002D                      C  Set_Time                        EQU 45 
					 ; 45     2D 
    1224 = 002E                      C  Set_Verify_On_Write             EQU 46 
					 ; 46     2E 
    1225                             C  ; Extended functionality group 
    1226 = 002F                      C  Get_DMA                         EQU 47 
					 ; 47     2F 
    1227 = 0030                      C  Get_Version                     EQU 48 
					 ; 48     30 
    1228 = 0031                      C  Keep_Process                    EQU 49 
					 ; 49     31 
    1229                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1230                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1231                             C  ;                                      
					                                    ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-56
system call definitions                                     

    1232 = 0032                      C  Get_DPB                         EQU 50 
					 ; 50     32 
    1233                             C  ;                                      
					                                    ; 
    1234                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1235                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1236 = 0033                      C  Set_CTRL_C_Trapping             EQU 51 
					 ; 51     33 
    1237 = 0034                      C  Get_InDOS_Flag                  EQU 52 
					 ; 52     34 
    1238 = 0035                      C  Get_Interrupt_Vector            EQU 53 
					 ; 53     35 
    1239 = 0036                      C  Get_Drive_Freespace             EQU 54 
					 ; 54     36 
    1240 = 0037                      C  Char_Oper                       EQU 55 
					 ; 55     37 
    1241 = 0038                      C  International                   EQU 56 
					 ; 56     38 
    1242                             C  ;   Directory Group 
    1243 = 0039                      C  MKDir                           EQU 57 
					 ; 57     39 
    1244 = 003A                      C  RMDir                           EQU 58 
					 ; 58     3A 
    1245 = 003B                      C  CHDir                           EQU 59 
					 ; 59     3B 
    1246                             C  ;   File Group 
    1247 = 003C                      C  Creat                           EQU 60 
					 ; 60     3C 
    1248 = 003D                      C  Open                            EQU 61 
					 ; 61     3D 
    1249 = 003E                      C  Close                           EQU 62 
					 ; 62     3E 
    1250 = 003F                      C  Read                            EQU 63 
					 ; 63     3F 
    1251 = 0040                      C  Write                           EQU 64 
					 ; 64     40 
    1252 = 0041                      C  Unlink                          EQU 65 
					 ; 65     41 
    1253 = 0042                      C  LSeek                           EQU 66 
					 ; 66     42 
    1254 = 0043                      C  CHMod                           EQU 67 
					 ; 67     43 
    1255 = 0044                      C  IOCtl                           EQU 68 
					 ; 68     44 
    1256 = 0045                      C  XDup                            EQU 69 
					 ; 69     45 
    1257 = 0046                      C  XDup2                           EQU 70 
					 ; 70     46 
    1258 = 0047                      C  Current_Dir                     EQU 71 
					 ; 71     47 
    1259                             C  ;    Memory Group 
    1260 = 0048                      C  Alloc                           EQU 72 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-57
system call definitions                                     

					 ; 72     48 
    1261 = 0049                      C  Dealloc                         EQU 73 
					 ; 73     49 
    1262 = 004A                      C  Setblock                        EQU 74 
					 ; 74     4A 
    1263                             C  ;    Process Group 
    1264 = 004B                      C  Exec                            EQU 75 
					 ; 75     4B 
    1265 = 004C                      C  Exit                            EQU 76 
					 ; 76     4C 
    1266 = 004D                      C  Wait                            EQU 77 
					 ; 77     4D 
    1267 = 004E                      C  Find_First                      EQU 78 
					 ; 78     4E 
    1268                             C  ;   Special Group 
    1269 = 004F                      C  Find_Next                       EQU 79 
					 ; 79     4F 
    1270                             C  ; SPECIAL SYSTEM GROUP 
    1271                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1272                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1273                             C  ;                                      
					                                    ; 
    1274 = 0050                      C  Set_Current_PDB                 EQU 80 
					 ; 80     50 
    1275 = 0051                      C  Get_Current_PDB                 EQU 81 
					 ; 81     51 
    1276 = 0052                      C  Get_In_Vars                     EQU 82 
					 ; 82     52 
    1277 = 0053                      C  SetDPB                          EQU 83 
					 ; 83     53 
    1278                             C  ;                                      
					                                    ; 
    1279                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1280                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1281 = 0054                      C  Get_Verify_On_Write             EQU 84 
					 ; 84     54 
    1282                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1283                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1284                             C  ;                                      
					                                    ; 
    1285 = 0055                      C  Dup_PDB                         EQU 85 
					 ; 85     55 
    1286                             C  ;                                      
					                                    ; 
    1287                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1288                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-58
system call definitions                                     

    1289 = 0056                      C  Rename                          EQU 86 
					 ; 86     56 
    1290 = 0057                      C  File_Times                      EQU 87 
					 ; 87     57 
    1291 = 0058                      C  AllocOper                       EQU 88 
					 ; 88     58 
    1292                             C  ; Network extention system calls 
    1293 = 0059                      C  GetExtendedError                EQU 89 
					 ; 89     59 
    1294 = 005A                      C  CreateTempFile                  EQU 90 
					 ; 90     5A 
    1295 = 005B                      C  CreateNewFile                   EQU 91 
					 ; 91     5B 
    1296 = 005C                      C  LockOper                        EQU 92 
					 ; 92     5C Lock and Unlock 
    1297 = 005D                      C  ServerCall                      EQU 93 
					 ; 93     5D CommitAll, ServerDOSCall, 
    1298                             C                                         
					 ;           CloseByName, CloseUser, 
    1299                             C                                         
					 ;           CloseUserProcess, 
    1300                             C                                         
					 ;           GetOpenFileList 
    1301 = 005E                      C  UserIDOper                      EQU 94 
					 ; 94     5E Get and Set 
    1302 = 005F                      C  AssignOper                      EQU 95 
					 ; 95     5F On, Off, Get, Set, Cancel 
    1303                             C   
    1304 = 00F8                      C  Set_Oem_Handler                 EQU 248
					 ; 248    F8 
    1305 = 00F9                      C  OEM_C1                          EQU 249
					 ; 249    F9 
    1306 = 00FA                      C  OEM_C2                          EQU 250
					 ; 250    FA 
    1307 = 00FB                      C  OEM_C3                          EQU 251
					 ; 251    FB 
    1308 = 00FC                      C  OEM_C4                          EQU 252
					 ; 252    FC 
    1309 = 00FD                      C  OEM_C5                          EQU 253
					 ; 253    FD 
    1310 = 00FE                      C  OEM_C6                          EQU 254
					 ; 254    FE 
    1311 = 00FF                      C  OEM_C7                          EQU 255
					 ; 255    FF 
    1312                             C  SUBTTL 
    1313                                 
    1314                             C          INCLUDE DEVSYM.ASM 
    1315                             C  SUBTTL DEVICE TABLE AND SRH DEFINITION 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-59
DEVICE TABLE AND SRH DEFINITION                             

    1316                             C  PAGE 
    1317                             C  ; The device table list has the form: 
    1318                             C  SYSDEV  STRUC 
    1319 0000  ????????              C  SDEVNEXT        DD      ?       ;Pointe
					r to next device header 
    1320 0004  ????                  C  SDEVATT         DW      ?       ;Attrib
					utes of the device 
    1321 0006  ????                  C  SDEVSTRAT       DW      ?       ;Strate
					gy entry point 
    1322 0008  ????                  C  SDEVINT         DW      ?       ;Interr
					upt entry point 
    1323 000A  0008[                 C  SDEVNAME        DB      8 DUP (?) ;Name
					 of device (only first byte used for bl
					ock) 
    1324            ??               C  
    1325                         ]   C  
    1326                             C  
    1327 0012                        C  SYSDEV  ENDS 
    1328                             C   
    1329                             C  ;Attribute bit masks 
    1330 = 8000                      C  DEVTYP  EQU     8000H           ;Bit 15
					 - 1  if Char, 0 if block 
    1331 = 4000                      C  DEVIOCTL EQU    4000H           ;Bit 14
					 - CONTROL mode bit 
    1332 = 2000                      C  ISFATBYDEV EQU  2000H           ;Bit 13
					 - Device uses FAT ID bytes, comp media
					. 
    1333 = 0001                      C  ISCIN   EQU     0001H           ;Bit 0 
					- This device is the console input. 
    1334 = 0002                      C  ISCOUT  EQU     0002H           ;Bit 1 
					- This device is the console output. 
    1335 = 0004                      C  ISNULL  EQU     0004H           ;Bit 2 
					- This device is the null device. 
    1336 = 0008                      C  ISCLOCK EQU     0008H           ;Bit 3 
					- This device is the clock device. 
    1337 = 0010                      C  ISIBM   EQU     0010H           ;Bit 4 
					- This device is special 
    1338                             C   
    1339                             C  ;Static Reguest Header 
    1340                             C  SRHEAD  STRUC 
    1341 0000  ??                    C  REQLEN  DB      ?               ;Length
					 in bytes of request block 
    1342 0001  ??                    C  REQUNIT DB      ?               ;Device
					 unit number 
    1343 0002  ??                    C  REQFUNC DB      ?               ;Type o
					f request 
    1344 0003  ????                  C  REQSTAT DW      ?               ;Status
					 Word 
    1345 0005  0008[                 C          DB      8 DUP(?)        ;Reserv
					ed for queue links 
    1346            ??               C  
    1347                         ]   C  
    1348                             C  
    1349 000D                        C  SRHEAD  ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-60
DEVICE TABLE AND SRH DEFINITION                             

    1350                             C   
    1351                             C  ;Status word masks 
    1352 = 8000                      C  STERR   EQU     8000H           ;Bit 15
					 - Error 
    1353 = 0200                      C  STBUI   EQU     0200H           ;Bit 9 
					- Buisy 
    1354 = 0100                      C  STDON   EQU     0100H           ;Bit 8 
					- Done 
    1355 = 00FF                      C  STECODE EQU     00FFH           ;Error 
					code 
    1356 = 0000                      C  WRECODE EQU     0 
    1357                             C   
    1358                             C  ;Function codes 
    1359 = 0000                      C  DEVINIT EQU     0               ;Initia
					lization 
    1360 = 001A                      C  DINITHL EQU     26              ;Size o
					f init header 
    1361 = 0001                      C  DEVMDCH EQU     1               ;Media 
					check 
    1362 = 000F                      C  DMEDHL  EQU     15              ;Size o
					f media check header 
    1363 = 0002                      C  DEVBPB  EQU     2               ;Get BP
					B 
    1364 = 0003                      C  DEVRDIOCTL EQU  3               ;IOCTL 
					read 
    1365 = 0016                      C  DBPBHL  EQU     22              ;Size o
					f Get BPB header 
    1366 = 0004                      C  DEVRD   EQU     4               ;Read 
    1367 = 0016                      C  DRDWRHL EQU     22              ;Size o
					f RD/WR header 
    1368 = 0005                      C  DEVRDND EQU     5               ;Non de
					structive read no wait (character devs)
					 
    1369 = 000E                      C  DRDNDHL EQU     14              ;Size o
					f non destructive read header 
    1370 = 0006                      C  DEVIST  EQU     6               ;Input 
					status 
    1371 = 000D                      C  DSTATHL EQU     13              ;Size o
					f status header 
    1372 = 0007                      C  DEVIFL  EQU     7               ;Input 
					flush 
    1373 = 000F                      C  DFLSHL  EQU     15              ;Size o
					f flush header 
    1374 = 0008                      C  DEVWRT  EQU     8               ;Write 
    1375 = 0009                      C  DEVWRTV EQU     9               ;Write 
					with verify 
    1376 = 000A                      C  DEVOST  EQU     10              ;Output
					 status 
    1377 = 000B                      C  DEVOFL  EQU     11              ;Output
					 flush 
    1378 = 000C                      C  DEVWRIOCTL EQU  12              ;IOCTL 
					write 
    1379                                
					write 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-61
DEVICE TABLE AND SRH DEFINITION                             

    1380                             C          INCLUDE COMSW.ASM 
    1381                             C  ; Use the following booleans to set ass
					embly flags 
    1382 = 0000                      C  FALSE   EQU     0 
    1383 = FFFF                      C  TRUE    EQU     NOT FALSE 
    1384                             C   
    1385 =                           C  IBMVER  EQU     false  ; Switch to buil
					d IBM version of Command 
    1386 =                           C  IBM     EQU     IBMVER 
    1387 =                           C  MSVER   EQU     true   ; Switch to buil
					d MS-DOS version of Command 
    1388                             C   
    1389 =                           C  HIGHMEM EQU     FALSE   ; Run resident 
					part above transient (high memory) 
    1390 =                           C  KANJI   EQU     false   ; Support for d
					ual byte Microsoft KANJI standard 
    1391 =                              IBMJAPAN        EQU     FALSE   ;MUST B
					E TRUE (along with IBM and KANJI) 
    1392                             C          INCLUDE COMEQU.ASM 
    1393                             C  ;************************************* 
    1394                             C  ; COMMAND EQUs which are not switch dep
					endant 
    1395                             C   
    1396                             C  IFDEF   IBM 
    1397                             C          INCLUDE IFEQU.ASM 
    1398                             C  ;************************************* 
    1399                             C  ; COMMAND EQUs which are switch dependa
					nt 
    1400                             C   
    1401                             C  ENDIF 
    1402                             C   
    1403                             C  ENDIF 
    1404                             C   
    1405                             C   
    1406 = 003E                      C  SYM     EQU     ">" 
    1407                             C   
    1408 = 0017                      C  LINPERPAG       EQU     23 
    1409 = 0001                      C  NORMPERLIN      EQU     1 
    1410 = 0005                      C  WIDEPERLIN      EQU     5 
    1411 = 0080                      C  COMBUFLEN       EQU     128     ; Lengt
					h of commmand buffer 
    1412                             C   
    1413 = 003A                      C  DRVCHAR         EQU     ":" 
    1414                             C   
    1415 = 005C                      C  FCB     EQU     5CH 
    1416                             C   
    1417                             C  VARSTRUC        STRUC 
    1418 0000  ??                    C  ISDIR   DB      ? 
    1419 0001  ??                    C  SIZ     DB      ? 
    1420 0002  ????                  C  TTAIL   DW      ? 
    1421 0004  ??                    C  INFO    DB      ? 
    1422 0005  0054[                 C  BUF     DB      DIRSTRLEN + 20 DUP (?) 
    1423            ??               C  
    1424                         ]   C  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-62
DEVICE TABLE AND SRH DEFINITION                             

    1425                             C  
    1426 0059                        C  VARSTRUC        ENDS 
    1427                             C   
    1428 = 0001                      C  WSWITCH EQU     1               ; Wide 
					display during DIR 
    1429 = 0002                      C  PSWITCH EQU     2               ; Pause
					 (or Page) mode during DIR 
    1430 = 0004                      C  ASWITCH EQU     4               ; ASCII
					 mode during COPY 
    1431 = 0008                      C  BSWITCH EQU     8               ; Binar
					y mode during COPY 
    1432 = 0010                      C  VSWITCH EQU     10H             ; Verif
					y switch 
    1433 = 8000                      C  GOTSWITCH EQU   8000H           ; Meta 
					switch set if switch character encounte
					red 
    1434                                 
    1435                                 
    1436 0000                           CODERES SEGMENT PUBLIC 
    1437 0000                           CODERES ENDS 
    1438                                 
    1439 0000                           DATARES SEGMENT PUBLIC BYTE 
    1440                                        EXTRN   COMBAD:BYTE,NEEDCOM:BYT
					E,DRVMSG:BYTE 
    1441                                        EXTRN   DEFMSG:BYTE,PROMPT:BYTE
					,EXECEMES:BYTE,EXEBAD:BYTE 
    1442                                        EXTRN   TOOBIG:BYTE,NOCOM:BYTE,
					RBADNAM:BYTE,INT_2E_RET:DWORD 
    1443                                        EXTRN   NOHANDMES:BYTE,BMEMMES:
					BYTE,HALTMES:BYTE,FRETMES:BYTE 
    1444                                        EXTRN   PARENT:WORD,HANDLE01:WO
					RD,LOADING:BYTE,BATCH:WORD 
    1445                                        EXTRN   TRNSEG:WORD,COMDRV:BYTE
					,MEMSIZ:WORD,SUM:WORD,EXTCOM:BYTE 
    1446                                        EXTRN   IO_SAVE:WORD,PERMCOM:BY
					TE,SINGLECOM:WORD,VERVAL:WORD 
    1447                                        EXTRN   PIPEFLAG:BYTE,SAVE_PDB:
					WORD,COMSPEC:BYTE,TRANS:WORD 
    1448                                        EXTRN   TRANVARS:BYTE,LTPA:WORD
					,RSWITCHAR:BYTE,RDIRCHAR:BYTE 
    1449                                        EXTRN   RETCODE:WORD,FORFLAG:BY
					TE 
    1450                                 
    1451                                        ENDIF 
    1452                                 
    1453 0000                           DATARES ENDS 
    1454                                 
    1455 0000                           ENVIRONMENT SEGMENT PUBLIC PARA        
					; Default COMMAND environment 
    1456 0000                           ENVIRONMENT ENDS 
    1457                                 
    1458 0000                           INIT    SEGMENT PUBLIC PARA 
    1459                                        EXTRN   CONPROC:NEAR 
    1460 0000                           INIT    ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-63
DEVICE TABLE AND SRH DEFINITION                             

    1461                                 
    1462 0000                           TAIL    SEGMENT PUBLIC PARA 
    1463 0000                           TAIL    ENDS 
    1464                                 
    1465 0000                           TRANCODE        SEGMENT PUBLIC PARA 
    1466 0000                           TRANCODE        ENDS 
    1467                                 
    1468 0000                           TRANDATA        SEGMENT PUBLIC BYTE 
    1469                                        EXTRN   TRANDATAEND:BYTE 
    1470 0000                           TRANDATA        ENDS 
    1471                                 
    1472 0000                           TRANSPACE       SEGMENT PUBLIC BYTE 
    1473                                        EXTRN   TRANSPACEEND:BYTE,HEADC
					ALL:DWORD 
    1474 0000                           TRANSPACE       ENDS 
    1475                                 
    1476 0000                           TRANTAIL        SEGMENT PUBLIC PARA 
    1477 0000                           TRANTAIL        ENDS 
    1478                                 
    1479 0000                           ZEXEC_CODE      SEGMENT PUBLIC PARA 
    1480 0000                           ZEXEC_CODE      ENDS 
    1481                                 
    1482 0000                           ZEXEC_DATA      SEGMENT PUBLIC BYTE 
    1483 0000                           ZEXEC_DATA      ENDS 
    1484                                 
    1485                                RESGROUP        GROUP   CODERES,DATARES
					,ENVIRONMENT,INIT,TAIL 
    1486                                TRANGROUP       GROUP   TRANCODE,TRANDA
					TA,TRANSPACE,TRANTAIL 
    1487                                EGROUP          GROUP   ZEXEC_CODE,ZEXE
					C_DATA 
    1488                                 
    1489 0000                           ENVIRONMENT SEGMENT PUBLIC PARA        
					; Default COMMAND environment 
    1490                                 
    1491                                        PUBLIC  ECOMSPEC,ENVIREND,PATHS
					TRING 
    1492                                 
    1493 0000                                   ORG     0 
    1494 0000  0010[                    ENVARENA DB     10H DUP (?)     ; Pad f
					or mem arena 
    1495            ??                  
    1496                         ]      
    1497                                
    1498 0010  50 41 54 48 3D           PATHSTRING DB   "PATH=" 
    1499 0015                           USERPATH LABEL  BYTE 
    1500                                 
    1501 0015  00                               DB      0               ; Null 
					path 
    1502 0016  43 4F 4D 53 50 45 43             DB      "COMSPEC=" 
    1503       3D                       
    1504 001E  2F 43 4F 4D 4D 41 4E     ECOMSPEC DB     "/COMMAND.COM" 
    1505       44 2E 43 4F 4D           
    1506 002A  0086[                            DB      134 DUP (0) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-64
DEVICE TABLE AND SRH DEFINITION                             

    1507            00                  
    1508                         ]      
    1509                                
    1510                                 
    1511 00B0                           ENVIREND        LABEL   BYTE 
    1512                                 
    1513 = 00A0                         ENVIRONSIZ EQU  $-PATHSTRING 
    1514 = 0092                         ENVIRONSIZ2 EQU $-ECOMSPEC 
    1515 00B0                           ENVIRONMENT ENDS 
    1516                                 
    1517                                 
    1518                                ; START OF RESIDENT PORTION 
    1519                                 
    1520 0000                           CODERES SEGMENT PUBLIC 
    1521                                 
    1522                                        PUBLIC  GETCOMDSK2,LODCOM,THEAD
					FIX,CONTCTERM,LOADCOM,INT_2E,LODCOM1 
    1523                                        PUBLIC  CHKSUM,SETVECT,EXT_EXEC
					,TREMCHECK,RESTHAND,CONTC,RSTACK 
    1524                                        PUBLIC  SAVHAND 
    1525                                 
    1526                                        ENDIF 
    1527                                 
    1528                                ASSUME  CS:RESGROUP,DS:NOTHING,ES:NOTHI
					NG,SS:NOTHING 
    1529                                 
    1530                                        EXTRN   RPRINT:NEAR,ASKEND:NEAR
					,DSKERR:NEAR 
    1531                                 
    1532                                 
    1533 0000                                   ORG     0 
    1534 = 0000                         ZERO    =       $ 
    1535                                 
    1536 0100                                   ORG     100H 
    1537                                 
    1538 0100                           PROGSTART: 
    1539 0100  E9 0000 E                        JMP     RESGROUP:CONPROC 
    1540                                 
    1541 0103  007D[                            DB      (80H - 3) DUP (?) 
    1542            ??                  
    1543                         ]      
    1544                                
    1545 0180                           RSTACK  LABEL   WORD 
    1546                                 
    1547                                ENDIF 
    1548                                 
    1549 0180                           EXEC_ERR:                       ; Selec
					t the correct error message 
    1550 0180  BA 0000 E                        MOV     DX,OFFSET RESGROUP:RBAD
					NAM 
    1551 0183  3D 0002                          CMP     AX,exec_file_not_found 
    1552 0186  74 18                            JZ      GOTEXECEMES 
    1553 0188  3D 0005                          CMP     AX,error_access_denied 
    1554 018B  74 13                            JZ      GOTEXECEMES 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-65
DEVICE TABLE AND SRH DEFINITION                             

    1555 018D  BA 0000 E                        MOV     DX,OFFSET RESGROUP:TOOB
					IG 
    1556 0190  3D 0008                          CMP     AX,exec_not_enough_memo
					ry 
    1557 0193  74 0B                            JZ      GOTEXECEMES 
    1558 0195  BA 0000 E                        MOV     DX,OFFSET RESGROUP:EXEB
					AD 
    1559 0198  3D 000B                          CMP     AX,exec_bad_format 
    1560 019B  74 03                            JZ      GOTEXECEMES 
    1561 019D  BA 0000 E                        MOV     DX,OFFSET RESGROUP:EXEC
					EMES 
    1562 01A0                           GOTEXECEMES: 
    1563 01A0  0E                               PUSH    CS 
    1564 01A1  1F                               POP     DS 
    1565 01A2  E8 0000 E                        CALL    RPRINT 
    1566 01A5  EB 13                            JMP     SHORT NOEXEC 
    1567                                 
    1568 01A7                           EXT_EXEC: 
    1569                                ; 
    1570                                ; we are now running in free space.  an
					ything we do from here 
    1571                                ; on may get trashed.  Move the stack (
					also in free space) to 
    1572                                ; allocated space because since EXEC re
					stores the stack, 
    1573                                ; somebody may trash what is on the sta
					ck. 
    1574                                ; 
    1575 01A7  8C C9                            MOV     CX,CS 
    1576 01A9  8E D1                            MOV     SS,CX 
    1577 01AB  BC 0180 R                        MOV     SP,OFFSET RESGROUP:RSTA
					CK 
    1578                                ; 
    1579                                ; Oops!! We have to make sure that the 
					EXEC code doesn't blop a newstack! 
    1580                                ; 
    1581                                ; 
    1582 01AE  CD 21                            INT     int_command     ; Do th
					e EXEC 
    1583 01B0  72 CE                            JC      EXEC_ERR        ; EXEC 
					failed 
    1584 01B2                           EXEC_WAIT: 
    1585 01B2  B4 4D                            MOV     AH,WAIT 
    1586 01B4  CD 21                            INT     int_command     ; Get t
					he return code 
    1587 01B6  2E: A3 0000 E                    MOV     [RETCODE],AX 
    1588 01BA                           NOEXEC: 
    1589 01BA  E9 028B R                        JMP     LODCOM 
    1590                                 
    1591 01BD                           CONTC: 
    1592 01BD  FB                               STI 
    1593 01BE  8C C8                            MOV     AX,CS 
    1594 01C0  8E D8                            MOV     DS,AX 
    1595                                ASSUME  DS:RESGROUP 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-66
DEVICE TABLE AND SRH DEFINITION                             

    1596 01C2  B4 0D                            MOV     AH,DISK_RESET 
    1597 01C4  CD 21                            INT     int_command     ; Reset
					 disks in case files were open 
    1598 01C6  F7 06 0000 E FFFF                TEST    [BATCH],-1 
    1599 01CC  74 03                            JZ      CONTCTERM 
    1600 01CE  E9 0000 E                        JMP     ASKEND          ; See i
					f user wants to terminate batch 
    1601 01D1                           CONTCTERM: 
    1602 01D1  33 ED                            XOR     BP,BP           ; Indic
					ate no read 
    1603 01D3  C6 06 0000 E 00                  MOV     [FORFLAG],0     ; Turn 
					off for processing 
    1604 01D8  C6 06 0000 E 00                  MOV     [PIPEFLAG],0    ; Turn 
					off any pipe 
    1605 01DD  83 3E 0000 E 00                  CMP     [SINGLECOM],0   ; See i
					f we need to set SINGLECOM 
    1606 01E2  74 06                            JZ      NOSETSING 
    1607 01E4  C7 06 0000 E FFFF                MOV     [SINGLECOM],-1  ; Cause
					 termination on pipe, batch, for 
    1608 01EA                           NOSETSING: 
    1609 01EA  80 3E 0000 E 00                  CMP     [EXTCOM],0 
    1610 01EF  75 03                            JNZ     DODAB           ; Inter
					nal ^C 
    1611 01F1  E9 02D0 R                        JMP     LODCOM1 
    1612 01F4                           DODAB: 
    1613 01F4  F9                               STC                     ; Tell 
					DOS to abort 
    1614 01F5                           ZZY     PROC    FAR 
    1615 01F5  CB                               RET                     ; Leave
					 flags on stack 
    1616                                ZZY     ENDP 
    1617                                 
    1618 01F6                           BADMEMERR:                             
					 ; Allocation error loading transient 
    1619 01F6  BA 0000 E                        MOV     DX,OFFSET RESGROUP:BMEM
					MES 
    1620 01F9                           FATALC: 
    1621 01F9  0E                               PUSH    CS 
    1622 01FA  1F                               POP     DS 
    1623 01FB  E8 0000 E                        CALL    RPRINT 
    1624 01FE  80 3E 0000 E 00                  CMP     [PERMCOM],0 
    1625 0203  74 0F                            JZ      FATALRET 
    1626 0205  83 3E 0000 E 00                  CMP     [SINGLECOM],0          
					         ; If PERMCOM and SINGLECOM 
    1627 020A  75 08                            JNZ     FATALRET               
					         ; Must take INT_2E exit 
    1628 020C  BA 0000 E                        MOV     DX,OFFSET RESGROUP:HALT
					MES 
    1629 020F  E8 0000 E                        CALL    RPRINT 
    1630 0212                           STALL: 
    1631 0212  EB FE                            JMP     STALL                  
					         ; Crash the system nicely 
    1632                                 
    1633 0214                           FATALRET: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-67
DEVICE TABLE AND SRH DEFINITION                             

    1634 0214  BA 0000 E                        MOV     DX,OFFSET RESGROUP:FRET
					MES 
    1635 0217  E8 0000 E                        CALL    RPRINT 
    1636 021A                           FATALRET2: 
    1637 021A  80 3E 0000 E 00                  CMP     [PERMCOM],0            
					         ; If we get here and PERMCOM, 
    1638 021F  75 0C                            JNZ     RET_2E                 
					         ; must be INT_2E 
    1639                                ENDIF 
    1640 0221  A1 0000 E                        MOV     AX,[PARENT] 
    1641 0224  2E: A3 0016                      MOV     WORD PTR CS:[PDB_Parent
					_PID],AX 
    1642 0228  B8 4C00                          MOV     AX,(EXIT SHL 8)        
					         ; Return to lower level 
    1643 022B  CD 21                            INT     int_command 
    1644                                 
    1645 022D                           RET_2E: 
    1646 022D  0E                               PUSH    CS 
    1647 022E  1F                               POP     DS 
    1648                                ASSUME  DS:RESGROUP,ES:NOTHING,SS:NOTHI
					NG 
    1649 022F  C7 06 0000 E 0000                MOV     [SINGLECOM],0   ; Turn 
					off singlecom 
    1650 0235  8E 06 0000 E                     MOV     ES,[LTPA] 
    1651 0239  B4 49                            MOV     AH,DEALLOC 
    1652 023B  CD 21                            INT     int_command            
					 ; Free up space used by transient 
    1653 023D  8B 1E 0000 E                     MOV     BX,[SAVE_PDB] 
    1654 0241  B4 50                            MOV     AH,SET_CURRENT_PDB 
    1655 0243  CD 21                            INT     int_command            
					 ; Current process is user 
    1656 0245  A1 0000 E                        MOV     AX,[RETCODE] 
    1657 0248  80 3E 0000 E 00                  CMP     [EXTCOM],0 
    1658 024D  75 02                            JNZ     GOTECODE 
    1659 024F  33 C0                            XOR     AX,AX           ; Inter
					nals always return 0 
    1660 0251                           GOTECODE: 
    1661 0251  C6 06 0000 E 01                  MOV     [EXTCOM],1      ; Force
					 external 
    1662 0256  FF 2E 0000 E                     JMP     [INT_2E_RET]    ;"IRET"
					 
    1663                                 
    1664 025A                           INT_2E:                         ; Magic
					 command executer 
    1665                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    1666 025A  2E: 8F 06 0000 E                 POP     WORD PTR [INT_2E_RET] 
    1667 025F  2E: 8F 06 0002 E                 POP     WORD PTR [INT_2E_RET+2]
					    ;Get return address 
    1668 0264  58                               POP     AX              ;Chuck 
					flags 
    1669 0265  0E                               PUSH    CS 
    1670 0266  07                               POP     ES 
    1671 0267  BF 0080                          MOV     DI,80H 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-68
DEVICE TABLE AND SRH DEFINITION                             

    1672 026A  B9 0040                          MOV     CX,64 
    1673 026D  F3/ A5                           REP     MOVSW 
    1674 026F  B4 51                            MOV     AH,GET_CURRENT_PDB 
    1675 0271  CD 21                            INT     int_command            
					 ; Get user's header 
    1676 0273  2E: 89 1E 0000 E                 MOV     [SAVE_PDB],BX 
    1677 0278  B4 50                            MOV     AH,SET_CURRENT_PDB 
    1678 027A  8C CB                            MOV     BX,CS 
    1679 027C  CD 21                            INT     int_command            
					 ; Current process is me 
    1680 027E  2E: C7 06 0000 E 0081            MOV     [SINGLECOM],81H 
    1681 0285  2E: C6 06 0000 E 01              MOV     [EXTCOM],1      ; Make 
					sure this case forced 
    1682                                 
    1683 028B                           LODCOM:                         ; Termi
					nation handler 
    1684 028B  2E: 80 3E 0000 E 00              CMP     [EXTCOM],0 
    1685 0291  74 3D                            JZ      LODCOM1         ; If in
					ternal, memory already allocated 
    1686 0293  BB FFFF                          MOV     BX,0FFFFH 
    1687 0296  B4 48                            MOV     AH,ALLOC 
    1688 0298  CD 21                            INT     int_command 
    1689 029A  B8 000F E                        MOV     AX,OFFSET TRANGROUP:TRA
					NSPACEEND + 15 
    1690 029D  B1 04                            MOV     CL,4 
    1691 029F  D3 E8                            SHR     AX,CL 
    1692                                 
    1693                                        ENDIF 
    1694                                 
    1695 02A1  05 0020                          ADD     AX,20H 
    1696 02A4  3B D8                            CMP     BX,AX           ; Is le
					ss than 512 byte buffer worth it? 
    1697 02A6  73 03                            JNC     MEMOK 
    1698 02A8                           BADMEMERRJ: 
    1699 02A8  E9 01F6 R                        JMP BADMEMERR           ; Not e
					nough memory 
    1700 02AB                           MEMOK: 
    1701 02AB  B4 48                            MOV     AH,ALLOC 
    1702 02AD  CD 21                            INT     int_command 
    1703 02AF  72 F7                            JC      BADMEMERRJ      ; Memor
					y arenas probably trashed 
    1704 02B1  2E: C6 06 0000 E 00              MOV     [EXTCOM],0      ; Flag 
					not to ALLOC again 
    1705 02B7  2E: A3 0000 E                    MOV     [LTPA],AX       ; New T
					PA is base just allocated 
    1706 02BB  03 D8                            ADD     BX,AX 
    1707 02BD  2E: 89 1E 0000 E                 MOV     [MEMSIZ],BX 
    1708                                 
    1709 02C2  B8 000F E                        MOV     AX,OFFSET TRANGROUP:TRA
					NSPACEEND + 15 
    1710 02C5  B1 04                            MOV     CL,4 
    1711 02C7  D3 E8                            SHR     AX,CL 
    1712                                 
    1713                                        ENDIF 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-69
DEVICE TABLE AND SRH DEFINITION                             

    1714                                 
    1715 02C9  2B D8                            SUB     BX,AX 
    1716 02CB  2E: 89 1E 0000 E                 MOV     [TRNSEG],BX     ; Trans
					ient starts here 
    1717 02D0                           LODCOM1: 
    1718 02D0  8C C8                            MOV     AX,CS 
    1719 02D2  8E D0                            MOV     SS,AX 
    1720                                ASSUME  SS:RESGROUP 
    1721 02D4  BC 0180 R                        MOV     SP,OFFSET RESGROUP:RSTA
					CK 
    1722 02D7  8E D8                            MOV     DS,AX 
    1723                                ASSUME  DS:RESGROUP 
    1724 02D9  E8 0359 R                        CALL    HEADFIX     ; Make sure
					 files closed stdin and stdout restored
					 
    1725 02DC  33 ED                            XOR     BP,BP           ; Flag 
					command ok 
    1726 02DE  B8 FFFF                          MOV     AX,-1 
    1727 02E1  87 06 0000 E                     XCHG    AX,[VERVAL] 
    1728 02E5  3D FFFF                          CMP     AX,-1 
    1729 02E8  74 04                            JZ      NOSETVER 
    1730 02EA  B4 2E                            MOV     AH,SET_VERIFY_ON_WRITE 
					 ; AL has correct value 
    1731 02EC  CD 21                            INT     int_command 
    1732 02EE                           NOSETVER: 
    1733 02EE  83 3E 0000 E FF                  CMP     [SINGLECOM],-1 
    1734 02F3  75 03                            JNZ     NOSNG 
    1735 02F5  E9 021A R                        JMP     FATALRET2       ; We ha
					ve finished the single command 
    1736 02F8                           NOSNG: 
    1737 02F8  E8 045E R                        CALL    SETVECT 
    1738                                 
    1739                                ENDIF 
    1740                                 
    1741 02FB  E8 0447 R                        CALL    CHKSUM          ; Check
					 the transient 
    1742 02FE  3B 16 0000 E                     CMP     DX,[SUM] 
    1743 0302  74 16                            JZ      HAVCOM          ; Trans
					ient OK 
    1744 0304                           BOGUS_COM: 
    1745 0304  C6 06 0000 E 01                  MOV     [LOADING],1     ; Flag 
					DSKERR routine 
    1746 0309  E8 03F8 R                        CALL    LOADCOM 
    1747 030C                           CHKSAME: 
    1748                                 
    1749                                ENDIF 
    1750                                 
    1751 030C  E8 0447 R                        CALL    CHKSUM 
    1752 030F  3B 16 0000 E                     CMP     DX,[SUM] 
    1753 0313  74 05                            JZ      HAVCOM          ; Same 
					COMMAND 
    1754 0315                           ALSO_BOGUS: 
    1755 0315  E8 043F R                        CALL    WRONGCOM 
    1756 0318  EB F2                            JMP     SHORT CHKSAME 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-70
DEVICE TABLE AND SRH DEFINITION                             

    1757 031A                           HAVCOM: 
    1758 031A  B8 3700                          MOV     AX,CHAR_OPER SHL 8 
    1759 031D  CD 21                            INT     int_command 
    1760 031F  88 16 0000 E                     MOV     [RSWITCHAR],DL 
    1761 0323  80 FA 2F                         CMP     DL,'/' 
    1762 0326  75 05                            JNZ     USESLASH 
    1763 0328  C6 06 0000 E 5C                  MOV     [RDIRCHAR],'\'         
					 ; Select alt path separator 
    1764 032D                           USESLASH: 
    1765 032D  C6 06 0000 E 00                  MOV     [LOADING],0            
					 ; Flag to DSKERR 
    1766 0332  BE 0000 E                        MOV     SI,OFFSET RESGROUP:TRAN
					VARS 
    1767 0335  BF 0000 E                        MOV     DI,OFFSET TRANGROUP:HEA
					DCALL 
    1768 0338  8E 06 0000 E                     MOV     ES,[TRNSEG] 
    1769 033C  FC                               CLD 
    1770 033D  B9 0008                          MOV     CX,8 
    1771 0340  F3/ A5                           REP     MOVSW                  
					 ; Transfer INFO to transient 
    1772 0342  A1 0000 E                        MOV     AX,[MEMSIZ] 
    1773 0345  A3 0002                          MOV     WORD PTR DS:[PDB_block_
					len],AX  ; Adjust my own header 
    1774 0348  FF 2E 0000 E                     JMP     DWORD PTR [TRANS] 
    1775                                 
    1776                                ; Far call to REMCHECK for TRANSIENT 
    1777 034C                           TREMCHECK PROC   FAR 
    1778 034C  E8 0350 R                        CALL    REMCHECK 
    1779 034F  CB                               RET 
    1780                                TREMCHECK ENDP 
    1781                                 
    1782 0350                           REMCHECK: 
    1783                                ;All registers preserved. Returns zero 
					if media removable, NZ if fixed 
    1784                                ; AL is drive (0=DEF, 1=A,...) 
    1785                                        ELSE 
    1786 0350  50                               PUSH    AX 
    1787                                        ENDIF 
    1788                                 
    1789 0351  33 C0                            XOR     AX,AX           ;Zero 
    1790                                 
    1791                                        ENDIF 
    1792                                 
    1793 0353  58                               POP     AX 
    1794 0354  C3                               RET 
    1795                                 
    1796                                ; Far call to HEADFIX for TRANSIENT 
    1797 0355                           THEADFIX PROC   FAR 
    1798 0355  E8 0359 R                        CALL    HEADFIX 
    1799 0358  CB                               RET 
    1800                                THEADFIX ENDP 
    1801                                 
    1802 0359                           HEADFIX: 
    1803 0359  33 DB                            XOR     BX,BX           ; Clean
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-71
DEVICE TABLE AND SRH DEFINITION                             

					 up header 
    1804 035B  8B 0E 0000 E                     MOV     CX,[IO_SAVE] 
    1805 035F  8B 16 0018                       MOV     DX,WORD PTR DS:[PDB_JFN
					_Table] 
    1806 0363  3A CA                            CMP     CL,DL 
    1807 0365  74 08                            JZ      CHK1            ; Stdin
					 matches 
    1808 0367  B4 3E                            MOV     AH,CLOSE 
    1809 0369  CD 21                            INT     int_command 
    1810 036B  88 0E 0018                       MOV     DS:[PDB_JFN_Table],CL  
					 ; Restore stdin 
    1811 036F                           CHK1: 
    1812 036F  43                               INC     BX 
    1813 0370  3A EE                            CMP     CH,DH           ; Stdou
					t matches 
    1814 0372  74 08                            JZ      CHKOTHERHAND 
    1815 0374  B4 3E                            MOV     AH,CLOSE 
    1816 0376  CD 21                            INT     int_command 
    1817 0378  88 2E 0019                       MOV     DS:[PDB_JFN_Table+1],CH
					 ; Restore stdout 
    1818 037C                           CHKOTHERHAND: 
    1819 037C  83 C3 04                         ADD     BX,4                   
					 ; Skip 2,3,4 
    1820 037F  B9 000F                          MOV     CX,FilPerProc - 5      
					 ; Already done 0,1,2,3,4 
    1821 0382                           CLOSELOOP: 
    1822 0382  B4 3E                            MOV     AH,CLOSE 
    1823 0384  CD 21                            INT     int_command 
    1824 0386  43                               INC     BX 
    1825 0387  E2 F9                            LOOP    CLOSELOOP 
    1826 0389  C3                               RET 
    1827                                 
    1828 038A                           SAVHAND: 
    1829                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    1830 038A  1E                               PUSH    DS 
    1831 038B  53                               PUSH    BX              ; Set s
					tdin to sterr, stdout to stderr 
    1832 038C  50                               PUSH    AX 
    1833 038D  B4 51                            MOV     AH,GET_CURRENT_PDB 
    1834 038F  CD 21                            INT     int_command            
					 ; Get user's header 
    1835 0391  8E DB                            MOV     DS,BX 
    1836 0393  A1 0018                          MOV     AX,WORD PTR DS:[PDB_JFN
					_Table] 
    1837 0396  2E: A3 0000 E                    MOV     [HANDLE01],AX          
					 ; Save user's stdin, stdout 
    1838 039A  A0 001A                          MOV     AL,DS:[PDB_JFN_Table+2]
					 
    1839 039D  8A E0                            MOV     AH,AL 
    1840 039F  A3 0018                          MOV     WORD PTR DS:[PDB_JFN_Ta
					ble],AX   ; Dup stderr 
    1841 03A2  58                               POP     AX 
    1842 03A3  5B                               POP     BX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-72
DEVICE TABLE AND SRH DEFINITION                             

    1843 03A4  1F                               POP     DS 
    1844 03A5  C3                               RET 
    1845                                 
    1846                                ASSUME  DS:RESGROUP 
    1847 03A6                           GETCOMDSK2: 
    1848 03A6  E8 03C5 R                        CALL    GETCOMDSK 
    1849 03A9  E9 02D0 R                        JMP     LODCOM1         ; Memor
					y already allocated 
    1850                                 
    1851 03AC                           RESTHAND: 
    1852 03AC  1E                               PUSH    DS 
    1853 03AD  53                               PUSH    BX              ; Resto
					re stdin, stdout to user 
    1854 03AE  50                               PUSH    AX 
    1855 03AF  B4 51                            MOV     AH,GET_CURRENT_PDB 
    1856 03B1  CD 21                            INT     int_command            
					 ; Point to user's header 
    1857 03B3  A1 0000 E                        MOV     AX,[HANDLE01] 
    1858 03B6  8E DB                            MOV     DS,BX 
    1859                                ASSUME DS:NOTHING 
    1860 03B8  A3 0018                          MOV     WORD PTR DS:[PDB_JFN_Ta
					ble],AX   ; Stuff his old 0 and 1 
    1861 03BB  58                               POP     AX 
    1862 03BC  5B                               POP     BX 
    1863 03BD  1F                               POP     DS 
    1864 03BE  C3                               RET 
    1865                                ASSUME DS:RESGROUP,SS:RESGROUP 
    1866                                 
    1867 03BF                           HOPELESS: 
    1868 03BF  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NOCO
					M 
    1869 03C2  E9 01F9 R                        JMP     FATALC 
    1870                                 
    1871 03C5                           GETCOMDSK: 
    1872 03C5  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NEED
					COM 
    1873 03C8                           GETCOMDSK3: 
    1874 03C8  A0 0000 E                        MOV     AL,[COMDRV] 
    1875 03CB  E8 0350 R                        CALL    REMCHECK 
    1876 03CE  75 EF                            JNZ     HOPELESS               
					 ;Non-removable media 
    1877 03D0  E8 0000 E                        CALL    RPRINT 
    1878 03D3  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DRVM
					SG 
    1879 03D6  80 3E 0000 E 00                  CMP     [COMDRV],0 
    1880 03DB  75 03                            JNZ     GETCOM1 
    1881 03DD  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DEFM
					SG 
    1882 03E0                           GETCOM1: 
    1883 03E0  E8 0000 E                        CALL    RPRINT 
    1884 03E3  BA 0000 E                        MOV     DX,OFFSET RESGROUP:PROM
					PT 
    1885 03E6  E8 0000 E                        CALL    RPRINT 
    1886 03E9  E8 03ED R                        CALL    GetRawFlushedByte 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-73
DEVICE TABLE AND SRH DEFINITION                             

    1887 03EC  C3                               RET 
    1888                                 
    1889                                ; flush world and get raw input 
    1890 03ED                           GetRawFlushedByte: 
    1891 03ED  B8 0C07                          MOV     AX,(STD_CON_INPUT_FLUSH
					 SHL 8) OR RAW_CON_INPUT 
    1892 03F0  CD 21                            INT     int_command            
					 ; Get char without testing or echo 
    1893 03F2  B8 0C00                          MOV     AX,(STD_CON_INPUT_FLUSH
					 SHL 8) + 0 
    1894 03F5  CD 21                            INT     int_command 
    1895                                        return 
    1896 03F7                         1 ??0000:
    1897 03F7  C3                     1  RET
    1898                                 
    1899 03F8                           LOADCOM:                        ; Load 
					in transient 
    1900 03F8  45                               INC     BP              ; Flag 
					command read 
    1901 03F9  BA 0000 E                        MOV     DX,OFFSET RESGROUP:COMS
					PEC 
    1902 03FC  B8 3D00                          MOV     AX,OPEN SHL 8 
    1903 03FF  CD 21                            INT     int_command            
					 ; Open COMMAND.COM 
    1904 0401  73 10                            JNC     READCOM 
    1905 0403  3D 0004                          CMP     AX,open_too_many_open_f
					iles 
    1906 0406  75 06                            JNZ     TRYDOOPEN 
    1907 0408  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NOHA
					NDMES 
    1908 040B  E9 01F9 R                        JMP     FATALC          ; Fatal
					, will never find a handle 
    1909                                 
    1910 040E                           TRYDOOPEN: 
    1911 040E  E8 03C5 R                        CALL    GETCOMDSK 
    1912 0411  EB E5                            JMP     SHORT LOADCOM 
    1913                                 
    1914 0413                           READCOM: 
    1915 0413  8B D8                            MOV     BX,AX           ; Handl
					e 
    1916 0415  BA 0000 R                        MOV     DX,OFFSET RESGROUP:TRAN
					START 
    1917 0418  33 C9                            XOR     CX,CX           ; Seek 
					loc 
    1918 041A  B8 4200                          MOV     AX,LSEEK SHL 8 
    1919 041D  CD 21                            INT     int_command 
    1920 041F  72 10                            JC      WRONGCOM1 
    1921 0421  B9 FF00 E                        MOV     CX,OFFSET TRANGROUP:TRA
					NSPACEEND - 100H 
    1922                                 
    1923                                        ENDIF 
    1924                                 
    1925 0424  1E                               PUSH    DS 
    1926 0425  8E 1E 0000 E                     MOV     DS,[TRNSEG] 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-74
DEVICE TABLE AND SRH DEFINITION                             

    1927                                ASSUME  DS:NOTHING 
    1928 0429  BA 0100                          MOV     DX,100H 
    1929 042C  B4 3F                            MOV     AH,READ 
    1930 042E  CD 21                            INT     int_command 
    1931 0430  1F                               POP     DS 
    1932                                ASSUME  DS:RESGROUP 
    1933 0431                           WRONGCOM1: 
    1934 0431  9C                               PUSHF 
    1935 0432  50                               PUSH    AX 
    1936 0433  B4 3E                            MOV     AH,CLOSE 
    1937 0435  CD 21                            INT     int_command            
					 ; Close COMMAND.COM 
    1938 0437  58                               POP     AX 
    1939 0438  9D                               POPF 
    1940 0439  72 04                            JC      WRONGCOM        ; If er
					ror on READ 
    1941 043B  3B C1                            CMP     AX,CX 
    1942 043D  74 1E                            JZ      RET10           ; Size 
					matched 
    1943 043F                           WRONGCOM: 
    1944 043F  BA 0000 E                        MOV     DX,OFFSET RESGROUP:COMB
					AD 
    1945 0442  E8 03C8 R                        CALL    GETCOMDSK3 
    1946 0445  EB B1                            JMP     SHORT LOADCOM   ; Try a
					gain 
    1947                                 
    1948 0447                           CHKSUM:                         ; Compu
					te transient checksum 
    1949 0447  1E                               PUSH    DS 
    1950 0448  8E 1E 0000 E                     MOV     DS,[TRNSEG] 
    1951 044C  BE 0100                          MOV     SI,100H 
    1952 044F  B9 FF00 E                        MOV     CX,OFFSET TRANGROUP:TRA
					NDATAEND - 100H 
    1953                                 
    1954 0452                           CHECK_SUM: 
    1955 0452  FC                               CLD 
    1956 0453  D1 E9                            SHR     CX,1 
    1957 0455  33 D2                            XOR     DX,DX 
    1958 0457                           CHK: 
    1959 0457  AD                               LODSW 
    1960 0458  03 D0                            ADD     DX,AX 
    1961 045A  E2 FB                            LOOP    CHK 
    1962 045C  1F                               POP     DS 
    1963 045D  C3                       RET10:  RET 
    1964                                 
    1965 045E                           SETVECT:                        ; Set u
					seful vectors 
    1966 045E  BA 028B R                        MOV     DX,OFFSET RESGROUP:LODC
					OM 
    1967 0461  B8 2522                          MOV     AX,(SET_INTERRUPT_VECTO
					R SHL 8) OR 22H        ; Set Terminate 
					address 
    1968 0464  CD 21                            INT     int_command 
    1969 0466  BA 01BD R                        MOV     DX,OFFSET RESGROUP:CONT
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Page     1-75
DEVICE TABLE AND SRH DEFINITION                             

					C 
    1970 0469  B8 2523                          MOV     AX,(SET_INTERRUPT_VECTO
					R SHL 8) OR 23H        ; Set Ctrl-C add
					ress 
    1971 046C  CD 21                            INT     int_command 
    1972 046E  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DSKE
					RR 
    1973 0471  B8 2524                          MOV     AX,(SET_INTERRUPT_VECTO
					R SHL 8) OR 24H        ; Set Hard Disk 
					Error address 
    1974 0474  CD 21                            INT     int_command 
    1975 0476  C3                               RET 
    1976                                 
    1977 0477                           CODERES ENDS 
    1978                                 
    1979                                ; This TAIL segment is used to produce 
					a PARA aligned label in the resident 
    1980                                ; group which is the location where the
					 transient segments will be loaded 
    1981                                ; initial. 
    1982                                 
    1983 0000                           TAIL    SEGMENT PUBLIC PARA 
    1984 0000                                   ORG     0 
    1985 0000                           TRANSTART       LABEL   WORD 
    1986 0000                           TAIL    ENDS 
    1987                                 
    1988                                ; This TAIL segment is used to produce 
					a PARA aligned label in the transient 
    1989                                ; group which is the location where the
					 exec segments will be loaded 
    1990                                ; initial. 
    1991                                 
    1992 0000                           TRANTAIL    SEGMENT PUBLIC PARA 
    1993 0000                                   ORG     0 
    1994 0000                           EXECSTART   LABEL   WORD 
    1995 0000                           TRANTAIL    ENDS 
    1996                                 
    1997                                ENDIF 
    1998                                 
    1999                                        END     PROGSTART 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016
VARSTRUC . . . . . . . . . . . .  	0059	0005
  ISDIR  . . . . . . . . . . . .  	0000
  SIZ  . . . . . . . . . . . . .  	0001
  TTAIL  . . . . . . . . . . . .  	0002
  INFO . . . . . . . . . . . . .  	0004
  BUF  . . . . . . . . . . . . .  	0005
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-5
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

EGROUP . . . . . . . . . . . . .  	GROUP
  ZEXEC_CODE . . . . . . . . . .  	0000	PARA	PUBLIC	
  ZEXEC_DATA . . . . . . . . . .  	0000	BYTE	PUBLIC	
RESGROUP . . . . . . . . . . . .  	GROUP
  CODERES  . . . . . . . . . . .  	0477	PARA	PUBLIC	
  DATARES  . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  ENVIRONMENT  . . . . . . . . .  	00B0	PARA	PUBLIC	
  INIT . . . . . . . . . . . . .  	0000	PARA	PUBLIC	
  TAIL . . . . . . . . . . . . .  	0000	PARA	PUBLIC	
TRANGROUP  . . . . . . . . . . .  	GROUP
  TRANCODE . . . . . . . . . . .  	0000	PARA	PUBLIC	
  TRANDATA . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  TRANSPACE  . . . . . . . . . .  	0000	BYTE	PUBLIC	
  TRANTAIL . . . . . . . . . . .  	0000	PARA	PUBLIC	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALSO_BOGUS . . . . . . . . . . .  	L NEAR	0315	CODERES
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASKEND . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ASWITCH  . . . . . . . . . . . .  	Number	0004	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-6
                                                             

ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BADMEMERR  . . . . . . . . . . .  	L NEAR	01F6	CODERES
BADMEMERRJ . . . . . . . . . . .  	L NEAR	02A8	CODERES
BATCH  . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
BMEMMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
BOGUS_COM  . . . . . . . . . . .  	L NEAR	0304	CODERES
BSWITCH  . . . . . . . . . . . .  	Number	0008	
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHECK_SUM  . . . . . . . . . . .  	L NEAR	0452	CODERES
CHK  . . . . . . . . . . . . . .  	L NEAR	0457	CODERES
CHK1 . . . . . . . . . . . . . .  	L NEAR	036F	CODERES
CHKOTHERHAND . . . . . . . . . .  	L NEAR	037C	CODERES
CHKSAME  . . . . . . . . . . . .  	L NEAR	030C	CODERES
CHKSUM . . . . . . . . . . . . .  	L NEAR	0447	CODERES	Global
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSELOOP  . . . . . . . . . . .  	L NEAR	0382	CODERES
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
COMBAD . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
COMBUFLEN  . . . . . . . . . . .  	Number	0080	
COMDRV . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
COMSPEC  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
CONPROC  . . . . . . . . . . . .  	L NEAR	0000	INIT	External
CONTC  . . . . . . . . . . . . .  	L NEAR	01BD	CODERES	Global
CONTCTERM  . . . . . . . . . . .  	L NEAR	01D1	CODERES	Global
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DBPBHL . . . . . . . . . . . . .  	Number	0016	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-7
                                                             

DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEFMSG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
DEVOFL . . . . . . . . . . . . .  	Number	000B	
DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DODAB  . . . . . . . . . . . . .  	L NEAR	01F4	CODERES
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DRVCHAR  . . . . . . . . . . . .  	Number	003A	
DRVMSG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-8
                                                             

DSKERR . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ECOMSPEC . . . . . . . . . . . .  	L BYTE 	001E	ENVIRONMENT	Global
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENVARENA . . . . . . . . . . . .  	L BYTE 	0000	ENVIRONMENT	Length = 0010
ENVIREND . . . . . . . . . . . .  	L BYTE 	00B0	ENVIRONMENT	Global
ENVIRONSIZ . . . . . . . . . . .  	Number	00A0	
ENVIRONSIZ2  . . . . . . . . . .  	Number	0092	
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEBAD . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXECEMES . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXECSTART  . . . . . . . . . . .  	L WORD 	0000	TRANTAIL
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_ERR . . . . . . . . . . . .  	L NEAR	0180	CODERES
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXEC_WAIT  . . . . . . . . . . .  	L NEAR	01B2	CODERES
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	
EXTCOM . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXT_EXEC . . . . . . . . . . . .  	L NEAR	01A7	CODERES	Global
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-9
                                                             


FALSE  . . . . . . . . . . . . .  	Number	0000	
FATALC . . . . . . . . . . . . .  	L NEAR	01F9	CODERES
FATALRET . . . . . . . . . . . .  	L NEAR	0214	CODERES
FATALRET2  . . . . . . . . . . .  	L NEAR	021A	CODERES
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FORFLAG  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
FREEPRI  . . . . . . . . . . . .  	Number	0000	
FRETMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External

GETCOM1  . . . . . . . . . . . .  	L NEAR	03E0	CODERES
GETCOMDSK  . . . . . . . . . . .  	L NEAR	03C5	CODERES
GETCOMDSK2 . . . . . . . . . . .  	L NEAR	03A6	CODERES	Global
GETCOMDSK3 . . . . . . . . . . .  	L NEAR	03C8	CODERES
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETRAWFLUSHEDBYTE  . . . . . . .  	L NEAR	03ED	CODERES
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOTECODE . . . . . . . . . . . .  	L NEAR	0251	CODERES
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-10
                                                             

GOTEXECEMES  . . . . . . . . . .  	L NEAR	01A0	CODERES
GOTSWITCH  . . . . . . . . . . .  	Number	8000	

HALTMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
HANDLE01 . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
HAVCOM . . . . . . . . . . . . .  	L NEAR	031A	CODERES
HEADCALL . . . . . . . . . . . .  	V DWORD	0000	TRANSPACE	External
HEADFIX  . . . . . . . . . . . .  	L NEAR	0359	CODERES
HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		
HOPELESS . . . . . . . . . . . .  	L NEAR	03BF	CODERES

IBM  . . . . . . . . . . . . . .  	Alias	 IBMVER		
IBMJAPAN . . . . . . . . . . . .  	Alias	 FALSE		
IBMVER . . . . . . . . . . . . .  	Alias	 FALSE		
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_2E . . . . . . . . . . . . .  	L NEAR	025A	CODERES	Global
INT_2E_RET . . . . . . . . . . .  	V DWORD	0000	DATARES	External
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IO_SAVE  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Alias	 FALSE		
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LINPERPAG  . . . . . . . . . . .  	Number	0017	
LOADCOM  . . . . . . . . . . . .  	L NEAR	03F8	CODERES	Global
LOADING  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LODCOM . . . . . . . . . . . . .  	L NEAR	028B	CODERES	Global
LODCOM1  . . . . . . . . . . . .  	L NEAR	02D0	CODERES	Global
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-11
                                                             

LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
LTPA . . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External

MEMOK  . . . . . . . . . . . . .  	L NEAR	02AB	CODERES
MEMSIZ . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MSVER  . . . . . . . . . . . . .  	Alias	 TRUE		

NEEDCOM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NOCOM  . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NOEXEC . . . . . . . . . . . . .  	L NEAR	01BA	CODERES
NOHANDMES  . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NORMPERLIN . . . . . . . . . . .  	Number	0001	
NOSETSING  . . . . . . . . . . .  	L NEAR	01EA	CODERES
NOSETVER . . . . . . . . . . . .  	L NEAR	02EE	CODERES
NOSNG  . . . . . . . . . . . . .  	L NEAR	02F8	CODERES
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARENT . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PATHSTRING . . . . . . . . . . .  	L BYTE 	0010	ENVIRONMENT	Global
PERMCOM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PIPEFLAG . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PROGSTART  . . . . . . . . . . .  	L NEAR	0100	CODERES
PROMPT . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PSWITCH  . . . . . . . . . . . .  	Number	0002	

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
RBADNAM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-12
                                                             

RDIRCHAR . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
READ . . . . . . . . . . . . . .  	Number	003F	
READCOM  . . . . . . . . . . . .  	L NEAR	0413	CODERES
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REMCHECK . . . . . . . . . . . .  	L NEAR	0350	CODERES
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RESTHAND . . . . . . . . . . . .  	L NEAR	03AC	CODERES	Global
RET10  . . . . . . . . . . . . .  	L NEAR	045D	CODERES
RETCODE  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
RET_2E . . . . . . . . . . . . .  	L NEAR	022D	CODERES
RET_L  . . . . . . . . . . . . .  	NEAR 	03F7	CODERES
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	
RPRINT . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
RSTACK . . . . . . . . . . . . .  	L WORD 	0180	CODERES	Global
RSWITCHAR  . . . . . . . . . . .  	V BYTE 	0000	DATARES	External

SAVE_PDB . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
SAVHAND  . . . . . . . . . . . .  	L NEAR	038A	CODERES	Global
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETVECT  . . . . . . . . . . . .  	L NEAR	045E	CODERES	Global
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SINGLECOM  . . . . . . . . . . .  	V WORD 	0000	DATARES	External
STALL  . . . . . . . . . . . . .  	L NEAR	0212	CODERES
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-13
                                                             

STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
SUM  . . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
SYM  . . . . . . . . . . . . . .  	Number	003E	

THEADFIX . . . . . . . . . . . .  	F PROC	0355	CODERES	Global	Length = 0004
TOOBIG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
TRANDATAEND  . . . . . . . . . .  	V BYTE 	0000	TRANDATA	External
TRANS  . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
TRANSPACEEND . . . . . . . . . .  	V BYTE 	0000	TRANSPACE	External
TRANSTART  . . . . . . . . . . .  	L WORD 	0000	TAIL
TRANVARS . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
TREMCHECK  . . . . . . . . . . .  	F PROC	034C	CODERES	Global	Length = 0004
TRNSEG . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
TRUE . . . . . . . . . . . . . .  	Number	FFFF	
TRYDOOPEN  . . . . . . . . . . .  	L NEAR	040E	CODERES

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USERPATH . . . . . . . . . . . .  	L BYTE 	0015	ENVIRONMENT
USESLASH . . . . . . . . . . . .  	L NEAR	032D	CODERES

VERVAL . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
VSWITCH  . . . . . . . . . . . .  	Number	0010	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WIDEPERLIN . . . . . . . . . . .  	Number	0005	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
WRONGCOM . . . . . . . . . . . .  	L NEAR	043F	CODERES
WRONGCOM1  . . . . . . . . . . .  	L NEAR	0431	CODERES
WSWITCH  . . . . . . . . . . . .  	Number	0001	

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZERO . . . . . . . . . . . . . .  	NEAR 	0000	CODERES
ZZY  . . . . . . . . . . . . . .  	F PROC	01F5	CODERES	Length = 0001

??0000 . . . . . . . . . . . . .  	L NEAR	03F7	CODERES
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 08:23:25

                                                            Symbols-14
                                                             



   2143 Source  Lines
   2214 Total   Lines
    678 Symbols

  15988 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
