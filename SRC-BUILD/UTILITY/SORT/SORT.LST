Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-1
                                                            

       1                                TITLE   SORT FILTER FOR MS-DOS 
       2                                ; 
       3                                ; Sort  /R /+n 
       4                                ; /R -> reverse sort 
       5                                ; /+n -> sort on column n 
       6                                ; 
       7                                ; Written by:   Chris Peters 
       8                                ; 
       9                                ; Modification History: 
      10                                ;           3-18-83 MZ  Fix CR-LF at en
					d of buffer 
      11                                ;                       Fix small file 
					sorting 
      12                                ;                       Fix CR-LF line 
					termination bug 
      13                                ;                       Comment the Dam
					n source 
      14                                ; 
      15 = 0000                         FALSE   EQU     0 
      16 = FFFF                         TRUE    EQU     NOT FALSE 
      17                                 
      18                                ;NOTE:	"internat" must be false if KANJ
					I version 
      19 =                              internat	equ	true 
      20                                ;NOTE:	see above 
      21                                 
      22                                .list 
      23                                 
      24                                sys     MACRO   name                   
					 ; system call macro 
      25                                        MOV     AH,name 
      26                                        INT     21h 
      27                                        ENDM 
      28                                save    MACRO   reglist                
					 ; push those registers 
      29                                IRP reg,<reglist> 
      30                                        PUSH    reg 
      31                                ENDM 
      32                                ENDM 
      33                                restore MACRO   reglist                
					 ; pop those registers 
      34                                IRP reg,<reglist> 
      35                                        POP     reg 
      36                                ENDM 
      37                                ENDM 
      38                                 
      39 = 0100                         MAXREC  EQU     256                    
					 ; MAXIMUM NUL RECORD SIZE 
      40                                 
      41 = 0000                         SPACE   EQU     0                      
					 ; Offset zero in the allocated block 
      42 =                              BUFFER  EQU     MAXREC                 
					 ; Offset MAXREC in the allocated block
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-2
                                                            

      43                                 
      44                                SUBTTL  Segments used in load order 
      45                                 
      46                                 
      47 0000                           CODE    SEGMENT 
      48 0000                           CODE    ENDS 
      49                                 
      50 0000                           CONST   SEGMENT PUBLIC BYTE 
      51 0000                           CONST   ENDS 
      52                                 
      53 0000                           CSTACK  SEGMENT STACK 
      54 0000  0080[                            DB 128 DUP (0)                 
					 ; initial stack to be clear 
      55            00                  
      56                         ]      
      57                                
      58 0080                           CSTACK  ENDS 
      59                                 
      60                                DG      GROUP   CODE,CONST,CSTACK 
      61                                 
      62 0000                           CODE    SEGMENT 
      63                                ASSUME  CS:DG,DS:NOTHING,ES:NOTHING,SS:
					CSTACK 
      64                                 
      65 0000  0000                     COLUMN  DW      0                      
					 ; COLUMN TO USE FOR KEY + 1 
      66 0002  2F                       SWITCH  DB      '/' 
      67                                 
      68 0003                           SORT: 
      69                                ; 
      70                                ; check for proper version number of sy
					stem 
      71                                ; 
      72                                        sys     GET_VERSION 
      73 0003  B4 30                  1         MOV     AH,GET_VERSION
      74 0005  CD 21                  1         INT     21h
      75 0007  86 E0                            XCHG    AH,AL                  
					 ; Turn it around to AH.AL 
      76 0009  3D 0200                          CMP     AX,200H                
					 ; Version 2.00 only 
      77 000C  73 10                            JAE     OKDOS                  
					 ; Success 
      78 000E  BA 0000 E                        MOV     DX,OFFSET DG:BADVER    
					 ; Get error message 
      79 0011  0E                               PUSH    CS                     
					 ; Get DS addressability 
      80 0012  1F                               POP     DS 
      81                                        sys     STD_CON_STRING_OUTPUT  
					 ; Send to STDOUT 
      82 0013  B4 09                  1         MOV     AH,STD_CON_STRING_OUTPU
					T
      83 0015  CD 21                  1         INT     21h
      84 0017  06                               PUSH    ES                     
					 ; long segment 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-3
Segments used in load order                                 

      85 0018  2E: FF 36 0000 R                 PUSH    COLUMN                 
					 ; offset zero 
      86 001D                           LONG_RET    PROC    FAR 
      87 001D  CB                               RET                            
					 ; long return to OS 
      88                                LONG_RET    ENDP 
      89                                ; 
      90                                ; get proper switch character 
      91                                ; 
      92 001E                           OKDOS: 
      93 001E  B0 00                            MOV     AL,0                   
					 ; Get current switch character 
      94                                        sys     CHAR_OPER 
      95 0020  B4 37                  1         MOV     AH,CHAR_OPER
      96 0022  CD 21                  1         INT     21h
      97 0024  2E: 88 16 0002 R                 MOV     SWITCH,DL 
      98                                ; 
      99                                ; parse command line 
     100                                ; 
     101 0029  BE 0080                          MOV     SI,80H                 
					 ; pointer to command line 
     102 002C  FC                               CLD                            
					 ; go left to right 
     103 002D  33 C9                            XOR     CX,CX 
     104 002F  AC                               LODSB 
     105 0030  8A C8                            MOV     CL,AL                  
					 ; CX = length of command line 
     106 0032                           SWITCH_LOOP: 
     107 0032  E8 0077 R                        CALL    GET_CHAR               
					 ; get a character 
     108 0035  2E: 3A 06 0002 R                 CMP     AL,SWITCH              
					 ; beginning of switch? 
     109 003A  75 F6                            JNZ     SWITCH_LOOP            
					 ; No, get next character 
     110 003C  E8 0077 R                        CALL    GET_CHAR               
					 ; get 1st char of switch 
     111 003F  3C 2B                            CMP     AL,'+'                 
					 ; Column to sort? 
     112 0041  74 0F                            JZ      SWITCH_NUMBER          
					 ; Yes, parse a number 
     113 0043  0C 20                            OR      AL,20h                 
					 ; convert to lower case 
     114 0045  3C 72                            CMP     AL,'r'                 
					 ; Reverse sort? 
     115 0047  75 E9                            JNZ     SWITCH_LOOP            
					 ; No, get next switch 
     116 0049  2E: C6 06 01A2 R 72              MOV     CS:CODE_PATCH,72h      
					 ; sleaze JAE into JB 
     117       90                       
     118 0050  EB E0                            JMP     SWITCH_LOOP            
					 ; get next switch 
     119 0052                           SWITCH_NUMBER: 
     120 0052  2E: C7 06 0000 R 0000            MOV     COLUMN,0               
					 ; start off at 0 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-4
Segments used in load order                                 

     121 0059                           SWITCH_NEXT_NUMBER: 
     122 0059  E8 0077 R                        CALL    GET_CHAR               
					 ; get supposed digit 
     123 005C  2C 30                            SUB     AL,'0'                 
					 ; convert to number 
     124 005E  72 D2                            JB      SWITCH_LOOP            
					 ; less than '0' 
     125 0060  3C 09                            CMP     AL,9                   
					 ; is it a valid digit? 
     126 0062  77 CE                            JA      SWITCH_LOOP            
					 ; nope, get next switch 
     127 0064  98                               CBW                            
					 ; make it a full word 
     128 0065  8B D8                            MOV     BX,AX                  
					 ; save byte away 
     129 0067  B8 000A                          MOV     AX,10                  
					 ; decimal number system 
     130 006A  2E: F7 26 0000 R                 MUL     COLUMN                 
					 ; take previous result 
     131 006F  03 C3                            ADD     AX,BX                  
					 ; add in low order digit 
     132 0071  2E: A3 0000 R                    MOV     COLUMN,AX              
					 ; save away value 
     133 0075  EB E2                            JMP     SWITCH_NEXT_NUMBER     
					 ; get next character 
     134 0077                           GET_CHAR: 
     135 0077  E3 03                            JCXZ    END_GET                
					 ; End of line 
     136 0079  49                               DEC     CX                     
					 ; dec char count 
     137 007A  AC                               LODSB                          
					 ; get the character 
     138 007B  C3                               RET                            
					 ; return 
     139 007C                           END_GET: 
     140 007C  58                               POP     AX                     
					 ; nuke return on stack 
     141                                ; 
     142                                ; set up column for proper sort offset 
     143                                ; 
     144 007D                           END_SWITCH: 
     145 007D  2E: 83 06 0000 R 02              ADD     COLUMN,2 
     146 0083  2E: 83 3E 0000 R 02              CMP     COLUMN,2 
     147 0089  74 05                            JZ      GOT_COL 
     148 008B  2E: FF 0E 0000 R                 DEC     COLUMN 
     149                                 
     150                                ; 
     151                                ; Get sorting area, no more than 64K 
     152                                ; 
     153 0090                           GOT_COL: 
     154 0090  BB 1000                          MOV     BX,1000H               
					 ; 64K worth of paragraphs 
     155 0093                           GET_MEM: 
     156                                        sys     ALLOC                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-5
Segments used in load order                                 

					 ; allocate them from somewhere 
     157 0093  B4 48                  1         MOV     AH,ALLOC
     158 0095  CD 21                  1         INT     21h
     159 0097  73 07                            JNC     GOT_MEM                
					 ; if error, BX has amount free, try to
					 get it 
     160 0099  0B DB                            OR      BX,BX                  
					 ; but, is BX = 0? 
     161 009B  75 F6                            JNZ     GET_MEM                
					 ; nope, try to allocate it 
     162 009D  EB 2F 90                         JMP     SIZERR                 
					 ; complain 
     163                                 
     164 00A0                           GOT_MEM: 
     165 00A0  8E D8                            MOV     DS,AX                  
					 ; Point DS to buffer 
     166 00A2  8E C0                            MOV     ES,AX                  
					 ; and point ES to buffer 
     167 00A4  B1 04                            MOV     CL,4                   
					 ; 2^4 bytes per paragraph 
     168 00A6  D3 E3                            SHL     BX,CL                  
					 ; Find out how many bytes we have 
     169                                 
     170                                ; 
     171                                ; clear out temporary record area 
     172                                ; 
     173 00A8  B9 0080                          MOV     CX,MAXREC/2            
					 ; Size of temporary buffer (words) 
     174 00AB  B8 2020                          MOV     AX,'  '                
					 ; Character to fill with 
     175 00AE  BF 0000                          MOV     DI,SPACE               
					 ; Beginning of temp buffer 
     176 00B1  F3/ AB                           REP     STOSW                  
					 ; Blam. 
     177                                ; 
     178                                ; read in file from standard input 
     179                                ; 
     180 00B3  BA 0102                          MOV     DX,BUFFER + 2          
					 ; DX = place to begin reading 
     181 00B6  8B CB                            MOV     CX,BX                  
					 ; CX is the max number to read 
     182 00B8  81 E9 0102                       SUB     CX,MAXREC + 2          
					 ; remember offset of temp buffer 
     183 00BC                           SORTL: 
     184 00BC  33 DB                            XOR     BX,BX                  
					 ; Standard input 
     185                                        sys     READ                   
					 ; Read it in 
     186 00BE  B4 3F                  1         MOV     AH,READ
     187 00C0  CD 21                  1         INT     21h
     188 00C2  03 D0                            ADD     DX,AX                  
					 ; Bump pointer by count read 
     189 00C4  2B C8                            SUB     CX,AX                  
					 ; subtract from remaining the count re
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-6
Segments used in load order                                 

					ad 
     190 00C6  74 06                            JZ      SIZERR                 
					 ; if buffer is full then error 
     191 00C8  0B C0                            OR      AX,AX                  
					 ; no chars read -> end of file 
     192 00CA  75 F0                            JNZ     SORTL                  
					 ; there were chars read. go read again
					 
     193 00CC  EB 17                            JMP     SHORT SIZOK            
					 ; trim last ^Z terminated record 
     194 00CE                           SIZERR: 
     195 00CE  BE 0000 E                        MOV     SI,OFFSET DG:ERRMSG    
					 ; not enough memory error 
     196 00D1                           ERROR_EXIT: 
     197 00D1  0E                               PUSH    CS                     
					 ; DS addressability 
     198 00D2  1F                               POP     DS 
     199 00D3  AD                               LODSW                          
					 ; get length 
     200 00D4  8B C8                            MOV     CX,AX                  
					 ; put into appropriate register 
     201 00D6  8B D6                            MOV     DX,SI                  
					 ; get output destination 
     202 00D8  BB 0002                          MOV     BX,2                   
					 ; output to standard error 
     203                                        sys     WRITE                  
					 ; and write it out 
     204 00DB  B4 40                  1         MOV     AH,WRITE
     205 00DD  CD 21                  1         INT     21h
     206 00DF  B0 01                            MOV     AL,1                   
					 ; return an error code 
     207                                        sys     EXIT 
     208 00E1  B4 4C                  1         MOV     AH,EXIT
     209 00E3  CD 21                  1         INT     21h
     210                                 
     211                                ; 
     212                                ; Look for a ^Z. Terminate buffer at 1s
					t ^Z. 
     213                                ; 
     214 00E5                           SIZOK: 
     215 00E5  8B DA                            MOV     BX,DX                  
					 ; save end pointer 
     216 00E7  8B CA                            MOV     CX,DX                  
					 ; get pointer to end of text 
     217 00E9  81 E9 0102                       SUB     CX,BUFFER+2            
					 ; dif in pointers is count 
     218 00ED  B0 1A                            MOV     AL,1AH                 
					 ; char is ^Z 
     219 00EF  BF 0102                          MOV     DI,BUFFER+2            
					 ; point to beginning of text 
     220 00F2  F2/ AE                           REPNZ   SCASB                  
					 ; find one 
     221 00F4  75 01                            JNZ     NoBack                 
					 ; nope, try to find CRLF 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-7
Segments used in load order                                 

     222 00F6  4B                               DEC     BX                     
					 ; pretend that we didn't see ^Z 
     223 00F7                           NoBack: 
     224 00F7  2B D9                            SUB     BX,CX                  
					 ; sub from endpointer the number left 
     225 00F9  83 EB 02                         SUB     BX,2                   
					 ; Hope for a CR LF at end 
     226 00FC  81 3F 0A0D                       CMP     WORD PTR [BX],0A0Dh    
					 ; Was there one there? 
     227 0100  74 08                            JZ      GOTEND                 
					 ; yep, here is the end 
     228 0102  83 C3 02                         ADD     BX,2                   
					 ; nope, bump back to SCASB spot 
     229 0105  38 07                            CMP     BYTE PTR [BX],AL       
					 ; Was there ^Z there? 
     230 0107  74 01                            JZ      GOTEND                 
					 ; yep, chop it 
     231 0109  43                               INC     BX                     
					 ; Nope, skip last char 
     232 010A                           GOTEND: 
     233 010A  8B EB                            MOV     BP,BX                  
					 ; BP = filesize-2(CRLF)+temp buffer+2 
     234 010C  3E: C7 46 00 0000                MOV     WORD PTR DS:[BP],0     
					 ; 0 at end of the file 
     235                                ; 
     236                                ;  We now turn the entire buffer into a
					 linked list of chains by 
     237                                ;  replacing CRLFs with the length of t
					he following line (with 2 for CRLF) 
     238                                ; 
     239 0112  BB 0100                          MOV     BX,BUFFER              
					 ; pointer to line head (length) 
     240 0115  BF 0102                          MOV     DI,BUFFER+2            
					 ; pointer to line text 
     241 0118                           REPLACE_LOOP: 
     242 0118  B0 0D                            MOV     AL,13                  
					 ; char to look for is CR 
     243 011A  8B CD                            MOV     CX,BP                  
					 ; count = end pointer 
     244 011C  2B CF                            SUB     CX,DI                  
					 ; chop off start point to get length 
     245 011E  41                               INC     CX                     
					 ; add 1??? 
     246 011F                           REPLACE_SCAN: 
     247 011F  F2/ AE                           REPNZ   SCASB                  
					 ; look for CR 
     248 0121  75 05                            JNZ     REPLACE_SKIP           
					 ; count exhausted 
     249 0123  80 3D 0A                         CMP     BYTE PTR [DI],10       
					 ; LF there? 
     250 0126  75 F7                            JNZ     REPLACE_SCAN           
					 ; nope, continue scanning 
     251 0128                           REPLACE_SKIP: 
     252 0128  8B C7                            MOV     AX,DI                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-8
Segments used in load order                                 

					 ; AX to point after CR 
     253 012A  48                               DEC     AX                     
					 ; AX to point to CR 
     254                                        save    <AX>                   
					 ; save pointer 
     255 012B  50                     2         PUSH    AX
     256 012C  2B C3                            SUB     AX,BX                  
					 ; AX is length of line found 
     257 012E  89 07                            MOV     [BX],AX                
					 ; stuff it in previous link 
     258                                        restore <BX>                   
					 ; get pointer to next 
     259 0130  5B                     2         POP     BX
     260 0131  47                               INC     DI                     
					 ; skip LF??? 
     261 0132  E3 02                            JCXZ    END_REPLACE_LOOP       
					 ; no more to scan -> go sort 
     262 0134  EB E2                            JMP     REPLACE_LOOP           
					 ; look for next 
     263                                 
     264 0136                           END_REPLACE_LOOP: 
     265 0136  C7 07 0000                       MOV     WORD PTR [BX],0        
					 ; terminate file with nul 
     266 013A  8D 6F 02                         LEA     BP,[BX+2]              
					 ; remember the null line at end 
     267 013D  BF 0100                          MOV     DI,BUFFER              
					 ; DI is start of unsorted section 
     268                                 
     269                                ; 
     270                                ; begin sort. Outer loop steps over all
					 unsorted lines 
     271                                ; 
     272 0140                           OUTER_SORT_LOOP: 
     273 0140  8B DF                            MOV     BX,DI                  
					 ; BX is start of unsorted section 
     274 0142  8B F3                            MOV     SI,BX                  
					 ; SI is scanning place link 
     275 0144  83 3F 00                         CMP     WORD PTR [BX],0        
					 ; are we at the end of the buffer? 
     276 0147  75 03                            JNZ     INNER_SORT_LOOP        
					 ; No, do inner process 
     277 0149  E9 01E9 R                        JMP     END_OUTER_SORT_LOOP    
					 ; yes, go dump out 
     278                                 
     279                                ; 
     280                                ; BX points to best guy found so far. W
					e scan through the sorted section 
     281                                ; to find an appropriate insertion poin
					t 
     282                                ; 
     283 014C                           INNER_SORT_LOOP: 
     284 014C  03 34                            ADD     SI,[SI]                
					 ; link to next fellow 
     285 014E  8B 04                            MOV     AX,[SI]                
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-9
Segments used in load order                                 

					 ; get length of comparison guy 
     286 0150  0B C0                            OR      AX,AX                  
					 ; test for end of buffer 
     287 0152  74 54                            JZ      END_INNER_SORT_LOOP    
					 ; if zero then figure out insertion 
     288                                        save    <SI,DI>                
					 ; save SI,DI 
     289 0154  56                     2         PUSH    SI
     290 0155  57                     2         PUSH    DI
     291 0156  8B FB                            MOV     DI,BX                  
					 ; DI = pointer to tester link 
     292 0158  2E: 2B 06 0000 R                 SUB     AX,COLUMN              
					 ; adjust length for column 
     293 015D  77 06                            JA      AXOK                   
					 ; more chars in tester than column? 
     294 015F  BE 0000                          MOV     SI,SPACE               
					 ; point SI to blank area 
     295 0162  B8 0100                          MOV     AX,MAXREC              
					 ; make AX be max length 
     296 0165                           AXOK: 
     297 0165  8B 15                            MOV     DX,[DI]                
					 ; get length of best guy 
     298 0167  2E: 2B 16 0000 R                 SUB     DX,COLUMN              
					 ; adjust length for column 
     299 016C  77 06                            JA      DXOK                   
					 ; there are more chars after column 
     300 016E  BF 0000                          MOV     DI,SPACE               
					 ; point air to a space 
     301 0171  BA 0100                          MOV     DX,MAXREC              
					 ; really big record 
     302 0174                           DXOK: 
     303 0174  8B C8                            MOV     CX,AX                  
					 ; AX is shortest record 
     304 0176  3B C2                            CMP     AX,DX                  
					 ; perhaps DX is shorter 
     305 0178  72 02                            JB      SMALL                  
					 ; nope, leace CX alone 
     306 017A  8B CA                            MOV     CX,DX                  
					 ; DX is shorter, put length in CX 
     307 017C                           SMALL: 
     308 017C  2E: 03 3E 0000 R                 ADD     DI,COLUMN              
					 ; offset into record 
     309 0181  2E: 03 36 0000 R                 ADD     SI,COLUMN              
					 ; offset into other record 
     310                                	endif 
     311                                if	internat 
     312 0186  53                       	push	bx 
     313 0187  50                       	push	ax 
     314 0188  BB 0000 E                	mov	bx,offset dg:table 
     315 018B  AC                       tloop:	lodsb 
     316 018C  2E: D7                   	xlat	byte ptr cs:[bx] 
     317 018E  8A E0                    	mov	ah,al 
     318 0190  26: 8A 05                	mov	al,es:[di] 
     319 0193  47                       	inc	di 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-10
Segments used in load order                                 

     320 0194  2E: D7                   	xlat	byte ptr cs:[bx] 
     321 0196  3A E0                    	cmp	ah,al 
     322 0198  E1 F1                    	loopz	tloop 
     323 019A  58                       	pop	ax 
     324 019B  5B                       	pop	bx 
     325                                	endif 
     326                                        restore <DI,SI>                
					 ; get head pointers back 
     327 019C  5F                     2         POP     DI
     328 019D  5E                     2         POP     SI
     329 019E  75 02                            JNZ     TESTED_NOT_EQUAL       
					 ; didn't exhaust counter, conditions s
					et 
     330 01A0  3B C2                            CMP     AX,DX                  
					 ; check string lengths 
     331 01A2                           TESTED_NOT_EQUAL: 
     332                                ; 
     333                                ; note! jae is patched to a jbe if file
					 is to be sorted in reverse! 
     334                                ; 
     335 01A2                           CODE_PATCH LABEL BYTE 
     336 01A2  73 A8                            JAE     INNER_SORT_LOOP        
					 ; if this one wasn't better then go ag
					ain 
     337 01A4  8B DE                            MOV     BX,SI                  
					 ; it was better, save header 
     338 01A6  EB A4                            JMP     INNER_SORT_LOOP        
					 ; and scan again 
     339                                 
     340 01A8                           END_INNER_SORT_LOOP: 
     341 01A8  8B F3                            MOV     SI,BX                  
					 ; SI is now the best person 
     342 01AA  3B F7                            CMP     SI,DI                  
					 ; check best for current 
     343 01AC  74 36                            JZ      END_INSERT             
					 ; best equals current, all done 
     344                                 
     345                                ; 
     346                                ; SI points to best line found so far 
     347                                ; DI points to a place to insert this l
					ine 
     348                                ; DI is guaranteed to be < SI 
     349                                ; make room for line at destination 
     350                                ; 
     351 01AE  8B 14                            MOV     DX,[SI]                
					 ; get length of line 
     352                                        save    <SI,DI>                
					 ; save positions of people 
     353 01B0  56                     2         PUSH    SI
     354 01B1  57                     2         PUSH    DI
     355 01B2  FD                               STD                            
					 ; go right to left 
     356 01B3  8B CD                            MOV     CX,BP                  
					 ; get end of file pointer 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-11
Segments used in load order                                 

     357 01B5  2B CF                            SUB     CX,DI                  
					 ; get length from destination to end 
     358 01B7  8B F5                            MOV     SI,BP                  
					 ; start from end 
     359 01B9  4E                               DEC     SI                     
					 ; SI points to end of file 
     360 01BA  8B FE                            MOV     DI,SI                  
					 ; destination is end of file 
     361 01BC  03 FA                            ADD     DI,DX                  
					 ; DI points to new end of file 
     362 01BE  F3/ A4                           REP     MOVSB                  
					 ; blam. Move every one up 
     363 01C0  FC                               CLD                            
					 ; back left to right 
     364                                        restore <DI,SI>                
					 ; get old source and destination 
     365 01C1  5F                     2         POP     DI
     366 01C2  5E                     2         POP     SI
     367                                ; 
     368                                ;  MOVE NEW LINE INTO PLACE 
     369                                ; 
     370                                        save    <DI>                   
					 ; save destination 
     371 01C3  57                     2         PUSH    DI
     372 01C4  03 F2                            ADD     SI,DX                  
					 ; adjust for previous movement 
     373                                        save    <SI>                   
					 ; save this value 
     374 01C6  56                     2         PUSH    SI
     375 01C7  8B CA                            MOV     CX,DX                  
					 ; get number to move 
     376 01C9  F3/ A4                           REP     MOVSB                  
					 ; blam. move the new line in 
     377                                        restore <SI,DI>                
					 ; get back destination and new source 
     378 01CB  5E                     2         POP     SI
     379 01CC  5F                     2         POP     DI
     380                                ; 
     381                                ;  DELETE LINE FROM OLD PLACE 
     382                                ; 
     383                                        save    <DI>                   
					 ; save destination 
     384 01CD  57                     2         PUSH    DI
     385 01CE  8B CD                            MOV     CX,BP                  
					 ; pointer to end 
     386 01D0  03 CA                            ADD     CX,DX                  
					 ; remember bump 
     387 01D2  2B CE                            SUB     CX,SI                  
					 ; get count of bytes to move 
     388 01D4  41                               INC     CX                     
					 ; turn it into a word 
     389 01D5  D1 E9                            SHR     CX,1                   
					 ; or a count of words 
     390 01D7  8B FE                            MOV     DI,SI                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-12
Segments used in load order                                 

					 ; new destination of move 
     391 01D9  03 F2                            ADD     SI,DX                  
					 ; offset of block 
     392 01DB  F3/ A5                           REP     MOVSW                  
					 ; blam, squeeze out the space 
     393                                        restore <DI>                   
					 ; get back original destination 
     394 01DD  5F                     2         POP     DI
     395 01DE  3E: C7 46 FE 0000                MOV     WORD PTR DS:[BP-2],0   
					 ; remake the end of file mark 
     396                                 
     397 01E4                           END_INSERT: 
     398 01E4  03 3D                            ADD     DI,[DI]                
					 ; link to next guy 
     399 01E6  E9 0140 R                        JMP     OUTER_SORT_LOOP        
					 ; and continue 
     400                                ; 
     401                                ;       PUT BACK IN THE CR-LF 
     402                                ; 
     403 01E9                           END_OUTER_SORT_LOOP: 
     404 01E9  BF 0100                          MOV     DI,BUFFER              
					 ; start at beginning (where else) 
     405 01EC  8B 0D                            MOV     CX,[DI]                
					 ; count of butes 
     406                                 
     407 01EE                           INSERT_LOOP: 
     408 01EE  03 F9                            ADD     DI,CX                  
					 ; point to next length 
     409 01F0  8B 0D                            MOV     CX,[DI]                
					 ; get length 
     410 01F2  C7 05 0A0D                       MOV     WORD PTR [DI],0A0DH    
					 ; replace length with CRLF 
     411 01F6  83 F9 00                         CMP     CX,0                   
					 ; check for end of file 
     412 01F9  75 F3                            JNZ     INSERT_LOOP            
					 ; nope, try again 
     413                                 
     414 01FB                           WRITE_FILE: 
     415 01FB  BA 0102                          MOV     DX,BUFFER+2            
					 ; get starting point 
     416 01FE  8B CD                            MOV     CX,BP                  
					 ; pointer to end of buffer 
     417 0200  2B CA                            SUB     CX,DX                  
					 ; dif in pointers is number of bytes 
     418 0202  BB 0001                          MOV     BX,1                   
					 ; to standard output 
     419                                        sys     WRITE                  
					 ; write 'em out 
     420 0205  B4 40                  1         MOV     AH,WRITE
     421 0207  CD 21                  1         INT     21h
     422 0209  72 04                            JC      BADWRT                 
					 ; some bizarre error -> flag it 
     423 020B  3B C1                            CMP     AX,CX                  
					 ; did we write what was expected? 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-13
Segments used in load order                                 

     424 020D  74 06                            JZ      WRTOK                  
					 ; yes, say bye bye 
     425 020F                           BADWRT: 
     426 020F  BE 0000 E                        MOV     SI,OFFSET dg:ERRMSG2   
					 ; strange write error 
     427 0212  E9 00D1 R                        JMP     ERROR_EXIT             
					 ; bye bye 
     428 0215                           WRTOK: 
     429 0215  32 C0                            XOR     AL,AL                  
					 ; perfect return (by convention) 
     430                                        sys     EXIT                   
					 ; bye! 
     431 0217  B4 4C                  1         MOV     AH,EXIT
     432 0219  CD 21                  1         INT     21h
     433                                 
     434 021B                           CODE    ENDS 
     435                                 
     436 0000                           CONST   SEGMENT PUBLIC BYTE 
     437                                        EXTRN   BADVER:BYTE,ERRMSG:BYTE
					,ERRMSG2:BYTE 
     438                                if	internat 
     439                                	extrn	table:byte 
     440                                	endif 
     441 0000                           CONST   ENDS 
     442                                 
     443                                SUBTTL  Initialized Data 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Page     1-14
Initialized Data                                            

     444                                PAGE 
     445 0080                           CSTACK   SEGMENT STACK 
     446 0080  0060[                             DB      96 dup (0) 
     447            00                  
     448                         ]      
     449                                
     450 00E0                           CSTACK   ENDS 
     451                                 
     452                                        END     SORT 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RESTORE  . . . . . . . . . . . .  	   3
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SAVE . . . . . . . . . . . . . .  	   3
SHORT_ADDR . . . . . . . . . . .  	  12
SYS  . . . . . . . . . . . . . .  	   2
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-2
                                                             

  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-3
                                                             

  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-4
                                                             

  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DG . . . . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	021B	PARA	NONE	
  CONST  . . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  CSTACK . . . . . . . . . . . .  	00E0	PARA	STACK	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-5
                                                             

ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	
AXOK . . . . . . . . . . . . . .  	L NEAR	0165	CODE

BADVER . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADWRT . . . . . . . . . . . . .  	L NEAR	020F	CODE
BUFFER . . . . . . . . . . . . .  	Alias	 MAXREC		
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CODE_PATCH . . . . . . . . . . .  	L BYTE 	01A2	CODE
COLUMN . . . . . . . . . . . . .  	L WORD 	0000	CODE
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-6
                                                             

CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
DXOK . . . . . . . . . . . . . .  	L NEAR	0174	CODE

END_GET  . . . . . . . . . . . .  	L NEAR	007C	CODE
END_INNER_SORT_LOOP  . . . . . .  	L NEAR	01A8	CODE
END_INSERT . . . . . . . . . . .  	L NEAR	01E4	CODE
END_OUTER_SORT_LOOP  . . . . . .  	L NEAR	01E9	CODE
END_REPLACE_LOOP . . . . . . . .  	L NEAR	0136	CODE
END_SWITCH . . . . . . . . . . .  	L NEAR	007D	CODE
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-7
                                                             

ERRMSG . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
ERRMSG2  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_EXIT . . . . . . . . . . .  	L NEAR	00D1	CODE
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-8
                                                             

FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GET_CHAR . . . . . . . . . . . .  	L NEAR	0077	CODE
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_MEM  . . . . . . . . . . . .  	L NEAR	0093	CODE
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOTEND . . . . . . . . . . . . .  	L NEAR	010A	CODE
GOT_COL  . . . . . . . . . . . .  	L NEAR	0090	CODE
GOT_MEM  . . . . . . . . . . . .  	L NEAR	00A0	CODE

INNER_SORT_LOOP  . . . . . . . .  	L NEAR	014C	CODE
INSERT_LOOP  . . . . . . . . . .  	L NEAR	01EE	CODE
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNAT . . . . . . . . . . . .  	Alias	 TRUE		
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

KEEP_PROCESS . . . . . . . . . .  	Number	0031	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-9
                                                             


LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LONG_RET . . . . . . . . . . . .  	F PROC	001D	CODE	Length = 0001
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAXREC . . . . . . . . . . . . .  	Number	0100	
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		

NOBACK . . . . . . . . . . . . .  	L NEAR	00F7	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OKDOS  . . . . . . . . . . . . .  	L NEAR	001E	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
OUTER_SORT_LOOP  . . . . . . . .  	L NEAR	0140	CODE

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
REPLACE_LOOP . . . . . . . . . .  	L NEAR	0118	CODE
REPLACE_SCAN . . . . . . . . . .  	L NEAR	011F	CODE
REPLACE_SKIP . . . . . . . . . .  	L NEAR	0128	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-10
                                                             

RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SIZERR . . . . . . . . . . . . .  	L NEAR	00CE	CODE
SIZOK  . . . . . . . . . . . . .  	L NEAR	00E5	CODE
SMALL  . . . . . . . . . . . . .  	L NEAR	017C	CODE
SORT . . . . . . . . . . . . . .  	L NEAR	0003	CODE
SORTL  . . . . . . . . . . . . .  	L NEAR	00BC	CODE
SPACE  . . . . . . . . . . . . .  	Number	0000	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
SWITCH . . . . . . . . . . . . .  	L BYTE 	0002	CODE
SWITCH_LOOP  . . . . . . . . . .  	L NEAR	0032	CODE
SWITCH_NEXT_NUMBER . . . . . . .  	L NEAR	0059	CODE
SWITCH_NUMBER  . . . . . . . . .  	L NEAR	0052	CODE

TABLE  . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
TESTED_NOT_EQUAL . . . . . . . .  	L NEAR	01A2	CODE
TLOOP  . . . . . . . . . . . . .  	L NEAR	018B	CODE
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:39:42

SORT FILTER FOR MS-DOS                                      Symbols-11
                                                             

UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_FILE . . . . . . . . . . .  	L NEAR	01FB	CODE
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
WRTOK  . . . . . . . . . . . . .  	L NEAR	0215	CODE

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	


   1654 Source  Lines
   1783 Total   Lines
    536 Symbols

  22126 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
