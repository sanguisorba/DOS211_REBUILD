Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-1
                                                            

       1                                ;MS-DOS PRINT program for background pr
					inting of text files to the list 
       2                                ;        device.  INT 28H is a software
					 interrupt generated by the  DOS 
       3                                ;        in  its  I/O  wait  loops.   T
					his spooler can be assembled for 
       4                                ;        operation using only this inte
					rrupt  which  is  portable  from 
       5                                ;        system to  system.  It may als
					o be assembled to use a hardware 
       6                                ;        timer interrupt in addition to
					  the  software  INT  28H.   The 
       7                                ;        purpose  of  using hardware in
					terrupts is to allow printing to 
       8                                ;        continue during programs which
					 do not  enter  the  system  and 
       9                                ;        therefore causes the INT 28H t
					o go away.  A timer interrupt is 
      10                                ;        chosen in preference to a  "pr
					inter  buffer  empty"  interrupt 
      11                                ;        because  PRINT  in the timer f
					orm is generic.  It can be given 
      12                                ;        the name of any currently inst
					alled character  device  as  the 
      13                                ;        "printer",  this  makes  it  p
					ortable  to  devices  which  are 
      14                                ;        installed by the user even in 
					the hardware case.  It could  be 
      15                                ;        modified to use a buffer empty
					 interrupt (no code is given for 
      16                                ;        this case), if this is done th
					e PROMPT and BADMES messages and 
      17                                ;        their associated  code should 
					be removed as PRINT will then be 
      18                                ;        device specific. 
      19                                ; 
      20                                ;  VERSION      1.00    07/03/82 
      21                                 
      22                                 
      23 = 0000                         FALSE   EQU     0 
      24 = FFFF                         TRUE    EQU     NOT FALSE 
      25                                 
      26 =                              IBM     EQU     TRUE 
      27 =                              IBMVER  EQU     IBM 
      28 =                              MSVER   EQU     FALSE 
      29                                 
      30                                        ENDIF 
      31                                 
      32                                        IF      IBM 
      33 =                              HARDINT EQU     TRUE 
      34 = 001C                         INTLOC  EQU     1CH             ;Hardwa
					re interrupt location (Timer) 
      35 =                              AINT    EQU     TRUE            ;Acknow
					ledge interrupts 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-2
                                                            

      36 = 0020                         EOI     EQU     20H             ;End Of
					 Interrupt "instruction" 
      37 = 0020                         AKPORT  EQU     20H             ;Interr
					upt Acknowledge port 
      38                                        ENDIF 
      39                                 
      40                                ;The following values have to do with t
					he ERRCNT variable and the 
      41                                ;  CNTMES message. The values define le
					vels at wich it is assumed 
      42                                ;  an off-line error exists. ERRCNT1 de
					fines the value of ERRCNT above 
      43                                ;  which the CNTMES message is printed 
					by the transient. ERRCNT2 
      44                                ;  defines the value of ERRCNT above wh
					ich the resident will give up 
      45                                ;  trying to print messages on the prin
					ter, it is much greater than 
      46                                ;  ERRCNT1 because a much tighter loop 
					is involved. The bounding event 
      47                                ;  which determines the correct value i
					s the time required to do a 
      48                                ;  form feed. 
      49                                 
      50                                        IF      IBM 
      51 = 03E8                         ERRCNT1 EQU     1000 
      52 = 4E20                         ERRCNT2 EQU     20000 
      53                                        ENDIF 
      54                                 
      55                                        IF      HARDINT 
      56 = 0008                         TIMESLICE EQU   8               ;The PR
					INT scheduling time slice. PRINT 
      57                                                                ; lets 
					this many "ticks" go by before 
      58                                                                ; using
					 a time slice to pump out characters. 
      59                                                                ; Setti
					ng this to 3 for instance means PRINT 
      60                                                                ; Will 
					skip 3 slices, then take the fourth. 
      61                                                                ; Thus 
					using up 1/4 of the CPU. Setting it 
      62                                                                ; to on
					e gives PRINT 1/2 of the CPU. 
      63                                                                ; The a
					bove examples assume MAXTICK is 
      64                                                                ; 1. Th
					e actual PRINT CPU percentage is 
      65                                                                ; (MAXT
					ICK/(1+TIMESLICE))*100 
      66                                 
      67 = 0002                         MAXTICK EQU     2               ;The PR
					INT in timeslice. PRINT will pump 
      68                                                                ; out c
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-3
                                                            

					haracters for this many clock ticks 
      69                                                                ; and t
					hen exit. The selection of a value 
      70                                                                ; for t
					his is dependent on the timer rate. 
      71                                 
      72 = 0001                         BUSYTICK EQU    1               ;If PRI
					NT sits in a wait loop waiting for 
      73                                                                ; outpu
					t device to come ready for this 
      74                                                                ; many 
					ticks, it gives up its time slice. 
      75                                                                ; Setti
					ng it greater than or equal to 
      76                                                                ; MAXTI
					CK causes it to be ignored. 
      77                                 
      78                                ;User gets TIMESLICE ticks and then PRI
					NT takes MAXTICK ticks unless BUSYTICK 
      79                                ;       ticks go by without getting a c
					haracter out. 
      80                                        ENDIF 
      81                                 
      82                                 
      83                                ;WARNING DANGER WARNING: 
      84                                ;   PRINT is a systems utility. It is c
					learly understood that it may have 
      85                                ;   to be entirely re-written for futur
					e versions of MS-DOS. The following 
      86                                ;   TWO vectors are version specific, t
					hey may not exist at all in future 
      87                                ;   versions. If they do exist, they ma
					y function differently. 
      88                                ; ANY PROGRAM WHICH IMITATES PRINTS USE
					 OF THESE VECTORS IS ALSO A SYSTEMS 
      89                                ; UTILITY AND IS THEREFORE NOT VERSION 
					PORTABLE IN ANY WAY SHAPE OR FORM. 
      90                                ; YOU HAVE BEEN WARNED, "I DID IT THE S
					AME WAY PRINT DID" IS NOT AN REASON 
      91                                ; TO EXPECT A PROGRAM TO WORK ON FUTURE
					 VERSIONS OF MS-DOS. 
      92 = 0028                         SOFTINT EQU     28H             ;Softwa
					re interrupt generated by DOS 
      93 = 002F                         COMINT  EQU     2FH             ;Commun
					ications interrupt used by PRINT 
      94                                                                ;  This
					 vector number is DOS reserved. It 
      95                                                                ;  is n
					ot generally available to programs 
      96                                                                ;  othe
					r than PRINT. 
      97                                 
      98 = 0200                         BLKSIZ  EQU     512             ;Size o
					f the PRINT I/O block in bytes 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-4
                                                            

      99 = 0028                         FCBSIZ  EQU     40              ;Size o
					f an FCB 
     100                                 
     101                             C          INCLUDE DOSSYM.ASM 
     102                             C  include DOSMAC.ASM 
     103                             C  ; 
     104                             C  ; Macro file for MSDOS. 
     105                             C  ; 
     106                             C   
     107                             C  SUBTTL BREAK a listing into pages and g
					ive new subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-5
BREAK a listing into pages and give new subtitles           

     108                             C  PAGE 
     109                             C  BREAK MACRO subtitle 
     110                             C   SUBTTL subtitle 
     111                             C   PAGE 
     112                             C  ENDM 
     113                             C   
     114                             C  BREAK <I_NEED: declare a variable exter
					nal, if necessary, and allocate a size>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

     115                             C   
     116                             C  ; 
     117                             C  ; declare a variable external and alloc
					ate a size 
     118                             C  ; 
     119                             C  I_NEED MACRO sym,len 
     120                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
     121                             C   IFIDN <len>,<WORD> 
     122                             C   EXTRN &sym:WORD 
     123                             C   ELSE 
     124                             C   IFIDN <len>,<DWORD> 
     125                             C   EXTRN &sym:DWORD 
     126                             C   ELSE 
     127                             C   EXTRN &sym:BYTE 
     128                             C   ENDIF 
     129                             C   ENDIF 
     130                             C   DATA ENDS 
     131                             C  ENDM 
     132                             C   
     133                             C  ; 
     134                             C  ; call a procedure that may be external
					. The call will be short. 
     135                             C  ; 
     136                             C  invoke MACRO name 
     137                             C  .xcref 
     138                             C   IF2 
     139                             C   IFNDEF name 
     140                             C   EXTRN name:NEAR 
     141                             C   ENDIF 
     142                             C   ENDIF 
     143                             C  .cref 
     144                             C   CALL name 
     145                             C  ENDM 
     146                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

     147                             C  PAGE 
     148                             C  ; 
     149                             C  ; jump to a label that may be external.
					 The jump will be near. 
     150                             C  ; 
     151                             C  transfer MACRO name 
     152                             C  .xcref 
     153                             C   IF2 
     154                             C   IFNDEF name 
     155                             C   EXTRN name:NEAR 
     156                             C   ENDIF 
     157                             C   ENDIF 
     158                             C  .cref 
     159                             C   JUMP name 
     160                             C  ENDM 
     161                             C   
     162                             C  ; 
     163                             C  ; get a short address in a word 
     164                             C  ; 
     165                             C  short_addr MACRO name 
     166                             C   IFDIF <name>,<?> 
     167                             C  .xcref 
     168                             C   IF2 
     169                             C   IFNDEF name 
     170                             C   EXTRN name:NEAR 
     171                             C   ENDIF 
     172                             C   ENDIF 
     173                             C  .cref 
     174                             C   DW OFFSET DOSGROUP:name 
     175                             C   ELSE 
     176                             C   DW ? 
     177                             C   ENDIF 
     178                             C  ENDM 
     179                             C   
     180                             C  ; 
     181                             C  ; get a long address in a dword 
     182                             C  ; 
     183                             C  long_addr MACRO name 
     184                             C  .xcref 
     185                             C   IF2 
     186                             C   IFNDEF name 
     187                             C   EXTRN name:NEAR 
     188                             C   ENDIF 
     189                             C  .cref 
     190                             C   DD name 
     191                             C  ENDM 
     192                             C   
     193                             C  ; 
     194                             C  ; declare a PROC near or far but PUBLIC
					 nonetheless 
     195                             C  ; 
     196                             C  procedure MACRO name,distance 
     197                             C   PUBLIC name 
     198                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

     199                             C  ENDM 
     200                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

     201                             C  PAGE 
     202                             C  ; 
     203                             C  ; define a data item to be public and o
					f an appropriate size/type 
     204                             C  ; 
     205                             C  I_AM MACRO name,size 
     206                             C   PUBLIC name 
     207                             C   
     208                             C   IFIDN <size>,<WORD> 
     209                             C  name DW ? 
     210                             C   ELSE 
     211                             C   IFIDN <size>,<DWORD> 
     212                             C  name DD ? 
     213                             C   ELSE 
     214                             C   IFIDN <size>,<BYTE> 
     215                             C  name DB ? 
     216                             C   ELSE 
     217                             C  name DB size DUP (?) 
     218                             C   ENDIF 
     219                             C   ENDIF 
     220                             C   ENDIF 
     221                             C  ENDM 
     222                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-10
I_NEED: declare a variable external, if necessary, and alloc

     223                             C  PAGE 
     224                             C  ; 
     225                             C  ; call the macro chain 
     226                             C  ; 
     227                             C  do_ext macro 
     228                             C  endm 
     229                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-11
I_NEED: declare a variable external, if necessary, and alloc

     230                             C  PAGE 
     231                             C   
     232                             C  ; 
     233                             C  ; define an entry in a procedure 
     234                             C  ; 
     235                             C  entry macro name 
     236                             C   PUBLIC name 
     237                             C  name: 
     238                             C  endm 
     239                             C   
     240                             C  BREAK <ERROR - print a message and then
					 jump to a label> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-12
ERROR - print a message and then jump to a label            

     241                             C   
     242                             C  error macro code 
     243                             C   local a 
     244                             C  .xcref 
     245                             C   MOV AL,code 
     246                             C   transfer SYS_RET_ERR 
     247                             C  .cref 
     248                             C  ENDM 
     249                             C   
     250                             C  BREAK <JUMP - real jump that links up s
					hortwise> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-13
JUMP - real jump that links up shortwise                    

     251                             C  ; 
     252                             C  ; given a label <lbl> either 2 byte jum
					p to another label <lbl>_J 
     253                             C  ; if it is near enough or 3 byte jump t
					o <lbl> 
     254                             C  ; 
     255                             C   
     256                             C  jump macro lbl 
     257                             C   local a 
     258                             C  .xcref 
     259                             C   a: 
     260                             C   ifndef lbl&_J ;; is this the first inv
					ocation 
     261                             C   JMP lbl 
     262                             C   ELSE 
     263                             C   IF lbl&_J GE $ 
     264                             C   JMP lbl 
     265                             C   ELSE 
     266                             C   IF ($-lbl&_J) GT 126 ;; is the jump to
					o far away? 
     267                             C   JMP lbl 
     268                             C   ELSE ;; do the short one... 
     269                             C   JMP lbl&_J 
     270                             C   ENDIF 
     271                             C   ENDIF 
     272                             C   ENDIF 
     273                             C   lbl&_j = a 
     274                             C  .cref 
     275                             C  endm 
     276                             C   
     277                             C  BREAK <RETURN - return from a function>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-14
RETURN - return from a function                             

     278                             C   
     279                             C  return macro 
     280                             C   local a 
     281                             C  .xcref 
     282                             C  a: 
     283                             C   RET 
     284                             C  ret_l = a 
     285                             C  .cref 
     286                             C  endm 
     287                             C   
     288                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-15
CONDRET - conditional return                                

     289                             C   
     290                             C  makelab macro l,cc,ncc 
     291                             C   local a 
     292                             C   j&ncc a ;; j<NCC> a: 
     293                             C   return ;; return 
     294                             C   a: ;; a: 
     295                             C   ret_&cc = ret_l ;; define ret_<CC> to 
					be ret_l 
     296                             C  endm 
     297                             C   
     298                             C  condret macro cc,ncc 
     299                             C   local a,b 
     300                             C   ifdef ret_l ;; if ret_l is defined 
     301                             C   if (($ - ret_l) le 126) and ($ gt ret_
					l) 
     302                             C   ;; if ret_l is near enough then 
     303                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
     304                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     305                             C   else 
     306                             C   makelab a,cc,ncc 
     307                             C   endif 
     308                             C   else 
     309                             C   ifdef ret_&cc ;; if ret_<CC> defined 
     310                             C   if (($ - ret_&cc) le 126) and ($ gt re
					t_&cc) 
     311                             C   ;; if ret_<CC> is near enough 
     312                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC
					> 
     313                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     314                             C   else 
     315                             C   makelab a,cc,ncc 
     316                             C   endif 
     317                             C   else 
     318                             C   makelab a,cc,ncc 
     319                             C   endif 
     320                             C   endif 
     321                             C  endm 
     322                             C  ;condret macro cc,ncc 
     323                             C  ; local a,b 
     324                             C  ; ifdef ret_l ; if ret_l is defined 
     325                             C  ; if (($ - ret_l) le 126) and ($ gt ret
					_l) 
     326                             C  ; ; if ret_l is near enough then 
     327                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
     328                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     329                             C  ; exitm 
     330                             C  ; endif 
     331                             C  ; endif 
     332                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
     333                             C  ; if (($ - ret_&cc) le 126) and ($ gt r
					et_&cc) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-16
CONDRET - conditional return                                

     334                             C  ; ; if ret_<CC> is near enough 
     335                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC
					> 
     336                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     337                             C  ; exitm 
     338                             C  ; endif 
     339                             C  ; endif 
     340                             C  ; j&ncc a ; j<NCC> a: 
     341                             C  ; return ; return 
     342                             C  ; a: ; a: 
     343                             C  ; ret_&cc = ret_l ; define ret_<CC> to 
					be ret_l 
     344                             C  ;endm 
     345                             C  ; 
     346                             C  BREAK <RETZ - return if zero, links up 
					shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-17
RETZ - return if zero, links up shortwise if necessary      

     347                             C   
     348                             C  retz macro 
     349                             C   condret z,nz 
     350                             C  endm 
     351                             C   
     352                             C  BREAK <RETNZ - return if not zero, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-18
RETNZ - return if not zero, links up shortwise if necessary 

     353                             C   
     354                             C  retnz macro 
     355                             C   condret nz,z 
     356                             C  endm 
     357                             C   
     358                             C  BREAK <RETC - return if carry set, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-19
RETC - return if carry set, links up shortwise if necessary 

     359                             C   
     360                             C  retc macro 
     361                             C   condret c,nc 
     362                             C  endm 
     363                             C   
     364                             C  BREAK <RETNC - return if not carry, lin
					ks up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-20
RETNC - return if not carry, links up shortwise if necessary

     365                             C   
     366                             C  retnc macro 
     367                             C   condret nc,c 
     368                             C  endm 
     369                             C   
     370                             C  BREAK <CONTEXT - set the DOS context to
					 a particular register> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-21
CONTEXT - set the DOS context to a particular register      

     371                             C   
     372                             C  context macro r 
     373                             C   PUSH SS 
     374                             C   POP r 
     375                             C   ASSUME r:DOSGROUP 
     376                             C  endm 
     377                             C   
     378                             C  IF2 
     379                             C      %OUT    DOSSYM in Pass 2 
     380                             C  ENDIF 
     381                             C   
     382                             C  ENDIF 
     383                             C   
     384 = 0002                      C  DOS_MAJOR_VERSION   EQU      2 
     385 = 000B                      C  DOS_MINOR_VERSION   EQU     11 
     386                             C   
     387                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-22
Control character definitions                               

     388                             C   
     389 = 007F                      C  c_DEL       EQU     7Fh         ;    AS
					CII rubout or delete previous char 
     390 = 0008                      C  c_BS        EQU     08h         ; ^H AS
					CII backspace 
     391 = 000D                      C  c_CR        EQU     0Dh         ; ^M AS
					CII carriage return 
     392 = 000A                      C  c_LF        EQU     0Ah         ; ^J AS
					CII linefeed 
     393 = 0017                      C  c_ETB       EQU     17h         ; ^W AS
					CII end of transmission 
     394 = 0015                      C  c_NAK       EQU     15h         ; ^U AS
					CII negative acknowledge 
     395 = 0003                      C  c_ETX       EQU     03h         ; ^C AS
					CII end of text 
     396 = 0009                      C  c_HT        EQU     09h         ; ^I AS
					CII tab 
     397                             C   
     398                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-23
BPB Definition                                              

     399                             C   
     400                             C   
     401                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     402                             C  ;                                      
					                                    ; 
     403                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     404                             C  ;                                      
					                                    ; 
     405                             C  ; Certain structures, constants and sys
					tem  calls  below  are  private  to ; 
     406                             C  ; the DOS  and  are  extremely  version
					-dependent.  They may change at any ; 
     407                             C  ; time at  the  implementors'  whim.   
					As  a  result,  they  must  not  be ; 
     408                             C  ; documented to  the  general  public. 
					  If  an  extreme case arises, they ; 
     409                             C  ; must be documented with this warning.
					                                    ; 
     410                             C  ;                                      
					                                    ; 
     411                             C  ; Those structures and constants that a
					re subject to  the  above  will  be ; 
     412                             C  ; marked and bracketed with the flag:  
					                                    ; 
     413                             C  ;                                      
					                                    ; 
     414                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     415                             C  ;                                      
					                                    ; 
     416                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     417                             C   
     418                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-24
Bios Parameter Block                                        

     419                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     420                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     421                             C  ;                                      
					                                    ; 
     422                             C   
     423                             C  ; Bios Parameter Block definition 
     424                             C  ; This structure is used to build a ful
					l DPB 
     425                             C   
     426                             C  BPBLOCK STRUC 
     427 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes
					 of physical sector 
     428 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc
					 unit 
     429 0003  ????                  C  BPRES   DW      ?       ; Number of res
					erved sectors 
     430 0005  ??                    C  BPFTCNT DB      ?       ; Number of FAT
					s 
     431 0006  ????                  C  BPDRCNT DW      ?       ; Number of dir
					ectory entries 
     432 0008  ????                  C  BPSCCNT DW      ?       ; Total number 
					of sectors 
     433 000A  ??                    C  BPMEDIA DB      ?       ; Media descrip
					tor byte 
     434 000B  ????                  C  BPFTSEC DW      ?       ; Number of sec
					tors taken up by one FAT 
     435 000D                        C  BPBLOCK ENDS 
     436                             C  ;                                      
					                                    ; 
     437                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     438                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     439                             C   
     440                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-25
Disk I/O Buffer Header                                      

     441                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     442                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     443                             C  ;                                      
					                                    ; 
     444                             C   
     445                             C  ; Field definition for I/O buffer infor
					mation 
     446                             C   
     447                             C  BUFFINFO        STRUC 
     448 0000  ????????              C  NEXTBUF         DD      ?       ; Point
					er to next buffer in list 
     449                             C  ; The next two items are often refed as
					 a word 
     450 0004  ??                    C  BUFDRV          DB      ?       ; Logic
					al drive # assoc with buffer FF = free 
     451 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty
					 flag 
     452 0006  ??                    C  BUFPRI          DB      ?       ; Buffe
					r selection priority (see EQUs below) 
     453 0007  ??                    C  VISIT           DB      ?       ; Visit
					 flag for buffer pool scans 
     454 0008  ????                  C  BUFSECNO        DW      ?       ; Secto
					r number of buffer 
     455                             C  ; The next two items are often refed as
					 a word 
     456 000A  ??                    C  BUFWRTCNT       DB      ?       ; For F
					AT sectors, # times sector written out 
     457 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "
					     "   , # sectors between each write
					 
     458 000C  ????????              C  BUFDRVDP        DD      ?       ; Point
					er to drive parameters 
     459 0010                        C  BUFFINFO        ENDS 
     460                             C   
     461 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
     462                             C                                  ; Size 
					of structure in bytes 
     463                             C   
     464 = 0000                      C  FREEPRI EQU     0 
     465 = 0002                      C  LBRPRI  EQU     2               ; Last 
					byte of buffer read 
     466 = 0004                      C  LBWPRI  EQU     4               ; Last 
					byte written 
     467 = 0006                      C  RPRI    EQU     6               ; Read 
					but not last byte 
     468 = 0008                      C  WPRI    EQU     8               ; Writt
					en but not last byte 
     469 = 000F                      C  DIRPRI  EQU     15              ; Direc
					tory Sector 
     470 = 001E                      C  FATPRI  EQU     30              ; FAT s
					ector 
     471                             C  ;                                      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-26
Disk I/O Buffer Header                                      

					                                    ; 
     472                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     473                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     474                             C   
     475                             C  BREAK <User stack inside of system call
					> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-27
User stack inside of system call                            

     476                             C  ; Location of user registers relative u
					ser stack pointer 
     477                             C   
     478                             C  user_environ    STRUC 
     479 0000  ????                  C  user_AX     DW      ? 
     480 0002  ????                  C  user_BX     DW      ? 
     481 0004  ????                  C  user_CX     DW      ? 
     482 0006  ????                  C  user_DX     DW      ? 
     483 0008  ????                  C  user_SI     DW      ? 
     484 000A  ????                  C  user_DI     DW      ? 
     485 000C  ????                  C  user_BP     DW      ? 
     486 000E  ????                  C  user_DS     DW      ? 
     487 0010  ????                  C  user_ES     DW      ? 
     488 0012  ????                  C  user_IP     DW      ? 
     489 0014  ????                  C  user_CS     DW      ? 
     490 0016  ????                  C  user_F      DW      ? 
     491 0018                        C  user_environ    ENDS 
     492                             C   
     493                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-28
interrupt definitions                                       

     494                             C   
     495 = 0020                      C  INTTAB          EQU     20H 
     496 = 0080                      C  INTBASE         EQU     4 * inttab 
     497 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
     498                             C   
     499                             C          ENDIF 
     500                             C   
     501                             C  ; 
     502                             C  ; interrupt assignments 
     503                             C  ; 
     504                             C          IF      NOT ALTVECT 
     505 =                           C  int_abort           EQU     INTTAB     
					     ; abort process 
     506 = 0021                      C  int_command         EQU     int_abort+1
					     ; call MSDOS 
     507 = 0022                      C  int_terminate       EQU     int_abort+2
					     ; int to terminate address 
     508 = 0023                      C  int_ctrl_c          EQU     int_abort+3
					     ; ^c trapper 
     509 = 0024                      C  int_fatal_abort     EQU     int_abort+4
					     ; hard disk error 
     510 = 0025                      C  int_disk_read       EQU     int_abort+5
					     ; logical sector disk read 
     511 = 0026                      C  int_disk_write      EQU     int_abort+6
					     ; logical sector disk write 
     512 = 0027                      C  int_keep_process    EQU     int_abort+7
					     ; terminate program and stay 
     513                             C                                         
					     ; resident 
     514                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     515                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     516                             C  ;                                      
					                                    ; 
     517 = 0028                      C  int_spooler         EQU     int_abort+8
					     ; spooler call 
     518 = 0029                      C  int_fastcon         EQU     int_abort+9
					     ; fast CON interrupt 
     519                             C  ;                                      
					                                    ; 
     520                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     521                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     522                             C          ENDIF 
     523                             C   
     524 = 0080                      C  addr_int_abort          EQU    4 * int_
					abort 
     525 = 0084                      C  addr_int_command        EQU    4 * int_
					command 
     526 = 0088                      C  addr_int_terminate      EQU    4 * int_
					terminate 
     527 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-29
interrupt definitions                                       

					ctrl_c 
     528 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_
					fatal_abort 
     529 = 0094                      C  addr_int_disk_read      EQU    4 * int_
					disk_read 
     530 = 0098                      C  addr_int_disk_write     EQU    4 * int_
					disk_write 
     531 = 009C                      C  addr_int_keep_process   EQU    4 * int_
					keep_process 
     532                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     533                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     534                             C  ;                                      
					                                    ; 
     535 = 00A0                      C  addr_int_spooler        EQU    4 * int_
					spooler 
     536 = 00A4                      C  addr_int_fastcon        EQU    4 * int_
					fastcon 
     537                             C  ;                                      
					                                    ; 
     538                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     539                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     540                             C   
     541                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-30
Disk map                                                    

     542                             C  ;  MSDOS partitions the disk into 4 sec
					tions: 
     543                             C  ; 
     544                             C  ;  phys sector 0:   +------------------
					-+ 
     545                             C  ;       |           | boot/reserved    
					 | 
     546                             C  ;       |           +------------------
					-+ 
     547                             C  ;       |           |  File allocation 
					 | 
     548                             C  ;       v           |      table(s)    
					 | 
     549                             C  ;                   |  (multiple copies
					 | 
     550                             C  ;                   |     are kept)    
					 | 
     551                             C  ;                   +------------------
					-+ 
     552                             C  ;                   |     Directory    
					 | 
     553                             C  ;                   +------------------
					-+ 
     554                             C  ;                   |     File space   
					 | 
     555                             C  ;                   +------------------
					-+ 
     556                             C  ;                   |   Unaddressable  
					 | 
     557                             C  ;                   |  (to end of disk)
					 | 
     558                             C  ;                   +------------------
					-+ 
     559                             C  ; 
     560                             C  ; All partition boundaries are sector b
					oundaries.  The size of the FAT is 
     561                             C  ; adjusted to maximize the file space a
					ddressable. 
     562                             C   
     563                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-31
Directory entry                                             

     564                             C   
     565                             C  ; 
     566                             C  ;       +---------------------------+ 
     567                             C  ;       |  (12 BYTE) filename/ext   |  
					     0       0 
     568                             C  ;       +---------------------------+ 
     569                             C  ;       |     (BYTE) attributes     |  
					     11      B 
     570                             C  ;       +---------------------------+ 
     571                             C  ;       |    (10 BYTE) reserved     |  
					     12      C 
     572                             C  ;       +---------------------------+ 
     573                             C  ;       | (WORD) time of last write |  
					     22      16 
     574                             C  ;       +---------------------------+ 
     575                             C  ;       | (WORD) date of last write |  
					     24      18 
     576                             C  ;       +---------------------------+ 
     577                             C  ;       |   (WORD) First cluster    |  
					     26      1A 
     578                             C  ;       +---------------------------+ 
     579                             C  ;       |     (DWORD) file size     |  
					     28      1C 
     580                             C  ;       +---------------------------+ 
     581                             C  ; 
     582                             C  ;   First byte of filename  = E5 -> fre
					e directory entry 
     583                             C  ;                           = 00 -> end
					 of allocated directory 
     584                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-
					10=minute, 11-15=hour 
     585                             C  ;   Date:   Bits 0-4=day, bits 5-8=mont
					h, bits 9-15=year-1980 
     586                             C  ; 
     587                             C  dir_entry   STRUC 
     588 0000  000B[                 C  dir_name    DB      11 DUP (?)         
					 ; file name 
     589            ??               C  
     590                         ]   C  
     591                             C  
     592 000B  ??                    C  dir_attr    DB      ?                  
					 ; attribute bits 
     593 000C  000A[                 C  dir_pad     DB      10 DUP (?)         
					 ; reserved for expansion 
     594            ??               C  
     595                         ]   C  
     596                             C  
     597 0016  ????                  C  dir_time    DW      ?                  
					 ; time of last write 
     598 0018  ????                  C  dir_date    DW      ?                  
					 ; date of last write 
     599 001A  ????                  C  dir_first   DW      ?                  
					 ; first allocation unit of file 
     600 001C  ????                  C  dir_size_l  DW      ?                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-32
Directory entry                                             

					 ; low 16 bits of file size 
     601 001E  ????                  C  dir_size_h  DW      ?                  
					 ; high 16 bits of file size 
     602 0020                        C  dir_entry   ENDS 
     603                             C   
     604 = 0001                      C  attr_read_only      EQU      1h 
     605 = 0002                      C  attr_hidden         EQU      2h 
     606 = 0004                      C  attr_system         EQU      4h 
     607 = 0008                      C  attr_volume_id      EQU      8h 
     608 = 0010                      C  attr_directory      EQU     10h 
     609 = 0020                      C  attr_archive        EQU     20h 
     610                             C   
     611 = 0016                      C  attr_all            EQU     attr_hidden
					+attr_system+attr_directory 
     612                             C                                         
					 ; OR of hard attributes for FINDENTRY 
     613                             C   
     614 = 0021                      C  attr_ignore         EQU     attr_read_o
					nly+attr_archive 
     615                             C                                         
					 ; ignore this(ese) attribute(s) during
					 
     616                             C                                         
					 ; search first/next 
     617                             C   
     618 = 0027                      C  attr_changeable     EQU     attr_read_o
					nly+attr_hidden+attr_system+attr_archiv
					e 
     619                             C                                         
					 ; changeable via CHMOD 
     620                             C   
     621                             C  BREAK <File allocation Table informatio
					n> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-33
File allocation Table information                           

     622                             C  ; 
     623                             C  ; The File Allocation Table uses a 12-b
					it entry for each allocation unit on 
     624                             C  ; the disk.  These entries are packed, 
					two for every three bytes.  The content
					s 
     625                             C  ; of entry number N is found by 1) mult
					iplying N by 1.5; 2) adding the result 
     626                             C  ; to the base address of the Allocation
					 Table; 3) fetching the 16-bit word 
     627                             C  ; at this address; 4) If N was odd (so 
					that N*1.5 was not an integer), shift 
     628                             C  ; the word right four bits; 5) mask to 
					12 bits (AND with 0FFF hex).  Entry 
     629                             C  ; number zero is used as an end-of-file
					 trap in the OS and is passed to the 
     630                             C  ; BIOS to help determine disk format.  
					Entry 1 is reserved for future use. 
     631                             C  ; The first available allocation unit i
					s assigned entry number two, and even 
     632                             C  ; though it is the first, is called clu
					ster 2.  Entries greater than 0FF8H 
     633                             C  ; are end of file marks; entries of zer
					o are unallocated.  Otherwise, the 
     634                             C  ; contents of a FAT entry is the number
					 of the next cluster in the file. 
     635                             C  ; 
     636                             C  ; Clusters with bad sectors are tagged 
					with FF7H.  Any non-zero number would 
     637                             C  ; do because these clusters show as all
					ocated, but are not part of any 
     638                             C  ; allocation chain and thus will never 
					be allocated to a file.  A particular 
     639                             C  ; number is selected so that disk check
					ing programs know what to do (ie.  a 
     640                             C  ; cluster with entry FF7H which is not 
					in a chain is not an error). 
     641                             C   
     642                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-34
DPB structure                                               

     643                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     644                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     645                             C  ;                                      
					                                    ; 
     646                             C   
     647 = 0040                      C  DIRSTRLEN       EQU     64      ; Max l
					ength in bytes of directory strings 
     648                             C   
     649                             C  dpb     STRUC 
     650 0000  ??                    C  dpb_drive           DB      ?   ; Logic
					al drive # assoc with DPB (A=0,B=1,...)
					 
     651 0001  ??                    C  dpb_UNIT            DB      ?   ; Drive
					r unit number of DPB 
     652 0002  ????                  C  dpb_sector_size     DW      ?   ; Size 
					of physical sector in bytes 
     653 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Secto
					rs/cluster - 1 
     654 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 
					of sectors/cluster 
     655 0006  ????                  C  dpb_first_FAT       DW      ?   ; Start
					ing record of FATs 
     656 0008  ??                    C  dpb_FAT_count       DB      ?   ; Numbe
					r of FATs for this drive 
     657 0009  ????                  C  dpb_root_entries    DW      ?   ; Numbe
					r of directory entries 
     658 000B  ????                  C  dpb_first_sector    DW      ?   ; First
					 sector of first cluster 
     659 000D  ????                  C  dpb_max_cluster     DW      ?   ; Numbe
					r of clusters on drive + 1 
     660 000F  ??                    C  dpb_FAT_size        DB      ?   ; Numbe
					r of records occupied by FAT 
     661 0010  ????                  C  dpb_dir_sector      DW      ?   ; Start
					ing record of directory 
     662 0012  ????????              C  dpb_driver_addr     DD      ?   ; Point
					er to driver 
     663 0016  ??                    C  dpb_media           DB      ?   ; Media
					 byte 
     664 0017  ??                    C  dpb_first_access    DB      ?   ; This 
					is initialized to -1 to force a media 
     665                             C                                  ; check
					 the first time this DPB is used 
     666 0018  ????????              C  dpb_next_dpb        DD      ?   ; Point
					er to next Drive parameter block 
     667 001C  ????                  C  dpb_current_dir     DW      ?   ; Clust
					er number of start of current directory
					 
     668                             C                                  ; 0 ind
					icates root, -1 indicates invalid (disk
					 
     669                             C                                  ; ?  ch
					anged) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-35
DPB structure                                               

     670 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN D
					UP(?) 
     671            ??               C  
     672                         ]   C  
     673                             C  
     674                             C                                  ; ASCIZ
					 string of current directory 
     675 005E                        C  dpb     ENDS 
     676                             C   
     677 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size 
					of the structure in bytes 
     678                             C   
     679 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size 
					of disk (temp used during init only) 
     680                             C  ;                                      
					                                    ; 
     681                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     682                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     683                             C   
     684                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-36
File Control Block definition                               

     685                             C  ; 
     686                             C  ; Field definition for FCBs 
     687                             C  ; The FCB has the following structure: 
     688                             C  ; 
     689                             C  ;       +---------------------------+ 
     690                             C  ;       |   Drive indicator(byte)   | 
     691                             C  ;       +---------------------------+ 
     692                             C  ;       |    Filename (8 chars)     | 
     693                             C  ;       +---------------------------+ 
     694                             C  ;       |    Extension (3 chars)    | 
     695                             C  ;       +---------------------------+ 
     696                             C  ;       |   Current Extent(word)    | 
     697                             C  ;       +---------------------------+ 
     698                             C  ;       |    Record size (word)     | 
     699                             C  ;       +---------------------------+ 
     700                             C  ;       |    File Size (2 words)    | 
     701                             C  ;       +---------------------------+ 
     702                             C  ;       |       Date of write       | 
     703                             C  ;       +---------------------------+ 
     704                             C  ;       |       Time of write       | 
     705                             C  ;       +---------------------------+ 
     706                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     707                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     708                             C  ;                                      
					                                    ; 
     709                             C  ;       | Flags:                    | 
     710                             C  ;       |  bit 7=0 file/1 device    | 
     711                             C  ;       |  bit 6=0 if dirty         | 
     712                             C  ;       |  bits 0-5 deviceid        | 
     713                             C  ;       +---------------------------+ 
     714                             C  ;       |   first cluster in file   | 
     715                             C  ;       +---------------------------+ 
     716                             C  ;       | position of last cluster  | 
     717                             C  ;       +---------------------------+ 
     718                             C  ;       |   last cluster accessed   |  
					 12 bit-+--- packed in 3 bytes 
     719                             C  ;       +---------------------------+  
					        | 
     720                             C  ;       |     parent directory      |  
					 <------+ 
     721                             C  ;       +---------------------------+ 
     722                             C  ;                                      
					                                    ; 
     723                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     724                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     725                             C  ;       |    next record number     | 
     726                             C  ;       +---------------------------+ 
     727                             C  ;       |   random record number    | 
     728                             C  ;       +---------------------------+ 
     729                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-37
File Control Block definition                               

     730                             C   
     731                             C  sys_fcb     STRUC 
     732 0000  ??                    C  fcb_drive   DB      ? 
     733 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
     734            ??               C  
     735                         ]   C  
     736                             C  
     737 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
     738            ??               C  
     739                         ]   C  
     740                             C  
     741 000C  ????                  C  fcb_EXTENT  DW      ? 
     742 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of r
					ecord (user settable) 
     743 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of f
					ile in bytes; used with the following 
     744                             C                              ; word 
     745 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SE
					ARCH FIRST and SEARCH NEXT 
     746 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of l
					ast writing 
     747 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of l
					ast writing 
     748                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     749                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     750                             C  ;                                      
					                                    ; 
     751 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID
					 number, bits 0-5 if file. 
     752                             C                              ; bit 7=0 f
					or file, bit 7=1 for I/O device 
     753                             C                              ; If file, 
					bit 6=0 if dirty 
     754                             C                              ; If I/O de
					vice, bit 6=0 if EOF (input) 
     755                             C                              ;          
					     Bit 5=1 if Raw mode 
     756                             C                              ;          
					     Bit 0=1 if console input device 
     757                             C                              ;          
					     Bit 1=1 if console output device 
     758                             C                              ;          
					     Bit 2=1 if null device 
     759                             C                              ;          
					     Bit 3=1 if clock device 
     760 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First clu
					ster of file 
     761 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position 
					of last cluster accessed 
     762 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last clus
					ter accessed and directory pack 2 12 
     763 001F  ??                    C              DB      ?       ; bit numbe
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-38
File Control Block definition                               

					rs into 24 bits... 
     764                             C  ;                                      
					                                    ; 
     765                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     766                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     767 0020  ??                    C  fcb_NR      DB      ?       ; Next reco
					rd 
     768 0021  0004[                 C  fcb_RR      DB      4 DUP (?)          
					     ; Random record 
     769            ??               C  
     770                         ]   C  
     771                             C  
     772 0025                        C  sys_fcb     ENDS 
     773                             C   
     774 = 0010                      C  FILDIRENT       = fcb_FILSIZ           
					 ; Used only by SEARCH FIRST and SEARCH
					 
     775                             C                                         
					 ; NEXT 
     776                             C   
     777                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     778                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     779                             C  ;                                      
					                                    ; 
     780 = 0040                      C  devid_file_clean        EQU     40h    
					 ; true if file and not written 
     781 = 003F                      C  devid_file_mask_drive   EQU     3Fh    
					 ; mask for drive number 
     782                             C   
     783 = 0080                      C  devid_device            EQU     80h    
					 ; true if a device 
     784 = 0040                      C  devid_device_EOF        EQU     40h    
					 ; true if end of file reached 
     785 = 0020                      C  devid_device_raw        EQU     20h    
					 ; true if in raw mode 
     786 = 0010                      C  devid_device_special    EQU     10h    
					 ; true if special device 
     787 = 0008                      C  devid_device_clock      EQU     08h    
					 ; true if clock device 
     788 = 0004                      C  devid_device_null       EQU     04h    
					 ; true if null device 
     789 = 0002                      C  devid_device_con_out    EQU     02h    
					 ; true if console output 
     790 = 0001                      C  devid_device_con_in     EQU     01h    
					 ; true if consle input 
     791                             C   
     792                             C  ; 
     793                             C  ; structure of devid field as returned 
					by IOCTL is: 
     794                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-39
File Control Block definition                               

     795                             C  ;       BIT     7   6   5   4   3   2  
					 1   0 
     796                             C  ;             |---|---|---|---|---|---|
					---|---| 
     797                             C  ;             | I | E | R | S | I | I |
					 I | I | 
     798                             C  ;             | S | O | A | P | S | S |
					 S | S | 
     799                             C  ;             | D | F | W | E | C | N |
					 C | C | 
     800                             C  ;             | E |   |   | C | L | U |
					 O | I | 
     801                             C  ;             | V |   |   | L | K | L |
					 T | N | 
     802                             C  ;             |---|---|---|---|---|---|
					---|---| 
     803                             C  ;       ISDEV = 1 if this channel is a 
					device 
     804                             C  ;             = 0 if this channel is a 
					disk file 
     805                             C  ; 
     806                             C  ;       If ISDEV = 1 
     807                             C  ; 
     808                             C  ;             EOF = 0 if End Of File on
					 input 
     809                             C  ;             RAW = 1 if this device is
					 in Raw mode 
     810                             C  ;                 = 0 if this device is
					 cooked 
     811                             C  ;             ISCLK = 1 if this device 
					is the clock device 
     812                             C  ;             ISNUL = 1 if this device 
					is the null device 
     813                             C  ;             ISCOT = 1 if this device 
					is the console output 
     814                             C  ;             ISCIN = 1 if this device 
					is the console input 
     815                             C  ; 
     816                             C  ;       If ISDEV = 0 
     817                             C  ;             EOF = 0 if channel has be
					en written 
     818                             C  ;             Bits 0-5  are  the  block
					  device  number  for 
     819                             C  ;                 the channel (0 = A, 1
					 = B, ...) 
     820                             C  ; 
     821 = 0080                      C  devid_ISDEV     EQU     80h 
     822 = 0040                      C  devid_EOF       EQU     40h 
     823 = 0020                      C  devid_RAW       EQU     20h 
     824 = 0010                      C  devid_SPECIAL   EQU     10H 
     825 = 0008                      C  devid_ISCLK     EQU     08h 
     826 = 0004                      C  devid_ISNUL     EQU     04h 
     827 = 0002                      C  devid_ISCOT     EQU     02h 
     828 = 0001                      C  devid_ISCIN     EQU     01h 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-40
File Control Block definition                               

     829                             C   
     830 = 001F                      C  devid_block_dev EQU     1Fh            
					 ; mask for block device number 
     831                             C   
     832                             C  ; 
     833                             C  ; find first/next buffer 
     834                             C  ; 
     835                             C  find_buf    STRUC 
     836 0000  ??                    C  find_buf_sattr      DB  ?           ; a
					ttribute of search 
     837 0001  ??                    C  find_buf_drive      DB  ?           ; d
					rive of search 
     838 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; f
					ormatted name 
     839            ??               C  
     840                         ]   C  
     841                             C  
     842 000D  ????                  C  find_buf_LastEnt    DW  ?           ; L
					astEnt 
     843 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; T
					his DPB 
     844 0013  ????                  C  find_buf_DirStart   DW  ?           ; D
					irStart 
     845                             C  ;                                      
					                                    ; 
     846                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     847                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     848                             C   
     849 0015  ??                    C  find_buf_attr       DB  ?           ; a
					ttribute found 
     850 0016  ????                  C  find_buf_time       DW  ?           ; t
					ime 
     851 0018  ????                  C  find_buf_date       DW  ?           ; d
					ate 
     852 001A  ????                  C  find_buf_size_l     DW  ?           ; l
					ow(size) 
     853 001C  ????                  C  find_buf_size_h     DW  ?           ; h
					igh(size) 
     854 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; p
					acked name 
     855            ??               C  
     856                         ]   C  
     857                             C  
     858 002B                        C  find_buf    ENDS 
     859                             C   
     860                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-41
Process data block                                          

     861                             C  ; 
     862                             C  ; Process data block (otherwise known a
					s program header) 
     863                             C  ; 
     864                             C   
     865 = 0014                      C  FilPerProc          EQU     20 
     866                             C   
     867                             C  Process_data_block  STRUC 
     868 0000  ????                  C  PDB_Exit_Call       DW      ?          
					 ; INT int_abort system terminate 
     869 0002  ????                  C  PDB_block_len       DW      ?          
					 ; size of execution block 
     870 0004  ??                    C                      DB      ? 
     871 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)      
					 ; ancient call to system 
     872            ??               C  
     873                         ]   C  
     874                             C  
     875 000A  ????????              C  PDB_Exit            DD      ?          
					 ; pointer to exit routine 
     876 000E  ????????              C  PDB_Ctrl_C          DD      ?          
					 ; pointer to ^C routine 
     877 0012  ????????              C  PDB_Fatal_abort     DD      ?          
					 ; pointer to fatal error 
     878                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     879                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     880                             C  ;                                      
					                                    ; 
     881 0016  ????                  C  PDB_Parent_PID      DW      ?          
					 ; PID of parent (terminate PID) 
     882 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP 
					(?) 
     883            ??               C  
     884                         ]   C  
     885                             C  
     886                             C                                         
					 ; indices into system table 
     887                             C  ;                                      
					                                    ; 
     888                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     889                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     890 002C  ????                  C  PDB_environ         DW      ?          
					 ; seg addr of environment 
     891                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     892                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     893                             C  ;                                      
					                                    ; 
     894 002E  ????????              C  PDB_User_stack      DD      ?          
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-42
Process data block                                          

					 ; stack of self during system calls 
     895 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?)
					 
     896            ??               C  
     897                         ]   C  
     898                             C  
     899                             C  ;                                      
					                                    ; 
     900                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     901                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     902 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)  
					 ; portable method of system call 
     903            ??               C  
     904                         ]   C  
     905                             C  
     906                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     907                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     908                             C  ;                                      
					                                    ; 
     909 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?) 
					 ; 
     910            ??               C  
     911                         ]   C  
     912                             C  
     913                             C  ;                                      
					                                    ; 
     914                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     915                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     916 005B                        C  Process_data_block  ENDS 
     917                             C   
     918                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-43
EXEC and EXE file structures                                

     919                             C  ; 
     920                             C  ; EXEC arg block - load/go program 
     921                             C  ; 
     922                             C   
     923                             C  ; 
     924                             C  ; The following get used as arguments t
					o the EXEC system call.  They indicate 
     925                             C  ; whether or not the program is execute
					d or whether or not a program header 
     926                             C  ; gets created. 
     927                             C  ; 
     928 = 0001                      C  exec_func_no_execute    EQU 1          
					 ; no execute bit 
     929 = 0002                      C  exec_func_overlay       EQU 2          
					 ; overlay bit 
     930                             C   
     931                             C  Exec0           STRUC 
     932 0000  ????                  C  Exec0_environ   DW      ?              
					 ; seg addr of environment 
     933 0002  ????????              C  Exec0_com_line  DD      ?              
					 ; pointer to asciz command line 
     934 0006  ????????              C  Exec0_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     935 000A  ????????              C  Exec0_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     936 000E                        C  Exec0           ENDS 
     937                             C   
     938                             C  Exec1           STRUC 
     939 0000  ????                  C  Exec1_environ   DW      ?              
					 ; seg addr of environment 
     940 0002  ????????              C  Exec1_com_line  DD      ?              
					 ; pointer to asciz command line 
     941 0006  ????????              C  Exec1_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     942 000A  ????????              C  Exec1_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     943 000E  ????                  C  Exec1_SP        DW      ?              
					 ; stack pointer of program 
     944 0010  ????                  C  Exec1_SS        DW      ?              
					 ; stack seg register of program 
     945 0012  ????                  C  Exec1_IP        DW      ?              
					 ; entry point IP 
     946 0014  ????                  C  Exec1_CS        DW      ?              
					 ; entry point CS 
     947 0016                        C  Exec1           ENDS 
     948                             C   
     949                             C  Exec3           STRUC 
     950 0000  ????                  C  Exec3_load_addr DW      ?              
					 ; seg address of load point 
     951 0002  ????                  C  Exec3_reloc_fac DW      ?              
					 ; relocation factor 
     952 0004                        C  Exec3           ENDS 
     953                             C   
     954                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-44
EXEC and EXE file structures                                

     955                             C  ; Exit codes in upper byte 
     956                             C  ; 
     957 = 0000                      C  Exit_terminate      EQU     0 
     958 = 0000                      C  Exit_abort          EQU     0 
     959 = 0001                      C  Exit_Ctrl_C         EQU     1 
     960 = 0002                      C  Exit_Hard_Error     EQU     2 
     961 = 0003                      C  Exit_Keep_process   EQU     3 
     962                             C   
     963                             C  ; 
     964                             C  ; EXE file header 
     965                             C  ; 
     966                             C   
     967                             C  EXE_file    STRUC 
     968 0000  ????                  C  exe_signature   DW  ?                  
					 ; must contain 4D5A  (yay zibo!) 
     969 0002  ????                  C  exe_len_mod_512 DW  ?                  
					 ; low 9 bits of length 
     970 0004  ????                  C  exe_pages       DW  ?                  
					 ; number of 512b pages in file 
     971 0006  ????                  C  exe_rle_count   DW  ?                  
					 ; count of reloc entries 
     972 0008  ????                  C  exe_par_dir     DW  ?                  
					 ; number of paragraphs before image 
     973 000A  ????                  C  exe_min_BSS     DW  ?                  
					 ; minimum number of para of BSS 
     974 000C  ????                  C  exe_max_BSS     DW  ?                  
					 ; max number of para of BSS 
     975 000E  ????                  C  exe_SS          DW  ?                  
					 ; stack of image 
     976 0010  ????                  C  exe_SP          DW  ?                  
					 ; SP of image 
     977 0012  ????                  C  exe_chksum      DW  ?                  
					 ; checksum  of file (ignored) 
     978 0014  ????                  C  exe_IP          DW  ?                  
					 ; IP of entry 
     979 0016  ????                  C  exe_CS          DW  ?                  
					 ; CS of entry 
     980 0018  ????                  C  exe_rle_table   DW  ?                  
					 ; byte offset of reloc table 
     981 001A  ????                  C  exe_iov         DW  ?                  
					 ; overlay number (0 for root) 
     982 001C  ????????              C  exe_sym_tab     DD  ?                  
					 ; offset of symbol table in file 
     983 0020                        C  EXE_file    ENDS 
     984                             C   
     985 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
     986 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
     987                             C   
     988                             C  symbol_entry    STRUC 
     989 0000  ????????              C  sym_value       DD  ? 
     990 0004  ????                  C  sym_type        DW  ? 
     991 0006  ??                    C  sym_len         DB  ? 
     992 0007  00FF[                 C  sym_name        DB  255 dup (?) 
     993            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-45
EXEC and EXE file structures                                

     994                         ]   C  
     995                             C  
     996 0106                        C  symbol_entry    ENDS 
     997                             C   
     998                             C  BREAK <Internal system file table forma
					t> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-46
Internal system file table format                           

     999                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1000                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1001                             C  ;                                      
					                                    ; 
    1002                             C  ; 
    1003                             C  ; system file table 
    1004                             C  ; 
    1005                             C   
    1006                             C  sft             STRUC 
    1007 0000  ????????              C  sft_link        DD      ? 
    1008 0004  ????                  C  sft_count       DW      ?              
					 ; number of entries 
    1009 0006  ????                  C  sft_table       DW      ?              
					 ; beginning of array of the following 
    1010 0008                        C  sft             ENDS 
    1011                             C   
    1012                             C  ; 
    1013                             C  ; system file table entry 
    1014                             C  ; 
    1015                             C   
    1016                             C  sf_entry        STRUC 
    1017 0000  ??                    C  sf_ref_count    DB      ?              
					 ; number of processes sharing fcb 
    1018 0001  ??                    C  sf_mode         DB      ?              
					 ; mode of access 
    1019 0002  ??                    C  sf_attr         DB      ?              
					 ; attribute of file 
    1020 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) 
					DUP (?) 
    1021            ??               C  
    1022                         ]   C  
    1023                             C  
    1024                             C                                         
					 ; actual FCB 
    1025 0028                        C  sf_entry        ENDS 
    1026                             C   
    1027 = 0005                      C  sf_default_number   EQU     5h 
    1028                             C  ;                                      
					                                    ; 
    1029                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1030                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1031                             C   
    1032                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-47
Memory arena structure                                      

    1033                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1034                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1035                             C  ;                                      
					                                    ; 
    1036                             C  ; 
    1037                             C  ; arena item 
    1038                             C  ; 
    1039                             C  arena   STRUC 
    1040 0000  ??                    C  arena_signature     DB  ?              
					 ; 4D for valid item, 5A for last item 
    1041 0001  ????                  C  arena_owner         DW  ?              
					 ; owner of arena item 
    1042 0003  ????                  C  arena_size          DW  ?              
					 ; size in paragraphs of item 
    1043 0005                        C  arena   ENDS 
    1044                             C   
    1045                             C  ; 
    1046                             C  ; Current structure of the data returne
					d by the international call 
    1047                             C  ; 
    1048                             C   
    1049                             C  internat_block STRUC 
    1050 0000  ????                  C  Date_tim_format DW      ?           ; 0
					-USA, 1-EUR, 2-JAP 
    1051 0002  ??                    C  Currency_sym    DB      ?           ; C
					urrency Symbol 5 bytes 
    1052 0003  ??                    C                  DB      ? 
    1053 0004  ??                    C                  DB      ? 
    1054 0005  ??                    C                  DB      ? 
    1055 0006  ??                    C                  DB      ? 
    1056 0007  ??                    C  Thous_sep       DB      ?           ; T
					housands separator 2 bytes 
    1057 0008  ??                    C                  DB      ? 
    1058 0009  ??                    C  Decimal_sep     DB      ?           ; D
					ecimal separator 2 bytes 
    1059 000A  ??                    C                  DB      ? 
    1060 000B  ??                    C  Date_sep        DB      ?           ; D
					ate separator 2 bytes 
    1061 000C  ??                    C                  DB      ? 
    1062 000D  ??                    C  Time_sep        DB      ?           ; D
					ecimal separator 2 bytes 
    1063 000E  ??                    C                  DB      ? 
    1064 000F  ??                    C  Bit_feild       DB      ?           ; B
					it values 
    1065                             C                                      ;  
					 Bit 0 = 0 if currency symbol first 
    1066                             C                                      ;  
					       = 1 if currency symbol last 
    1067                             C                                      ;  
					 Bit 1 = 0 if No space after currency s
					ymbol 
    1068                             C                                      ;  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-48
Memory arena structure                                      

					       = 1 if space after currency symb
					ol 
    1069 0010  ??                    C  Currency_cents  DB      ?           ; N
					umber of places after currency dec poin
					t 
    1070 0011  ??                    C  Time_24         DB      ?           ; 1
					 if 24 hour time, 0 if 12 hour time 
    1071 0012  ????                  C  Map_call        DW      ?           ; A
					ddress of case mapping call (DWORD) 
    1072 0014  ????                  C                  DW      ?           ; T
					HIS IS TWO WORDS SO IT CAN BE INITIALIZ
					ED 
    1073                             C                                      ;  
					in pieces. 
    1074 0016  ??                    C  Data_sep        DB      ?           ; D
					ata list separator character 
    1075 0017  ??                    C                  DB      ? 
    1076 0018                        C  internat_block ENDS 
    1077                             C   
    1078                             C  ; 
    1079                             C  ; Max size of the block returned by the
					 INTERNATIONAL call 
    1080                             C  ; 
    1081 = 0020                      C  internat_block_max      EQU     32 
    1082                             C   
    1083                             C  ; 
    1084                             C  ; CAUTION: The routines in ALLOC.ASM re
					ly on the fact that arena_signature 
    1085                             C  ; and arena_owner_system are all equal 
					to zero and are contained in DI.  Chang
					e 
    1086                             C  ; them and change ALLOC.ASM. 
    1087                             C   
    1088 = 0000                      C  arena_owner_system  EQU 0              
					 ; free block indication 
    1089                             C   
    1090 = 004D                      C  arena_signature_normal  EQU 4Dh        
					 ; valid signature, not end of arena 
    1091 = 005A                      C  arena_signature_end     EQU 5Ah        
					 ; valid signature, last block in arena
					 
    1092                             C  ;                                      
					                                    ; 
    1093                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1094                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1095                             C   
    1096                             C  BREAK <Machine instruction definitions>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-49
Machine instruction definitions                             

    1097                             C   
    1098 = 00CD                      C  mi_INT          EQU     0CDh 
    1099 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
    1100 = 009A                      C  mi_Long_CALL    EQU     09Ah 
    1101 = 00CB                      C  mi_Long_RET     EQU     0CBh 
    1102                             C   
    1103                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-50
Standard I/O assignments                                    

    1104                             C   
    1105 = 0000                      C  stdin       EQU     0 
    1106 = 0001                      C  stdout      EQU     1 
    1107 = 0002                      C  stderr      EQU     2 
    1108 = 0003                      C  stdaux      EQU     3 
    1109 = 0004                      C  stdprn      EQU     4 
    1110                             C   
    1111                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-51
Xenix subfunction assignments                               

    1112                             C   
    1113 = 0000                      C  open_for_read   EQU 0 
    1114 = 0001                      C  open_for_write  EQU 1 
    1115 = 0002                      C  open_for_both   EQU 2 
    1116                             C   
    1117                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-52
Xenix error codes                                           

    1118                             C   
    1119                             C  ; 
    1120                             C  ; XENIX calls all return error codes th
					rough AX.  If an error occurred then 
    1121                             C  ; the carry bit will be set and the err
					or code is in AX.  If no error occurred
					 
    1122                             C  ; then the carry bit is reset and AX co
					ntains returned info. 
    1123                             C  ; 
    1124                             C   
    1125 =                           C  no_error_occurred               EQU    
					 0                                     
					                         ? 
    1126                             C   
    1127 = 0001                      C  error_invalid_function          EQU    
					 1 
    1128 = 0002                      C  error_file_not_found            EQU    
					 2 
    1129 = 0003                      C  error_path_not_found            EQU    
					 3 
    1130 = 0004                      C  error_too_many_open_files       EQU    
					 4 
    1131 = 0005                      C  error_access_denied             EQU    
					 5 
    1132 = 0006                      C  error_invalid_handle            EQU    
					 6 
    1133 = 0007                      C  error_arena_trashed             EQU    
					 7 
    1134 = 0008                      C  error_not_enough_memory         EQU    
					 8 
    1135 = 0009                      C  error_invalid_block             EQU    
					 9 
    1136 = 000A                      C  error_bad_environment           EQU    
					 10 
    1137 = 000B                      C  error_bad_format                EQU    
					 11 
    1138 = 000C                      C  error_invalid_access            EQU    
					 12 
    1139 = 000D                      C  error_invalid_data              EQU    
					 13 
    1140                             C  ;**** unused                    EQU    
					 14 
    1141 = 000F                      C  error_invalid_drive             EQU    
					 15 
    1142 = 0010                      C  error_current_directory         EQU    
					 16 
    1143 = 0011                      C  error_not_same_device           EQU    
					 17 
    1144 = 0012                      C  error_no_more_files             EQU    
					 18 
    1145                             C   
    1146 =                           C  country_not_found               EQU    
					 error_file_not_found 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-53
Xenix error codes                                           

    1147 =                           C  alloc_not_enough_memory         EQU    
					 error_not_enough_memory 
    1148 =                           C  alloc_arena_trashed             EQU    
					 error_arena_trashed 
    1149                             C   
    1150 =                           C  close_invalid_handle            EQU    
					 error_invalid_handle 
    1151 =                           C  close_invalid_function          EQU    
					 error_invalid_function 
    1152                             C   
    1153 =                           C  chdir_path_not_found            EQU    
					 error_path_not_found 
    1154                             C   
    1155 =                           C  chmod_path_not_found            EQU    
					 error_path_not_found 
    1156 =                           C  chmod_access_denied             EQU    
					 error_access_denied 
    1157 =                           C  chmod_invalid_function          EQU    
					 error_invalid_function 
    1158                             C   
    1159 =                           C  creat_access_denied             EQU    
					 error_access_denied 
    1160 =                           C  creat_path_not_found            EQU    
					 error_path_not_found 
    1161 =                           C  creat_too_many_open_files       EQU    
					 error_too_many_open_files 
    1162                             C   
    1163 =                           C  curdir_invalid_drive            EQU    
					 error_invalid_drive 
    1164                             C   
    1165 =                           C  dealloc_invalid_block           EQU    
					 error_invalid_block 
    1166 =                           C  dealloc_arena_trashed           EQU    
					 error_arena_trashed 
    1167                             C   
    1168 =                           C  dup_invalid_handle              EQU    
					 error_invalid_handle 
    1169 =                           C  dup_too_many_open_files         EQU    
					 error_too_many_open_files 
    1170                             C   
    1171 =                           C  dup2_invalid_handle             EQU    
					 error_invalid_handle 
    1172                             C   
    1173 =                           C  exec_invalid_function           EQU    
					 error_invalid_function 
    1174 =                           C  exec_bad_environment            EQU    
					 error_bad_environment 
    1175 =                           C  exec_bad_format                 EQU    
					 error_bad_format 
    1176 =                           C  exec_not_enough_memory          EQU    
					 error_not_enough_memory 
    1177 =                           C  exec_file_not_found             EQU    
					 error_file_not_found 
    1178                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-54
Xenix error codes                                           

    1179 =                           C  filetimes_invalid_function      EQU    
					 error_invalid_function 
    1180 =                           C  filetimes_invalid_handle        EQU    
					 error_invalid_handle 
    1181                             C   
    1182 =                           C  findfirst_file_not_found        EQU    
					 error_file_not_found 
    1183 =                           C  findfirst_no_more_files         EQU    
					 error_no_more_files 
    1184 =                           C  findnext_no_more_files          EQU    
					 error_no_more_files 
    1185                             C   
    1186 =                           C  international_invalid_function  EQU    
					 error_invalid_function 
    1187                             C   
    1188 =                           C  ioctl_invalid_handle            EQU    
					 error_invalid_handle 
    1189 =                           C  ioctl_invalid_function          EQU    
					 error_invalid_function 
    1190 =                           C  ioctl_invalid_data              EQU    
					 error_invalid_data 
    1191                             C   
    1192 =                           C  lseek_invalid_handle            EQU    
					 error_invalid_handle 
    1193 =                           C  lseek_invalid_function          EQU    
					 error_invalid_function 
    1194                             C   
    1195 =                           C  mkdir_path_not_found            EQU    
					 error_path_not_found 
    1196 =                           C  mkdir_access_denied             EQU    
					 error_access_denied 
    1197                             C   
    1198 =                           C  open_invalid_access             EQU    
					 error_invalid_access 
    1199 =                           C  open_file_not_found             EQU    
					 error_file_not_found 
    1200 =                           C  open_access_denied              EQU    
					 error_access_denied 
    1201 =                           C  open_too_many_open_files        EQU    
					 error_too_many_open_files 
    1202                             C   
    1203 =                           C  read_invalid_handle             EQU    
					 error_invalid_handle 
    1204 =                           C  read_access_denied              EQU    
					 error_access_denied 
    1205                             C   
    1206 =                           C  rename_file_not_found           EQU    
					 error_file_not_found 
    1207 =                           C  rename_not_same_device          EQU    
					 error_not_same_device 
    1208 =                           C  rename_access_denied            EQU    
					 error_access_denied 
    1209                             C   
    1210 =                           C  rmdir_path_not_found            EQU    
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-55
Xenix error codes                                           

					 error_path_not_found 
    1211 =                           C  rmdir_access_denied             EQU    
					 error_access_denied 
    1212 =                           C  rmdir_current_directory         EQU    
					 error_current_directory 
    1213                             C   
    1214 =                           C  setblock_invalid_block          EQU    
					 error_invalid_block 
    1215 =                           C  setblock_arena_trashed          EQU    
					 error_arena_trashed 
    1216 =                           C  setblock_not_enough_memory      EQU    
					 error_not_enough_memory 
    1217 =                           C  setblock_invalid_function       EQU    
					 error_invalid_function 
    1218                             C   
    1219 =                           C  unlink_file_not_found           EQU    
					 error_file_not_found 
    1220 =                           C  unlink_access_denied            EQU    
					 error_access_denied 
    1221                             C   
    1222 =                           C  write_invalid_handle            EQU    
					 error_invalid_handle 
    1223 =                           C  write_access_denied             EQU    
					 error_access_denied 
    1224                             C   
    1225                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-56
system call definitions                                     

    1226                             C   
    1227 = 0000                      C  Abort                           EQU 0  
					 ;  0      0 
    1228 = 0001                      C  Std_Con_Input                   EQU 1  
					 ;  1      1 
    1229 = 0002                      C  Std_Con_Output                  EQU 2  
					 ;  2      2 
    1230 = 0003                      C  Std_Aux_Input                   EQU 3  
					 ;  3      3 
    1231 = 0004                      C  Std_Aux_Output                  EQU 4  
					 ;  4      4 
    1232 = 0005                      C  Std_Printer_Output              EQU 5  
					 ;  5      5 
    1233 = 0006                      C  Raw_Con_IO                      EQU 6  
					 ;  6      6 
    1234 = 0007                      C  Raw_Con_Input                   EQU 7  
					 ;  7      7 
    1235 = 0008                      C  Std_Con_Input_No_Echo           EQU 8  
					 ;  8      8 
    1236 = 0009                      C  Std_Con_String_Output           EQU 9  
					 ;  9      9 
    1237 = 000A                      C  Std_Con_String_Input            EQU 10 
					 ; 10      A 
    1238 = 000B                      C  Std_Con_Input_Status            EQU 11 
					 ; 11      B 
    1239 = 000C                      C  Std_Con_Input_Flush             EQU 12 
					 ; 12      C 
    1240 = 000D                      C  Disk_Reset                      EQU 13 
					 ; 13      D 
    1241 = 000E                      C  Set_Default_Drive               EQU 14 
					 ; 14      E 
    1242 = 000F                      C  FCB_Open                        EQU 15 
					 ; 15      F 
    1243 = 0010                      C  FCB_Close                       EQU 16 
					 ; 16     10 
    1244 = 0011                      C  Dir_Search_First                EQU 17 
					 ; 17     11 
    1245 = 0012                      C  Dir_Search_Next                 EQU 18 
					 ; 18     12 
    1246 = 0013                      C  FCB_Delete                      EQU 19 
					 ; 19     13 
    1247 = 0014                      C  FCB_Seq_Read                    EQU 20 
					 ; 20     14 
    1248 = 0015                      C  FCB_Seq_Write                   EQU 21 
					 ; 21     15 
    1249 = 0016                      C  FCB_Create                      EQU 22 
					 ; 22     16 
    1250 = 0017                      C  FCB_Rename                      EQU 23 
					 ; 23     17 
    1251 = 0019                      C  Get_Default_Drive               EQU 25 
					 ; 25     19 
    1252 = 001A                      C  Set_DMA                         EQU 26 
					 ; 26     1A 
    1253                             C  ;----+----+----+----+----+----+----+---
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-57
system call definitions                                     

					-+----+----+----+----+----+----+----; 
    1254                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1255                             C  ;                                      
					                                    ; 
    1256 = 001F                      C  Get_Default_DPB                 EQU 31 
					 ; 31     1F 
    1257                             C  ;                                      
					                                    ; 
    1258                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1259                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1260 = 0021                      C  FCB_Random_Read                 EQU 33 
					 ; 33     21 
    1261 = 0022                      C  FCB_Random_Write                EQU 34 
					 ; 34     22 
    1262 = 0023                      C  Get_FCB_File_Length             EQU 35 
					 ; 35     23 
    1263 = 0024                      C  Get_FCB_Position                EQU 36 
					 ; 36     24 
    1264 = 0025                      C  Set_Interrupt_Vector            EQU 37 
					 ; 37     25 
    1265 = 0026                      C  Create_Process_Data_Block       EQU 38 
					 ; 38     26 
    1266 = 0027                      C  FCB_Random_Read_Block           EQU 39 
					 ; 39     27 
    1267 = 0028                      C  FCB_Random_Write_Block          EQU 40 
					 ; 40     28 
    1268 = 0029                      C  Parse_File_Descriptor           EQU 41 
					 ; 41     29 
    1269 = 002A                      C  Get_Date                        EQU 42 
					 ; 42     2A 
    1270 = 002B                      C  Set_Date                        EQU 43 
					 ; 43     2B 
    1271 = 002C                      C  Get_Time                        EQU 44 
					 ; 44     2C 
    1272 = 002D                      C  Set_Time                        EQU 45 
					 ; 45     2D 
    1273 = 002E                      C  Set_Verify_On_Write             EQU 46 
					 ; 46     2E 
    1274                             C  ; Extended functionality group 
    1275 = 002F                      C  Get_DMA                         EQU 47 
					 ; 47     2F 
    1276 = 0030                      C  Get_Version                     EQU 48 
					 ; 48     30 
    1277 = 0031                      C  Keep_Process                    EQU 49 
					 ; 49     31 
    1278                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1279                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1280                             C  ;                                      
					                                    ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-58
system call definitions                                     

    1281 = 0032                      C  Get_DPB                         EQU 50 
					 ; 50     32 
    1282                             C  ;                                      
					                                    ; 
    1283                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1284                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1285 = 0033                      C  Set_CTRL_C_Trapping             EQU 51 
					 ; 51     33 
    1286 = 0034                      C  Get_InDOS_Flag                  EQU 52 
					 ; 52     34 
    1287 = 0035                      C  Get_Interrupt_Vector            EQU 53 
					 ; 53     35 
    1288 = 0036                      C  Get_Drive_Freespace             EQU 54 
					 ; 54     36 
    1289 = 0037                      C  Char_Oper                       EQU 55 
					 ; 55     37 
    1290 = 0038                      C  International                   EQU 56 
					 ; 56     38 
    1291                             C  ;   Directory Group 
    1292 = 0039                      C  MKDir                           EQU 57 
					 ; 57     39 
    1293 = 003A                      C  RMDir                           EQU 58 
					 ; 58     3A 
    1294 = 003B                      C  CHDir                           EQU 59 
					 ; 59     3B 
    1295                             C  ;   File Group 
    1296 = 003C                      C  Creat                           EQU 60 
					 ; 60     3C 
    1297 = 003D                      C  Open                            EQU 61 
					 ; 61     3D 
    1298 = 003E                      C  Close                           EQU 62 
					 ; 62     3E 
    1299 = 003F                      C  Read                            EQU 63 
					 ; 63     3F 
    1300 = 0040                      C  Write                           EQU 64 
					 ; 64     40 
    1301 = 0041                      C  Unlink                          EQU 65 
					 ; 65     41 
    1302 = 0042                      C  LSeek                           EQU 66 
					 ; 66     42 
    1303 = 0043                      C  CHMod                           EQU 67 
					 ; 67     43 
    1304 = 0044                      C  IOCtl                           EQU 68 
					 ; 68     44 
    1305 = 0045                      C  XDup                            EQU 69 
					 ; 69     45 
    1306 = 0046                      C  XDup2                           EQU 70 
					 ; 70     46 
    1307 = 0047                      C  Current_Dir                     EQU 71 
					 ; 71     47 
    1308                             C  ;    Memory Group 
    1309 = 0048                      C  Alloc                           EQU 72 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-59
system call definitions                                     

					 ; 72     48 
    1310 = 0049                      C  Dealloc                         EQU 73 
					 ; 73     49 
    1311 = 004A                      C  Setblock                        EQU 74 
					 ; 74     4A 
    1312                             C  ;    Process Group 
    1313 = 004B                      C  Exec                            EQU 75 
					 ; 75     4B 
    1314 = 004C                      C  Exit                            EQU 76 
					 ; 76     4C 
    1315 = 004D                      C  Wait                            EQU 77 
					 ; 77     4D 
    1316 = 004E                      C  Find_First                      EQU 78 
					 ; 78     4E 
    1317                             C  ;   Special Group 
    1318 = 004F                      C  Find_Next                       EQU 79 
					 ; 79     4F 
    1319                             C  ; SPECIAL SYSTEM GROUP 
    1320                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1321                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1322                             C  ;                                      
					                                    ; 
    1323 = 0050                      C  Set_Current_PDB                 EQU 80 
					 ; 80     50 
    1324 = 0051                      C  Get_Current_PDB                 EQU 81 
					 ; 81     51 
    1325 = 0052                      C  Get_In_Vars                     EQU 82 
					 ; 82     52 
    1326 = 0053                      C  SetDPB                          EQU 83 
					 ; 83     53 
    1327                             C  ;                                      
					                                    ; 
    1328                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1329                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1330 = 0054                      C  Get_Verify_On_Write             EQU 84 
					 ; 84     54 
    1331                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1332                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1333                             C  ;                                      
					                                    ; 
    1334 = 0055                      C  Dup_PDB                         EQU 85 
					 ; 85     55 
    1335                             C  ;                                      
					                                    ; 
    1336                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1337                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-60
system call definitions                                     

    1338 = 0056                      C  Rename                          EQU 86 
					 ; 86     56 
    1339 = 0057                      C  File_Times                      EQU 87 
					 ; 87     57 
    1340 = 0058                      C  AllocOper                       EQU 88 
					 ; 88     58 
    1341                             C  ; Network extention system calls 
    1342 = 0059                      C  GetExtendedError                EQU 89 
					 ; 89     59 
    1343 = 005A                      C  CreateTempFile                  EQU 90 
					 ; 90     5A 
    1344 = 005B                      C  CreateNewFile                   EQU 91 
					 ; 91     5B 
    1345 = 005C                      C  LockOper                        EQU 92 
					 ; 92     5C Lock and Unlock 
    1346 = 005D                      C  ServerCall                      EQU 93 
					 ; 93     5D CommitAll, ServerDOSCall, 
    1347                             C                                         
					 ;           CloseByName, CloseUser, 
    1348                             C                                         
					 ;           CloseUserProcess, 
    1349                             C                                         
					 ;           GetOpenFileList 
    1350 = 005E                      C  UserIDOper                      EQU 94 
					 ; 94     5E Get and Set 
    1351 = 005F                      C  AssignOper                      EQU 95 
					 ; 95     5F On, Off, Get, Set, Cancel 
    1352                             C   
    1353 = 00F8                      C  Set_Oem_Handler                 EQU 248
					 ; 248    F8 
    1354 = 00F9                      C  OEM_C1                          EQU 249
					 ; 249    F9 
    1355 = 00FA                      C  OEM_C2                          EQU 250
					 ; 250    FA 
    1356 = 00FB                      C  OEM_C3                          EQU 251
					 ; 251    FB 
    1357 = 00FC                      C  OEM_C4                          EQU 252
					 ; 252    FC 
    1358 = 00FD                      C  OEM_C5                          EQU 253
					 ; 253    FD 
    1359 = 00FE                      C  OEM_C6                          EQU 254
					 ; 254    FE 
    1360 = 00FF                      C  OEM_C7                          EQU 255
					 ; 255    FF 
    1361                             C  SUBTTL 
    1362                                 
    1363                                 
    1364 = 005C                         FCB     EQU     5CH 
    1365 = 0080                         PARMS   EQU     80H 
    1366                                 
    1367                                DG      GROUP   CODE,DATA 
    1368                                 
    1369 0000                           CODE    SEGMENT 
    1370                                ASSUME  CS:DG 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-61
                                                            

    1371                                 
    1372 0100                                   ORG     100H 
    1373 0100                           START: 
    1374 0100  E9 0D5C R                        JMP     TRANSIENT 
    1375                                 
    1376 0103  56 65 72 73 20 31 2E     HEADER  DB      "Vers 1.00" 
    1377       30 30                    
    1378                                 
    1379 010C  0080[                            DB      128 DUP (?) 
    1380            ??                  
    1381                         ]      
    1382                                
    1383 018C                           ISTACK  LABEL   WORD            ;Stack 
					starts here and grows down 
    1384                                 
    1385                                ;Resident data 
    1386                                 
    1387                                        IF      HARDINT 
    1388 018C  ????????                 INDOS   DD      ?               ;DOS bu
					isy flag 
    1389 0190  ????????                 NEXTINT DD      ?               ;Chain 
					for int 
    1390 0194  00                       BUSY    DB      0               ;Intern
					al ME flag 
    1391 0195  00                       SOFINT  DB      0               ;Intern
					al ME flag 
    1392 0196  00                       TICKCNT DB      0               ;Tick c
					ounter 
    1393 0197  00                       TICKSUB DB      0               ;Tick m
					iss counter 
    1394 0198  08                       SLICECNT DB     TIMESLICE       ;Time s
					lice counter 
    1395                                        ENDIF 
    1396                                 
    1397 0199  00                       CBUSY   DB      0               ;ME on 
					com interrupt 
    1398 019A  ????????                 SPNEXT  DD      ?               ;Chain 
					location for INT 28 
    1399 019E  00                       PCANMES DB      0               ;Cancel
					 message flag 
    1400 019F  ????                     SSsave  DW      ?               ;Stack 
					save area for INT 24 
    1401 01A1  ????                     SPsave  DW      ? 
    1402 01A3  ????????                 DMAADDR DD      ?               ;Place 
					to save DMA address 
    1403 01A7  ????????                 HERRINT DD      ?               ;Place 
					to save Hard error interrupt 
    1404 01AB  ????????                 LISTDEV DD      ?               ;Pointe
					r to Device 
    1405 01AF  00                       COLPOS  DB      0               ;Column
					 position for TAB processing 
    1406 01B0  0505 R                   NXTCHR  DW      OFFSET DG:BUFFER + BLKS
					IZ     ;Buffer pointer 
    1407 01B2  0A73 R                   CURRFIL DW      OFFSET DG:SPLFCB    ;Cu
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-62
                                                            

					rrent file being printed 
    1408                                 
    1409 01B4  ????                     LASTFCB DW      ?               ;Back p
					ointer 
    1410 01B6  ????                     LASTFCB2 DW     ?               ;Anothe
					r back pointer 
    1411 01B8  00                       PABORT  DB      0               ;Abort 
					flag 
    1412                                 
    1413                                ;Resident messages 
    1414                                 
    1415 01B9  0D 0A 0D 0A 2A 2A 2A     ERRMES  DB      13,10,13,10,"**********
					",13,10,"$" 
    1416       2A 2A 2A 2A 2A 2A 2A     
    1417       0D 0A 24                 
    1418 01CA  20 65 72 72 6F 72 20     ERRMEST DB      " error reading file",1
					3,10 
    1419       72 65 61 64 69 6E 67     
    1420       20 66 69 6C 65 0D 0A     
    1421 01DF  20 3A 20 20 20 20 20     EMFILNAM DB     " :        .   " 
    1422       20 20 20 2E 20 20 20     
    1423                                
    1424 01ED  0D 0C 07 24              BELMES  DB     13,0CH,7,"$" 
    1425                                 
    1426 01F1  0D 0A 0D 0A              CANMES  DB      13,10,13,10 
    1427 01F5  20 3A 20 20 20 20 20     CANFILNAM DB    " :        .   " 
    1428       20 20 20 2E 20 20 20     
    1429                                
    1430 0203  20 43 61 6E 63 65 6C             DB      " Canceled by operator$
					" 
    1431       65 64 20 62 79 20 6F     
    1432       70 65 72 61 74 6F 72     
    1433       24                       
    1434                                 
    1435 0219  0D 0A 0D 0A 41 6C 6C     ALLCAN  DB      13,10,13,10,"All files 
					canceled by operator$" 
    1436       20 66 69 6C 65 73 20     
    1437       63 61 6E 63 65 6C 65     
    1438       64 20 62 79 20 6F 70     
    1439       65 72 61 74 6F 72 24     
    1440                                
    1441                                 
    1442 023C  0256 R                   MESBAS  DW      OFFSET DG:ERR0 
    1443 023E  0264 R                           DW      OFFSET DG:ERR1 
    1444 0240  026D R                           DW      OFFSET DG:ERR2 
    1445 0242  0277 R                           DW      OFFSET DG:ERR3 
    1446 0244  0283 R                           DW      OFFSET DG:ERR4 
    1447 0246  0288 R                           DW      OFFSET DG:ERR5 
    1448 0248  0298 R                           DW      OFFSET DG:ERR6 
    1449 024A  029D R                           DW      OFFSET DG:ERR7 
    1450 024C  02AA R                           DW      OFFSET DG:ERR8 
    1451 024E  02BB R                           DW      OFFSET DG:ERR9 
    1452 0250  02C4 R                           DW      OFFSET DG:ERR10 
    1453 0252  02D0 R                           DW      OFFSET DG:ERR11 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-63
                                                            

    1454 0254  02DB R                           DW      OFFSET DG:ERR12 
    1455                                 
    1456                                ;INT 24 messages A La COMMAND 
    1457                                 
    1458 0256  57 72 69 74 65 20 70     ERR0    DB      "Write protect$" 
    1459       72 6F 74 65 63 74 24     
    1460                                
    1461 0264  42 61 64 20 75 6E 69     ERR1    DB      "Bad unit$" 
    1462       74 24                    
    1463 026D  4E 6F 74 20 72 65 61     ERR2    DB      "Not ready$" 
    1464       64 79 24                 
    1465 0277  42 61 64 20 63 6F 6D     ERR3    DB      "Bad command$" 
    1466       6D 61 6E 64 24           
    1467 0283  44 61 74 61 24           ERR4    DB      "Data$" 
    1468 0288  42 61 64 20 63 61 6C     ERR5    DB      "Bad call format$" 
    1469       6C 20 66 6F 72 6D 61     
    1470       74 24                    
    1471 0298  53 65 65 6B 24           ERR6    DB      "Seek$" 
    1472 029D  4E 6F 6E 2D 44 4F 53     ERR7    DB      "Non-DOS disk$" 
    1473       20 64 69 73 6B 24        
    1474 02AA  53 65 63 74 6F 72 20     ERR8    DB      "Sector not found$" 
    1475       6E 6F 74 20 66 6F 75     
    1476       6E 64 24                 
    1477 02BB  4E 6F 20 70 61 70 65     ERR9    DB      "No paper$" 
    1478       72 24                    
    1479 02C4  57 72 69 74 65 20 66     ERR10   DB      "Write fault$" 
    1480       61 75 6C 74 24           
    1481 02D0  52 65 61 64 20 66 61     ERR11   DB      "Read fault$" 
    1482       75 6C 74 24              
    1483 02DB  44 69 73 6B 24           ERR12   DB      "Disk$" 
    1484                                 
    1485 02E0  46 69 6C 65 20 61 6C     FATMES  DB     "File allocation table b
					ad drive " 
    1486       6C 6F 63 61 74 69 6F     
    1487       6E 20 74 61 62 6C 65     
    1488       20 62 61 64 20 64 72     
    1489       69 76 65 20              
    1490 0300  41 2E 0D 0A 24           BADDRVM DB     "A.",13,10,"$" 
    1491                                 
    1492                                ;The DATA buffer 
    1493 0305  0200[                    BUFFER  DB      BLKSIZ DUP(0) 
    1494            00                  
    1495                         ]      
    1496                                
    1497 0505  ??                               DB      ? 
    1498 0506                           CODE    ENDS 
    1499                                 
    1500                                ;Transient data 
    1501                                 
    1502 0000                           DATA    SEGMENT BYTE 
    1503 0000                                   ORG     0 
    1504 0000  ??                       SWITCHAR DB     ?               ;User s
					witch character 
    1505 0001  00                       FULLFLAG DB     0               ;Flag f
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-64
                                                            

					or printing queue full message 
    1506 0002  00                       MAKERES DB      0               ;Flag t
					o indicate presence of resident 
    1507 0003  00                       ARGSETUP DB     0               ;Flag t
					o indicate a formatted FCB exists at 5C
					 
    1508 0004  00                       DEFDRV  DB      0               ;Defaul
					t drive 
    1509 0005  00                       CANFLG  DB      0               ;Flag t
					o indicate cancel 
    1510 0006  00                       FILCNT  DB      0               ;Number
					 of files 
    1511 0007  ????????                 SPLIST  DD      ?               ;Pointe
					r to FCBs in resident 
    1512 000B  ????????                 CURFILE DD      ?               ;Pointe
					r to current FCB 
    1513 000F  0026[                    SRCHFCB DB      38 DUP (0)      ;SEARCH
					-FIRST/NEXT FCB 
    1514            00                  
    1515                         ]      
    1516                                
    1517 0035  0C03 R                   ENDRES  DW      OFFSET DG:DEF_ENDRES   
					 ;Term-Res location 
    1518                                 
    1519                                ;Messages 
    1520                                 
    1521 0037  50 52 49 4E 54 20 71     NOFILS  DB      "PRINT queue is empty",
					13,10,"$" 
    1522       75 65 75 65 20 69 73     
    1523       20 65 6D 70 74 79 0D     
    1524       0A 24                    
    1525 004E  0D 0A 20 20 20 20 20     CURMES  DB      13,10,"        " 
    1526       20 20 20                 
    1527 0058  20 3A 20 20 20 20 20     CURFNAM DB      " :        .    is curr
					ently being printed",13,10,"$" 
    1528       20 20 20 2E 20 20 20     
    1529       20 69 73 20 63 75 72     
    1530       72 65 6E 74 6C 79 20     
    1531       62 65 69 6E 67 20 70     
    1532       72 69 6E 74 65 64 0D     
    1533       0A 24                    
    1534 0084  20 20 20 20 20 20 20     FILMES  DB      "        " 
    1535       20                       
    1536 008C  20 3A 20 20 20 20 20     FILFNAM DB      " :        .    is in q
					ueue" 
    1537       20 20 20 2E 20 20 20     
    1538       20 69 73 20 69 6E 20     
    1539       71 75 65 75 65           
    1540 00A6  0D 0A 24                 CRLF    DB      13,10,"$" 
    1541 00A9  43 61 6E 6E 6F 74 20     OPMES    DB     "Cannot open " 
    1542       6F 70 65 6E 20           
    1543 00B5  20 3A 20 20 20 20 20     OPFILNAM DB     " :        .    ",13,10
					,"$" 
    1544       20 20 20 2E 20 20 20     
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-65
                                                            

    1545       20 0D 0A 24              
    1546 00C7  50 52 49 4E 54 20 71     FULLMES DB      "PRINT queue is full",1
					3,10,"$" 
    1547       75 65 75 65 20 69 73     
    1548       20 66 75 6C 6C 0D 0A     
    1549       24                       
    1550 00DD                           SRCHMES LABEL   BYTE 
    1551 00DD  20 3A 20 20 20 20 20     SRCHFNAM DB     " :        .    "," Fil
					e not found",13,10,"$" 
    1552       20 20 20 2E 20 20 20     
    1553       20 20 46 69 6C 65 20     
    1554       6E 6F 74 20 66 6F 75     
    1555       6E 64 0D 0A 24           
    1556 00FE  4C 69 73 74 20 6F 75     BADMES  DB      "List output is not ass
					igned to a device",13,10,"$" 
    1557       74 70 75 74 20 69 73     
    1558       20 6E 6F 74 20 61 73     
    1559       73 69 67 6E 65 64 20     
    1560       74 6F 20 61 20 64 65     
    1561       76 69 63 65 0D 0A 24     
    1562 0128  52 65 73 69 64 65 6E     GOODMES DB      "Resident part of PRINT
					 installed",13,10,"$" 
    1563       74 20 70 61 72 74 20     
    1564       6F 66 20 50 52 49 4E     
    1565       54 20 69 6E 73 74 61     
    1566       6C 6C 65 64 0D 0A 24     
    1567 014B  4E 61 6D 65 20 6F 66     PROMPT  DB      "Name of list device [P
					RN]: $" 
    1568       20 6C 69 73 74 20 64     
    1569       65 76 69 63 65 20 5B     
    1570       50 52 4E 5D 3A 20 24     
    1571                                
    1572 0167  45 72 72 6F 72 73 20     CNTMES  DB      "Errors on list device 
					indicate that it",13,10 
    1573       6F 6E 20 6C 69 73 74     
    1574       20 64 65 76 69 63 65     
    1575       20 69 6E 64 69 63 61     
    1576       74 65 20 74 68 61 74     
    1577       20 69 74 0D 0A           
    1578 018F  6D 61 79 20 62 65 20             DB      "may be off-line. Pleas
					e check it.",13,10,13,10,"$" 
    1579       6F 66 66 2D 6C 69 6E     
    1580       65 2E 20 50 6C 65 61     
    1581       73 65 20 63 68 65 63     
    1582       6B 20 69 74 2E 0D 0A     
    1583       0D 0A 24                 
    1584 01B5  49 6E 76 61 6C 69 64     BADSWT  DB      "Invalid parameter",13,
					10,"$" 
    1585       20 70 61 72 61 6D 65     
    1586       74 65 72 0D 0A 24        
    1587                                 
    1588                                 
    1589 01C9  49 6E 63 6F 72 72 65     BADVER  DB      "Incorrect DOS version"
					,13,10,"$" 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-66
                                                            

    1590       63 74 20 44 4F 53 20     
    1591       76 65 72 73 69 6F 6E     
    1592       0D 0A 24                 
    1593                                 
    1594                                        IF      IBM 
    1595                                ;Reserved names for parallel card 
    1596 01E1                           INT_17_HITLIST LABEL BYTE 
    1597 01E1  08 50 52 4E 20 20 20             DB      8,"PRN     ",0 
    1598       20 20 00                 
    1599 01EB  08 4C 50 54 31 20 20             DB      8,"LPT1    ",0 
    1600       20 20 00                 
    1601 01F5  08 4C 50 54 32 20 20             DB      8,"LPT2    ",1 
    1602       20 20 01                 
    1603 01FF  08 4C 50 54 33 20 20             DB      8,"LPT3    ",2 
    1604       20 20 02                 
    1605 0209  00                               DB      0 
    1606                                ;Reserved names for Async adaptor 
    1607 020A                           INT_14_HITLIST  LABEL BYTE 
    1608 020A  08 41 55 58 20 20 20             DB      8,"AUX     ",0 
    1609       20 20 00                 
    1610 0214  08 43 4F 4D 31 20 20             DB      8,"COM1    ",0 
    1611       20 20 00                 
    1612 021E  08 43 4F 4D 32 20 20             DB      8,"COM2    ",1 
    1613       20 20 01                 
    1614 0228  00                               DB      0 
    1615                                        ENDIF 
    1616                                 
    1617 0229  0E 00                    COMBUF  DB      14,0            ;Device
					 name buffer 
    1618 022B  000E[                            DB      14 DUP (?) 
    1619            ??                  
    1620                         ]      
    1621                                
    1622 0239  00 50 52 4E 20 20 20     LISTFCB DB      0,"PRN        " ;Device
					 name FCB 
    1623       20 20 20 20 20           
    1624 0245  0019[                            DB      25 DUP (0) 
    1625            00                  
    1626                         ]      
    1627                                
    1628 025E  0050[                    PARSEBUF DB     80 DUP (?)      ;Parsin
					g space 
    1629            ??                  
    1630                         ]      
    1631                                
    1632                                 
    1633 02AE                           DATA    ENDS 
    1634                                 
    1635 0506                           CODE    SEGMENT 
    1636                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
    1637                                 
    1638                                 
    1639                                ;Interrupt routines 
    1640                                ASSUME  CS:DG,DS:NOTHING,ES:NOTHING,SS:
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-67
                                                            

					NOTHING 
    1641                                        IF      HARDINT 
    1642 0506                           HDSPINT:                        ;Hardwa
					re interrupt entry point 
    1643 0506  2E: FE 06 0196 R                 INC     [TICKCNT]       ;Tick 
    1644 050B  2E: FE 06 0197 R                 INC     [TICKSUB]       ;Tick 
    1645 0510  2E: 80 3E 0198 R 00              CMP     [SLICECNT],0 
    1646 0516  74 07                            JZ      TIMENOW 
    1647 0518  2E: FE 0E 0198 R                 DEC     [SLICECNT]      ;Count 
					down 
    1648 051D  EB 3C                            JMP     SHORT CHAININT  ;Not ti
					me yet 
    1649 051F                           TIMENOW: 
    1650 051F  2E: 80 3E 0194 R 00              CMP     [BUSY],0        ;See if
					 interrupting ourself 
    1651 0525  75 34                            JNZ     CHAININT 
    1652 0527  1E                               PUSH    DS 
    1653 0528  56                               PUSH    SI 
    1654 0529  2E: C5 36 018C R                 LDS     SI,[INDOS]      ;Check 
					for making DOS calls 
    1655 052E  80 3C 00                         CMP     BYTE PTR [SI],0 
    1656 0531  5E                               POP     SI 
    1657 0532  1F                               POP     DS 
    1658 0533  75 26                            JNZ     CHAININT        ;DOS is
					 Buisy 
    1659 0535  2E: FE 06 0194 R                 INC     [BUSY]          ;Exclud
					e furthur interrupts 
    1660 053A  2E: C6 06 0196 R 00              MOV     [TICKCNT],0     ;Reset 
					tick counter 
    1661 0540  2E: C6 06 0197 R 00              MOV     [TICKSUB],0     ;Reset 
					tick counter 
    1662 0546  FB                               STI                     ;Keep t
					hings rolling 
    1663                                 
    1664                                        IF      AINT 
    1665 0547  B0 20                            MOV     AL,EOI          ;Acknow
					ledge interrupt 
    1666 0549  E6 20                            OUT     AKPORT,AL 
    1667                                        ENDIF 
    1668                                 
    1669 054B  E8 058E R                        CALL    DOINT 
    1670 054E  FA                               CLI 
    1671 054F  2E: C6 06 0198 R 08              MOV     [SLICECNT],TIMESLICE   
					 ;Either soft or hard int resets time s
					lice 
    1672 0555  2E: C6 06 0194 R 00              MOV     [BUSY],0        ;Done, 
					let others in 
    1673 055B                           CHAININT: 
    1674 055B  2E: FF 2E 0190 R                 JMP     [NEXTINT]       ;Chain 
					to next clock routine 
    1675                                        ENDIF 
    1676                                 
    1677                                 
    1678 0560                           SPINT:                          ;INT 28
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-68
                                                            

					H entry point 
    1679                                        IF      HARDINT 
    1680 0560  2E: 80 3E 0194 R 00              CMP     [BUSY],0 
    1681 0566  75 21                            JNZ     NXTSP 
    1682 0568  2E: FE 06 0194 R                 INC     [BUSY]          ;Exclud
					e hardware interrupt 
    1683 056D  2E: FE 06 0195 R                 INC     [SOFINT]        ;Indica
					te a software int in progress 
    1684                                        ENDIF 
    1685                                 
    1686 0572  FB                               STI                     ;Hardwa
					re interrupts ok on INT 28H entry 
    1687 0573  E8 058E R                        CALL    DOINT 
    1688                                 
    1689                                        IF      HARDINT 
    1690 0576  FA                               CLI 
    1691 0577  2E: C6 06 0195 R 00              MOV     [SOFINT],0      ;Indica
					te INT done 
    1692 057D  2E: C6 06 0198 R 08              MOV     [SLICECNT],TIMESLICE   
					 ;Either soft or hard int resets time s
					lice 
    1693 0583  2E: C6 06 0194 R 00              MOV     [BUSY],0 
    1694                                        ENDIF 
    1695                                 
    1696 0589  2E: FF 2E 019A R         NXTSP:  JMP     [SPNEXT]        ;Chain 
					to next INT 28 
    1697                                 
    1698 058E                           DOINT: 
    1699 058E  56                               PUSH    SI 
    1700 058F  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
    1701 0594  46                               INC     SI 
    1702 0595  46                               INC     SI 
    1703 0596  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
    1704 059A  5E                               POP     SI 
    1705 059B  75 03                            JNZ     GOAHEAD 
    1706 059D  E9 065E R                        JMP     SPRET           ;Nothin
					g to do 
    1707 05A0                           GOAHEAD: 
    1708 05A0  50                               PUSH    AX              ;Need a
					 working register 
    1709 05A1  2E: 8C 16 019F R                 MOV     [SSsave],SS 
    1710 05A6  2E: 89 26 01A1 R                 MOV     [SPsave],SP 
    1711 05AB  8C C8                            MOV     AX,CS 
    1712 05AD  FA                               CLI 
    1713                                ;Go to internal stack to prevent INT 24
					 overflowing system stack 
    1714 05AE  8E D0                            MOV     SS,AX 
    1715 05B0  BC 018C R                        MOV     SP,OFFSET DG:ISTACK 
    1716 05B3  FB                               STI 
    1717 05B4  06                               PUSH    ES 
    1718 05B5  1E                               PUSH    DS 
    1719 05B6  53                               PUSH    BX 
    1720 05B7  51                               PUSH    CX 
    1721 05B8  52                               PUSH    DX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-69
                                                            

    1722 05B9  56                               PUSH    SI 
    1723 05BA  57                               PUSH    DI 
    1724 05BB  0E                               PUSH    CS 
    1725 05BC  1F                               POP     DS 
    1726                                ASSUME  DS:DG 
    1727                                 
    1728 05BD  8B 1E 01B0 R                     MOV     BX,[NXTCHR] 
    1729 05C1  81 FB 0505 R                     CMP     BX,OFFSET DG:BUFFER + B
					LKSIZ 
    1730 05C5  75 03                            JNZ     PLOOP 
    1731 05C7  E9 0662 R                        JMP     READBUFF               
					 ;Buffer empty 
    1732                                 
    1733 05CA                           PLOOP: 
    1734                                        IF      HARDINT 
    1735 05CA  8B 1E 01B0 R                     MOV     BX,[NXTCHR] 
    1736 05CE  81 FB 0505 R                     CMP     BX,OFFSET DG:BUFFER + B
					LKSIZ 
    1737 05D2  74 76                            JZ      DONEJMP                
					 ;Buffer has become empty 
    1738 05D4  80 3E 0195 R 00                  CMP     [SOFINT],0 
    1739 05D9  75 07                            JNZ     STATCHK 
    1740 05DB  80 3E 0196 R 02                  CMP     [TICKCNT],MAXTICK      
					 ;Check our time slice 
    1741 05E0  73 68                            JAE     DONEJMP 
    1742 05E2                           STATCHK: 
    1743                                        ENDIF 
    1744                                 
    1745 05E2  E8 0959 R                        CALL    PSTAT 
    1746                                 
    1747                                        IF      HARDINT 
    1748 05E5  74 10                            JZ      DOCHAR                 
					 ;Printer ready 
    1749 05E7  80 3E 0195 R 00                  CMP     [SOFINT],0 
    1750                                        ENDIF 
    1751                                 
    1752 05EC  75 5C                            JNZ     DONEJMP                
					 ;If soft int give up 
    1753                                 
    1754                                        IF      HARDINT 
    1755 05EE  80 3E 0197 R 01                  CMP     [TICKSUB],BUSYTICK     
					 ;Check our busy timeout 
    1756 05F3  73 55                            JAE     DONEJMP 
    1757 05F5  EB D3                            JMP     PLOOP 
    1758                                        ENDIF 
    1759                                 
    1760 05F7                           DOCHAR: 
    1761 05F7  8A 07                            MOV     AL,BYTE PTR [BX] 
    1762 05F9  3C 1A                            CMP     AL,1AH                 
					 ;^Z? 
    1763 05FB  74 62                            JZ      FILEOFJ                
					 ;CPM EOF 
    1764 05FD  3C 0D                            CMP     AL,0DH                 
					 ;CR? 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-70
                                                            

    1765 05FF  75 05                            JNZ     NOTCR 
    1766 0601  C6 06 01AF R 00                  MOV     [COLPOS],0 
    1767 0606                           NOTCR: 
    1768 0606  3C 09                            CMP     AL,9                   
					 ;TAB? 
    1769 0608  75 1D                            JNZ     NOTABDO 
    1770 060A  8A 0E 01AF R                     MOV     CL,[COLPOS] 
    1771 060E  80 C9 F8                         OR      CL,0F8H 
    1772 0611  F6 D9                            NEG     CL 
    1773 0613  32 ED                            XOR     CH,CH 
    1774 0615  E3 23                            JCXZ    TABDONE 
    1775 0617                           TABLP: 
    1776 0617  B0 20                            MOV     AL," " 
    1777 0619  FE 06 01AF R                     INC     [COLPOS] 
    1778 061D  51                               PUSH    CX 
    1779 061E  E8 0981 R                        CALL    POUT 
    1780 0621  59                               POP     CX 
    1781 0622  E2 F3                            LOOP    TABLP 
    1782 0624  EB 14 90                         JMP     TABDONE 
    1783                                 
    1784 0627                           NOTABDO: 
    1785 0627  3C 08                            CMP     AL,8                   
					 ;Back space? 
    1786 0629  75 04                            JNZ     NOTBACK 
    1787 062B  FE 0E 01AF R                     DEC     [COLPOS] 
    1788 062F                           NOTBACK: 
    1789 062F  3C 20                            CMP     AL,20H                 
					 ;Non Printing char? 
    1790 0631  72 04                            JB      NOCHAR 
    1791 0633  FE 06 01AF R                     INC     [COLPOS]               
					 ;Printing char 
    1792 0637                           NOCHAR: 
    1793 0637  E8 0981 R                        CALL    POUT                   
					 ;Print it 
    1794 063A                           TABDONE: 
    1795 063A  FF 06 01B0 R                     INC     [NXTCHR]               
					 ;Next char 
    1796                                 
    1797                                        IF      HARDINT 
    1798 063E  C6 06 0197 R 00                  MOV     [TICKSUB],0            
					 ;Got a character out, Reset counter 
    1799 0643  80 3E 0195 R 00                  CMP     [SOFINT],0             
					 ;Soft int does one char at a time 
    1800 0648  74 80                            JZ      PLOOP 
    1801                                        ENDIF 
    1802                                 
    1803 064A                           DONEJMP: 
    1804 064A  5F                               POP     DI 
    1805 064B  5E                               POP     SI 
    1806 064C  5A                               POP     DX 
    1807 064D  59                               POP     CX 
    1808 064E  5B                               POP     BX 
    1809 064F  1F                               POP     DS 
    1810 0650  07                               POP     ES 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-71
                                                            

    1811                                ASSUME  DS:NOTHING,ES:NOTHING 
    1812 0651  FA                               CLI 
    1813 0652  2E: 8E 16 019F R                 MOV     SS,[SSsave]            
					 ;Restore Entry Stack 
    1814 0657  2E: 8B 26 01A1 R                 MOV     SP,[SPsave] 
    1815 065C  FB                               STI 
    1816 065D  58                               POP     AX 
    1817 065E                           SPRET: 
    1818 065E  C3                               RET 
    1819                                 
    1820 065F  EB 65 90                 FILEOFJ: JMP    FILEOF 
    1821                                 
    1822 0662                           READBUFF: 
    1823                                ASSUME  DS:DG,ES:NOTHING 
    1824                                 
    1825 0662  B0 24                            MOV     AL,24H 
    1826 0664  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    1827 0666  CD 21                            INT     21H 
    1828 0668  8C 06 01A9 R                     MOV     WORD PTR [HERRINT+2],ES
					         ;Save current vector 
    1829 066C  89 1E 01A7 R                     MOV     WORD PTR [HERRINT],BX 
    1830 0670  BA 06D1 R                        MOV     DX,OFFSET DG:DSKERR 
    1831 0673  B0 24                            MOV     AL,24H 
    1832 0675  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
					         ;Install our own 
    1833 0677  CD 21                            INT     21H             ;Spoole
					r must catch its errors 
    1834 0679  B4 2F                            MOV     AH,GET_DMA 
    1835 067B  CD 21                            INT     21H 
    1836 067D  8C 06 01A5 R                     MOV     WORD PTR [DMAADDR+2],ES
					         ;Save DMA address 
    1837 0681  89 1E 01A3 R                     MOV     WORD PTR [DMAADDR],BX 
    1838 0685  BA 0305 R                        MOV     DX,OFFSET DG:BUFFER 
    1839 0688  B4 1A                            MOV     AH,SET_DMA 
    1840 068A  CD 21                            INT     21H             ;New DM
					A address 
    1841 068C  C6 06 01B8 R 00                  MOV     [PABORT],0      ;No abo
					rt 
    1842 0691  8B 16 01B2 R                     MOV     DX,[CURRFIL]    ;Read 
    1843 0695  42                               INC     DX 
    1844 0696  42                               INC     DX              ;Skip o
					ver pointer 
    1845 0697  B4 14                            MOV     AH,FCB_SEQ_READ 
    1846 0699  CD 21                            INT     21H 
    1847 069B  50                               PUSH    AX 
    1848 069C  C5 16 01A3 R                     LDS     DX,[DMAADDR] 
    1849                                ASSUME  DS:NOTHING 
    1850 06A0  B4 1A                            MOV     AH,SET_DMA 
    1851 06A2  CD 21                            INT     21H             ;Restor
					e DMA 
    1852 06A4  2E: C5 16 01A7 R                 LDS     DX,[HERRINT] 
    1853 06A9  B0 24                            MOV     AL,24H 
    1854 06AB  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-72
                                                            

					 
    1855 06AD  CD 21                            INT     21H             ;Restor
					e Error INT 
    1856 06AF  58                               POP     AX 
    1857 06B0  0E                               PUSH    CS 
    1858 06B1  1F                               POP     DS 
    1859                                ASSUME  DS:DG 
    1860 06B2  80 3E 01B8 R 00                  CMP     [PABORT],0 
    1861 06B7  75 12                            JNZ     TONEXTFIL       ;Barf o
					n this file, got INT 24 
    1862 06B9  3C 01                            CMP     AL,01 
    1863 06BB  74 09                            JZ      FILEOF          ;Read E
					OF? 
    1864 06BD  BB 0305 R                        MOV     BX,OFFSET DG:BUFFER    
					 ;Buffer full 
    1865 06C0  89 1E 01B0 R                     MOV     [NXTCHR],BX 
    1866 06C4  EB 84                            JMP     DONEJMP 
    1867                                 
    1868 06C6                           FILEOF: 
    1869 06C6  B0 0C                            MOV     AL,0CH          ;Form f
					eed 
    1870 06C8  E8 0929 R                        CALL    LOUT 
    1871 06CB                           TONEXTFIL: 
    1872 06CB  E8 0904 R                        CALL    NEXTFIL 
    1873 06CE  E9 064A R                        JMP     DONEJMP 
    1874                                 
    1875                                ;INT 24 handler 
    1876                                 
    1877 06D1                           DSKERR: 
    1878                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    1879 06D1  FB                               STI 
    1880 06D2  2E: 80 3E 01B8 R 00              CMP     [PABORT],0 
    1881 06D8  75 5B                            JNZ     IGNRET 
    1882 06DA  53                               PUSH    BX 
    1883 06DB  51                               PUSH    CX 
    1884 06DC  52                               PUSH    DX 
    1885 06DD  57                               PUSH    DI 
    1886 06DE  56                               PUSH    SI 
    1887 06DF  55                               PUSH    BP 
    1888 06E0  06                               PUSH    ES 
    1889 06E1  1E                               PUSH    DS 
    1890 06E2  0E                               PUSH    CS 
    1891 06E3  1F                               POP     DS 
    1892 06E4  0E                               PUSH    CS 
    1893 06E5  07                               POP     ES 
    1894                                ASSUME  DS:DG,ES:DG 
    1895 06E6  00 06 0300 R                     ADD     [BADDRVM],AL    ;Set co
					rrect drive letter 
    1896 06EA  BE 01B9 R                        MOV     SI,OFFSET DG:ERRMES 
    1897 06ED  E8 091E R                        CALL    LISTMES 
    1898 06F0  F6 C4 80                         TEST    AH,080H 
    1899 06F3  75 43                            JNZ     FATERR 
    1900 06F5  81 E7 00FF                       AND     DI,0FFH 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-73
                                                            

    1901 06F9  83 FF 0C                         CMP     DI,12 
    1902 06FC  76 03                            JBE     HAVCOD 
    1903 06FE  BF 000C                          MOV     DI,12 
    1904 0701                           HAVCOD: 
    1905 0701  D1 E7                            SHL     DI,1 
    1906 0703  8B BD 023C R                     MOV     DI,WORD PTR [DI+MESBAS]
					 ; Get pointer to error message 
    1907 0707  8B F7                            MOV     SI,DI 
    1908 0709  E8 091E R                        CALL    LISTMES          ; Prin
					t error type 
    1909 070C  BF 01DF R                        MOV     DI,OFFSET DG:EMFILNAM 
    1910 070F  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
    1911 0713  83 C6 02                         ADD     SI,2             ;Get t
					o file name 
    1912 0716  AC                               LODSB 
    1913 0717  04 40                            ADD     AL,'@' 
    1914 0719  AA                               STOSB 
    1915 071A  47                               INC     DI 
    1916 071B  B9 0004                          MOV     CX,4 
    1917 071E  F3/ A5                           REP     MOVSW 
    1918 0720  47                               INC     DI 
    1919 0721  A5                               MOVSW 
    1920 0722  A4                               MOVSB 
    1921 0723  BE 01CA R                        MOV     SI,OFFSET DG:ERRMEST 
    1922 0726  E8 091E R                        CALL    LISTMES 
    1923 0729                           SETABORT: 
    1924 0729  FE 06 01B8 R                     INC     [PABORT]               
					 ;Indicate abort 
    1925 072D  1F                               POP     DS 
    1926 072E  07                               POP     ES 
    1927 072F  5D                               POP     BP 
    1928 0730  5E                               POP     SI 
    1929 0731  5F                               POP     DI 
    1930 0732  5A                               POP     DX 
    1931 0733  59                               POP     CX 
    1932 0734  5B                               POP     BX 
    1933 0735                           IGNRET: 
    1934 0735  32 C0                            XOR     AL,AL                  
					 ;Ignore 
    1935 0737  CF                               IRET 
    1936                                 
    1937 0738                           FATERR: 
    1938 0738  BE 02E0 R                        MOV     SI,OFFSET DG:FATMES 
    1939 073B  E8 091E R                        CALL    LISTMES 
    1940 073E  EB E9                            JMP     SHORT SETABORT 
    1941                                 
    1942 0740  E9 08B1 R                ADDFILJ: JMP    ADDFIL 
    1943                                 
    1944 0743                           COMBUSY: 
    1945 0743  B8 FFFF                          MOV     AX,-1 
    1946 0746  CF                               IRET 
    1947                                 
    1948                                ;Communications interrupt 
    1949 0747                           SPCOMINT: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-74
                                                            

    1950                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    1951 0747  2E: 80 3E 0199 R 00              CMP     [CBUSY],0 
    1952 074D  75 F4                            JNZ     COMBUSY 
    1953 074F  2E: FE 06 0199 R                 INC     [CBUSY]                
					 ;Exclude 
    1954 0754  FB                               STI                            
					 ;Turn ints back on 
    1955 0755  56                               PUSH    SI 
    1956 0756  57                               PUSH    DI 
    1957 0757  51                               PUSH    CX 
    1958 0758  1E                               PUSH    DS 
    1959 0759  0E                               PUSH    CS 
    1960 075A  1F                               POP     DS 
    1961                                ASSUME  DS:DG 
    1962 075B  C6 06 019E R 00                  MOV     [PCANMES],0            
					 ;Havn't printed cancel message 
    1963 0760  0A E4                            OR      AH,AH 
    1964 0762  74 DC                            JZ      ADDFILJ                
					 ;Add file 
    1965 0764  80 FC 01                         CMP     AH,1 
    1966 0767  74 48                            JZ      CANFIL                 
					 ;Cancel File(s) 
    1967 0769  32 C0                            XOR     AL,AL 
    1968 076B                           SETCOUNT: 
    1969 076B  50                               PUSH    AX              ;Save A
					L return code 
    1970 076C  32 E4                            XOR     AH,AH 
    1971 076E  BE 0A73 R                        MOV     SI,OFFSET DG:SPLFCB 
    1972 0771  8B 0E 0A6F R                     MOV     CX,[NUMFCBS] 
    1973 0775                           CNTFILS: 
    1974 0775  80 7C 02 FF                      CMP     BYTE PTR [SI+2],-1     
					   ;Valid? 
    1975 0779  74 02                            JZ      LNEXT 
    1976 077B  FE C4                            INC     AH 
    1977 077D                           LNEXT: 
    1978 077D  83 C6 28                         ADD     SI,FCBSIZ 
    1979 0780  E2 F3                            LOOP    CNTFILS 
    1980 0782                           COMRET: 
    1981 0782  BB 0A73 R                        MOV     BX,OFFSET DG:SPLFCB 
    1982 0785  8B 16 01B2 R                     MOV     DX,[CURRFIL] 
    1983 0789  1E                               PUSH    DS 
    1984 078A  07                               POP     ES 
    1985                                ASSUME  ES:NOTHING 
    1986 078B  8A EC                            MOV     CH,AH 
    1987 078D  58                               POP     AX                     
					 ;Get AL return 
    1988 078E  8A E5                            MOV     AH,CH 
    1989                                 
    1990                                        IF      HARDINT 
    1991 0790                           BWAIT3: 
    1992 0790  80 3E 0194 R 00                  CMP     [BUSY],0 
    1993 0795  75 F9                            JNZ     BWAIT3 
    1994 0797  FE 06 0194 R                     INC     [BUSY] 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-75
                                                            

    1995                                        ENDIF 
    1996                                 
    1997 079B  E8 0959 R                        CALL    PSTAT                  
					 ; Tweek error counter 
    1998                                 
    1999                                        IF      HARDINT 
    2000 079E  C6 06 0194 R 00                  MOV     [BUSY],0 
    2001                                        ENDIF 
    2002                                 
    2003 07A3  1F                               POP     DS 
    2004                                ASSUME  DS:NOTHING 
    2005 07A4  59                               POP     CX 
    2006 07A5  5F                               POP     DI 
    2007 07A6  5E                               POP     SI 
    2008 07A7  2E: C6 06 0199 R 00              MOV     [CBUSY],0 
    2009 07AD  CF                               IRET 
    2010                                 
    2011 07AE  E9 087B R                DELALLJ: JMP    DELALL 
    2012                                 
    2013 07B1                           CANFIL: 
    2014                                ASSUME  DS:DG,ES:NOTHING 
    2015 07B1  8B 0E 0A6F R                     MOV     CX,[NUMFCBS] 
    2016                                 
    2017                                        IF      HARDINT 
    2018 07B5                           BWAIT: 
    2019 07B5  80 3E 0194 R 00                  CMP     [BUSY],0 
    2020 07BA  75 F9                            JNZ     BWAIT 
    2021 07BC  FE 06 0194 R                     INC     [BUSY] 
    2022                                        ENDIF 
    2023                                 
    2024 07C0  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
    2025 07C4  83 FA FF                         CMP     DX,-1 
    2026 07C7  74 E5                            JZ      DELALLJ 
    2027 07C9  8B 1C                            MOV     BX,[SI] 
    2028 07CB  53                               PUSH    BX 
    2029 07CC                           LOOKEND:                        ;Set in
					itial pointer values 
    2030 07CC  3B DE                            CMP     BX,SI 
    2031 07CE  74 06                            JZ      GOTLAST 
    2032 07D0  58                               POP     AX 
    2033 07D1  53                               PUSH    BX 
    2034 07D2  8B 1F                            MOV     BX,[BX] 
    2035 07D4  EB F6                            JMP     SHORT LOOKEND 
    2036                                 
    2037 07D6                           GOTLAST: 
    2038 07D6  5B                               POP     BX 
    2039 07D7  89 1E 01B4 R                     MOV     [LASTFCB],BX 
    2040 07DB  89 1E 01B6 R                     MOV     [LASTFCB2],BX 
    2041 07DF  07                               POP     ES 
    2042 07E0  06                               PUSH    ES 
    2043 07E1  8B DE                            MOV     BX,SI 
    2044 07E3                           LOOKMATCH: 
    2045 07E3  8B FA                            MOV     DI,DX 
    2046 07E5  83 C6 02                         ADD     SI,2                   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-76
                                                            

					 ;Skip pointer 
    2047 07E8  80 3C FF                         CMP     BYTE PTR [SI],-1 
    2048 07EB  74 6A                            JZ      CANTERMJ               
					 ;No more 
    2049 07ED  A6                               CMPSB 
    2050 07EE  75 5D                            JNZ     SKIPFIL                
					 ;DRIVE 
    2051 07F0  51                               PUSH    CX 
    2052 07F1  B9 000B                          MOV     CX,11 
    2053 07F4                           NXTCHAR: 
    2054 07F4  26: 8A 05                        MOV     AL,ES:[DI] 
    2055 07F7  47                               INC     DI 
    2056 07F8  E8 08A6 R                        CALL    UPCONV 
    2057 07FB  8A E0                            MOV     AH,AL 
    2058 07FD  AC                               LODSB 
    2059 07FE  E8 08A6 R                        CALL    UPCONV 
    2060 0801  80 FC 3F                         CMP     AH,"?"                 
					 ;Wild card? 
    2061 0804  74 04                            JZ      NXTCHRLP               
					 ;Yes 
    2062 0806  3A E0                            CMP     AH,AL 
    2063 0808  75 42                            JNZ     SKIPFILC 
    2064 080A                           NXTCHRLP: 
    2065 080A  E2 E8                            LOOP    NXTCHAR 
    2066 080C                           MATCH: 
    2067 080C  59                               POP     CX 
    2068 080D  B4 FF                            MOV     AH,-1 
    2069 080F  86 67 02                         XCHG    AH,[BX+2]              
					 ;Zap it 
    2070 0812  3B 1E 01B2 R                     CMP     BX,[CURRFIL]           
					 ;Is current file? 
    2071 0816  75 41                            JNZ     REQUEUE                
					 ;No 
    2072 0818  B0 01                            MOV     AL,1 
    2073 081A  86 06 019E R                     XCHG    AL,[PCANMES] 
    2074 081E  0A C0                            OR      AL,AL 
    2075 0820  75 26                            JNZ     DIDCMES                
					 ;Only print cancel message once 
    2076 0822  06                               PUSH    ES 
    2077 0823  0E                               PUSH    CS 
    2078 0824  07                               POP     ES 
    2079 0825  BF 01F5 R                        MOV     DI,OFFSET DG:CANFILNAM 
    2080 0828  8B F3                            MOV     SI,BX 
    2081 082A  83 C6 03                         ADD     SI,3             ;Get t
					o file name 
    2082 082D  8A C4                            MOV     AL,AH 
    2083 082F  04 40                            ADD     AL,'@' 
    2084 0831  AA                               STOSB 
    2085 0832  47                               INC     DI 
    2086 0833  B9 0004                          MOV     CX,4 
    2087 0836  F3/ A5                           REP     MOVSW 
    2088 0838  47                               INC     DI 
    2089 0839  A5                               MOVSW 
    2090 083A  A4                               MOVSB 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-77
                                                            

    2091 083B  07                               POP     ES 
    2092 083C  BE 01F1 R                        MOV     SI,OFFSET DG:CANMES 
    2093 083F  E8 091E R                        CALL    LISTMES 
    2094 0842  BE 01ED R                        MOV     SI,OFFSET DG:BELMES 
    2095 0845  E8 091E R                        CALL    LISTMES 
    2096 0848                           DIDCMES: 
    2097 0848  51                               PUSH    CX 
    2098 0849  E8 0904 R                        CALL    NEXTFIL 
    2099 084C                           SKIPFILC: 
    2100 084C  59                               POP     CX 
    2101 084D                           SKIPFIL: 
    2102 084D  89 1E 01B6 R                     MOV     [LASTFCB2],BX 
    2103 0851  8B 1F                            MOV     BX,[BX] 
    2104 0853                           NEXTFC: 
    2105 0853  8B F3                            MOV     SI,BX 
    2106 0855  E2 8C                            LOOP    LOOKMATCH 
    2107 0857  EB 43                    CANTERMJ: JMP   SHORT CANTERM 
    2108                                 
    2109 0859                           REQUEUE: 
    2110 0859  8B 07                            MOV     AX,[BX] 
    2111 085B  3B 06 01B2 R                     CMP     AX,[CURRFIL]           
					 ;Is last FCB? 
    2112 085F  74 EC                            JZ      SKIPFIL                
					 ;Yes, is in right place 
    2113 0861  8B 36 01B6 R                     MOV     SI,[LASTFCB2] 
    2114 0865  89 04                            MOV     [SI],AX                
					 ;Unlink FCB 
    2115 0867  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
    2116 086B  89 37                            MOV     [BX],SI 
    2117 086D  8B 36 01B4 R                     MOV     SI,[LASTFCB] 
    2118 0871  89 1C                            MOV     [SI],BX                
					 ;Link FCB at end 
    2119 0873  89 1E 01B4 R                     MOV     [LASTFCB],BX           
					 ;New end 
    2120 0877  8B D8                            MOV     BX,AX                  
					 ;Process what it pointed to 
    2121 0879  EB D8                            JMP     SHORT NEXTFC 
    2122                                 
    2123 087B                           DELALL: 
    2124 087B  2E: 80 7C 02 FF                  CMP     BYTE PTR CS:[SI+2],-1  
					 ;Examine current file 
    2125 0880                           DELALL2: 
    2126 0880  C6 44 02 FF                      MOV     BYTE PTR [SI+2],-1     
					 ;Zap it 
    2127 0884  8B 34                            MOV     SI,[SI] 
    2128 0886  E2 F8                            LOOP    DELALL2 
    2129 0888  74 0C                            JZ      CANTERM1               
					 ;No message if nothing was in progress
					 
    2130 088A  BE 0219 R                        MOV     SI,OFFSET DG:ALLCAN 
    2131 088D  E8 091E R                        CALL    LISTMES 
    2132 0890  BE 01ED R                        MOV     SI,OFFSET DG:BELMES 
    2133 0893  E8 091E R                        CALL    LISTMES 
    2134 0896                           CANTERM1: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-78
                                                            

    2135 0896  C7 06 01B0 R 0505 R              MOV     [NXTCHR],OFFSET DG:BUFF
					ER + BLKSIZ  ;Buffer empty 
    2136 089C                           CANTERM: 
    2137                                 
    2138                                        IF      HARDINT 
    2139 089C  C6 06 0194 R 00                  MOV     [BUSY],0 
    2140                                        ENDIF 
    2141                                 
    2142 08A1  33 C0                            XOR     AX,AX 
    2143 08A3  E9 076B R                        JMP     SETCOUNT 
    2144                                 
    2145 08A6                           UPCONV: 
    2146 08A6  3C 61                            CMP     AL,'a' 
    2147 08A8  72 06                            JB      NOCONV 
    2148 08AA  3C 7A                            CMP     AL,'z' 
    2149 08AC  77 02                            JA      NOCONV 
    2150 08AE  2C 20                            SUB     AL,20H 
    2151 08B0                           NOCONV: 
    2152 08B0  C3                               RET 
    2153                                 
    2154 08B1                           ADDFIL: 
    2155                                ASSUME  DS:DG,ES:NOTHING 
    2156 08B1  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
    2157 08B5  8B 0E 0A6F R                     MOV     CX,[NUMFCBS] 
    2158                                 
    2159                                        IF      HARDINT 
    2160 08B9                           BWAIT2: 
    2161 08B9  80 3E 0194 R 00                  CMP     [BUSY],0 
    2162 08BE  75 F9                            JNZ     BWAIT2 
    2163 08C0  FE 06 0194 R                     INC     [BUSY] 
    2164                                        ENDIF 
    2165                                 
    2166 08C4                           LOOKSPOT: 
    2167 08C4  80 7C 02 FF                      CMP     BYTE PTR [SI+2],-1 
    2168 08C8  74 0E                            JZ      GOTSPOT 
    2169 08CA  8B 34                            MOV     SI,[SI] 
    2170 08CC  E2 F6                            LOOP    LOOKSPOT 
    2171                                 
    2172                                        IF      HARDINT 
    2173 08CE  C6 06 0194 R 00                  MOV     [BUSY],0 
    2174                                        ENDIF 
    2175                                 
    2176 08D3  B0 01                            MOV     AL,1 
    2177 08D5  E9 076B R                        JMP     SETCOUNT 
    2178                                 
    2179 08D8                           GOTSPOT: 
    2180 08D8  1E                               PUSH    DS 
    2181 08D9  07                               POP     ES 
    2182 08DA  1F                               POP     DS 
    2183 08DB  1E                               PUSH    DS 
    2184                                ASSUME  DS:NOTHING 
    2185 08DC  56                               PUSH    SI 
    2186 08DD  8B FE                            MOV     DI,SI 
    2187 08DF  83 C7 02                         ADD     DI,2 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-79
                                                            

    2188 08E2  8B F2                            MOV     SI,DX 
    2189 08E4  B9 0013                          MOV     CX,19 
    2190 08E7  F3/ A5                           REP     MOVSW           ;Copy i
					n and set FCB 
    2191 08E9  5E                               POP     SI 
    2192 08EA  06                               PUSH    ES 
    2193 08EB  1F                               POP     DS 
    2194                                ASSUME  DS:DG 
    2195 08EC  C7 44 0E 0000                    MOV     WORD PTR [SI+2+fcb_EXTE
					NT],0 
    2196 08F1  C6 44 22 00                      MOV     BYTE PTR [SI+2+fcb_NR],
					0 
    2197 08F5  C7 44 10 0200                    MOV     WORD PTR [SI+2+fcb_RECS
					IZ],BLKSIZ 
    2198                                 
    2199                                        IF      HARDINT 
    2200 08FA  C6 06 0194 R 00                  MOV     [BUSY],0 
    2201                                        ENDIF 
    2202                                 
    2203 08FF  32 C0                            XOR     AL,AL 
    2204 0901  E9 076B R                        JMP     SETCOUNT 
    2205                                 
    2206 0904                           NEXTFIL: 
    2207                                ASSUME  DS:DG,ES:NOTHING 
    2208 0904  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
    2209 0908  C6 44 02 FF                      MOV     BYTE PTR [SI+2],-1     
					 ;Done with current file 
    2210 090C  8B 34                            MOV     SI,[SI] 
    2211 090E  89 36 01B2 R                     MOV     [CURRFIL],SI 
    2212 0912  C7 06 01B0 R 0505 R              MOV     [NXTCHR],OFFSET DG:BUFF
					ER + BLKSIZ  ;Buffer empty 
    2213 0918  C6 06 01AF R 00                  MOV     [COLPOS],0             
					             ;Start of line 
    2214 091D  C3                               RET 
    2215                                 
    2216 091E                           LISTMES: 
    2217                                ASSUME  DS:DG,ES:NOTHING 
    2218 091E  AC                               LODSB 
    2219 091F  3C 24                            CMP     AL,"$" 
    2220 0921  74 05                            JZ      LMESDONE 
    2221 0923  E8 0929 R                        CALL    LOUT 
    2222 0926  EB F6                            JMP     LISTMES 
    2223                                 
    2224 0928                           LMESDONE: 
    2225 0928  C3                               RET 
    2226                                 
    2227 0929                           LOUT: 
    2228 0929  53                               PUSH    BX 
    2229 092A                           LWAIT: 
    2230 092A  E8 0959 R                        CALL    PSTAT 
    2231 092D  74 0A                            JZ      PREADY 
    2232 092F  81 3E 0A71 R 4E20                CMP     [ERRCNT],ERRCNT2 
    2233 0935  77 05                            JA      POPRET                 
					 ;Don't get stuck 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-80
                                                            

    2234 0937  EB F1                            JMP     SHORT LWAIT 
    2235 0939                           PREADY: 
    2236 0939  E8 0981 R                        CALL    POUT 
    2237 093C                           POPRET: 
    2238 093C  5B                               POP     BX 
    2239 093D  C3                               RET 
    2240                                 
    2241                                ;Stuff for BIOS interface 
    2242 = 0200                         IOBUSY  EQU     0200H 
    2243 = 8000                         IOERROR EQU     8000H 
    2244                                 
    2245 093E  ??                       BYTEBUF DB      ? 
    2246                                 
    2247 093F  ????????                 CALLAD  DD      ? 
    2248                                 
    2249 0943  16                       IOCALL  DB      22 
    2250 0944  00                               DB      0 
    2251 0945  ??                       IOREQ   DB      ? 
    2252 0946  0000                     IOSTAT  DW      0 
    2253 0948  0008[                            DB      8 DUP(?) 
    2254            ??                  
    2255                         ]      
    2256                                
    2257 0950  00                               DB      0 
    2258 0951  093E R                           DW      OFFSET DG:BYTEBUF 
    2259 0953  ????                     INTSEG  DW      ? 
    2260 0955  0001                     IOCNT   DW      1 
    2261 0957  0000                             DW      0 
    2262                                 
    2263 0959                           PSTAT: 
    2264                                ASSUME  DS:DG 
    2265 0959  53                               PUSH    BX 
    2266 095A  FF 06 0A71 R                     INC     [ERRCNT] 
    2267 095E  B3 0A                            MOV     BL,10 
    2268 0960  E8 0986 R                        CALL    DOCALL 
    2269 0963  F7 06 0946 R 8000                TEST    [IOSTAT],IOERROR 
    2270 0969  74 06                            JZ      NOSTATERR 
    2271 096B  81 0E 0946 R 0200                OR      [IOSTAT],IOBUSY        
					 ;If error, show buisy 
    2272 0971                           NOSTATERR: 
    2273 0971  F7 06 0946 R 0200                TEST    [IOSTAT],IOBUSY 
    2274 0977  75 06                            JNZ     RET13P                 
					 ;Shows buisy 
    2275 0979  C7 06 0A71 R 0000                MOV     [ERRCNT],0 
    2276 097F                           RET13P: 
    2277 097F  5B                               POP     BX 
    2278 0980  C3                               RET 
    2279                                 
    2280 0981                           POUT: 
    2281                                ASSUME  DS:DG 
    2282 0981  A2 093E R                        MOV     [BYTEBUF],AL 
    2283 0984  B3 08                            MOV     BL,8 
    2284 0986                           DOCALL: 
    2285 0986  06                               PUSH    ES 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-81
                                                            

    2286 0987  88 1E 0945 R                     MOV     [IOREQ],BL 
    2287 098B  8C CB                            MOV     BX,CS 
    2288 098D  8E C3                            MOV     ES,BX 
    2289 098F  BB 0943 R                        MOV     BX,OFFSET DG:IOCALL 
    2290 0992  C7 06 0946 R 0000                MOV     [IOSTAT],0 
    2291 0998  C7 06 0955 R 0001                MOV     [IOCNT],1 
    2292 099E  1E                               PUSH    DS 
    2293 099F  56                               PUSH    SI 
    2294 09A0  50                               PUSH    AX 
    2295 09A1  C5 36 01AB R                     LDS     SI,[LISTDEV] 
    2296                                ASSUME  DS:NOTHING 
    2297 09A5  8B 44 06                         MOV     AX,[SI+6] 
    2298 09A8  2E: A3 093F R                    MOV     WORD PTR [CALLAD],AX 
    2299 09AC  2E: FF 1E 093F R                 CALL    [CALLAD] 
    2300 09B1  8B 44 08                         MOV     AX,[SI+8] 
    2301 09B4  2E: A3 093F R                    MOV     WORD PTR [CALLAD],AX 
    2302 09B8  2E: FF 1E 093F R                 CALL    [CALLAD] 
    2303 09BD  58                               POP     AX 
    2304 09BE  5E                               POP     SI 
    2305 09BF  1F                               POP     DS 
    2306                                ASSUME  DS:DG 
    2307 09C0  07                               POP     ES 
    2308 09C1  C3                               RET 
    2309                                 
    2310                                        IF      IBM 
    2311 09C2  ????????                 REAL_INT_13 DD  ? 
    2312 09C6  09DF R                   INT_13_RETADDR DW OFFSET DG:INT_13_BACK
					 
    2313                                 
    2314 09C8                           INT_13  PROC    FAR 
    2315                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    2316 09C8  9C                               PUSHF 
    2317 09C9  2E: FE 06 0194 R                 INC     [BUSY]                 
					 ;Exclude if dumb program call ROM 
    2318 09CE  0E                               PUSH    CS 
    2319 09CF  2E: FF 36 09C6 R                 PUSH    [INT_13_RETADDR] 
    2320 09D4  2E: FF 36 09C4 R                 PUSH    WORD PTR [REAL_INT_13+2
					] 
    2321 09D9  2E: FF 36 09C2 R                 PUSH    WORD PTR [REAL_INT_13] 
    2322 09DE  CB                               RET 
    2323                                INT_13  ENDP 
    2324                                 
    2325 09DF                           INT_13_BACK     PROC    FAR 
    2326 09DF  9C                               PUSHF 
    2327 09E0  2E: FE 0E 0194 R                 DEC     [BUSY] 
    2328 09E5  9D                               POPF 
    2329 09E6  CA 0002                          RET     2               ;Chuck 
					saved flags 
    2330                                INT_13_BACK     ENDP 
    2331                                        ENDIF 
    2332                                 
    2333                                 
    2334                                        IF      IBM 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-82
                                                            

    2335                                 
    2336 09E9  ????????                 REAL_INT_5  DD  ? 
    2337 09ED  ????????                 REAL_INT_17 DD  ? 
    2338 09F1  0000                     INT_17_NUM  DW  0 
    2339                                 
    2340 09F3                           INT_17: 
    2341                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    2342 09F3  56                               PUSH    SI 
    2343 09F4  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
    2344 09F9  46                               INC     SI 
    2345 09FA  46                               INC     SI 
    2346 09FB  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
    2347 09FF  5E                               POP     SI 
    2348 0A00  74 13                            JZ      DO_INT_17              
					 ;Nothing pending, so OK 
    2349 0A02  2E: 3B 16 09F1 R                 CMP     DX,[INT_17_NUM] 
    2350 0A07  75 0C                            JNZ     DO_INT_17              
					 ;Not my unit 
    2351 0A09  2E: 80 3E 0194 R 00              CMP     [BUSY],0 
    2352 0A0F  75 04                            JNZ     DO_INT_17              
					 ;You are me 
    2353 0A11  FB                               STI 
    2354 0A12  B4 A1                            MOV     AH,0A1H                
					 ;You are bad, get out of paper 
    2355 0A14  CF                               IRET 
    2356                                 
    2357 0A15                           DO_INT_17: 
    2358 0A15  2E: FF 2E 09ED R                 JMP     [REAL_INT_17]          
					 ;Do a 17 
    2359                                 
    2360 0A1A  ????????                 REAL_INT_14 DD  ? 
    2361 0A1E  0000                     INT_14_NUM  DW  0 
    2362                                 
    2363 0A20                           INT_14: 
    2364                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    2365 0A20  56                               PUSH    SI 
    2366 0A21  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
    2367 0A26  46                               INC     SI 
    2368 0A27  46                               INC     SI 
    2369 0A28  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
    2370 0A2C  5E                               POP     SI 
    2371 0A2D  74 1E                            JZ      DO_INT_14              
					 ;Nothing pending, so OK 
    2372 0A2F  2E: 3B 16 0A1E R                 CMP     DX,[INT_14_NUM] 
    2373 0A34  75 17                            JNZ     DO_INT_14              
					 ;Not my unit 
    2374 0A36  2E: 80 3E 0194 R 00              CMP     [BUSY],0 
    2375 0A3C  75 0F                            JNZ     DO_INT_14              
					 ;You are me 
    2376 0A3E  FB                               STI 
    2377 0A3F  0A E4                            OR      AH,AH 
    2378 0A41  74 05                            JZ      SET14_AX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-83
                                                            

    2379 0A43  80 FC 02                         CMP     AH,2 
    2380 0A46  76 02                            JBE     SET14_AH 
    2381 0A48                           SET14_AX: 
    2382 0A48  B0 00                            MOV     AL,0 
    2383 0A4A                           SET14_AH: 
    2384 0A4A  B4 80                            MOV     AH,80H                 
					 ;Time out 
    2385 0A4C  CF                               IRET 
    2386                                 
    2387 0A4D                           DO_INT_14: 
    2388 0A4D  2E: FF 2E 0A1A R                 JMP     [REAL_INT_14]          
					 ;Do a 14 
    2389                                 
    2390 0A52                           INT_5: 
    2391                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    2392 0A52  56                               PUSH    SI 
    2393 0A53  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
    2394 0A58  46                               INC     SI 
    2395 0A59  46                               INC     SI 
    2396 0A5A  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
    2397 0A5E  5E                               POP     SI 
    2398 0A5F  74 09                            JZ      DO_INT_5               
					 ;Nothing pending, so OK 
    2399 0A61  2E: 83 3E 09F1 R 00              CMP     [INT_17_NUM],0 
    2400 0A67  75 01                            JNZ     DO_INT_5               
					 ;Only care about unit 0 
    2401 0A69  CF                               IRET                           
					 ;Pretend it worked 
    2402                                 
    2403 0A6A                           DO_INT_5: 
    2404 0A6A  2E: FF 2E 09E9 R                 JMP     [REAL_INT_5]           
					 ;Do a 5 
    2405                                        ENDIF 
    2406                                 
    2407                                 
    2408                                ;The following data is order and positi
					on dependant 
    2409 0A6F  000A                     NUMFCBS DW      10 
    2410 0A71  0000                     ERRCNT  DW      0 
    2411                                 
    2412 0A73  0A9B R                   SPLFCB  DW      OFFSET DG:FC1 
    2413 0A75  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2414            FF                  
    2415                         ]      
    2416                                
    2417 0A9B  0AC3 R                   FC1     DW      OFFSET DG:FC2 
    2418 0A9D  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2419            FF                  
    2420                         ]      
    2421                                
    2422 0AC3  0AEB R                   FC2     DW      OFFSET DG:FC3 
    2423 0AC5  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2424            FF                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-84
                                                            

    2425                         ]      
    2426                                
    2427 0AEB  0B13 R                   FC3     DW      OFFSET DG:FC4 
    2428 0AED  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2429            FF                  
    2430                         ]      
    2431                                
    2432 0B13  0B3B R                   FC4     DW      OFFSET DG:FC5 
    2433 0B15  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2434            FF                  
    2435                         ]      
    2436                                
    2437 0B3B  0B63 R                   FC5     DW      OFFSET DG:FC6 
    2438 0B3D  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2439            FF                  
    2440                         ]      
    2441                                
    2442 0B63  0B8B R                   FC6     DW      OFFSET DG:FC7 
    2443 0B65  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2444            FF                  
    2445                         ]      
    2446                                
    2447 0B8B  0BB3 R                   FC7     DW      OFFSET DG:FC8 
    2448 0B8D  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2449            FF                  
    2450                         ]      
    2451                                
    2452 0BB3  0BDB R                   FC8     DW      OFFSET DG:FC9 
    2453 0BB5  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2454            FF                  
    2455                         ]      
    2456                                
    2457 0BDB  0A73 R                   FC9     DW      OFFSET DG:SPLFCB 
    2458 0BDD  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
    2459            FF                  
    2460                         ]      
    2461                                
    2462                                 
    2463 0C03                           DEF_ENDRES      LABEL   BYTE 
    2464                                 
    2465                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
    2466                                 
    2467 0C03                           BADSPOOL: 
    2468 0C03  BA 00FE R                        MOV     DX,OFFSET DG:BADMES 
    2469 0C06  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2470 0C08  CD 21                            INT     21H 
    2471 0C0A  CD 20                            INT     20H 
    2472                                 
    2473 0C0C                           SETUP: 
    2474                                ;Called once to install resident 
    2475 0C0C  FC                               CLD 
    2476 0C0D  8C 0E 0953 R                     MOV     [INTSEG],CS 
    2477 0C11  BA 014B R                        MOV     DX,OFFSET DG:PROMPT 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-85
                                                            

    2478 0C14  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2479 0C16  CD 21                            INT     21H 
    2480 0C18  BA 0229 R                        MOV     DX,OFFSET DG:COMBUF 
    2481 0C1B  B4 0A                            MOV     AH,STD_CON_STRING_INPUT
					 
    2482 0C1D  CD 21                            INT     21H                    
					 ;Get device name 
    2483 0C1F  BA 00A6 R                        MOV     DX,OFFSET DG:CRLF 
    2484 0C22  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2485 0C24  CD 21                            INT     21H 
    2486 0C26  8A 0E 022A R                     MOV     CL,[COMBUF+1] 
    2487 0C2A  0A C9                            OR      CL,CL 
    2488 0C2C  74 0A                            JZ      DEFSPOOL               
					 ;User didn't specify one 
    2489 0C2E  32 ED                            XOR     CH,CH 
    2490 0C30  BF 023A R                        MOV     DI,OFFSET DG:LISTFCB + 
					1 
    2491 0C33  BE 022B R                        MOV     SI,OFFSET DG:COMBUF + 2
					 
    2492 0C36  F3/ A4                           REP     MOVSB 
    2493 0C38                           DEFSPOOL: 
    2494 0C38  BA 0239 R                        MOV     DX,OFFSET DG:LISTFCB 
    2495 0C3B  B4 0F                            MOV     AH,FCB_OPEN 
    2496 0C3D  CD 21                            INT     21H 
    2497 0C3F  0A C0                            OR      AL,AL 
    2498 0C41  75 C0                            JNZ     BADSPOOL               
					 ;Bad 
    2499 0C43  F6 06 0251 R 80                  TEST    BYTE PTR [LISTFCB.fcb_D
					EVID],080H 
    2500 0C48  74 B9                            JZ      BADSPOOL               
					 ;Must be a device 
    2501 0C4A  C5 36 0252 R                     LDS     SI,DWORD PTR [LISTFCB.f
					cb_FIRCLUS] 
    2502                                ASSUME  DS:NOTHING 
    2503 0C4E  36: 8C 1E 0941 R                 MOV     WORD PTR [CALLAD+2],DS 
					    ;Get I/O routines 
    2504 0C53  36: 8C 1E 01AD R                 MOV     WORD PTR [LISTDEV+2],DS
					    ;Get I/O routines 
    2505 0C58  36: 89 36 01AB R                 MOV     WORD PTR [LISTDEV],SI 
    2506 0C5D  0E                               PUSH    CS 
    2507 0C5E  1F                               POP     DS 
    2508                                ASSUME  DS:DG 
    2509 0C5F  BA 0560 R                        MOV     DX,OFFSET DG:SPINT 
    2510 0C62  B0 28                            MOV     AL,SOFTINT 
    2511 0C64  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    2512 0C66  CD 21                            INT     21H                    
					 ;Get soft vector 
    2513 0C68  8C 06 019C R                     MOV     WORD PTR [SPNEXT+2],ES 
    2514 0C6C  89 1E 019A R                     MOV     WORD PTR [SPNEXT],BX 
    2515 0C70  B0 28                            MOV     AL,SOFTINT 
    2516 0C72  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-86
                                                            

					 
    2517 0C74  CD 21                            INT     21H                    
					 ;Set soft vector 
    2518 0C76  BA 0747 R                        MOV     DX,OFFSET DG:SPCOMINT 
    2519 0C79  B0 2F                            MOV     AL,COMINT 
    2520 0C7B  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
					              ;Set communication vector
					 
    2521 0C7D  CD 21                            INT     21H 
    2522                                 
    2523                                        IF      IBM 
    2524 0C7F  B0 13                            MOV     AL,13H 
    2525 0C81  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    2526 0C83  CD 21                            INT     21H 
    2527 0C85  8C 06 09C4 R                     MOV     WORD PTR [REAL_INT_13+2
					],ES 
    2528 0C89  89 1E 09C2 R                     MOV     WORD PTR [REAL_INT_13],
					BX 
    2529 0C8D  BA 09C8 R                        MOV     DX,OFFSET DG:INT_13 
    2530 0C90  B0 13                            MOV     AL,13H 
    2531 0C92  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
					 
    2532 0C94  CD 21                            INT     21H             ;Set di
					skI/O interrupt 
    2533 0C96  B0 17                            MOV     AL,17H 
    2534 0C98  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    2535 0C9A  CD 21                            INT     21H 
    2536 0C9C  8C 06 09EF R                     MOV     WORD PTR [REAL_INT_17+2
					],ES 
    2537 0CA0  89 1E 09ED R                     MOV     WORD PTR [REAL_INT_17],
					BX 
    2538 0CA4  B0 14                            MOV     AL,14H 
    2539 0CA6  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    2540 0CA8  CD 21                            INT     21H 
    2541 0CAA  8C 06 0A1C R                     MOV     WORD PTR [REAL_INT_14+2
					],ES 
    2542 0CAE  89 1E 0A1A R                     MOV     WORD PTR [REAL_INT_14],
					BX 
    2543 0CB2  B0 05                            MOV     AL,5H 
    2544 0CB4  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    2545 0CB6  CD 21                            INT     21H 
    2546 0CB8  8C 06 09EB R                     MOV     WORD PTR [REAL_INT_5+2]
					,ES 
    2547 0CBC  89 1E 09E9 R                     MOV     WORD PTR [REAL_INT_5],B
					X 
    2548 0CC0  0E                               PUSH    CS 
    2549 0CC1  07                               POP     ES 
    2550 0CC2  BD 023A R                        MOV     BP,OFFSET DG:LISTFCB + 
					1 
    2551 0CC5  8B F5                            MOV     SI,BP 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-87
                                                            

    2552 0CC7  B9 0008                          MOV     CX,8 
    2553 0CCA                           CONLP:                  ;Make sure devi
					ce name in upper case 
    2554 0CCA  AC                               LODSB 
    2555 0CCB  3C 61                            CMP     AL,'a' 
    2556 0CCD  72 08                            JB      DOCONLP 
    2557 0CCF  3C 7A                            CMP     AL,'z' 
    2558 0CD1  77 04                            JA      DOCONLP 
    2559 0CD3  80 6C FF 20                      SUB     BYTE PTR [SI-1],20H 
    2560 0CD7                           DOCONLP: 
    2561 0CD7  E2 F1                            LOOP    CONLP 
    2562 0CD9  BF 01E1 R                        MOV     DI,OFFSET DG:INT_17_HIT
					LIST 
    2563 0CDC                           CHKHIT: 
    2564 0CDC  8B F5                            MOV     SI,BP 
    2565 0CDE  8A 0D                            MOV     CL,[DI] 
    2566 0CE0  47                               INC     DI 
    2567 0CE1  E3 25                            JCXZ    NOTONHITLIST 
    2568 0CE3  F3/ A6                           REPE    CMPSB 
    2569 0CE5  9F                               LAHF 
    2570 0CE6  03 F9                            ADD     DI,CX           ;Bump t
					o next position without affecting flags
					 
    2571 0CE8  8A 1D                            MOV     BL,[DI]         ;Get de
					vice number 
    2572 0CEA  47                               INC     DI 
    2573 0CEB  9E                               SAHF 
    2574 0CEC  75 EE                            JNZ     CHKHIT 
    2575 0CEE  32 FF                            XOR     BH,BH 
    2576 0CF0  89 1E 09F1 R                     MOV     [INT_17_NUM],BX 
    2577 0CF4  BA 09F3 R                        MOV     DX,OFFSET DG:INT_17 
    2578 0CF7  B0 17                            MOV     AL,17H 
    2579 0CF9  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
					 
    2580 0CFB  CD 21                            INT     21H             ;Set pr
					inter interrupt 
    2581 0CFD  BA 0A52 R                        MOV     DX,OFFSET DG:INT_5 
    2582 0D00  B0 05                            MOV     AL,5H 
    2583 0D02  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
					 
    2584 0D04  CD 21                            INT     21H             ;Set pr
					int screen interrupt 
    2585 0D06  EB 24                            JMP     SHORT ALLSET 
    2586 0D08                           NOTONHITLIST: 
    2587 0D08  BF 020A R                        MOV     DI,OFFSET DG:INT_14_HIT
					LIST 
    2588 0D0B                           CHKHIT2: 
    2589 0D0B  8B F5                            MOV     SI,BP 
    2590 0D0D  8A 0D                            MOV     CL,[DI] 
    2591 0D0F  47                               INC     DI 
    2592 0D10  E3 1A                            JCXZ    ALLSET 
    2593 0D12  F3/ A6                           REPE    CMPSB 
    2594 0D14  9F                               LAHF 
    2595 0D15  03 F9                            ADD     DI,CX           ;Bump t
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-88
                                                            

					o next position without affecting flags
					 
    2596 0D17  8A 1D                            MOV     BL,[DI]         ;Get de
					vice number 
    2597 0D19  47                               INC     DI 
    2598 0D1A  9E                               SAHF 
    2599 0D1B  75 EE                            JNZ     CHKHIT2 
    2600 0D1D  32 FF                            XOR     BH,BH 
    2601 0D1F  89 1E 0A1E R                     MOV     [INT_14_NUM],BX 
    2602 0D23  BA 0A20 R                        MOV     DX,OFFSET DG:INT_14 
    2603 0D26  B0 14                            MOV     AL,14H 
    2604 0D28  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
					 
    2605 0D2A  CD 21                            INT     21H             ;Set RS
					232 port interrupt 
    2606 0D2C                           ALLSET: 
    2607                                        ENDIF 
    2608                                 
    2609                                        IF      HARDINT 
    2610 0D2C  B4 34                            MOV     AH,GET_INDOS_FLAG 
    2611 0D2E  CD 21                            INT     21H 
    2612 0D30  8C 06 018E R                     MOV     WORD PTR [INDOS+2],ES  
					 ;Get indos flag location 
    2613 0D34  89 1E 018C R                     MOV     WORD PTR [INDOS],BX 
    2614 0D38  B0 1C                            MOV     AL,INTLOC 
    2615 0D3A  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    2616 0D3C  CD 21                            INT     21H 
    2617 0D3E  8C 06 0192 R                     MOV     WORD PTR [NEXTINT+2],ES
					 
    2618 0D42  89 1E 0190 R                     MOV     WORD PTR [NEXTINT],BX 
    2619 0D46  BA 0506 R                        MOV     DX,OFFSET DG:HDSPINT 
    2620 0D49  B0 1C                            MOV     AL,INTLOC 
    2621 0D4B  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR
					 
    2622 0D4D  CD 21                            INT     21H             ;Set ha
					rdware interrupt 
    2623                                        ENDIF 
    2624                                 
    2625 0D4F  C6 06 0002 R 01                  MOV     [MAKERES],1     ;Indica
					te to do a terminate stay resident 
    2626 0D54  BA 0128 R                        MOV     DX,OFFSET DG:GOODMES 
    2627 0D57  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2628 0D59  CD 21                            INT     21H 
    2629 0D5B  C3                               RET 
    2630                                 
    2631                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
    2632                                 
    2633 0D5C                           TRANSIENT: 
    2634                                ;User interface 
    2635 0D5C  FC                               CLD 
    2636                                 
    2637                                ;Code to print header 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-89
                                                            

    2638                                ;       MOV     DX,OFFSET DG:HEADER 
    2639                                ;       MOV     AH,STD_CON_STRING_OUTPU
					T 
    2640                                ;       INT     21H 
    2641                                 
    2642 = 0136                         DOSVER_LOW      EQU  0136H   ;1.54 in h
					ex 
    2643 = 020B                         DOSVER_HIGH     EQU  020BH   ;2.11 in h
					ex 
    2644 0D5D  B4 30                            MOV     AH,GET_VERSION 
    2645 0D5F  CD 21                            INT     21H 
    2646 0D61  86 E0                            XCHG    AH,AL           ;Turn i
					t around to AH.AL 
    2647 0D63  3D 0136                          CMP     AX,DOSVER_LOW 
    2648 0D66  72 05                            JB      GOTBADDOS 
    2649 0D68  3D 020B                          CMP     AX,DOSVER_HIGH 
    2650 0D6B  76 0B                            JBE     OKDOS 
    2651 0D6D                           GOTBADDOS: 
    2652 0D6D  0E                               PUSH    CS 
    2653 0D6E  1F                               POP     DS 
    2654 0D6F  BA 01C9 R                        MOV     DX,OFFSET DG:BADVER 
    2655 0D72  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2656 0D74  CD 21                            INT     21H 
    2657 0D76  CD 20                            INT     20H 
    2658 0D78                           OKDOS: 
    2659 0D78  B8 3700                          MOV     AX,CHAR_OPER SHL 8 
    2660 0D7B  CD 21                            INT     21H 
    2661 0D7D  88 16 0000 R                     MOV     [SWITCHAR],DL          
					 ;Get user switch character 
    2662 0D81  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR
					 
    2663 0D83  B0 2F                            MOV     AL,COMINT 
    2664 0D85  CD 21                            INT     21H 
    2665                                ASSUME  ES:NOTHING 
    2666 0D87  8B FB                            MOV     DI,BX 
    2667 0D89  BE 0747 R                        MOV     SI,OFFSET DG:SPCOMINT 
    2668 0D8C  B9 000D                          MOV     CX,13 
    2669 0D8F  F3/ A6                           REPE    CMPSB 
    2670 0D91  74 05                            JZ      GOTRES          ;Signat
					ure matched 
    2671 0D93  0E                               PUSH    CS 
    2672 0D94  07                               POP     ES 
    2673 0D95  E8 0C0C R                        CALL    SETUP 
    2674 0D98                           GOTRES: 
    2675 0D98  0E                               PUSH    CS 
    2676 0D99  07                               POP     ES 
    2677 0D9A  B4 19                            MOV     AH,GET_DEFAULT_DRIVE 
    2678 0D9C  CD 21                            INT     21H 
    2679 0D9E  A2 0004 R                        MOV     [DEFDRV],AL 
    2680 0DA1  BE 0080                          MOV     SI,PARMS 
    2681 0DA4  AC                               LODSB 
    2682 0DA5  0A C0                            OR      AL,AL 
    2683 0DA7  75 1E                            JNZ     GOTPARMS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-90
                                                            

    2684 0DA9                           TRANEXIT: 
    2685 0DA9  E8 0EFB R                        CALL    GETSPLIST 
    2686 0DAC  80 3E 0002 R 00                  CMP     [MAKERES],0 
    2687 0DB1  75 02                            JNZ     SETRES 
    2688 0DB3  CD 20                            INT     20H 
    2689                                 
    2690 0DB5                           SETRES: 
    2691 0DB5  8B 16 0035 R                     MOV     DX,[ENDRES] 
    2692 0DB9  CD 27                            INT     27H 
    2693                                 
    2694 0DBB                           ARGSDONE: 
    2695 0DBB  80 3E 0003 R 00                  CMP     [ARGSETUP],0 
    2696 0DC0  74 E7                            JZ      TRANEXIT 
    2697 0DC2  E8 0E46 R                        CALL    PROCESS 
    2698 0DC5  EB E2                            JMP     SHORT TRANEXIT 
    2699                                 
    2700 0DC7                           GOTPARMS: 
    2701 0DC7                           PARSE: 
    2702 0DC7  BF 025E R                        MOV     DI,OFFSET DG:PARSEBUF 
    2703 0DCA  E8 0F83 R                        CALL    CPARSE 
    2704 0DCD  72 EC                            JC      ARGSDONE 
    2705 0DCF  3D 0004                          CMP     AX,4            ;Switch
					? 
    2706 0DD2  75 36                            JNZ     GOTNORMARG 
    2707 0DD4  8A 05                            MOV     AL,[DI]         ;Get th
					e switch character 
    2708 0DD6  3C 43                            CMP     AL,'C' 
    2709 0DD8  74 04                            JZ      SETCAN 
    2710 0DDA  3C 63                            CMP     AL,'c' 
    2711 0DDC  75 07                            JNZ     CHKSPL 
    2712 0DDE                           SETCAN: 
    2713 0DDE  C6 06 0005 R 01                  MOV     [CANFLG],1 
    2714 0DE3  EB E2                            JMP     SHORT PARSE 
    2715 0DE5                           CHKSPL: 
    2716 0DE5  3C 50                            CMP     AL,'P' 
    2717 0DE7  74 04                            JZ      RESETCAN 
    2718 0DE9  3C 70                            CMP     AL,'p' 
    2719 0DEB  75 07                            JNZ     CHKTERM 
    2720 0DED                           RESETCAN: 
    2721 0DED  C6 06 0005 R 00                  MOV     [CANFLG],0 
    2722 0DF2  EB D3                            JMP     SHORT PARSE 
    2723 0DF4                           CHKTERM: 
    2724 0DF4  3C 54                            CMP     AL,'T' 
    2725 0DF6  74 0D                            JZ      SETTERM 
    2726 0DF8  3C 74                            CMP     AL,'t' 
    2727 0DFA  74 09                            JZ      SETTERM 
    2728 0DFC  BA 01B5 R                        MOV     DX,OFFSET DG:BADSWT 
    2729 0DFF  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2730 0E01  CD 21                            INT     21H 
    2731 0E03  EB C2                            JMP     SHORT PARSE 
    2732                                 
    2733 0E05                           SETTERM: 
    2734 0E05  E8 0E36 R                        CALL    TERMPROCESS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-91
                                                            

    2735 0E08  EB 9F                            JMP     TRANEXIT        ; Ignor
					e everything after T switch 
    2736                                 
    2737 0E0A                           GOTNORMARG: 
    2738 0E0A  32 C0                            XOR     AL,AL 
    2739 0E0C  86 06 0003 R                     XCHG    AL,[ARGSETUP] 
    2740 0E10  0A C0                            OR      AL,AL 
    2741 0E12  74 03                            JZ      PARSEARG 
    2742 0E14  E8 0E4D R                        CALL    NORMPROC        ;Don't 
					test ARGSETUP, it just got zeroed 
    2743 0E17                           PARSEARG: 
    2744 0E17  56                               PUSH    SI 
    2745 0E18  8B F7                            MOV     SI,DI 
    2746 0E1A  BF 005C                          MOV     DI,FCB 
    2747 0E1D  B8 2901                          MOV     AX,(PARSE_FILE_DESCRIPT
					OR SHL 8) OR 1 
    2748 0E20  CD 21                            INT     21H             ;Parse 
					the arg 
    2749 0E22  80 3D 00                         CMP     BYTE PTR [DI],0 
    2750 0E25  75 08                            JNZ     DRVOK 
    2751 0E27  8A 16 0004 R                     MOV     DL,[DEFDRV] 
    2752 0E2B  FE C2                            INC     DL 
    2753 0E2D  88 15                            MOV     BYTE PTR [DI],DL       
					 ;Set the default drive 
    2754 0E2F                           DRVOK: 
    2755 0E2F  5E                               POP     SI 
    2756 0E30  FE 06 0003 R                     INC     [ARGSETUP] 
    2757 0E34  EB 91                            JMP     SHORT PARSE 
    2758                                 
    2759 0E36                           TERMPROCESS: 
    2760 0E36  BA FFFF                          MOV     DX,-1 
    2761 0E39                           PROCRET: 
    2762 0E39  B4 01                            MOV     AH,1 
    2763 0E3B  E8 0EB4 R                        CALL    DOSET 
    2764 0E3E                           PROCRETNFUNC: 
    2765 0E3E  C6 06 0003 R 00                  MOV     [ARGSETUP],0 
    2766 0E43  0E                               PUSH    CS 
    2767 0E44  07                               POP     ES 
    2768 0E45  C3                       RET14:  RET 
    2769                                 
    2770 0E46                           PROCESS: 
    2771 0E46  80 3E 0003 R 00                  CMP     [ARGSETUP],0 
    2772 0E4B  74 F8                            JZ      RET14                  
					 ;Nothing to process 
    2773 0E4D                           NORMPROC: 
    2774 0E4D  A0 005D                          MOV     AL,BYTE PTR DS:[FCB+1] 
    2775 0E50  3C 20                            CMP     AL," " 
    2776 0E52  74 2E                            JZ      SRCHBADJ 
    2777 0E54  BA 005C                          MOV     DX,FCB 
    2778 0E57  8A 26 0005 R                     MOV     AH,[CANFLG] 
    2779 0E5B  80 FC 00                         CMP     AH,0 
    2780 0E5E  75 D9                            JNZ     PROCRET 
    2781 0E60  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
    2782 0E63  B4 1A                            MOV     AH,SET_DMA 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-92
                                                            

    2783 0E65  CD 21                            INT     21H 
    2784 0E67  BA 005C                          MOV     DX,FCB 
    2785 0E6A  B4 11                            MOV     AH,DIR_SEARCH_FIRST 
    2786 0E6C  CD 21                            INT     21H 
    2787 0E6E  0A C0                            OR      AL,AL 
    2788 0E70  75 10                            JNZ     SRCHBADJ 
    2789 0E72                           SRCHLOOP: 
    2790 0E72  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
    2791 0E75  B4 0F                            MOV     AH,FCB_OPEN 
    2792 0E77  CD 21                            INT     21H 
    2793 0E79  0A C0                            OR      AL,AL 
    2794 0E7B  74 08                            JZ      OPENOK 
    2795 0E7D  E8 0ECB R                        CALL    OPENERR 
    2796 0E80  EB 1E                            JMP     SHORT NEXTSEARCH 
    2797 0E82  EB 5E 90                 SRCHBADJ: JMP   SRCHBAD 
    2798 0E85                           OPENOK: 
    2799 0E85  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
    2800 0E88  B4 00                            MOV     AH,0 
    2801 0E8A  E8 0EB4 R                        CALL    DOSET 
    2802 0E8D  0A C0                            OR      AL,AL 
    2803 0E8F  74 0F                            JZ      NEXTSEARCH 
    2804 0E91  86 06 0001 R                     XCHG    AL,[FULLFLAG]          
					 ;Know AL non-zero 
    2805 0E95  0A C0                            OR      AL,AL 
    2806 0E97  75 07                            JNZ     NEXTSEARCH             
					 ;Only print message once 
    2807 0E99  BA 00C7 R                        MOV     DX,OFFSET DG:FULLMES   
					 ;Queue full 
    2808 0E9C  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2809 0E9E  CD 21                            INT     21H 
    2810 0EA0                           NEXTSEARCH: 
    2811 0EA0  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
    2812 0EA3  B4 1A                            MOV     AH,SET_DMA 
    2813 0EA5  CD 21                            INT     21H 
    2814 0EA7  BA 005C                          MOV     DX,FCB 
    2815 0EAA  B4 12                            MOV     AH,DIR_SEARCH_NEXT 
    2816 0EAC  CD 21                            INT     21H 
    2817 0EAE  0A C0                            OR      AL,AL 
    2818 0EB0  75 8C                            JNZ     PROCRETNFUNC 
    2819 0EB2  EB BE                            JMP     SRCHLOOP 
    2820                                 
    2821 0EB4                           DOSET: 
    2822 0EB4  CD 2F                            INT     COMINT 
    2823 0EB6  88 26 0006 R                     MOV     [FILCNT],AH            
					 ;Suck up return info 
    2824 0EBA  8C 06 0009 R                     MOV     WORD PTR [SPLIST+2],ES 
    2825 0EBE  8C 06 000D R                     MOV     WORD PTR [CURFILE+2],ES
					 
    2826 0EC2  89 1E 0007 R                     MOV     WORD PTR [SPLIST],BX 
    2827 0EC6  89 16 000B R                     MOV     WORD PTR [CURFILE],DX 
    2828 0ECA  C3                               RET 
    2829                                 
    2830 0ECB                           OPENERR: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-93
                                                            

    2831 0ECB  56                               PUSH    SI 
    2832 0ECC  57                               PUSH    DI 
    2833 0ECD  BE 00B5 R                        MOV     SI,OFFSET DG:OPFILNAM 
    2834 0ED0  1E                               PUSH    DS 
    2835 0ED1  07                               POP     ES 
    2836 0ED2  BF 000F R                        MOV     DI,OFFSET DG:SRCHFCB 
    2837 0ED5  E8 0F57 R                        CALL    MVFNAM 
    2838 0ED8  BA 00A9 R                        MOV     DX,OFFSET DG:OPMES 
    2839 0EDB  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2840 0EDD  CD 21                            INT     21H 
    2841 0EDF  5F                               POP     DI 
    2842 0EE0  5E                               POP     SI 
    2843 0EE1  C3                               RET 
    2844                                 
    2845 0EE2                           SRCHBAD: 
    2846 0EE2  56                               PUSH    SI 
    2847 0EE3  57                               PUSH    DI 
    2848 0EE4  BE 00DD R                        MOV     SI,OFFSET DG:SRCHFNAM 
    2849 0EE7  1E                               PUSH    DS 
    2850 0EE8  07                               POP     ES 
    2851 0EE9  BF 005C                          MOV     DI,FCB 
    2852 0EEC  E8 0F57 R                        CALL    MVFNAM 
    2853 0EEF  BA 00DD R                        MOV     DX,OFFSET DG:SRCHMES 
    2854 0EF2  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2855 0EF4  CD 21                            INT     21H 
    2856 0EF6  5F                               POP     DI 
    2857 0EF7  5E                               POP     SI 
    2858 0EF8  E9 0E3E R                        JMP     PROCRETNFUNC 
    2859                                 
    2860 0EFB                           GETSPLIST: 
    2861 0EFB  B4 FF                            MOV     AH,0FFH 
    2862 0EFD  E8 0EB4 R                        CALL    DOSET 
    2863 0F00  1E                               PUSH    DS 
    2864 0F01  C5 3E 0007 R                     LDS     DI,[SPLIST] 
    2865 0F05  8B 7D FE                         MOV     DI,[DI-2]              
					 ;Get the error count 
    2866 0F08  1F                               POP     DS 
    2867 0F09  81 FF 03E8                       CMP     DI,ERRCNT1 
    2868 0F0D  72 07                            JB      CNTOK 
    2869 0F0F  BA 0167 R                        MOV     DX,OFFSET DG:CNTMES 
    2870 0F12  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2871 0F14  CD 21                            INT     21H 
    2872 0F16                           CNTOK: 
    2873 0F16  8A 0E 0006 R                     MOV     CL,[FILCNT] 
    2874 0F1A  0A C9                            OR      CL,CL 
    2875 0F1C  74 31                            JZ      NOFILES 
    2876 0F1E  32 ED                            XOR     CH,CH 
    2877 0F20  C4 3E 000B R                     LES     DI,[CURFILE] 
    2878 0F24  57                               PUSH    DI 
    2879 0F25  47                               INC     DI 
    2880 0F26  47                               INC     DI 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-94
                                                            

    2881 0F27  BE 0058 R                        MOV     SI,OFFSET DG:CURFNAM 
    2882 0F2A  E8 0F57 R                        CALL    MVFNAM 
    2883 0F2D  5F                               POP     DI 
    2884 0F2E  BA 004E R                        MOV     DX,OFFSET DG:CURMES 
    2885 0F31  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2886 0F33  CD 21                            INT     21H 
    2887 0F35  49                               DEC     CX 
    2888 0F36  E3 16                            JCXZ    RET12 
    2889 0F38                           FILOOP: 
    2890 0F38  26: 8B 3D                        MOV     DI,ES:[DI] 
    2891 0F3B  57                               PUSH    DI 
    2892 0F3C  47                               INC     DI 
    2893 0F3D  47                               INC     DI 
    2894 0F3E  BE 008C R                        MOV     SI,OFFSET DG:FILFNAM 
    2895 0F41  E8 0F57 R                        CALL    MVFNAM 
    2896 0F44  5F                               POP     DI 
    2897 0F45  BA 0084 R                        MOV     DX,OFFSET DG:FILMES 
    2898 0F48  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2899 0F4A  CD 21                            INT     21H 
    2900 0F4C  E2 EA                            LOOP    FILOOP 
    2901 0F4E  C3                       RET12:  RET 
    2902                                 
    2903 0F4F                           NOFILES: 
    2904 0F4F  BA 0037 R                        MOV     DX,OFFSET DG:NOFILS 
    2905 0F52  B4 09                            MOV     AH,STD_CON_STRING_OUTPU
					T 
    2906 0F54  CD 21                            INT     21H 
    2907 0F56  C3                               RET 
    2908                                 
    2909                                ;Make a message with the file name 
    2910 0F57                           MVFNAM: 
    2911                                ASSUME  DS:NOTHING,ES:NOTHING 
    2912 0F57  56                               PUSH    SI 
    2913 0F58  57                               PUSH    DI 
    2914 0F59  51                               PUSH    CX 
    2915 0F5A  8C C0                            MOV     AX,ES 
    2916 0F5C  1E                               PUSH    DS 
    2917 0F5D  07                               POP     ES 
    2918 0F5E  8E D8                            MOV     DS,AX 
    2919 0F60  87 F7                            XCHG    SI,DI 
    2920 0F62  AC                               LODSB 
    2921 0F63  04 40                            ADD     AL,"@" 
    2922 0F65  3C 40                            CMP     AL,"@" 
    2923 0F67  75 06                            JNZ     STCHR 
    2924 0F69  36: A0 0004 R                    MOV     AL,[DEFDRV] 
    2925 0F6D  04 41                            ADD     AL,"A" 
    2926 0F6F                           STCHR: 
    2927 0F6F  AA                               STOSB 
    2928 0F70  47                               INC     DI 
    2929 0F71  B9 0004                          MOV     CX,4 
    2930 0F74  F3/ A5                           REP     MOVSW 
    2931 0F76  47                               INC     DI 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-95
                                                            

    2932 0F77  A5                               MOVSW 
    2933 0F78  A4                               MOVSB 
    2934 0F79  8C C0                            MOV     AX,ES 
    2935 0F7B  1E                               PUSH    DS 
    2936 0F7C  07                               POP     ES 
    2937 0F7D  8E D8                            MOV     DS,AX 
    2938 0F7F  59                               POP     CX 
    2939 0F80  5F                               POP     DI 
    2940 0F81  5E                               POP     SI 
    2941 0F82  C3                               RET 
    2942                                 
    2943                                ;--------------------------------------
					---------------------------------; 
    2944                                ; ENTRY:                               
					                                 ; 
    2945                                ;       DS:SI   Points input buffer    
					                                 ; 
    2946                                ;       ES:DI   Points to the token buf
					fer                              ; 
    2947                                ;                                      
					                                 ; 
    2948                                ; EXIT:                                
					                                 ; 
    2949                                ;       DS:SI   Points to next char in 
					the input buffer                 ; 
    2950                                ;       ES:DI   Points to the token buf
					fer                              ; 
    2951                                ;       CX      Character count        
					                                 ; 
    2952                                ;       AX      Condition Code         
					                                 ; 
    2953                                ;               =1 same as carry set   
					                                 ; 
    2954                                ;               =2 normal token        
					                                 ; 
    2955                                ;               =4 switch character, ch
					ar in token buffer               ; 
    2956                                ;       Carry Flag      Set if a CR was
					 found, Reset otherwise          ; 
    2957                                ;                                      
					                                 ; 
    2958                                ; MODIFIES:                            
					                                 ; 
    2959                                ;       CX, SI, AX and the Carry Flag  
					                                 ; 
    2960                                ;                                      
					                                 ; 
    2961                                ;--------------------------------------
					---------------------------------; 
    2962                                 
    2963 = 0009                         TAB     equ     09h 
    2964 = 000D                         CR      equ     0dh 
    2965                                 
    2966 0F83                           CPARSE: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-96
                                                            

    2967                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    2968 0F83  9C                               pushf                          
					 ;save flags 
    2969 0F84  57                               push    di                     
					 ;save the token buffer addrss 
    2970 0F85  33 C9                            xor     cx,cx                  
					 ;no chars in token buffer 
    2971 0F87  E8 0FD7 R                        call    kill_bl 
    2972                                 
    2973 0F8A  3C 0D                            cmp     al,CR                  
					 ;a CR? 
    2974 0F8C  75 08                            jne     sj2                    
					 ;no, skip 
    2975 0F8E                           sj1: 
    2976 0F8E  B8 0001                          mov     ax,1                   
					 ;condition code 
    2977 0F91  4E                               dec     si                     
					 ;adjust the pointer 
    2978 0F92  5F                               pop     di                     
					 ;retrive token buffer address 
    2979 0F93  9D                               popf                           
					 ;restore flags 
    2980 0F94  F9                               stc                            
					 ;set the carry bit 
    2981 0F95  C3                               ret 
    2982                                 
    2983 0F96                           sj2: 
    2984 0F96  2E: 8A 16 0000 R                 mov     dl,[SWITCHAR] 
    2985 0F9B  3A C2                            cmp     al,dl                  
					 ;is the char the switch char? 
    2986 0F9D  75 0F                            jne     anum_char              
					 ;no, process... 
    2987 0F9F  E8 0FD7 R                        call    kill_bl 
    2988 0FA2  3C 0D                            cmp     al,CR                  
					 ;a CR? 
    2989 0FA4  74 E8                            je      sj1                    
					 ;yes, error exit 
    2990 0FA6  E8 0FE9 R                        call    move_char              
					 ;Put the switch char in the token buff
					er 
    2991 0FA9  B8 0004                          mov     ax,4                   
					 ;Flag switch 
    2992 0FAC  EB 20                            jmp     short x_done2 
    2993                                 
    2994 0FAE                           anum_char: 
    2995 0FAE  E8 0FE9 R                        call    move_char              
					 ;just an alphanum string 
    2996 0FB1  AC                               lodsb 
    2997 0FB2  3C 20                            cmp     al,' ' 
    2998 0FB4  74 14                            je      x_done 
    2999 0FB6  3C 09                            cmp     al,tab 
    3000 0FB8  74 10                            je      x_done 
    3001 0FBA  3C 0D                            cmp     al,CR 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Page     1-97
                                                            

    3002 0FBC  74 0C                            je      x_done 
    3003 0FBE  3C 2C                            cmp     al,',' 
    3004 0FC0  74 08                            je      x_done 
    3005 0FC2  3C 3D                            cmp     al,'=' 
    3006 0FC4  74 04                            je      x_done 
    3007 0FC6  3A C2                            cmp     al,dl                  
					 ;Switch character 
    3008 0FC8  75 E4                            jne     anum_char 
    3009 0FCA                           x_done: 
    3010 0FCA  4E                               dec     si                     
					 ;adjust for next round 
    3011 0FCB  B8 0002                          mov     ax,2                   
					 ;normal token 
    3012 0FCE                           x_done2: 
    3013 0FCE  50                               push    ax                     
					 ;save condition code 
    3014 0FCF  B0 00                            mov     al,0 
    3015 0FD1  AA                               stosb                          
					 ;null at the end 
    3016 0FD2  58                               pop     ax 
    3017 0FD3  5F                               pop     di                     
					 ;restore token buffer pointer 
    3018 0FD4  9D                               popf 
    3019 0FD5  F8                               clc                            
					 ;clear carry flag 
    3020 0FD6  C3                               ret 
    3021                                 
    3022                                 
    3023 0FD7                           kill_bl proc    near 
    3024 0FD7  AC                               lodsb 
    3025 0FD8  3C 20                            cmp     al,' ' 
    3026 0FDA  74 FB                            je      kill_bl 
    3027 0FDC  3C 09                            cmp     al,tab 
    3028 0FDE  74 F7                            je      kill_bl 
    3029 0FE0  3C 2C                            cmp     al,','                 
					 ;a comma? 
    3030 0FE2  74 F3                            je      kill_bl 
    3031 0FE4  3C 3D                            cmp     al,'=' 
    3032 0FE6  74 EF                            je      kill_bl 
    3033 0FE8  C3                               ret 
    3034                                kill_bl endp 
    3035                                 
    3036                                 
    3037 0FE9                           move_char proc  near 
    3038 0FE9  AA                               stosb                          
					 ;store char in token buffer 
    3039 0FEA  41                               inc     cx                     
					 ;increment char count 
    3040 0FEB  C3                               ret 
    3041                                move_char endp 
    3042                                 
    3043 0FEC                           CODE    ENDS 
    3044                                        END     START 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-4
                                                             

SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DG . . . . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	0FEC	PARA	NONE	
  DATA . . . . . . . . . . . . .  	02AE	BYTE	NONE	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDFIL . . . . . . . . . . . . .  	L NEAR	08B1	CODE
ADDFILJ  . . . . . . . . . . . .  	L NEAR	0740	CODE
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-5
                                                             

ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
AINT . . . . . . . . . . . . . .  	Alias	 TRUE		
AKPORT . . . . . . . . . . . . .  	Number	0020	
ALLCAN . . . . . . . . . . . . .  	L BYTE 	0219	CODE
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALLSET . . . . . . . . . . . . .  	L NEAR	0D2C	CODE
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ANUM_CHAR  . . . . . . . . . . .  	L NEAR	0FAE	CODE
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ARGSDONE . . . . . . . . . . . .  	L NEAR	0DBB	CODE
ARGSETUP . . . . . . . . . . . .  	L BYTE 	0003	DATA
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BADDRVM  . . . . . . . . . . . .  	L BYTE 	0300	CODE
BADMES . . . . . . . . . . . . .  	L BYTE 	00FE	DATA
BADSPOOL . . . . . . . . . . . .  	L NEAR	0C03	CODE
BADSWT . . . . . . . . . . . . .  	L BYTE 	01B5	DATA
BADVER . . . . . . . . . . . . .  	L BYTE 	01C9	DATA
BELMES . . . . . . . . . . . . .  	L BYTE 	01ED	CODE
BLKSIZ . . . . . . . . . . . . .  	Number	0200	
BUFFER . . . . . . . . . . . . .  	L BYTE 	0305	CODE	Length = 0200
BUFINSIZ . . . . . . . . . . . .  	Number	0010	
BUSY . . . . . . . . . . . . . .  	L BYTE 	0194	CODE
BUSYTICK . . . . . . . . . . . .  	Number	0001	
BWAIT  . . . . . . . . . . . . .  	L NEAR	07B5	CODE
BWAIT2 . . . . . . . . . . . . .  	L NEAR	08B9	CODE
BWAIT3 . . . . . . . . . . . . .  	L NEAR	0790	CODE
BYTEBUF  . . . . . . . . . . . .  	L BYTE 	093E	CODE

CALLAD . . . . . . . . . . . . .  	L DWORD	093F	CODE
CANFIL . . . . . . . . . . . . .  	L NEAR	07B1	CODE
CANFILNAM  . . . . . . . . . . .  	L BYTE 	01F5	CODE
CANFLG . . . . . . . . . . . . .  	L BYTE 	0005	DATA
CANMES . . . . . . . . . . . . .  	L BYTE 	01F1	CODE
CANTERM  . . . . . . . . . . . .  	L NEAR	089C	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-6
                                                             

CANTERM1 . . . . . . . . . . . .  	L NEAR	0896	CODE
CANTERMJ . . . . . . . . . . . .  	L NEAR	0857	CODE
CBUSY  . . . . . . . . . . . . .  	L BYTE 	0199	CODE
CHAININT . . . . . . . . . . . .  	L NEAR	055B	CODE
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHKHIT . . . . . . . . . . . . .  	L NEAR	0CDC	CODE
CHKHIT2  . . . . . . . . . . . .  	L NEAR	0D0B	CODE
CHKSPL . . . . . . . . . . . . .  	L NEAR	0DE5	CODE
CHKTERM  . . . . . . . . . . . .  	L NEAR	0DF4	CODE
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CNTFILS  . . . . . . . . . . . .  	L NEAR	0775	CODE
CNTMES . . . . . . . . . . . . .  	L BYTE 	0167	DATA
CNTOK  . . . . . . . . . . . . .  	L NEAR	0F16	CODE
COLPOS . . . . . . . . . . . . .  	L BYTE 	01AF	CODE
COMBUF . . . . . . . . . . . . .  	L BYTE 	0229	DATA
COMBUSY  . . . . . . . . . . . .  	L NEAR	0743	CODE
COMINT . . . . . . . . . . . . .  	Number	002F	
COMRET . . . . . . . . . . . . .  	L NEAR	0782	CODE
CONLP  . . . . . . . . . . . . .  	L NEAR	0CCA	CODE
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CPARSE . . . . . . . . . . . . .  	L NEAR	0F83	CODE
CR . . . . . . . . . . . . . . .  	Number	000D	
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CRLF . . . . . . . . . . . . . .  	L BYTE 	00A6	DATA
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURFILE  . . . . . . . . . . . .  	L DWORD	000B	DATA
CURFNAM  . . . . . . . . . . . .  	L BYTE 	0058	DATA
CURMES . . . . . . . . . . . . .  	L BYTE 	004E	DATA
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
CURRFIL  . . . . . . . . . . . .  	L WORD 	01B2	CODE
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DEALLOC  . . . . . . . . . . . .  	Number	0049	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-7
                                                             

DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEFDRV . . . . . . . . . . . . .  	L BYTE 	0004	DATA
DEFSPOOL . . . . . . . . . . . .  	L NEAR	0C38	CODE
DEF_ENDRES . . . . . . . . . . .  	L BYTE 	0C03	CODE
DELALL . . . . . . . . . . . . .  	L NEAR	087B	CODE
DELALL2  . . . . . . . . . . . .  	L NEAR	0880	CODE
DELALLJ  . . . . . . . . . . . .  	L NEAR	07AE	CODE
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIDCMES  . . . . . . . . . . . .  	L NEAR	0848	CODE
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DMAADDR  . . . . . . . . . . . .  	L DWORD	01A3	CODE
DOCALL . . . . . . . . . . . . .  	L NEAR	0986	CODE
DOCHAR . . . . . . . . . . . . .  	L NEAR	05F7	CODE
DOCONLP  . . . . . . . . . . . .  	L NEAR	0CD7	CODE
DOINT  . . . . . . . . . . . . .  	L NEAR	058E	CODE
DONEJMP  . . . . . . . . . . . .  	L NEAR	064A	CODE
DOSET  . . . . . . . . . . . . .  	L NEAR	0EB4	CODE
DOSVER_HIGH  . . . . . . . . . .  	Number	020B	
DOSVER_LOW . . . . . . . . . . .  	Number	0136	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DO_INT_14  . . . . . . . . . . .  	L NEAR	0A4D	CODE
DO_INT_17  . . . . . . . . . . .  	L NEAR	0A15	CODE
DO_INT_5 . . . . . . . . . . . .  	L NEAR	0A6A	CODE
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRVOK  . . . . . . . . . . . . .  	L NEAR	0E2F	CODE
DSKERR . . . . . . . . . . . . .  	L NEAR	06D1	CODE
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-8
                                                             

DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

EMFILNAM . . . . . . . . . . . .  	L BYTE 	01DF	CODE
ENDRES . . . . . . . . . . . . .  	L WORD 	0035	DATA
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
EOI  . . . . . . . . . . . . . .  	Number	0020	
ERR0 . . . . . . . . . . . . . .  	L BYTE 	0256	CODE
ERR1 . . . . . . . . . . . . . .  	L BYTE 	0264	CODE
ERR10  . . . . . . . . . . . . .  	L BYTE 	02C4	CODE
ERR11  . . . . . . . . . . . . .  	L BYTE 	02D0	CODE
ERR12  . . . . . . . . . . . . .  	L BYTE 	02DB	CODE
ERR2 . . . . . . . . . . . . . .  	L BYTE 	026D	CODE
ERR3 . . . . . . . . . . . . . .  	L BYTE 	0277	CODE
ERR4 . . . . . . . . . . . . . .  	L BYTE 	0283	CODE
ERR5 . . . . . . . . . . . . . .  	L BYTE 	0288	CODE
ERR6 . . . . . . . . . . . . . .  	L BYTE 	0298	CODE
ERR7 . . . . . . . . . . . . . .  	L BYTE 	029D	CODE
ERR8 . . . . . . . . . . . . . .  	L BYTE 	02AA	CODE
ERR9 . . . . . . . . . . . . . .  	L BYTE 	02BB	CODE
ERRCNT . . . . . . . . . . . . .  	L WORD 	0A71	CODE
ERRCNT1  . . . . . . . . . . . .  	Number	03E8	
ERRCNT2  . . . . . . . . . . . .  	Number	4E20	
ERRMES . . . . . . . . . . . . .  	L BYTE 	01B9	CODE
ERRMEST  . . . . . . . . . . . .  	L BYTE 	01CA	CODE
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-9
                                                             

EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATERR . . . . . . . . . . . . .  	L NEAR	0738	CODE
FATMES . . . . . . . . . . . . .  	L BYTE 	02E0	CODE
FATPRI . . . . . . . . . . . . .  	Number	001E	
FC1  . . . . . . . . . . . . . .  	L WORD 	0A9B	CODE
FC2  . . . . . . . . . . . . . .  	L WORD 	0AC3	CODE
FC3  . . . . . . . . . . . . . .  	L WORD 	0AEB	CODE
FC4  . . . . . . . . . . . . . .  	L WORD 	0B13	CODE
FC5  . . . . . . . . . . . . . .  	L WORD 	0B3B	CODE
FC6  . . . . . . . . . . . . . .  	L WORD 	0B63	CODE
FC7  . . . . . . . . . . . . . .  	L WORD 	0B8B	CODE
FC8  . . . . . . . . . . . . . .  	L WORD 	0BB3	CODE
FC9  . . . . . . . . . . . . . .  	L WORD 	0BDB	CODE
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCBSIZ . . . . . . . . . . . . .  	Number	0028	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILCNT . . . . . . . . . . . . .  	L BYTE 	0006	DATA
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILEOF . . . . . . . . . . . . .  	L NEAR	06C6	CODE
FILEOFJ  . . . . . . . . . . . .  	L NEAR	065F	CODE
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILFNAM  . . . . . . . . . . . .  	L BYTE 	008C	DATA
FILMES . . . . . . . . . . . . .  	L BYTE 	0084	DATA
FILOOP . . . . . . . . . . . . .  	L NEAR	0F38	CODE
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	
FULLFLAG . . . . . . . . . . . .  	L BYTE 	0001	DATA
FULLMES  . . . . . . . . . . . .  	L BYTE 	00C7	DATA

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETSPLIST  . . . . . . . . . . .  	L NEAR	0EFB	CODE
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-10
                                                             

GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOAHEAD  . . . . . . . . . . . .  	L NEAR	05A0	CODE
GOODMES  . . . . . . . . . . . .  	L BYTE 	0128	DATA
GOTBADDOS  . . . . . . . . . . .  	L NEAR	0D6D	CODE
GOTLAST  . . . . . . . . . . . .  	L NEAR	07D6	CODE
GOTNORMARG . . . . . . . . . . .  	L NEAR	0E0A	CODE
GOTPARMS . . . . . . . . . . . .  	L NEAR	0DC7	CODE
GOTRES . . . . . . . . . . . . .  	L NEAR	0D98	CODE
GOTSPOT  . . . . . . . . . . . .  	L NEAR	08D8	CODE

HARDINT  . . . . . . . . . . . .  	Alias	 TRUE		
HAVCOD . . . . . . . . . . . . .  	L NEAR	0701	CODE
HDSPINT  . . . . . . . . . . . .  	L NEAR	0506	CODE
HEADER . . . . . . . . . . . . .  	L BYTE 	0103	CODE
HERRINT  . . . . . . . . . . . .  	L DWORD	01A7	CODE

IBM  . . . . . . . . . . . . . .  	Alias	 TRUE		
IBMVER . . . . . . . . . . . . .  	Alias	 IBM		
IGNRET . . . . . . . . . . . . .  	L NEAR	0735	CODE
INDOS  . . . . . . . . . . . . .  	L DWORD	018C	CODE
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTLOC . . . . . . . . . . . . .  	Number	001C	
INTSEG . . . . . . . . . . . . .  	L WORD 	0953	CODE
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_13 . . . . . . . . . . . . .  	F PROC	09C8	CODE	Length = 0017
INT_13_BACK  . . . . . . . . . .  	F PROC	09DF	CODE	Length = 000A
INT_13_RETADDR . . . . . . . . .  	L WORD 	09C6	CODE
INT_14 . . . . . . . . . . . . .  	L NEAR	0A20	CODE
INT_14_HITLIST . . . . . . . . .  	L BYTE 	020A	DATA
INT_14_NUM . . . . . . . . . . .  	L WORD 	0A1E	CODE
INT_17 . . . . . . . . . . . . .  	L NEAR	09F3	CODE
INT_17_HITLIST . . . . . . . . .  	L BYTE 	01E1	DATA
INT_17_NUM . . . . . . . . . . .  	L WORD 	09F1	CODE
INT_5  . . . . . . . . . . . . .  	L NEAR	0A52	CODE
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-11
                                                             

INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOBUSY . . . . . . . . . . . . .  	Number	0200	
IOCALL . . . . . . . . . . . . .  	L BYTE 	0943	CODE
IOCNT  . . . . . . . . . . . . .  	L WORD 	0955	CODE
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IOERROR  . . . . . . . . . . . .  	Number	8000	
IOREQ  . . . . . . . . . . . . .  	L BYTE 	0945	CODE
IOSTAT . . . . . . . . . . . . .  	L WORD 	0946	CODE
ISTACK . . . . . . . . . . . . .  	L WORD 	018C	CODE

KEEP_PROCESS . . . . . . . . . .  	Number	0031	
KILL_BL  . . . . . . . . . . . .  	N PROC	0FD7	CODE	Length = 0012

LASTFCB  . . . . . . . . . . . .  	L WORD 	01B4	CODE
LASTFCB2 . . . . . . . . . . . .  	L WORD 	01B6	CODE
LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LISTDEV  . . . . . . . . . . . .  	L DWORD	01AB	CODE
LISTFCB  . . . . . . . . . . . .  	L BYTE 	0239	DATA
LISTMES  . . . . . . . . . . . .  	L NEAR	091E	CODE
LMESDONE . . . . . . . . . . . .  	L NEAR	0928	CODE
LNEXT  . . . . . . . . . . . . .  	L NEAR	077D	CODE
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LOOKEND  . . . . . . . . . . . .  	L NEAR	07CC	CODE
LOOKMATCH  . . . . . . . . . . .  	L NEAR	07E3	CODE
LOOKSPOT . . . . . . . . . . . .  	L NEAR	08C4	CODE
LOUT . . . . . . . . . . . . . .  	L NEAR	0929	CODE
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
LWAIT  . . . . . . . . . . . . .  	L NEAR	092A	CODE

MAKERES  . . . . . . . . . . . .  	L BYTE 	0002	DATA
MATCH  . . . . . . . . . . . . .  	L NEAR	080C	CODE
MAXTICK  . . . . . . . . . . . .  	Number	0002	
MESBAS . . . . . . . . . . . . .  	L WORD 	023C	CODE
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MOVE_CHAR  . . . . . . . . . . .  	N PROC	0FE9	CODE	Length = 0003
MSVER  . . . . . . . . . . . . .  	Alias	 FALSE		
MVFNAM . . . . . . . . . . . . .  	L NEAR	0F57	CODE

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-12
                                                             

NEXTFC . . . . . . . . . . . . .  	L NEAR	0853	CODE
NEXTFIL  . . . . . . . . . . . .  	L NEAR	0904	CODE
NEXTINT  . . . . . . . . . . . .  	L DWORD	0190	CODE
NEXTSEARCH . . . . . . . . . . .  	L NEAR	0EA0	CODE
NOCHAR . . . . . . . . . . . . .  	L NEAR	0637	CODE
NOCONV . . . . . . . . . . . . .  	L NEAR	08B0	CODE
NOFILES  . . . . . . . . . . . .  	L NEAR	0F4F	CODE
NOFILS . . . . . . . . . . . . .  	L BYTE 	0037	DATA
NORMPROC . . . . . . . . . . . .  	L NEAR	0E4D	CODE
NOSTATERR  . . . . . . . . . . .  	L NEAR	0971	CODE
NOTABDO  . . . . . . . . . . . .  	L NEAR	0627	CODE
NOTBACK  . . . . . . . . . . . .  	L NEAR	062F	CODE
NOTCR  . . . . . . . . . . . . .  	L NEAR	0606	CODE
NOTONHITLIST . . . . . . . . . .  	L NEAR	0D08	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NUMFCBS  . . . . . . . . . . . .  	L WORD 	0A6F	CODE
NXTCHAR  . . . . . . . . . . . .  	L NEAR	07F4	CODE
NXTCHR . . . . . . . . . . . . .  	L WORD 	01B0	CODE
NXTCHRLP . . . . . . . . . . . .  	L NEAR	080A	CODE
NXTSP  . . . . . . . . . . . . .  	L NEAR	0589	CODE

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OKDOS  . . . . . . . . . . . . .  	L NEAR	0D78	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPENERR  . . . . . . . . . . . .  	L NEAR	0ECB	CODE
OPENOK . . . . . . . . . . . . .  	L NEAR	0E85	CODE
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
OPFILNAM . . . . . . . . . . . .  	L BYTE 	00B5	DATA
OPMES  . . . . . . . . . . . . .  	L BYTE 	00A9	DATA

PABORT . . . . . . . . . . . . .  	L BYTE 	01B8	CODE
PARMS  . . . . . . . . . . . . .  	Number	0080	
PARSE  . . . . . . . . . . . . .  	L NEAR	0DC7	CODE
PARSEARG . . . . . . . . . . . .  	L NEAR	0E17	CODE
PARSEBUF . . . . . . . . . . . .  	L BYTE 	025E	DATA	Length = 0050
PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PCANMES  . . . . . . . . . . . .  	L BYTE 	019E	CODE
PLOOP  . . . . . . . . . . . . .  	L NEAR	05CA	CODE
POPRET . . . . . . . . . . . . .  	L NEAR	093C	CODE
POUT . . . . . . . . . . . . . .  	L NEAR	0981	CODE
PREADY . . . . . . . . . . . . .  	L NEAR	0939	CODE
PROCESS  . . . . . . . . . . . .  	L NEAR	0E46	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-13
                                                             

PROCRET  . . . . . . . . . . . .  	L NEAR	0E39	CODE
PROCRETNFUNC . . . . . . . . . .  	L NEAR	0E3E	CODE
PROMPT . . . . . . . . . . . . .  	L BYTE 	014B	DATA
PSTAT  . . . . . . . . . . . . .  	L NEAR	0959	CODE

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READBUFF . . . . . . . . . . . .  	L NEAR	0662	CODE
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REAL_INT_13  . . . . . . . . . .  	L DWORD	09C2	CODE
REAL_INT_14  . . . . . . . . . .  	L DWORD	0A1A	CODE
REAL_INT_17  . . . . . . . . . .  	L DWORD	09ED	CODE
REAL_INT_5 . . . . . . . . . . .  	L DWORD	09E9	CODE
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
REQUEUE  . . . . . . . . . . . .  	L NEAR	0859	CODE
RESETCAN . . . . . . . . . . . .  	L NEAR	0DED	CODE
RET12  . . . . . . . . . . . . .  	L NEAR	0F4E	CODE
RET13P . . . . . . . . . . . . .  	L NEAR	097F	CODE
RET14  . . . . . . . . . . . . .  	L NEAR	0E45	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SERVERCALL . . . . . . . . . . .  	Number	005D	
SET14_AH . . . . . . . . . . . .  	L NEAR	0A4A	CODE
SET14_AX . . . . . . . . . . . .  	L NEAR	0A48	CODE
SETABORT . . . . . . . . . . . .  	L NEAR	0729	CODE
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETCAN . . . . . . . . . . . . .  	L NEAR	0DDE	CODE
SETCOUNT . . . . . . . . . . . .  	L NEAR	076B	CODE
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETRES . . . . . . . . . . . . .  	L NEAR	0DB5	CODE
SETTERM  . . . . . . . . . . . .  	L NEAR	0E05	CODE
SETUP  . . . . . . . . . . . . .  	L NEAR	0C0C	CODE
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-14
                                                             

SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SJ1  . . . . . . . . . . . . . .  	L NEAR	0F8E	CODE
SJ2  . . . . . . . . . . . . . .  	L NEAR	0F96	CODE
SKIPFIL  . . . . . . . . . . . .  	L NEAR	084D	CODE
SKIPFILC . . . . . . . . . . . .  	L NEAR	084C	CODE
SLICECNT . . . . . . . . . . . .  	L BYTE 	0198	CODE
SOFINT . . . . . . . . . . . . .  	L BYTE 	0195	CODE
SOFTINT  . . . . . . . . . . . .  	Number	0028	
SPCOMINT . . . . . . . . . . . .  	L NEAR	0747	CODE
SPINT  . . . . . . . . . . . . .  	L NEAR	0560	CODE
SPLFCB . . . . . . . . . . . . .  	L WORD 	0A73	CODE
SPLIST . . . . . . . . . . . . .  	L DWORD	0007	DATA
SPNEXT . . . . . . . . . . . . .  	L DWORD	019A	CODE
SPRET  . . . . . . . . . . . . .  	L NEAR	065E	CODE
SPSAVE . . . . . . . . . . . . .  	L WORD 	01A1	CODE
SRCHBAD  . . . . . . . . . . . .  	L NEAR	0EE2	CODE
SRCHBADJ . . . . . . . . . . . .  	L NEAR	0E82	CODE
SRCHFCB  . . . . . . . . . . . .  	L BYTE 	000F	DATA	Length = 0026
SRCHFNAM . . . . . . . . . . . .  	L BYTE 	00DD	DATA
SRCHLOOP . . . . . . . . . . . .  	L NEAR	0E72	CODE
SRCHMES  . . . . . . . . . . . .  	L BYTE 	00DD	DATA
SSSAVE . . . . . . . . . . . . .  	L WORD 	019F	CODE
START  . . . . . . . . . . . . .  	L NEAR	0100	CODE
STATCHK  . . . . . . . . . . . .  	L NEAR	05E2	CODE
STCHR  . . . . . . . . . . . . .  	L NEAR	0F6F	CODE
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
SWITCHAR . . . . . . . . . . . .  	L BYTE 	0000	DATA

TAB  . . . . . . . . . . . . . .  	Number	0009	
TABDONE  . . . . . . . . . . . .  	L NEAR	063A	CODE
TABLP  . . . . . . . . . . . . .  	L NEAR	0617	CODE
TERMPROCESS  . . . . . . . . . .  	L NEAR	0E36	CODE
TICKCNT  . . . . . . . . . . . .  	L BYTE 	0196	CODE
TICKSUB  . . . . . . . . . . . .  	L BYTE 	0197	CODE
TIMENOW  . . . . . . . . . . . .  	L NEAR	051F	CODE
TIMESLICE  . . . . . . . . . . .  	Number	0008	
TONEXTFIL  . . . . . . . . . . .  	L NEAR	06CB	CODE
TRANEXIT . . . . . . . . . . . .  	L NEAR	0DA9	CODE
TRANSIENT  . . . . . . . . . . .  	L NEAR	0D5C	CODE
TRUE . . . . . . . . . . . . . .  	Number	FFFF	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 17:16:21

                                                            Symbols-15
                                                             


UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
UPCONV . . . . . . . . . . . . .  	L NEAR	08A6	CODE
USERIDOPER . . . . . . . . . . .  	Number	005E	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	
X_DONE . . . . . . . . . . . . .  	L NEAR	0FCA	CODE
X_DONE2  . . . . . . . . . . . .  	L NEAR	0FCE	CODE


   2881 Source  Lines
   2943 Total   Lines
    754 Symbols

  13154 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
