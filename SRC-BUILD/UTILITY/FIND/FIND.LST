Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-1
                                                            

       1                                      title   MSDOS V2.0  FIND 
       2                                 
       3                                ;--------------------------------------
					------------------------------; 
       4                                ; Revision History:                    
					                              ; 
       5                                ;                                      
					                              ; 
       6                                ;       V1.1    8/23/82         M.A.Ull
					oa                            ; 
       7                                ;                                      
					                              ; 
       8                                ;       V1.2    9/22/82         M.A.Ull
					oa                            ; 
       9                                ;                 Added the -c and -n o
					ptions                        ; 
      10                                ;                                      
					                              ; 
      11                                ;               9/23/82         M.A.Ull
					oa                            ; 
      12                                ;                 Added DOS version num
					ber control                   ; 
      13                                ;                                      
					                              ; 
      14                                ;               10/07/82  Rev.2        
					 M.A.Ulloa                    ; 
      15                                ;                 Changed quote for dou
					ble quotes, and added         ; 
      16                                ;               file name printing     
					                              ; 
      17                                ;                                      
					                              ; 
      18                                ;               10/20/82  Rev.3        
					 M.A.Ulloa                    ; 
      19                                ;                 Modified IBM name to 
					FIND, and changed the text    ; 
      20                                ;               of some messages.      
					                              ; 
      21                                ;                                      
					                              ; 
      22                                ;               10/25/82  Rev.4        
					 M.A.Ulloa                    ; 
      23                                ;                 Changed name to FIND 
					and all messages to the       ; 
      24                                ;               IBM form.              
					                              ; 
      25                                ;                                      
					                              ; 
      26                                ;               10/27/82  Rev.5        
					 M.A.Ulloa                    ; 
      27                                ;                 Made the correct exit
					 on version check in case     ; 
      28                                ;               of a 1.x DOS.          
					                              ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-2
                                                            

      29                                ;                                      
					                              ; 
      30                                ;               11/4/82 Rev. 5         
					 A.R. Reynolds                ; 
      31                                ;                  Messages moved to ex
					ternal module                 ; 
      32                                ;                                      
					                              ; 
      33                                ;               11/10/82  Rev. 6       
					 M.A. Ulloa                   ; 
      34                                ;                 Corrected problem wit
					h line numbers, and a problem ; 
      35                                ;               with seeking for 0 char
					s.                            ; 
      36                                ;                                      
					                              ; 
      37                                ;               03/30/83  Rev. 7       
					 M.A. Ulloa                   ; 
      38                                ;                 Added patch area for 
					bug fixing.                   ; 
      39                                ;                                      
					                              ; 
      40                                ;               04/14/83  Rev. 8       
					 M.A. Ulloa                   ; 
      41                                ;                 Made changes for Kanj
					i characters. (uhg!)          ; 
      42                                ;                                      
					                              ; 
      43                                ;--------------------------------------
					------------------------------; 
      44                                 
      45 = 0000                         FALSE   equ     0 
      46 = FFFF                         TRUE    equ     NOT FALSE 
      47                                 
      48 =                              KANJI   equ     FALSE                  
					 ;set to true is kanji vers. 
      49                                 
      50                                ;--------------------------------------
					------------------------------; 
      51                                ;       FIND program following the stan
					dart UNIX operation.          ; 
      52                                ;                                      
					                              ; 
      53                                ; FORMAT:                              
					                              ; 
      54                                ;       find {option} string {filename 
					{filename} {...}}             ; 
      55                                ;                                      
					                              ; 
      56                                ; NOTES:                               
					                              ; 
      57                                ;       1) String arguments HAVE to be 
					enclosed                      ; 
      58                                ;       in double quotes. (Two double q
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-3
                                                            

					uotes if a                    ; 
      59                                ;       doble quote is to be included).
					 Only ONE                     ; 
      60                                ;       string argument is presently al
					lowed.                        ; 
      61                                ;                                      
					                              ; 
      62                                ;       2) Options are available:      
					                              ; 
      63                                ;               v       All lines but t
					hose matching are considered  ; 
      64                                ;               c       Only print a co
					unt of matching lines         ; 
      65                                ;               n       Each line is pr
					eceded by its relative        ; 
      66                                ;                         line number i
					n the file.                   ; 
      67                                ;                                      
					                              ; 
      68                                ;       - Options can be Upper or lower
					 case.                        ; 
      69                                ;       - Format: The switch character 
					followed by an options        ; 
      70                                ;       character. I.e.: In the IBM PC:
					 /v                           ; 
      71                                ;                                      
					                              ; 
      72                                ;       3) The program returns:        
					                              ; 
      73                                ;               0 - OK, and some matche
					s                             ; 
      74                                ;               2 - Some Error         
					                              ; 
      75                                ;                                      
					                              ; 
      76                                ;       4) The maximum line size is det
					ermined by                    ; 
      77                                ;       buffer size. Bigger lines will 
					bomb the program.             ; 
      78                                ;                                      
					                              ; 
      79                                ;       5) If no file name is given the
					n it will asssume             ; 
      80                                ;       the input is comming from the S
					tandart Input. NO             ; 
      81                                ;       errors are reported when readin
					g from Standart Input.        ; 
      82                                ;--------------------------------------
					------------------------------; 
      83                                 
      84 0000                           code    segment public 
      85                                assume  cs:code,ss:code,ds:nothing,es:n
					othing 
      86                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-4
                                                            

      87                                 
      88 = 000D                         CR      equ     0dh                    
					 ;A Carriage Return 
      89 = 000A                         LF      equ     0ah                    
					 ;A Line Feed 
      90 = 0022                         quote_char equ  22h                    
					 ;A double quote character 
      91                                 
      92                                 
      93 = 1000                         buffer_size equ 4096                   
					 ;file buffer size 
      94 = 0080                         st_buf_size equ 128                    
					 ;string arg. buffer size 
      95 = 0040                         fname_buf_size equ 64                  
					 ;file name buffer size 
      96                                 
      97                                 
      98                                ;----- DOS EQUATES --------------------
					------------------------------; 
      99 = 0000                         std_in  equ     0                      
					 ;STD input handle 
     100 = 0001                         std_out equ     1                      
					 ;STD output handle 
     101 = 0002                         std_err equ     2                      
					 ;STD error handle 
     102 = 0021                         dos_ent equ     21h                    
					 ;DOS entry point 
     103                                 
     104 = 0009                         std_con_string_output equ 9 
     105 = 0030                         get_version equ 48 
     106 = 0037                         char_oper equ   55                     
					 ;get configuration parameters 
     107 = 003D                         open    equ     61                     
					 ;DOS std open code 
     108 = 003E                         close   equ     62                     
					 ;DOS std close code 
     109 = 003F                         read    equ     63                     
					 ;DOS std read code 
     110 = 0040                         write   equ     64                     
					 ;DOS std write code 
     111 = 0042                         lseek   equ     66                     
					 ;DOS file seek 
     112 = 004C                         exit    equ     76                     
					 ;DOS process exit code 
     113                                 
     114                                 
     115                                ;----- Misc  Data ---------------------
					--------------------------; 
     116 0000  2A 2A 2A 4D 41 55 6C     make    db      "***MAUlloa/Microsoft/V
					12***" 
     117       6C 6F 61 2F 4D 69 63     
     118       72 6F 73 6F 66 74 2F     
     119       56 31 32 2A 2A 2A        
     120 001B  38                       rev     db      "8" 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-5
                                                            

     121                                 
     122                                 
     123 001C  3A 20                    colon   db      ": " 
     124 001E  5B                       n1_buf  db      "[" 
     125 001F  0008[                    n2_buf  db      8 dup(0)               
					 ;buffer for number conversion 
     126            00                  
     127                         ]      
     128                                
     129                                 
     130                                 
     131                                 
     132                                ;----- OPTION FLAGS -------------------
					------------------------------; 
     133                                ; If a flag is set (0ffh) then the opti
					on has been selected, if 
     134                                ;reset (0) then it has been not. All op
					tions are reset initially. 
     135                                ; NOTE: the order of this table has to 
					remain consistent with the 
     136                                ;options dispatch code. If any changes 
					are made they have to 
     137                                ;correspond with the code. 
     138                                 
     139 0027                           opt_tbl: 
     140                                 
     141 0027  00                       v_flg   db      0 
     142 0028  00                       c_flg   db      0 
     143 0029  00                       n_flg   db      0 
     144 002A  00                       x_flg   db      0               ;not us
					ed 
     145 002B  00                       l_flg   db      0               ;not us
					ed 
     146                                 
     147                                 
     148                                ;----- LINE COUNTERS ------------------
					------------------------------; 
     149 002C  0000                     mtch_cntr dw    0                      
					 ;matched lines counter 
     150 002E  0000                     line_cntr dw    0                      
					 ;line counter 
     151                                 
     152                                 
     153                                ;----- MAIN ROUTINE -------------------
					------------------------------; 
     154 0030                           start: 
     155                                 
     156                                ;----- CHECK VERSION NUMBER -----------
					------------------------------; 
     157                                 
     158 0030  B4 30                            mov     ah,get_version 
     159 0032  CD 21                            int     21h 
     160 0034  3C 02                            cmp     al,2 
     161 0036  7D 0E                            jge     vers_ok 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-6
                                                            

     162 0038  0E                               push    cs 
     163 0039  1F                               pop     ds 
     164 003A  BA 0000 E                        mov     dx,offset bad_vers 
     165 003D  B4 09                            mov     ah,std_con_string_outpu
					t 
     166 003F  CD 21                            int     21h 
     167 0041  06                               push    es              ;bad ve
					rs, exit a la 1.x 
     168 0042  33 C0                            xor     ax,ax 
     169 0044  50                               push    ax 
     170                                 
     171 0045                           badfart proc    far             ;(what 
					a hack!!) 
     172 0045  CB                               ret 
     173                                badfart endp 
     174                                 
     175 0046                           vers_ok: 
     176                                 
     177 0046  0E                               push    cs                     
					 ;load ES to the right area, 
     178 0047  07                               pop     es                     
					 ; for use with DI register 
     179                                 
     180                                assume  es:code 
     181                                 
     182                                ;--------------------------------------
					------------------------------; 
     183                                 
     184 0048  BE 0081                          mov     si,81h                 
					 ;Start addrss. of commad line buf. 
     185                                 
     186 004B  E8 0291 R                        call    kill_bl                
					 ;Get rid of blanks 
     187 004E  0B DB                            or      bx,bx                  
					 ;A CR found? 
     188 0050  74 10                            jz      find_opt               
					 ;no, first find the options 
     189 0052                           args_missing: 
     190 0052  BA 0000 E                        mov     dx,offset errmsg1      
					 ;empty command line, no args: error. 
     191 0055  2E: 8A 0E 0000 E                 mov     cl,cs:errlen1 
     192 005A  E8 0321 R                        call    prt_err 
     193 005D  B0 02                            mov     al,2                   
					 ;error code for exit 
     194 005F  E9 028D R                        jmp     done 
     195                                 
     196                                 
     197                                ;----- FIND THE OPTION IF ANY ---------
					------------------------------; 
     198 0062                           find_opt: 
     199 0062  B4 37                            mov     ah,char_oper           
					 ;get the dos switch char. 
     200 0064  B0 00                            mov     al,0 
     201 0066  CD 21                            int     dos_ent                
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-7
                                                            

					 ;switch char in DL 
     202 0068  52                               push    dx 
     203 0069                           another_opt: 
     204 0069  AC                               lodsb                          
					 ;get the first char of command line 
     205 006A  3C 20                            cmp     al,' '                 
					 ;a blank? 
     206 006C  74 52                            je      cont_scan 
     207 006E  3C 0D                            cmp     al,CR                  
					 ;a Carriage Return 
     208 0070  74 E0                            je      args_missing 
     209 0072  5A                               pop     dx                     
					 ;get switch character 
     210 0073  3A C2                            cmp     al,dl                  
					 ;is it the switch char? 
     211 0075  75 53                            jne     find_str               
					 ;no, no options: get the string 
     212 0077  52                               push    dx                     
					 ;save for another round 
     213                                 
     214 0078  AC                               lodsb                          
					 ;get the option character 
     215 0079  3C 20                            cmp     al,' '                 
					 ;a blank? 
     216 007B  74 43                            je      cont_scan              
					 ;yes, ignore and continue 
     217 007D  3C 0D                            cmp     al,CR                  
					 ;a CR? 
     218 007F  74 D1                            je      args_missing           
					 ;yes, error... 
     219 0081  E8 0333 R                        call    make_caps              
					 ;Capitalize the character 
     220 0084  BB 0027 R                        mov     bx,offset opt_tbl      
					 ;pointer to option flag table 
     221                                 
     222 0087  3C 56                            cmp     al,'V'                 
					 ;the v option? 
     223 0089  74 22                            je      opt_v 
     224 008B  3C 43                            cmp     al,'C'                 
					 ;the c option? 
     225 008D  74 23                            je      opt_c 
     226 008F  3C 4E                            cmp     al,'N'                 
					 ;the n option? 
     227 0091  74 24                            je      opt_n 
     228                                 
     229 0093  2E: A2 0000 E                    mov     cs:errmsg5_opt,al      
					 ;save the option 
     230 0097  BA 0000 E                        mov     dx,offset errmsg5      
					 ;unknown option: error 
     231 009A  2E: 8A 0E 0000 E                 mov     cl,cs:errlen5 
     232 009F  E8 0321 R                        call    prt_err 
     233 00A2  BA 0000 E                        mov     dx,offset crlf         
					 ;print a CRLF 
     234 00A5  B9 0002                          mov     cx,2 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-8
                                                            

     235 00A8  E8 0321 R                        call    prt_err 
     236 00AB  EB BC                            jmp     another_opt            
					 ;process next option 
     237                                 
     238 00AD                           opt_v: 
     239 00AD  BF 0000                          mov     di,0 
     240 00B0  EB 08                            jmp     short opt_dispatch 
     241                                 
     242 00B2                           opt_c: 
     243 00B2  BF 0001                          mov     di,1 
     244 00B5  EB 03                            jmp     short opt_dispatch 
     245                                 
     246 00B7                           opt_n: 
     247 00B7  BF 0002                          mov     di,2 
     248                                 
     249 00BA                           opt_dispatch: 
     250 00BA  26: C6 01 FF                     mov     es:byte ptr[bx+di],0ffh
					 ;set the corresponding flag 
     251 00BE  EB A9                            jmp     another_opt            
					 ;process the rest of the options 
     252                                 
     253 00C0                           cont_scan: 
     254 00C0  4E                               dec     si                     
					 ;adjust SI 
     255 00C1  E8 0291 R                        call    kill_bl                
					 ;get rid of blanks 
     256 00C4  0B DB                            or      bx,bx                  
					 ;A CR found? 
     257 00C6  74 A1                            jz      another_opt            
					 ;no, test for other options 
     258 00C8  EB 88                            jmp     args_missing           
					 ;yes, error... 
     259                                 
     260                                 
     261                                ;----- FIND STRING ARGUMENT -----------
					------------------------------; 
     262 00CA                           find_str: 
     263 00CA  3C 22                            cmp     al,quote_char          
					 ;string should start with a 
     264 00CC  75 0A                            jnz     bad_str_err            
					 ; quote character, if not: error. 
     265 00CE  BF 0540 R                        mov     di,offset st_buffer    
					 ;String argument buffer addrss. 
     266 00D1  33 C9                            xor     cx,cx                  
					 ;Clear to keep string length. 
     267                                 
     268 00D3                           move_str: 
     269 00D3  AC                               lodsb 
     270 00D4  3C 0D                            cmp     al,CR                  
					 ;if a CR is found in the string 
     271 00D6  75 10                            jnz     str_ok                 
					 ; then it's a bad string 
     272 00D8                           bad_str_err: 
     273 00D8  BA 0000 E                        mov     dx,offset errmsg2      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-9
                                                            

					 ;bad string error message 
     274 00DB  2E: 8A 0E 0000 E                 mov     cl,cs:errlen2 
     275 00E0  E8 0321 R                        call    prt_err                
					 ;print the error. 
     276 00E3  B0 02                            mov     al,2 
     277 00E5  E9 028D R                        jmp     done 
     278                                 
     279 00E8                           str_ok: 
     280 00E8  3C 22                            cmp     al,quote_char          
					 ;look for a quote character 
     281 00EA  75 14                            jnz     move_char              
					 ;not an apost., move to buffer 
     282 00EC  AC                               lodsb                          
					 ;an apost., check next char. 
     283 00ED  3C 22                            cmp     al,quote_char          
					 ;another quote character? 
     284 00EF  74 0F                            je      move_char              
					 ;yes, move it to the buffer 
     285 00F1  4E                               dec     si                     
					 ;no, adjust the pointer 
     286 00F2  26: 89 0E 053E R                 mov     es:st_length,cx        
					 ;store the string length 
     287 00F7  0B C9                            or      cx,cx                  
					 ;Is the string empty? 
     288 00F9  75 09                            jnz     other_args             
					 ;no: get the rest of the args. 
     289 00FB  B0 01                            mov     al,1                   
					 ;empty: no matches(!?) 
     290 00FD  E9 028D R                        jmp     done 
     291 0100                           move_char: 
     292 0100  AA                               stosb                          
					 ;put in buffer 
     293 0101  41                               inc     cx                     
					 ;increment string length 
     294 0102  EB CF                            jmp     move_str 
     295                                 
     296                                 
     297                                ;----- FIND THE FILE ARGUMENTS --------
					------------------------------; 
     298 0104                           other_args:                            
					 ;Process the rest of the command 
     299                                                                       
					 ; line arguments. 
     300 0104  E8 0291 R                        call    kill_bl                
					 ;get rid of leading blanks 
     301 0107  0B DB                            or      bx,bx                  
					 ;At least one argument necessary, 
     302 0109  74 08                            jz      further_args           
					 ; if a CR not found: ok. 
     303                                 
     304                                ;----- USE STD IN FOR INPUT -----------
					------------------------------; 
     305 010B  0E                               push    cs 
     306 010C  1F                               pop     ds 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-10
                                                            

     307 010D  B8 0000                          mov     ax,std_in              
					 ;handle 
     308 0110  EB 5B 90                         jmp     fill 
     309                                 
     310 0113                           further_args: 
     311 0113  E8 02A1 R                        call    clr_cntrs              
					 ;set all counters to zero 
     312 0116  BF 05C2 R                        mov     di,offset file_name_buf
					 ;Set pointer to the name buffer 
     313 0119  33 C9                            xor     cx,cx                  
					 ;zero file name length 
     314 011B                           move_fname: 
     315 011B  AC                               lodsb 
     316 011C  3C 20                            cmp     al,' '                 
					 ;A blank: end of file name, 
     317 011E  74 08                            je      done_move 
     318 0120  3C 0D                            cmp     al,CR                  
					 ;A CR: idem. 
     319 0122  74 04                            je      done_move 
     320 0124  AA                               stosb                          
					 ;store in name buffer 
     321 0125  41                               inc     cx                     
					 ;increment file name length 
     322 0126  EB F3                            jmp     move_fname 
     323 0128                           done_move: 
     324 0128  4E                               dec     si                     
					 ;Adjust pointer for next round. 
     325 0129  26: C6 05 00                     mov     es:byte ptr[di],00h    
					 ;File names are null terminated 
     326 012D  56                               push    si                     
					 ;Save SI to continue com. line scan. 
     327 012E  1E                               push    ds                     
					 ;Save DS register contents for 
     328                                                                       
					 ; later because it points to the 
     329                                                                       
					 ; rest of the arguments. 
     330 012F  26: 89 0E 05C0 R                 mov     es:file_name_len,cx    
					 ;save the name length 
     331                                 
     332                                ;----- OPEN FILE FOR READING ----------
					------------------------------; 
     333 0134  0E                               push    cs                     
					 ;Load new DS with CS 
     334 0135  1F                               pop     ds 
     335 0136  BA 05C2 R                        mov     dx,offset file_name_buf
					 ;addrss. of the file name 
     336 0139  B4 3D                            mov     ah,open 
     337 013B  B0 00                            mov     al,0                   
					 ;file open for reading 
     338 013D  CD 21                            int     dos_ent                
					 ;call the DOS 
     339 013F  73 03                            jnc     say_name               
					 ;if no carry then no errors 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-11
                                                            

     340 0141  E9 0266 R                        jmp     open_error 
     341                                 
     342                                ;----- PRINT FILE NAME ----------------
					------------------------------; 
     343 0144                           say_name: 
     344 0144  50                               push    ax                     
					 ;save file handle 
     345 0145  BA 0000 E                        mov     dx,offset heading 
     346 0148  2E: 8A 0E 0000 E                 mov     cl,cs:heading_len 
     347 014D  32 ED                            xor     ch,ch 
     348 014F  E8 02F0 R                        call    prout 
     349                                 
     350 0152  BA 05C2 R                        mov     dx,offset file_name_buf
					 
     351 0155  8B 0E 05C0 R                     mov     cx,ds:file_name_len 
     352 0159  E8 02F0 R                        call    prout 
     353                                 
     354 015C  80 3E 0028 R FF                  cmp     ds:c_flg,0ffh          
					 ;count only flag set? 
     355 0161  74 09                            je      xx1 
     356                                 
     357 0163  BA 0000 E                        mov     dx,offset crlf 
     358 0166  B9 0002                          mov     cx,2 
     359 0169  E8 02F0 R                        call    prout 
     360                                 
     361 016C                           xx1: 
     362 016C  58                               pop     ax 
     363                                 
     364                                ;----- Fill Buffer for Matching -------
					------------------------------; 
     365 016D                           fill: 
     366 016D  8B D8                            mov     bx,ax                  
					 ;retrieve handle 
     367 016F                           refill: 
     368 016F  BA 0603 R                        mov     dx,offset buffer       
					 ;data buffer addrss. 
     369 0172  B9 1000                          mov     cx,buffer_size 
     370 0175  B4 3F                            mov     ah,read 
     371 0177  CD 21                            int     dos_ent 
     372 0179  73 03                            jnc     no_read_error          
					 ;if carry then read error 
     373 017B  E9 0247 R                        jmp     read_error 
     374 017E                           no_read_error: 
     375 017E  0B C0                            or      ax,ax                  
					 ;if ax=0 then all done 
     376 0180  75 19                            jnz     go_match 
     377 0182  80 3E 0028 R FF                  cmp     ds:c_flg,0ffh          
					 ;count only flag set? 
     378 0187  75 03                            jne     sj2 
     379 0189  E8 02AE R                        call    print_count 
     380 018C                           sj2: 
     381 018C  83 FB 00                         cmp     bx,std_in              
					 ;Using STD IN? 
     382 018F  75 03                            jnz     regular 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-12
                                                            

     383 0191  E9 028B R                        jmp     foo                    
					 ;if so: all done, exit 
     384 0194                           regular: 
     385 0194  B4 3E                            mov     ah,close               
					 ;otherwise close the file 
     386 0196  CD 21                            int     dos_ent 
     387 0198  E9 027F R                        jmp     scan_rest              
					 ;get another file 
     388                                 
     389                                ;----- MATCH ROUTINE ------------------
					------------------------------; 
     390                                ;Note: If input is being taken from a f
					ile the stack contains 
     391                                ; (from top to bottom): 
     392                                ;       - Pointer to the next command i
					n the command line 
     393                                ;       - Pointer to the program segmen
					t prefix (to be loaded into 
     394                                ;         DS to access the command line
					. 
     395                                ; if the imput is from the standart inp
					ut then NONE of it will be 
     396                                ; in the stack. 
     397                                 
     398 019B                           go_match: 
     399 019B  53                               push    bx                     
					 ;save the file handle 
     400 019C  BD 0603 R                        mov     bp,offset buffer       
					 ;ptr to first line of file 
     401 019F  8B F8                            mov     di,ax                  
					 ;dispalcement from beg of buffer 
     402                                 
     403 01A1  3D 0FFF                          cmp     ax,buffer_size-1       
					 ;last line of the file? 
     404 01A4  7F 10                            jg      no_last_line           
					 ;if yes, add a CRLF just in case 
     405 01A6  8B DD                            mov     bx,bp 
     406 01A8  80 79 FF 0A                      cmp     byte ptr[bx+di-1],LF   
					 ;finished with a LF? 
     407 01AC  74 08                            je      no_last_line           
					 ;yes, it's an OK line. 
     408 01AE  C6 01 0D                         mov     byte ptr[bx+di],CR     
					 ;put a CR at the end of the data 
     409 01B1  47                               inc     di 
     410 01B2  C6 01 0A                         mov     byte ptr[bx+di],LF     
					 ;put a LF ... 
     411 01B5  47                               inc     di 
     412                                 
     413 01B6                           no_last_line: 
     414 01B6  57                               push    di                     
					 ;save the # of chars. in the buffer 
     415 01B7  55                               push    bp 
     416 01B8  8B 16 053E R                     mov     dx,ds:st_length        
					 ;length of the string arg. 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-13
                                                            

     417 01BC  4A                               dec     dx                     
					 ;adjust for later use 
     418 01BD  EB 03                            jmp     short try_again 
     419                                 
     420                                 
     421 01BF                           more_stuff_o: 
     422 01BF  EB 6F 90                         jmp     more_stuff 
     423                                 
     424                                 
     425                                 
     426                                ;----- SCAN LINES IN THE BUFFER FOR A M
					ATCH -------------------------; 
     427                                ;Note: at this point the stack contains
					 (from top to bottom): 
     428                                ;       - Stuff mentioned before 
     429                                ;       - File Handle 
     430                                ;       - Number of chars. left in the 
					buffer from the next line. 
     431                                ;       - Addrs. of the next line in th
					e buffer. 
     432                                ; 
     433                                ; plus, DX has the adjusted length of t
					he string argument. 
     434                                 
     435 01C2                           try_again: 
     436 01C2  FF 06 002E R                     inc     ds:line_cntr           
					 ;increment line counter 
     437 01C6  5D                               pop     bp                     
					 ;addrs. of next line in the buffer 
     438 01C7  8B FD                            mov     di,bp                  
					 ;points to beg. of a line 
     439 01C9  59                               pop     cx                     
					 ;get # of chars left in the buffer 
     440 01CA  8B D9                            mov     bx,cx                  
					 ;save in case a non-complete line 
     441 01CC  B0 0A                            mov     al,LF                  
					 ;search for a Line Feed 
     442 01CE  E3 EF                            jcxz    more_stuff_o           
					 ;no chars left in buffer 
     443 01D0  F2/ AE                           repnz   scasb 
     444 01D2  75 EB                            jnz     more_stuff_o           
					 ;no full line left in buffer 
     445                                 
     446 01D4  51                               push    cx                     
					 ;save chars left in buffer 
     447 01D5  57                               push    di                     
					 ;points to beg. of next line 
     448 01D6  8B CF                            mov     cx,di 
     449 01D8  2B CD                            sub     cx,bp                  
					 ;length of the current line 
     450 01DA  8B D9                            mov     bx,cx                  
					 ;save in case it has a match 
     451 01DC  49                               dec     cx 
     452 01DD  49                               dec     cx                     
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-14
                                                            

					 ;CRLF characters discounted 
     453 01DE  E3 27                            jcxz    try_again_opt          
					 ;if line empty go to next line 
     454 01E0  8B FD                            mov     di,bp                  
					 ;pointer to the beg. of current line 
     455 01E2                           another_char: 
     456                                ; 
     457                                ; On entry: 
     458                                ;       BX      line length 
     459                                ;       CX      adjusted line length 
     460                                ;       DX      adjusted string argumen
					t length 
     461                                ;       DI      points to beg. of line 
     462                                ; 
     463                                 
     464                                ELSE 
     465                                 
     466 01E2  BE 0540 R                        mov     si,offset st_buffer    
					 ;pointer to beg. of string argument 
     467 01E5  AC                               lodsb                          
					 ;get first character of the str. arg. 
     468 01E6  F2/ AE                           repnz   scasb                  
					 ;search for a match in current line 
     469 01E8  75 1D                            jnz     try_again_opt          
					 ;no match, try the next line 
     470 01EA  3B CA                            cmp     cx,dx                  
					 ;compare lengths, a full match is not 
     471 01EC  72 19                            jb      try_again_opt          
					 ; possible if CX < DX. 
     472 01EE  57                               push    di                     
					 ;save addrs. of next char. in the line
					 
     473 01EF  51                               push    cx                     
					 ;save the # of chars. left in the line
					 
     474 01F0  8B CA                            mov     cx,dx                  
					 ;get the adjusted string arg. length 
     475 01F2  E3 08                            jcxz    a_match                
					 ;if a single char string, then match! 
     476 01F4  F3/ A6                           repz    cmpsb                  
					 ;compare string with line 
     477 01F6  74 04                            jz      a_match                
					 ;a match found, hurrah! 
     478 01F8  59                               pop     cx                     
					 ;no match, get # of chars remaining 
     479                                                                       
					 ; in the line. 
     480 01F9  5F                               pop     di                     
					 ;position of the next char. in the lin
					e 
     481 01FA  EB E6                            jmp     another_char 
     482                                 
     483                                 
     484                                ;----- A MATCH: CHECK FOR THE v OPTION 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-15
                                                            

					------------------------------; 
     485 01FC                           a_match: 
     486 01FC  58                               pop     ax                     
					 ;adjust stack 
     487 01FD  58                               pop     ax 
     488                                ENDIF 
     489                                 
     490 01FE  80 3E 0027 R FF                  cmp     ds:v_flg,0ffh          
					 ;is flag set? 
     491 0203  75 09                            jne     prt_line               
					 ;no, print the line 
     492 0205  EB BB                            jmp     try_again 
     493                                 
     494                                ;----- NO MATCH: CHECK FOR THE v OPTION
					 -----------------------------; 
     495 0207                           try_again_opt: 
     496 0207  80 3E 0027 R FF                  cmp     ds:v_flg,0ffh          
					 ;is flag set? 
     497 020C  75 B4                            jne     try_again              
					 ;no goto next line 
     498                                 
     499                                ;----- PRINT THE LINE WITH THE MATCH --
					------------------------------; 
     500                                ;Note: at this point the stack contains
					 (top to bottom) 
     501                                ;       - Stuff mentioned before 
     502                                ; 
     503                                ; plus, BP points to begginig of the cu
					rrent line, BX has the length 
     504                                ;of the current line including the CRLF
					, and DX the adjusted length of 
     505                                ;the string argument. 
     506                                 
     507 020E                           prt_line: 
     508 020E  80 3E 0028 R FF                  cmp     ds:c_flg,0ffh          
					 ;is count only flag set? 
     509 0213  75 06                            jne     no_c_flg 
     510 0215  FF 06 002C R                     inc     ds:mtch_cntr           
					 ;yes, increment counter 
     511 0219  EB A7                            jmp     try_again 
     512                                 
     513 021B                           no_c_flg: 
     514 021B  52                               push    dx                     
					 ;save the adjusted string arg. length 
     515 021C  80 3E 0029 R FF                  cmp     ds:n_flg,0ffh          
					 ;is line number flag set? 
     516 0221  75 03                            jne     no_n_flg 
     517 0223  E8 02D7 R                        call    prt_lcntr 
     518 0226                           no_n_flg: 
     519 0226  8B D5                            mov     dx,bp 
     520 0228  8B CB                            mov     cx,bx 
     521 022A  E8 02F0 R                        call    prout 
     522 022D  5A                               pop     dx                     
					 ;restore 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-16
                                                            

     523 022E  EB 92                            jmp     try_again 
     524                                 
     525                                ;----- READ MORE TEXT LINES INTO THE BU
					FFER -------------------------; 
     526                                ; The scanning routines have detected t
					hat the buffer does not 
     527                                ;contain a full line any more. More lin
					es have to be read into the 
     528                                ;buffer. But first perform a seek on th
					e file in order to re-read 
     529                                ;the non-complete line into the beginin
					g of the buffer. 
     530                                ; Uppon entry BP contains points to the
					 begining of the non-complete 
     531                                ;line, and BX has the number of charact
					ers left in the buffer. 
     532                                ; The Stack contains (top to bottom): 
     533                                ;       - Pointer to the next command i
					n the command line 
     534                                ;       - Pointer to the program segmen
					t prefix (to be loaded into 
     535                                ;         DS to access the command line
					). 
     536                                ;       - File handle. 
     537                                 
     538 0230                           more_stuff: 
     539 0230  8B D3                            mov     dx,bx                  
					 ;get chars left in buffer 
     540 0232  5B                               pop     bx                     
					 ;get the handle 
     541 0233  0B D2                            or      dx,dx                  
					 ;are there 0 left? 
     542 0235  74 0D                            jz      no_seek                
					 ;yes, do not seek 
     543 0237  F7 DA                            neg     dx                     
					 ;form two's complement 
     544 0239  B9 FFFF                          mov     cx,-1 
     545 023C  B0 01                            mov     al,1                   
					 ;seek from the current position 
     546 023E  B4 42                            mov     ah,lseek               
					 ;seek on file 
     547 0240  CD 21                            int     dos_ent 
     548 0242  72 03                            jc      read_error 
     549 0244                           no_seek: 
     550 0244  E9 016F R                        jmp     refill                 
					 ;no errors: refill the buffer 
     551 0247                           read_error: 
     552 0247  83 FB 00                         cmp     bx,std_in              
					 ;Using STD IN? 
     553 024A  74 3F                            je      foo                    
					 ;if so: all done, exit 
     554 024C  B4 3E                            mov     ah,close               
					 ;close the file 
     555 024E  CD 21                            int     dos_ent 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-17
                                                            

     556 0250  BA 0000 E                        mov     dx,offset errmsg4_pre  
					 ;read error 
     557 0253  2E: 8A 0E 0000 E                 mov     cl,cs:errlen4_pre 
     558 0258  E8 0318 R                        call    prt_file_name          
					 ;print the file name in error 
     559 025B  BA 0000 E                        mov     dx,offset errmsg4_post 
					 ;read error 
     560 025E  2E: 8A 0E 0000 E                 mov     cl,cs:errlen4_post 
     561 0263  EB 17 90                         jmp     r_error 
     562                                 
     563                                ;----- PRINT ERRORS -------------------
					------------------------------; 
     564 0266                           open_error: 
     565 0266  BA 0000 E                        mov     dx,offset errmsg3_pre  
					  ;error in open operation 
     566 0269  2E: 8A 0E 0000 E                 mov     cl,cs:errlen3_pre 
     567 026E  E8 0329 R                        call    prt_err_2              
					 ;print error message 
     568 0271  E8 0318 R                        call    prt_file_name          
					 ;print the file name in error 
     569 0274  BA 0000 E                        mov     dx,offset errmsg3_post 
					 ;error in open operation 
     570 0277  2E: 8A 0E 0000 E                 mov     cl,cs:errlen3_post 
     571 027C                           r_error: 
     572 027C  E8 0329 R                        call    prt_err_2              
					 ;print error message 
     573                                 
     574                                ;----- SCAN THE REST OF THE COMMAND LIN
					E ----------------------------; 
     575 027F                           scan_rest: 
     576 027F  1F                               pop     ds                     
					 ;restore pointer to comm. line 
     577 0280  5E                               pop     si                     
					 ;restore pointer to next comm. 
     578 0281  E8 0291 R                        call    kill_bl                
					 ;look for further args. 
     579 0284  0B DB                            or      bx,bx                  
					 ;test for a CR 
     580 0286  75 03                            jnz     foo 
     581 0288  E9 0113 R                        jmp     further_args 
     582 028B                           foo: 
     583 028B  B0 00                            mov     al,0                   
					 ;Proper code 
     584 028D                           done: 
     585 028D  B4 4C                            mov     ah,exit                
					 ;All done, exit with proper code. 
     586 028F  CD 21                            int     dos_ent 
     587                                 
     588                                 
     589                                ;--------------------------------------
					------------------------------; 
     590                                ;            Get rid of blanks in comma
					nd line.                      ; 
     591                                ;    Advances the SI reg till the next 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-18
                                                            

					non-blank character, if the   ; 
     592                                ; character is a CR (0dh) then returns 
					with BX non-zero, otherwise   ; 
     593                                ; BX is zero.                          
					                              ; 
     594                                ;                                      
					                              ; 
     595                                ; entry:                               
					                              ; 
     596                                ;       SI      points to the first cha
					racter on the line to scan.   ; 
     597                                ;                                      
					                              ; 
     598                                ; exit:                                
					                              ; 
     599                                ;       SI      points to the first non
					-blank character found.       ; 
     600                                ;       BX      contains 0D hex if the 
					first non-blank found is      ; 
     601                                ;                a Carriage Return, oth
					erwise it is 0.               ; 
     602                                ;                                      
					                              ; 
     603                                ; modifies:                            
					                              ; 
     604                                ;       BX, SI, and AX                 
					                              ; 
     605                                ;                                      
					                              ; 
     606                                ;--------------------------------------
					------------------------------; 
     607 0291                           kill_bl: 
     608 0291  FC                               cld                            
					 ;increment 
     609 0292  33 DB                            xor     bx,bx                  
					 ;zero bx to start: no CR found 
     610 0294                           no_bl: 
     611 0294  AC                               lodsb                          
					 ;get rid of blanks 
     612 0295  3C 20                            cmp     al,' ' 
     613 0297  74 FB                            je      no_bl 
     614 0299  3C 0D                            cmp     al,CR 
     615 029B  75 02                            jnz     no_cr 
     616 029D  8B D8                            mov     bx,ax                  
					 ;make bx non-zero (actually 0dh) 
     617 029F                           no_cr: 
     618 029F  4E                               dec     si                     
					 ;adjust pointer 
     619 02A0  C3                               ret 
     620                                 
     621                                 
     622                                ;--------------------------------------
					------------------------------; 
     623                                ;               Clear Counters         
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-19
                                                            

					                              ; 
     624                                ;--------------------------------------
					------------------------------; 
     625 02A1                           clr_cntrs: 
     626 02A1  26: C6 06 002C R 00              mov     byte ptr es:mtch_cntr,0
					 
     627 02A7  26: C6 06 002E R 00              mov     byte ptr es:line_cntr,0
					 
     628 02AD  C3                               ret 
     629                                 
     630                                ;--------------------------------------
					------------------------------; 
     631                                ;               Print Count of Matched 
					lines                         ; 
     632                                ;                                      
					                              ; 
     633                                ;               Modifies: AX,CX,DX and 
					DI                            ; 
     634                                ;--------------------------------------
					------------------------------; 
     635 02AE                           print_count: 
     636 02AE  53                               push    bx                     
					 ;save handle 
     637 02AF  83 FB 00                         cmp     bx,std_in              
					 ;using std_in? 
     638 02B2  74 09                            jz      sj3                    
					 ;if so do not print file name 
     639                                 
     640 02B4  BA 001C R                        mov     dx,offset colon 
     641 02B7  B9 0002                          mov     cx,2 
     642 02BA  E8 02F0 R                        call    prout                  
					 ;print colon 
     643 02BD                           sj3: 
     644 02BD  A1 002C R                        mov     ax,ds:mtch_cntr 
     645 02C0  BF 001F R                        mov     di,offset n2_buf       
					 ;buffer for characters 
     646 02C3  E8 02F8 R                        call    bin2asc                
					 ;convert to ascii 
     647 02C6  BA 001F R                        mov     dx,offset n2_buf 
     648 02C9  E8 02F0 R                        call    prout                  
					 ;print the number 
     649 02CC  BA 0000 E                        mov     dx,offset crlf 
     650 02CF  B9 0002                          mov     cx,2 
     651 02D2  E8 02F0 R                        call    prout                  
					 ;print an end of line 
     652 02D5  5B                               pop     bx 
     653 02D6  C3                               ret 
     654                                 
     655                                 
     656                                ;--------------------------------------
					------------------------------; 
     657                                ;               Print relative line num
					ber                           ; 
     658                                ;                                      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-20
                                                            

					                              ; 
     659                                ;               Modifies: AX,CX and DI 
					                              ; 
     660                                ;--------------------------------------
					------------------------------; 
     661 02D7                           prt_lcntr: 
     662 02D7  53                               push    bx 
     663 02D8  52                               push    dx 
     664 02D9  A1 002E R                        mov     ax,ds:line_cntr 
     665 02DC  BF 001F R                        mov     di,offset n2_buf 
     666 02DF  E8 02F8 R                        call    bin2asc 
     667 02E2  C6 05 5D                         mov     byte ptr[di],"]" 
     668 02E5  41                               inc     cx 
     669 02E6  41                               inc     cx 
     670 02E7  BA 001E R                        mov     dx,offset n1_buf 
     671 02EA  E8 02F0 R                        call    prout 
     672 02ED  5A                               pop     dx 
     673 02EE  5B                               pop     bx 
     674 02EF  C3                               ret 
     675                                 
     676                                ;--------------------------------------
					------------------------------; 
     677                                ;               Print string to STD_OUT
					                              ; 
     678                                ;--------------------------------------
					------------------------------; 
     679 02F0                           prout: 
     680 02F0  BB 0001                          mov     bx,std_out 
     681 02F3  B4 40                            mov     ah,write 
     682 02F5  CD 21                            int     dos_ent 
     683 02F7  C3                               ret 
     684                                 
     685                                 
     686                                ;--------------------------------------
					------------------------------; 
     687                                ;       Binary to Ascii conversion rout
					ine                           ; 
     688                                ;                                      
					                              ; 
     689                                ; Entry:                               
					                              ; 
     690                                ;       AX      Binary number          
					                              ; 
     691                                ;       DI      Points to one past the 
					last char in the              ; 
     692                                ;             result buffer.           
					                              ; 
     693                                ;                                      
					                              ; 
     694                                ; Exit:                                
					                              ; 
     695                                ;       Result in the buffer MSD first 
					                              ; 
     696                                ;       CX      Digit count            
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-21
                                                            

					                              ; 
     697                                ;                                      
					                              ; 
     698                                ; Modifies:                            
					                              ; 
     699                                ;       AX,BX,CX,DX and DI             
					                              ; 
     700                                ;                                      
					                              ; 
     701                                ;--------------------------------------
					------------------------------; 
     702 02F8                           bin2asc: 
     703 02F8  BB 000A                          mov     bx,0ah 
     704 02FB  33 C9                            xor     cx,cx 
     705 02FD                           go_div: 
     706 02FD  41                               inc     cx 
     707 02FE  3B C3                            cmp     ax,bx 
     708 0300  72 0A                            jb      div_done 
     709 0302  33 D2                            xor     dx,dx 
     710 0304  F7 F3                            div     bx 
     711 0306  80 C2 30                         add     dl,'0'          ;conver
					t to ASCII 
     712 0309  52                               push    dx 
     713 030A  EB F1                            jmp     short go_div 
     714                                 
     715 030C                           div_done: 
     716 030C  04 30                            add     al,'0' 
     717 030E  50                               push    ax 
     718 030F  8B D9                            mov     bx,cx 
     719 0311                           deposit: 
     720 0311  58                               pop     ax 
     721 0312  AA                               stosb 
     722 0313  E2 FC                            loop    deposit 
     723 0315  8B CB                            mov     cx,bx 
     724 0317  C3                               ret 
     725                                 
     726                                 
     727                                ;--------------------------------------
					------------------------------; 
     728                                ;       Print the current file name    
					                              ; 
     729                                ;                                      
					                              ; 
     730                                ; modifies:                            
					                              ; 
     731                                ;       DX, CX, BX and AX              
					                              ; 
     732                                ;--------------------------------------
					------------------------------; 
     733 0318                           prt_file_name: 
     734 0318  BA 05C2 R                        mov     dx,offset file_name_buf
					 ;print the file name 
     735 031B  8B 0E 05C0 R                     mov     cx,ds:file_name_len    
					 ;retrive file name length 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-22
                                                            

     736 031F  EB 08                            jmp     short prt_err_2 
     737                                 
     738                                 
     739                                ;--------------------------------------
					------------------------------; 
     740                                ;       Print an error message to the S
					tandart error                 ; 
     741                                ;                                      
					                              ; 
     742                                ; entry:                               
					                              ; 
     743                                ;       DX      has the pointer to the 
					message                       ; 
     744                                ;       CX      has the length of the m
					essage                        ; 
     745                                ;                                      
					                              ; 
     746                                ; modifies:                            
					                              ; 
     747                                ;        BX and AX                     
					                              ; 
     748                                ;--------------------------------------
					------------------------------; 
     749 0321                           prt_err: 
     750 0321  1E                               push    ds                     
					 ;Save the current DS 
     751 0322  0E                               push    cs                     
					 ;Make DS point to the right 
     752 0323  1F                               pop     ds                     
					 ; place, for DOS use. 
     753 0324  E8 0329 R                        call    prt_err_2 
     754 0327  1F                               pop     ds 
     755 0328  C3                               ret 
     756                                 
     757 0329                           prt_err_2: 
     758 0329  32 ED                            xor     ch,ch 
     759 032B  BB 0002                          mov     bx,std_err 
     760 032E  B4 40                            mov     ah,write 
     761 0330  CD 21                            int     dos_ent                
					 ;write error message 
     762 0332  C3                               ret 
     763                                 
     764                                 
     765                                ;--------------------------------------
					------------------------------; 
     766                                ;       CAPIALIZES THE CHARACTER IN AL 
					                              ; 
     767                                ;                                      
					                              ; 
     768                                ;       entry:                         
					                              ; 
     769                                ;               AL      has the charact
					er to Capitalize              ; 
     770                                ;                                      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-23
                                                            

					                              ; 
     771                                ;       exit:                          
					                              ; 
     772                                ;               AL      has the capital
					ized character                ; 
     773                                ;                                      
					                              ; 
     774                                ;       modifies:                      
					                              ; 
     775                                ;               AL                     
					                              ; 
     776                                ;--------------------------------------
					------------------------------; 
     777 0333                           make_caps: 
     778 0333  3C 61                            cmp     al,'a' 
     779 0335  72 06                            jb      no_cap 
     780 0337  3C 7A                            cmp     al,'z' 
     781 0339  7F 02                            jg      no_cap 
     782 033B  24 DF                            and     al,0dfh 
     783 033D                           no_cap: 
     784 033D  C3                               ret 
     785                                 
     786                                 
     787                                 
     788                                ENDIF 
     789                                 
     790                                 
     791                                ;----- PATCH AREA ---------------------
					------------------------------; 
     792                                 
     793 033E  0100[                    patch_area      dw      100h dup(?) 
     794            ????                
     795                         ]      
     796                                
     797                                 
     798                                 
     799                                 
     800                                ;----- BUFFER AREA --------------------
					------------------------------; 
     801 053E  0000                     st_length dw    0                      
					 ;String argumnet length 
     802 0540  0080[                    st_buffer db    st_buf_size dup(?)     
					 ;String argument buffer 
     803            ??                  
     804                         ]      
     805                                
     806                                 
     807 05C0  0000                     file_name_len dw 0                     
					 ;File name length 
     808 05C2  0041[                    file_name_buf db fname_buf_size+1 dup(?
					)  ;File name buffer,(allow for 
     809            ??                  
     810                         ]      
     811                                
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Page     1-24
                                                            

     812                                                                       
					 ; null at the end). 
     813                                 
     814 0603  1001[                    buffer  db      buffer_size+1 dup(?)   
					 ;file buffer, the last byte is 
     815            ??                  
     816                         ]      
     817                                
     818                                                                       
					 ;a guard in case of forced insertion 
     819                                                                       
					 ;of a CRLF pair. 
     820                                 
     821                                ;----- ERROR MESSAGES -----------------
					------------------------------; 
     822                                        EXTRN   bad_vers:byte,crlf:byte
					,errmsg1:byte,errlen1:byte,errmsg2:byte
					 
     823                                        EXTRN   errmsg3_pre:byte,errlen
					3_pre:byte 
     824                                        EXTRN   errmsg3_post:byte,errle
					n3_post:byte 
     825                                        EXTRN   errmsg4_pre:byte,errlen
					4_pre:byte 
     826                                        EXTRN   errmsg4_post:byte,errle
					n4_post:byte 
     827                                        EXTRN   heading:byte,heading_le
					n:byte,errlen2:byte 
     828                                        EXTRN   errmsg5:byte,errmsg5_op
					t:byte,errlen5:byte 
     829 1604                           code    ends 
     830                                 
     831                                 
     832                                ;----- STACK AREA ---------------------
					------------------------------; 
     833 0000                           stack   segment stack 
     834                                 
     835 0000  0040[                            dw      64 dup(?,?) 
     836            ????                
     837            ????                
     838                         ]      
     839                                
     840 = 0100                         stack_top equ   $ 
     841                                 
     842 0100                           stack   ends 
     843                                 
     844                                        end     start 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Symbols-1
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CODE . . . . . . . . . . . . . .  	1604	PARA	PUBLIC	
STACK  . . . . . . . . . . . . .  	0100	PARA	STACK	

Symbols:            

                N a m e         	Type	Value	Attr         

ANOTHER_CHAR . . . . . . . . . .  	L NEAR	01E2	CODE
ANOTHER_OPT  . . . . . . . . . .  	L NEAR	0069	CODE
ARGS_MISSING . . . . . . . . . .  	L NEAR	0052	CODE
A_MATCH  . . . . . . . . . . . .  	L NEAR	01FC	CODE

BADFART  . . . . . . . . . . . .  	F PROC	0045	CODE	Length = 0001
BAD_STR_ERR  . . . . . . . . . .  	L NEAR	00D8	CODE
BAD_VERS . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
BIN2ASC  . . . . . . . . . . . .  	L NEAR	02F8	CODE
BUFFER . . . . . . . . . . . . .  	L BYTE 	0603	CODE	Length = 1001
BUFFER_SIZE  . . . . . . . . . .  	Number	1000	

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLR_CNTRS  . . . . . . . . . . .  	L NEAR	02A1	CODE
COLON  . . . . . . . . . . . . .  	L BYTE 	001C	CODE
CONT_SCAN  . . . . . . . . . . .  	L NEAR	00C0	CODE
CR . . . . . . . . . . . . . . .  	Number	000D	
CRLF . . . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
C_FLG  . . . . . . . . . . . . .  	L BYTE 	0028	CODE

DEPOSIT  . . . . . . . . . . . .  	L NEAR	0311	CODE
DIV_DONE . . . . . . . . . . . .  	L NEAR	030C	CODE
DONE . . . . . . . . . . . . . .  	L NEAR	028D	CODE
DONE_MOVE  . . . . . . . . . . .  	L NEAR	0128	CODE
DOS_ENT  . . . . . . . . . . . .  	Number	0021	

ERRLEN1  . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRLEN2  . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRLEN3_POST . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRLEN3_PRE  . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRLEN4_POST . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRLEN4_PRE  . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRLEN5  . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG1  . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG2  . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG3_POST . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG3_PRE  . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG4_POST . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG4_PRE  . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG5  . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
ERRMSG5_OPT  . . . . . . . . . .  	V BYTE 	0000	CODE	External
EXIT . . . . . . . . . . . . . .  	Number	004C	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Symbols-2
                                                             


FALSE  . . . . . . . . . . . . .  	Number	0000	
FILE_NAME_BUF  . . . . . . . . .  	L BYTE 	05C2	CODE	Length = 0041
FILE_NAME_LEN  . . . . . . . . .  	L WORD 	05C0	CODE
FILL . . . . . . . . . . . . . .  	L NEAR	016D	CODE
FIND_OPT . . . . . . . . . . . .  	L NEAR	0062	CODE
FIND_STR . . . . . . . . . . . .  	L NEAR	00CA	CODE
FNAME_BUF_SIZE . . . . . . . . .  	Number	0040	
FOO  . . . . . . . . . . . . . .  	L NEAR	028B	CODE
FURTHER_ARGS . . . . . . . . . .  	L NEAR	0113	CODE

GET_VERSION  . . . . . . . . . .  	Number	0030	
GO_DIV . . . . . . . . . . . . .  	L NEAR	02FD	CODE
GO_MATCH . . . . . . . . . . . .  	L NEAR	019B	CODE

HEADING  . . . . . . . . . . . .  	V BYTE 	0000	CODE	External
HEADING_LEN  . . . . . . . . . .  	V BYTE 	0000	CODE	External

KANJI  . . . . . . . . . . . . .  	Alias	 FALSE		
KILL_BL  . . . . . . . . . . . .  	L NEAR	0291	CODE

LF . . . . . . . . . . . . . . .  	Number	000A	
LINE_CNTR  . . . . . . . . . . .  	L WORD 	002E	CODE
LSEEK  . . . . . . . . . . . . .  	Number	0042	
L_FLG  . . . . . . . . . . . . .  	L BYTE 	002B	CODE

MAKE . . . . . . . . . . . . . .  	L BYTE 	0000	CODE
MAKE_CAPS  . . . . . . . . . . .  	L NEAR	0333	CODE
MORE_STUFF . . . . . . . . . . .  	L NEAR	0230	CODE
MORE_STUFF_O . . . . . . . . . .  	L NEAR	01BF	CODE
MOVE_CHAR  . . . . . . . . . . .  	L NEAR	0100	CODE
MOVE_FNAME . . . . . . . . . . .  	L NEAR	011B	CODE
MOVE_STR . . . . . . . . . . . .  	L NEAR	00D3	CODE
MTCH_CNTR  . . . . . . . . . . .  	L WORD 	002C	CODE

N1_BUF . . . . . . . . . . . . .  	L BYTE 	001E	CODE
N2_BUF . . . . . . . . . . . . .  	L BYTE 	001F	CODE	Length = 0008
NO_BL  . . . . . . . . . . . . .  	L NEAR	0294	CODE
NO_CAP . . . . . . . . . . . . .  	L NEAR	033D	CODE
NO_CR  . . . . . . . . . . . . .  	L NEAR	029F	CODE
NO_C_FLG . . . . . . . . . . . .  	L NEAR	021B	CODE
NO_LAST_LINE . . . . . . . . . .  	L NEAR	01B6	CODE
NO_N_FLG . . . . . . . . . . . .  	L NEAR	0226	CODE
NO_READ_ERROR  . . . . . . . . .  	L NEAR	017E	CODE
NO_SEEK  . . . . . . . . . . . .  	L NEAR	0244	CODE
N_FLG  . . . . . . . . . . . . .  	L BYTE 	0029	CODE

OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ERROR . . . . . . . . . . .  	L NEAR	0266	CODE
OPT_C  . . . . . . . . . . . . .  	L NEAR	00B2	CODE
OPT_DISPATCH . . . . . . . . . .  	L NEAR	00BA	CODE
OPT_N  . . . . . . . . . . . . .  	L NEAR	00B7	CODE
OPT_TBL  . . . . . . . . . . . .  	L NEAR	0027	CODE
OPT_V  . . . . . . . . . . . . .  	L NEAR	00AD	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 16:37:55

MSDOS V2.0  FIND                                            Symbols-3
                                                             

OTHER_ARGS . . . . . . . . . . .  	L NEAR	0104	CODE

PATCH_AREA . . . . . . . . . . .  	L WORD 	033E	CODE	Length = 0100
PRINT_COUNT  . . . . . . . . . .  	L NEAR	02AE	CODE
PROUT  . . . . . . . . . . . . .  	L NEAR	02F0	CODE
PRT_ERR  . . . . . . . . . . . .  	L NEAR	0321	CODE
PRT_ERR_2  . . . . . . . . . . .  	L NEAR	0329	CODE
PRT_FILE_NAME  . . . . . . . . .  	L NEAR	0318	CODE
PRT_LCNTR  . . . . . . . . . . .  	L NEAR	02D7	CODE
PRT_LINE . . . . . . . . . . . .  	L NEAR	020E	CODE

QUOTE_CHAR . . . . . . . . . . .  	Number	0022	

READ . . . . . . . . . . . . . .  	Number	003F	
READ_ERROR . . . . . . . . . . .  	L NEAR	0247	CODE
REFILL . . . . . . . . . . . . .  	L NEAR	016F	CODE
REGULAR  . . . . . . . . . . . .  	L NEAR	0194	CODE
REV  . . . . . . . . . . . . . .  	L BYTE 	001B	CODE
R_ERROR  . . . . . . . . . . . .  	L NEAR	027C	CODE

SAY_NAME . . . . . . . . . . . .  	L NEAR	0144	CODE
SCAN_REST  . . . . . . . . . . .  	L NEAR	027F	CODE
SJ2  . . . . . . . . . . . . . .  	L NEAR	018C	CODE
SJ3  . . . . . . . . . . . . . .  	L NEAR	02BD	CODE
STACK_TOP  . . . . . . . . . . .  	NEAR 	0100	STACK
START  . . . . . . . . . . . . .  	L NEAR	0030	CODE
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_ERR  . . . . . . . . . . . .  	Number	0002	
STD_IN . . . . . . . . . . . . .  	Number	0000	
STD_OUT  . . . . . . . . . . . .  	Number	0001	
STR_OK . . . . . . . . . . . . .  	L NEAR	00E8	CODE
ST_BUFFER  . . . . . . . . . . .  	L BYTE 	0540	CODE	Length = 0080
ST_BUF_SIZE  . . . . . . . . . .  	Number	0080	
ST_LENGTH  . . . . . . . . . . .  	L WORD 	053E	CODE

TRUE . . . . . . . . . . . . . .  	Number	FFFF	
TRY_AGAIN  . . . . . . . . . . .  	L NEAR	01C2	CODE
TRY_AGAIN_OPT  . . . . . . . . .  	L NEAR	0207	CODE

VERS_OK  . . . . . . . . . . . .  	L NEAR	0046	CODE
V_FLG  . . . . . . . . . . . . .  	L BYTE 	0027	CODE

WRITE  . . . . . . . . . . . . .  	Number	0040	

XX1  . . . . . . . . . . . . . .  	L NEAR	016C	CODE
X_FLG  . . . . . . . . . . . . .  	L BYTE 	002A	CODE


    931 Source  Lines
    931 Total   Lines
    146 Symbols

  45558 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
