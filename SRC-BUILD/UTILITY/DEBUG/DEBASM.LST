Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-1
                                                            

       1                                TITLE   DEBASM 
       2                                 
       3                                ; Code for the ASSEMble command in the 
					debugger 
       4                                 
       5                                
					 
debasm.ASM(7) : error 1: Extra characters on line 
       6                                .list 
       7                                 
       8                                 
       9 0000                           CODE    SEGMENT PUBLIC BYTE 'CODE' 
      10 0000                           CODE    ENDS 
      11                                 
      12 0000                           CONST   SEGMENT PUBLIC BYTE 
      13                                 
      14                                        EXTRN   DBMN:BYTE,CSSAVE:WORD,R
					EG8:BYTE,REG16:BYTE,SIZ8:BYTE 
      15                                        EXTRN   SYNERR:BYTE,OPTAB:BYTE,
					MAXOP:ABS 
      16                                 
      17 0000                           CONST   ENDS 
      18                                 
      19 0000                           DATA    SEGMENT PUBLIC BYTE 
      20                                 
      21                                        EXTRN   HINUM:WORD,LOWNUM:WORD,
					ASSEM_CNT:BYTE 
      22                                        EXTRN   ASSEM1:BYTE,ASSEM2:BYTE
					,ASSEM3:BYTE,ASSEM4:BYTE,ASSEM5:BYTE 
      23                                        EXTRN   ASSEM6:BYTE,OPBUF:BYTE,
					OPCODE:WORD,REGMEM:BYTE,INDEX:WORD 
      24                                        EXTRN   ASMADD:BYTE,ASMSP:WORD,
					MOVFLG:BYTE,SEGFLG:BYTE,TSTFLG:BYTE 
      25                                        EXTRN   NUMFLG:BYTE,DIRFLG:BYTE
					,BYTEBUF:BYTE,F8087:BYTE,DIFLG:BYTE 
      26                                        EXTRN   SIFLG:BYTE,BXFLG:BYTE,B
					PFLG:BYTE,NEGFLG:BYTE,MEMFLG:BYTE 
      27                                        EXTRN   REGFLG:BYTE,AWORD:BYTE,
					MIDFLD:BYTE,MODE:BYTE 
      28                                 
      29 0000                           DATA    ENDS 
      30                                 
      31                                DG      GROUP   CODE,CONST,DATA 
      32                                 
      33                                 
      34 0000                           CODE    SEGMENT PUBLIC BYTE 'CODE' 
      35                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
      36                                 
      37                                        PUBLIC  ASSEM 
      38                                        PUBLIC  DB_OPER,DW_OPER,ASSEMLO
					OP,GROUP2,AA_OPER,DCINC_OPER 
      39                                        PUBLIC  GROUP1,ESC_OPER,FGROUPP
					,FGROUPX,FDE_OPER,FGROUPZ 
      40                                        PUBLIC  FD9_OPER,FGROUP,FDB_OPE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-2
                                                            

					R,FGROUPB,FGROUP3,FGROUP3W 
      41                                        PUBLIC  FGROUPDS,INT_OPER,IN_OP
					ER,DISP8_OPER,JMP_OPER,NO_OPER 
      42                                        PUBLIC  OUT_OPER,L_OPER,MOV_OPE
					R,POP_OPER,PUSH_OPER,ROTOP 
      43                                        PUBLIC  TST_OPER,EX_OPER,GET_DA
					TA16,CALL_OPER 
      44                                 
      45                                        EXTRN   INBUF:NEAR,SCANB:NEAR,S
					CANP:NEAR,GETHX:NEAR,GET_ADDRESS:NEAR 
      46                                        EXTRN   DEFAULT:NEAR,OUTDI:NEAR
					,BLANK:NEAR,PRINTMES:NEAR,TAB:NEAR 
      47                                 
      48                                ; 
      49                                ;       Line by line assembler 
      50                                ; 
      51                                 
      52 0000                           ASSEM: 
      53 0000  8B 2E 0000 E                     MOV     BP,[CSSAVE]            
					 ; Default code segment 
      54 0004  BF 0000 E                        MOV     DI,OFFSET DG:ASMADD    
					 ; Default address 
      55 0007  E8 0000 E                        CALL    DEFAULT 
      56 000A  89 16 0000 E                     MOV     WORD PTR [ASMADD],DX   
					 ; Displacement of disassembly 
      57 000E  A3 0002 E                        MOV     WORD PTR [ASMADD+2],AX 
					 ; Segment 
      58 0011  89 26 0000 E                     MOV     [ASMSP],SP             
					 ; Save sp in case of error 
      59                                 
      60 0015                           ASSEMLOOP: 
      61 0015  8B 26 0000 E                     MOV     SP,[ASMSP]             
					 ; Restore sp in case of error 
      62 0019  C4 3E 0000 E                     LES     DI,DWORD PTR ASMADD    
					 ; GET PC 
      63 001D  E8 0000 E                        CALL    OUTDI                  
					 ; OUTPUT ADDRESS 
      64 0020  E8 0000 E                        CALL    BLANK                  
					 ; SKIP A SPACE 
      65 0023  0E                               PUSH    CS 
      66 0024  07                               POP     ES 
      67 0025  E8 0000 E                        CALL    INBUF                  
					 ; GET A BUFFER 
      68 0028  E8 0000 E                        CALL    SCANB 
      69 002B  75 01                            JNZ     OPLOOK 
      70 002D  C3                               RET                            
					 ; IF EMPTY JUST RETURN 
      71                                ; 
      72                                ;  At this point ds:si points to the op
					code mnemonic... 
      73                                ; 
      74 002E  33 C9                    OPLOOK: XOR     CX,CX                  
					 ; OP-CODE COUNT = 0 
      75 0030  BF 0000 E                        MOV     DI,OFFSET DG:DBMN 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-3
                                                            

      76 0033  33 DB                    OPSCAN: XOR     BX,BX 
      77 0035  8A 01                    OPLOOP: MOV     AL,[DI+BX] 
      78 0037  24 7F                            AND     AL,7FH 
      79 0039  3A 00                            CMP     AL,[SI+BX] 
      80 003B  74 13                            JZ      OPMATCH 
      81 003D  41                               INC     CX                     
					 ; INCREMENT OP-CODE COUNT 
      82 003E  81 F9 0000 E                     CMP     CX,MAXOP               
					 ; CHECK FOR END OF LIST 
      83 0042  72 03                            JB      OP1 
      84 0044  E9 05C5 R                        JMP     ASMERR 
      85 0047  47                       OP1:    INC     DI                     
					 ; SCAN FOR NEXT OP-CODE... 
      86 0048  F6 45 FF 80                      TEST    BYTE PTR [DI-1],80H 
      87 004C  74 F9                            JZ      OP1 
      88 004E  EB E3                            JMP     OPSCAN 
      89                                 
      90 0050  43                       OPMATCH:INC     BX                     
					 ; COMPARE NEXT CHAR 
      91 0051  F6 41 FF 80                      TEST    BYTE PTR [DI+BX-1],80H 
					 ; ARE WE DONE? 
      92 0055  74 DE                            JZ      OPLOOP                 
					 ; ..IF NOT KEEP COMPARING 
      93 0057  87 D9                            XCHG    BX,CX 
      94 0059  8B C3                            MOV     AX,BX 
      95 005B  D1 E0                            SHL     AX,1 
      96 005D  03 C3                            ADD     AX,BX 
      97 005F  05 0000 E                        ADD     AX,OFFSET DG:OPTAB 
      98 0062  8B D8                            MOV     BX,AX 
      99                                ; 
     100                                ; CX = COUNT OF CHARS IN OPCODE 
     101                                ; BX = POINTER INTO OPCODE TABLE 
     102                                ; 
     103 0064  33 C0                            XOR     AX,AX 
     104 0066  A2 0000 E                        MOV     BYTE PTR [AWORD],AL 
     105 0069  A3 0000 E                        MOV     WORD PTR [MOVFLG],AX   
					 ; MOVFLG + TSTFLG 
     106 006C  A2 0000 E                        MOV     BYTE PTR [SEGFLG],AL   
					 ; ZERO SEGMENT REGISTER FLAG 
     107 006F  B4 0A                            MOV     AH,00001010B           
					 ; SET UP FOR AA_OPER 
     108 0071  8A 07                            MOV     AL,BYTE PTR [BX] 
     109 0073  A3 0000 E                        MOV     WORD PTR [ASSEM1],AX 
     110 0076  C6 06 0000 E 01                  MOV     BYTE PTR [ASSEM_CNT],1 
     111                                 
     112 007B  03 F1                            ADD     SI,CX                  
					 ; SI POINTS TO OPERAND 
     113 007D  FF 67 01                         JMP     WORD PTR [BX+1] 
     114                                ; 
     115                                ; 8087 INSTRUCTIONS WITH NO OPERANDS 
     116                                ; 
     117 0080                           FDE_OPER: 
     118 0080  B4 DE                            MOV     AH,0DEH 
     119 0082  EB 06                            JMP     SHORT FDX_OPER 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-4
                                                            

     120 0084                           FDB_OPER: 
     121 0084  B4 DB                            MOV     AH,0DBH 
     122 0086  EB 02                            JMP     SHORT FDX_OPER 
     123 0088                           FD9_OPER: 
     124 0088  B4 D9                            MOV     AH,0D9H 
     125 008A                           FDX_OPER: 
     126 008A  86 C4                            XCHG    AL,AH 
     127 008C  A3 0000 E                        MOV     WORD PTR [ASSEM1],AX 
     128                                ; 
     129                                ;  aad and aam instrucions 
     130                                ; 
     131 008F  FE 06 0000 E             AA_OPER:INC     BYTE PTR [ASSEM_CNT] 
     132                                ; 
     133                                ;  instructions with no operands 
     134                                ; 
     135 0093                           NO_OPER: 
     136 0093  E8 08B0 R                        CALL    STUFF_BYTES 
     137 0096  E8 0000 E                        CALL    SCANP 
     138 0099  0E                               PUSH    CS 
     139 009A  07                               POP     ES 
     140 009B  75 91                            JNZ     OPLOOK 
     141 009D  E9 0015 R                        JMP     ASSEMLOOP 
     142                                ; 
     143                                ;  push instruction 
     144                                ; 
     145 00A0                           PUSH_OPER: 
     146 00A0  B4 FF                            MOV     AH,11111111B 
     147 00A2  EB 02                            JMP     SHORT POP1 
     148                                ; 
     149                                ;  pop instruction 
     150                                ; 
     151 00A4                           POP_OPER: 
     152 00A4  B4 8F                            MOV     AH,10001111B 
     153 00A6  88 26 0000 E             POP1:   MOV     [ASSEM1],AH 
     154 00AA  A2 0000 E                        MOV     [MIDFLD],AL 
     155 00AD  FE 06 0000 E                     INC     BYTE PTR [MOVFLG]      
					 ; ALLOW SEGMENT REGISTERS 
     156 00B1  C6 06 0000 E 02                  MOV     BYTE PTR [AWORD],2     
					 ; MUST BE 16 BITS 
     157 00B6  E8 0634 R                        CALL    GETREGMEM 
     158 00B9  E8 05D7 R                        CALL    BUILDIT 
     159 00BC  8A 45 02                         MOV     AL,[DI+2] 
     160 00BF  3C C0                            CMP     AL,11000000B 
     161 00C1  72 44                            JB      DATRET 
     162 00C3  C6 05 01                         MOV     BYTE PTR [DI],1 
     163 00C6  80 3E 0000 E 02                  CMP     BYTE PTR [MOVFLG],2 
     164 00CB  75 0F                            JNZ     POP2 
     165 00CD  24 18                            AND     AL,00011000B 
     166 00CF  0C 06                            OR      AL,00000110B 
     167 00D1  80 3E 0000 E 00                  CMP     BYTE PTR [MIDFLD],0 
     168 00D6  75 11                            JNZ     POP3 
     169 00D8  0C 01                            OR      AL,00000001B 
     170 00DA  EB 0D                            JMP     SHORT POP3 
     171                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-5
                                                            

     172 00DC  24 07                    POP2:   AND     AL,111B 
     173 00DE  0C 50                            OR      AL,01010000B 
     174 00E0  80 3E 0000 E 00                  CMP     BYTE PTR [MIDFLD],0 
     175 00E5  75 02                            JNZ     POP3 
     176 00E7  0C 58                            OR      AL,01011000B 
     177 00E9  88 45 01                 POP3:   MOV     BYTE PTR [DI+1],AL 
     178 00EC  E9 05BF R                        JMP     ASSEM_EXIT 
     179                                ; 
     180                                ; ret and retf instructions 
     181                                ; 
     182 00EF                           GET_DATA16: 
     183 00EF  E8 0000 E                        CALL    SCANB 
     184 00F2  B9 0004                          MOV     CX,4 
     185 00F5  E8 0000 E                        CALL    GETHX 
     186 00F8  72 0D                            JC      DATRET 
     187 00FA  FE 0E 0000 E                     DEC     BYTE PTR [ASSEM1]      
					 ; CHANGE OP-CODE 
     188 00FE  80 06 0000 E 02                  ADD     BYTE PTR [ASSEM_CNT],2 
					 ; UPDATE LENGTH 
     189 0103  89 16 0000 E                     MOV     WORD PTR [ASSEM2],DX   
					 ; SAVE OFFSET 
     190 0107  E9 05BF R                DATRET: JMP     ASSEM_EXIT 
     191                                ; 
     192                                ;  int instruction 
     193                                ; 
     194 010A                           INT_OPER: 
     195 010A  E8 0000 E                        CALL    SCANB 
     196 010D  B9 0002                          MOV     CX,2 
     197 0110  E8 0000 E                        CALL    GETHX 
     198 0113  72 1B                            JC      ERRV1 
     199 0115  8A C2                            MOV     AL,DL 
     200 0117  3C 03                            CMP     AL,3 
     201 0119  74 EC                            JZ      DATRET 
     202 011B  FE 06 0000 E                     INC     BYTE PTR [ASSEM1] 
     203 011F  E9 0243 R                        JMP     DISPX 
     204                                ; 
     205                                ;  in instruction 
     206                                ; 
     207 0122                           IN_OPER: 
     208 0122  E8 0000 E                        CALL    SCANB 
     209 0125  AD                               LODSW 
     210 0126  3D 4C41                          CMP     AX,"A"+4C00H           
					 ; "AL" 
     211 0129  74 0C                            JZ      IN_1 
     212 012B  3D 5841                          CMP     AX,"A"+5800H           
					 ; "AX" 
     213 012E  74 03                            JZ      IN_0 
     214 0130  E9 05C5 R                ERRV1:  JMP     ASMERR 
     215 0133  FE 06 0000 E             IN_0:   INC     BYTE PTR [ASSEM1] 
     216 0137  E8 0000 E                IN_1:   CALL    SCANP 
     217 013A  81 3C 5844                       CMP     WORD PTR [SI],"D"+5800H
					 ; "DX" 
     218 013E  74 C7                            JZ      DATRET 
     219 0140  B9 0002                          MOV     CX,2 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-6
                                                            

     220 0143  E8 0000 E                        CALL    GETHX 
     221 0146  72 E8                            JC      ERRV1 
     222 0148  80 26 0000 E F7                  AND     BYTE PTR [ASSEM1],11110
					111B 
     223 014D  8A C2                            MOV     AL,DL 
     224 014F  E9 0243 R                        JMP     DISPX 
     225                                ; 
     226                                ;  out instruction 
     227                                ; 
     228 0152                           OUT_OPER: 
     229 0152  E8 0000 E                        CALL    SCANB 
     230 0155  81 3C 5844                       CMP     WORD PTR [SI],"D"+5800H
					 ; "DX" 
     231 0159  75 04                            JNZ     OUT_0 
     232 015B  46                               INC     SI 
     233 015C  46                               INC     SI 
     234 015D  EB 15                            JMP     SHORT OUT_1 
     235 015F  80 26 0000 E F7          OUT_0:  AND     BYTE PTR [ASSEM1],11110
					111B 
     236 0164  B9 0002                          MOV     CX,2 
     237 0167  E8 0000 E                        CALL    GETHX 
     238 016A  72 C4                            JC      ERRV1 
     239 016C  FE 06 0000 E                     INC     BYTE PTR [ASSEM_CNT] 
     240 0170  88 16 0000 E                     MOV     BYTE PTR [ASSEM2],DL 
     241 0174  E8 0000 E                OUT_1:  CALL    SCANP 
     242 0177  AD                               LODSW 
     243 0178  3D 4C41                          CMP     AX,"A"+4C00H           
					 ; "AL" 
     244 017B  74 8A                            JZ      DATRET 
     245 017D  3D 5841                          CMP     AX,"A"+5800H           
					 ; "AX" 
     246 0180  75 AE                            JNZ     ERRV1 
     247 0182  FE 06 0000 E                     INC     BYTE PTR [ASSEM1] 
     248 0186  E9 0107 R                        JMP     DATRET 
     249                                 
     250                                ; 
     251                                ;  jump instruction 
     252                                ; 
     253 0189                           JMP_OPER: 
     254 0189  FE 06 0000 E                     INC     BYTE PTR [TSTFLG] 
     255                                ; 
     256                                ;  call instruction 
     257                                ; 
     258 018D                           CALL_OPER: 
     259 018D  C6 06 0000 E FF                  MOV     BYTE PTR [ASSEM1],11111
					111B 
     260 0192  A2 0000 E                        MOV     BYTE PTR [MIDFLD],AL 
     261 0195  E8 0634 R                        CALL    GETREGMEM 
     262 0198  E8 05F3 R                        CALL    BUILD3 
     263 019B  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
     264 01A0  75 07                            JNZ     CALLJ1 
     265 01A2  80 3E 0000 E FF                  CMP     BYTE PTR [REGMEM],-1 
     266 01A7  74 14                            JZ      CALLJ2 
     267                                ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-7
                                                            

     268                                ;  INDIRECT JUMPS OR CALLS 
     269                                ; 
     270 01A9  80 3E 0000 E 01          CALLJ1: CMP     BYTE PTR [AWORD],1 
     271 01AE  74 80                    ERRZ4:  JZ      ERRV1 
     272 01B0  80 3E 0000 E 04                  CMP     BYTE PTR [AWORD],4 
     273 01B5  75 74                            JNZ     ASMEX4 
     274 01B7  80 4D 02 08                      OR      BYTE PTR [DI+2],1000B 
     275 01BB  EB 6E                            JMP     SHORT ASMEX4 
     276                                ; 
     277                                ;   DIRECT JUMPS OR CALLS 
     278                                ; 
     279 01BD  A1 0000 E                CALLJ2: MOV     AX,[LOWNUM] 
     280 01C0  8B 16 0000 E                     MOV     DX,[HINUM] 
     281 01C4  8A 1E 0000 E                     MOV     BL,[AWORD] 
     282 01C8  80 3E 0000 E 00                  CMP     BYTE PTR [NUMFLG],0 
     283 01CD  74 DF                            JZ      ERRZ4 
     284                                 
     285                                ;  BL = NUMBER OF BYTES IN JUMP 
     286                                ;  DX = OFFSET 
     287                                ;  AX = SEGMENT 
     288                                 
     289 01CF                           CALLJ3: 
     290 01CF  C6 05 05                         MOV     BYTE PTR [DI],5 
     291 01D2  89 45 02                         MOV     [DI+2],AX 
     292 01D5  89 55 04                         MOV     [DI+4],DX 
     293                                 
     294 01D8  B0 9A                            MOV     AL,10011010B           
					 ; SET UP INTER SEGMENT CALL 
     295 01DA  80 3E 0000 E 00                  CMP     BYTE PTR [TSTFLG],0 
     296 01DF  74 02                            JZ      CALLJ5 
     297 01E1  B0 EA                            MOV     AL,11101010B           
					 ; FIX UP FOR JUMP 
     298 01E3  88 45 01                 CALLJ5: MOV     BYTE PTR [DI+1],AL 
     299 01E6  80 FB 04                         CMP     BL,4                   
					 ; FAR SPECIFIED? 
     300 01E9  74 40                            JZ      ASMEX4 
     301 01EB  0A DB                            OR      BL,BL 
     302 01ED  75 06                            JNZ     CALLJ6 
     303 01EF  3B 16 0002 E                     CMP     DX,WORD PTR [ASMADD+2] 
					 ; DIFFERENT SEGMENT? 
     304 01F3  75 36                            JNZ     ASMEX4 
     305                                 
     306 01F5  C6 05 03                 CALLJ6: MOV     BYTE PTR [DI],3 
     307 01F8  B0 E8                            MOV     AL,11101000B           
					 ; SET UP FOR INTRASEGMENT 
     308 01FA  0A 06 0000 E                     OR      AL,[TSTFLG] 
     309 01FE  88 45 01                         MOV     BYTE PTR [DI+1],AL 
     310                                 
     311 0201  A1 0000 E                        MOV     AX,[LOWNUM] 
     312 0204  2B 06 0000 E                     SUB     AX,WORD PTR [ASMADD] 
     313 0208  2D 0003                          SUB     AX,3 
     314 020B  89 45 02                         MOV     [DI+2],AX 
     315 020E  80 3E 0000 E 00                  CMP     BYTE PTR [TSTFLG],0 
     316 0213  74 16                            JZ      ASMEX4 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-8
                                                            

     317 0215  80 FB 02                         CMP     BL,2 
     318 0218  74 11                            JZ      ASMEX4 
     319                                 
     320 021A  40                               INC     AX 
     321 021B  8B C8                            MOV     CX,AX 
     322 021D  98                               CBW 
     323 021E  3B C1                            CMP     AX,CX 
     324 0220  75 28                            JNZ     ASMEX3 
     325 0222  C6 45 01 EB                      MOV     BYTE PTR [DI+1],1110101
					1B 
     326 0226  89 45 02                         MOV     [DI+2],AX 
     327 0229  FE 0D                            DEC     BYTE PTR [DI] 
     328 022B  E9 05BF R                ASMEX4: JMP     ASSEM_EXIT 
     329                                ; 
     330                                ;  conditional jumps and loop instructi
					ons 
     331                                ; 
     332 022E                           DISP8_OPER: 
     333 022E  8B 2E 0002 E                     MOV     BP,WORD PTR [ASMADD+2] 
					 ; GET DEFAULT DISPLACEMENT 
     334 0232  E8 0000 E                        CALL    GET_ADDRESS 
     335 0235  2B 16 0000 E                     SUB     DX,WORD PTR [ASMADD] 
     336 0239  4A                               DEC     DX 
     337 023A  4A                               DEC     DX 
     338 023B  E8 08E5 R                        CALL    CHKSIZ 
     339 023E  80 F9 01                         CMP     CL,1 
     340 0241  75 5B                            JNZ     ERRV2 
     341 0243  FE 06 0000 E             DISPX:  INC     [ASSEM_CNT] 
     342 0247  A2 0000 E                        MOV     BYTE PTR [ASSEM2],AL 
     343 024A  E9 05BF R                ASMEX3: JMP     ASSEM_EXIT 
     344                                ; 
     345                                ;  lds, les, and lea instructions 
     346                                ; 
     347 024D                           L_OPER: 
     348 024D  E8 0000 E                        CALL    SCANB 
     349 0250  AD                               LODSW 
     350 0251  B9 0008                          MOV     CX,8 
     351 0254  BF 0000 E                        MOV     DI,OFFSET DG:REG16 
     352 0257  E8 08A6 R                        CALL    CHKREG 
     353 025A  74 42                            JZ      ERRV2                  
					 ; CX = 0 MEANS NO REGISTER 
     354 025C  D0 E0                            SHL     AL,1 
     355 025E  D0 E0                            SHL     AL,1 
     356 0260  D0 E0                            SHL     AL,1 
     357 0262  A2 0000 E                        MOV     BYTE PTR [MIDFLD],AL 
     358 0265  E8 0000 E                        CALL    SCANP 
     359 0268  E8 0634 R                        CALL    GETREGMEM 
     360 026B  80 3E 0000 E 00                  CMP     BYTE PTR [AWORD],0 
     361 0270  75 2C                            JNZ     ERRV2 
     362 0272  E8 05E5 R                        CALL    BUILD2 
     363 0275  EB 24                            JMP     SHORT ASEXV 
     364                                ; 
     365                                ;  dec and inc instructions 
     366                                ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-9
                                                            

     367 0277                           DCINC_OPER: 
     368 0277  C6 06 0000 E FE                  MOV     BYTE PTR [ASSEM1],11111
					110B 
     369 027C  A2 0000 E                        MOV     BYTE PTR [MIDFLD],AL 
     370 027F  E8 0634 R                        CALL    GETREGMEM 
     371 0282  E8 05D7 R                        CALL    BUILDIT 
     372 0285  F6 45 01 01                      TEST    BYTE PTR [DI+1],1 
     373 0289  74 10                            JZ      ASEXV 
     374 028B  8A 45 02                         MOV     AL,[DI+2] 
     375 028E  3C C0                            CMP     AL,11000000B 
     376 0290  72 09                            JB      ASEXV 
     377 0292  24 0F                            AND     AL,1111B 
     378 0294  0C 40                            OR      AL,01000000B 
     379 0296  88 45 01                         MOV     [DI+1],AL 
     380 0299  FE 0D                            DEC     BYTE PTR [DI] 
     381 029B  E9 05BF R                ASEXV:  JMP     ASSEM_EXIT 
     382                                 
     383 029E  E9 05C5 R                ERRV2:  JMP     ASMERR 
     384                                ; 
     385                                ; esc instruction 
     386                                ; 
     387 02A1                           ESC_OPER: 
     388 02A1  FE 06 0000 E                     INC     BYTE PTR [AWORD] 
     389 02A5  E8 0000 E                        CALL    SCANB 
     390 02A8  B9 0002                          MOV     CX,2 
     391 02AB  E8 0000 E                        CALL    GETHX 
     392 02AE  83 FA 40                         CMP     DX,64 
     393 02B1  73 EB                            JAE     ERRV2 
     394 02B3  E8 0000 E                        CALL    SCANP 
     395 02B6  8B C2                            MOV     AX,DX 
     396 02B8  B1 03                            MOV     CL,3 
     397 02BA  D3 EA                            SHR     DX,CL 
     398 02BC  08 16 0000 E                     OR      [ASSEM1],DL 
     399 02C0  24 07                            AND     AL,111B 
     400 02C2  D2 E0                            SHL     AL,CL 
     401 02C4  E9 0363 R                        JMP     GROUPE 
     402                                ; 
     403                                ; 8087 arithmetic instuctions 
     404                                ; 
     405                                 
     406                                ; 
     407                                ;  OPERANDS THAT ALLOW THE REVERSE BIT 
     408                                ; 
     409 02C7                           FGROUPDS: 
     410 02C7  E8 090D R                        CALL    SETMID 
     411 02CA  E8 0639 R                        CALL    GETREGMEM2 
     412 02CD  E8 05F3 R                        CALL    BUILD3 
     413 02D0  80 3E 0000 E C0                  CMP     BYTE PTR [MODE],1100000
					0B 
     414 02D5  75 32                            JNZ     FGROUP1 
     415 02D7  A0 0000 E                        MOV     AL,[DIRFLG] 
     416 02DA  0A C0                            OR      AL,AL 
     417 02DC  74 2E                            JZ      FEXIT 
     418 02DE  08 45 01                         OR      [DI+1],AL              
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-10
                                                            

					 ; IF D=1... 
     419 02E1  80 75 02 08                      XOR     BYTE PTR [DI+2],0000100
					0B   ; ...REVERSE THE SENSE OF R 
     420 02E5  EB 25                            JMP     SHORT FEXIT 
     421                                 
     422                                ; 
     423                                ;  Here when instruction could have mem
					ory or register operand 
     424                                ; 
     425 02E7                           FGROUPX: 
     426 02E7  E8 090D R                        CALL    SETMID                 
					 ; THIS ENTRY POINT FOR 1 MEM OPER 
     427 02EA  C6 06 0000 E 00                  MOV     BYTE PTR [DIRFLG],0 
     428 02EF  EB 03                            JMP     SHORT FGRP2 
     429 02F1                           FGROUP: 
     430 02F1  E8 090D R                        CALL    SETMID 
     431 02F4                           FGRP2: 
     432 02F4  E8 0639 R                        CALL    GETREGMEM2 
     433 02F7  E8 05F3 R                        CALL    BUILD3 
     434 02FA  80 3E 0000 E C0                  CMP     BYTE PTR [MODE],1100000
					0B 
     435 02FF  75 08                            JNZ     FGROUP1 
     436 0301  A0 0000 E                        MOV     AL,[DIRFLG] 
     437 0304  08 45 01                         OR      [DI+1],AL 
     438 0307  EB 03                            JMP     SHORT FEXIT 
     439 0309  E8 0936 R                FGROUP1:CALL    SETMF 
     440 030C  E9 05BF R                FEXIT:  JMP     ASSEM_EXIT 
     441                                ; 
     442                                ; These 8087 instructions require a mem
					ory operand 
     443                                ; 
     444 030F                           FGROUPB: 
     445 030F  B4 05                            MOV     AH,5                   
					 ; MUST BE TBYTE 
     446 0311  EB 06                            JMP     SHORT FGROUP3E 
     447 0313                           FGROUP3W: 
     448 0313  B4 02                            MOV     AH,2                   
					 ; MUST BE WORD 
     449 0315  EB 02                            JMP     SHORT FGROUP3E 
     450 0317                           FGROUP3: 
     451 0317  B4 FF                            MOV     AH,-1                  
					 ; SIZE CANNOT BE SPECIFIED 
     452 0319                           FGROUP3E: 
     453 0319  88 26 0000 E                     MOV     [AWORD],AH 
     454 031D  E8 090D R                        CALL    SETMID 
     455 0320  E8 0634 R                        CALL    GETREGMEM 
     456 0323  80 3E 0000 E C0                  CMP     BYTE PTR [MODE],1100000
					0B 
     457 0328  74 17                            JZ      FGRPERR 
     458 032A                           FGRP: 
     459 032A  E8 05F3 R                        CALL    BUILD3 
     460 032D  EB DD                            JMP     FEXIT 
     461                                ; 
     462                                ; These 8087 instructions require a reg
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-11
                                                            

					ister operand 
     463                                ; 
     464 032F                           FGROUPP:                               
					 ; 8087 POP OPERANDS 
     465 032F  C6 06 0000 E FF                  MOV     BYTE PTR [AWORD],-1 
     466 0334  E8 090D R                        CALL    SETMID 
     467 0337  E8 0639 R                        CALL    GETREGMEM2 
     468 033A  80 3E 0000 E 00                  CMP     BYTE PTR [DIRFLG],0 
     469 033F  75 E9                            JNZ     FGRP 
     470 0341  E9 05C5 R                FGRPERR:JMP     ASMERR 
     471                                 
     472 0344                           FGROUPZ:                               
					 ; ENTRY POINT WHERE ARG MUST BE MEM 
     473 0344  E8 090D R                        CALL    SETMID 
     474 0347  C6 06 0000 E 00                  MOV     BYTE PTR [DIRFLG],0 
     475 034C  E8 0634 R                        CALL    GETREGMEM 
     476 034F  80 3E 0000 E C0                  CMP     BYTE PTR [MODE],1100000
					0B 
     477 0354  74 EB                            JZ      FGRPERR 
     478 0356  E8 05F3 R                        CALL    BUILD3 
     479 0359  E8 0936 R                        CALL    SETMF 
     480 035C  EB AE                            JMP     FEXIT 
     481                                ; 
     482                                ; not, neg, mul, imul, div, and idiv in
					structions 
     483                                ; 
     484 035E                           GROUP1: 
     485 035E  C6 06 0000 E F6                  MOV     [ASSEM1],11110110B 
     486 0363                           GROUPE: 
     487 0363  A2 0000 E                        MOV     BYTE PTR [MIDFLD],AL 
     488 0366  E8 0634 R                        CALL    GETREGMEM 
     489 0369  E8 05D7 R                        CALL    BUILDIT 
     490 036C  EB 9E                            JMP     FEXIT 
     491                                ; 
     492                                ;  shift and rotate instructions 
     493                                ; 
     494 036E                           ROTOP: 
     495 036E  C6 06 0000 E D0                  MOV     [ASSEM1],11010000B 
     496 0373  A2 0000 E                        MOV     BYTE PTR [MIDFLD],AL 
     497 0376  E8 0634 R                        CALL    GETREGMEM 
     498 0379  E8 05D7 R                        CALL    BUILDIT 
     499 037C  E8 0000 E                        CALL    SCANP 
     500 037F  80 3C 31                         CMP     BYTE PTR [SI],"1" 
     501 0382  74 0E                            JZ      ASMEXV1 
     502 0384  81 3C 4C43                       CMP     WORD PTR [SI],"LC"     
					 ; CL 
     503 0388  74 03                            JZ      ROTOP1 
     504 038A  E9 05C5 R                ROTERR: JMP     ASMERR 
     505 038D  80 0E 0000 E 02          ROTOP1: OR      BYTE PTR [ASSEM1],10B 
     506 0392  E9 05BF R                ASMEXV1:JMP     ASSEM_EXIT 
     507                                ; 
     508                                ;  xchg instruction 
     509                                ; 
     510 0395                           EX_OPER: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-12
                                                            

     511 0395  FE 06 0000 E                     INC     BYTE PTR [TSTFLG] 
     512                                ; 
     513                                ;   test instruction 
     514                                ; 
     515 0399                           TST_OPER: 
     516 0399  FE 06 0000 E                     INC     BYTE PTR [TSTFLG] 
     517 039D  EB 04                            JMP     SHORT MOVOP 
     518                                ; 
     519                                ;    mov instruction 
     520                                ; 
     521 039F                           MOV_OPER: 
     522 039F  FE 06 0000 E                     INC     BYTE PTR [MOVFLG] 
     523 03A3  33 C0                    MOVOP:  XOR     AX,AX 
     524 03A5  EB 05                            JMP     SHORT GROUPM 
     525                                ; 
     526                                ;   add, adc, sub, sbb, cmp, and, or, x
					or instructions 
     527                                ; 
     528 03A7                           GROUP2: 
     529 03A7  C6 06 0000 E 80                  MOV     BYTE PTR [ASSEM1],10000
					000B 
     530 03AC                           GROUPM: 
     531 03AC  A2 0000 E                        MOV     BYTE PTR [MIDFLD],AL 
     532                                 
     533 03AF  50                               PUSH    AX 
     534 03B0  E8 0634 R                        CALL    GETREGMEM 
     535 03B3  E8 05E5 R                        CALL    BUILD2 
     536 03B6  E8 0000 E                        CALL    SCANP                  
					 ; POINT TO NEXT OPERAND 
     537 03B9  A0 0000 E                        MOV     AL,BYTE PTR [ASSEM_CNT]
					 
     538 03BC  50                               PUSH    AX 
     539 03BD  E8 0634 R                        CALL    GETREGMEM 
     540 03C0  58                               POP     AX 
     541 03C1  88 05                            MOV     BYTE PTR [DI],AL 
     542 03C3  58                               POP     AX 
     543 03C4  8A 1E 0000 E                     MOV     BL,BYTE PTR [AWORD] 
     544 03C8  0A DB                            OR      BL,BL 
     545 03CA  74 24                            JZ      ERRV5 
     546 03CC  FE CB                            DEC     BL 
     547 03CE  80 E3 01                         AND     BL,1 
     548 03D1  08 5D 01                         OR      BYTE PTR [DI+1],BL 
     549                                 
     550 03D4  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
     551 03D9  75 18                            JNZ     G21V 
     552 03DB  80 3E 0000 E 00                  CMP     BYTE PTR [NUMFLG],0    
					 ; TEST FOR IMMEDIATE DATA 
     553 03E0  74 11                            JZ      G21V 
     554 03E2  80 3E 0000 E 00                  CMP     BYTE PTR [SEGFLG],0 
     555 03E7  75 07                            JNZ     ERRV5 
     556 03E9  80 3E 0000 E 02                  CMP     BYTE PTR [TSTFLG],2    
					 ; XCHG? 
     557 03EE  75 06                            JNZ     IMMED1 
     558 03F0  E9 05C5 R                ERRV5:  JMP     ASMERR 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-13
                                                            

     559 03F3  E9 049A R                G21V:   JMP     GRP21 
     560                                ; 
     561                                ;  SECOND OPERAND WAS IMMEDIATE 
     562                                ; 
     563 03F6  8A 45 02                 IMMED1: MOV     AL,BYTE PTR [DI+2] 
     564 03F9  80 3E 0000 E 00                  CMP     BYTE PTR [MOVFLG],0 
     565 03FE  74 2A                            JZ      NOTMOV1 
     566 0400  24 C0                            AND     AL,11000000B 
     567 0402  3C C0                            CMP     AL,11000000B 
     568 0404  75 7B                            JNZ     GRP23                  
					 ; not to a register 
     569                                                                       
					 ; MOVE IMMEDIATE TO REGISTER 
     570 0406  8A 45 01                         MOV     AL,BYTE PTR [DI+1] 
     571 0409  24 01                            AND     AL,1                   
					 ; SET SIZE 
     572 040B  9C                               PUSHF 
     573 040C  D0 E0                            SHL     AL,1 
     574 040E  D0 E0                            SHL     AL,1 
     575 0410  D0 E0                            SHL     AL,1 
     576 0412  0A 45 02                         OR      AL,BYTE PTR [DI+2]     
					 ; SET REGISTER 
     577 0415  24 0F                            AND     AL,00001111B 
     578 0417  0C B0                            OR      AL,10110000B 
     579 0419  88 45 01                         MOV     BYTE PTR [DI+1],AL 
     580 041C  A1 0000 E                        MOV     AX,WORD PTR [LOWNUM] 
     581 041F  89 45 02                         MOV     WORD PTR [DI+2],AX 
     582 0422  9D                               POPF 
     583 0423  74 02                            JZ      EXVEC 
     584 0425  FE 05                            INC     BYTE PTR [DI] 
     585 0427  E9 0595 R                EXVEC:  JMP     GRPEX 
     586                                 
     587 042A  24 C7                    NOTMOV1:AND     AL,11000111B 
     588 042C  3C C0                            CMP     AL,11000000B 
     589 042E  74 36                            JZ      IMMACC                 
					 ; IMMEDIATE TO ACC 
     590                                 
     591 0430  80 3E 0000 E 00                  CMP     BYTE PTR [TSTFLG],0 
     592 0435  75 4A                            JNZ     GRP23 
     593 0437  80 3E 0000 E 08                  CMP     BYTE PTR [MIDFLD],1*8  
					 ; OR? 
     594 043C  74 43                            JZ      GRP23 
     595 043E  80 3E 0000 E 20                  CMP     BYTE PTR [MIDFLD],4*8  
					 ; AND? 
     596 0443  74 3C                            JZ      GRP23 
     597 0445  80 3E 0000 E 30                  CMP     BYTE PTR [MIDFLD],6*8  
					 ; XOR? 
     598 044A  74 35                            JZ      GRP23 
     599 044C  F6 45 01 01                      TEST    BYTE PTR [DI+1],1      
					 ; TEST IF BYTE OPCODE 
     600 0450  74 2F                            JZ      GRP23 
     601                                 
     602 0452  A1 0000 E                        MOV     AX,[LOWNUM] 
     603 0455  8B D8                            MOV     BX,AX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-14
                                                            

     604 0457  98                               CBW 
     605 0458  3B C3                            CMP     AX,BX 
     606 045A  75 25                            JNZ     GRP23                  
					 ; SMALL ENOUGH? 
     607                                 
     608 045C  8A 1D                            MOV     BL,[DI] 
     609 045E  FE 0D                            DEC     BYTE PTR [DI] 
     610 0460  80 4D 01 02                      OR      BYTE PTR [DI+1],10B 
     611 0464  EB 1D                            JMP     SHORT GRP23X 
     612                                 
     613 0466  8A 45 01                 IMMACC: MOV     AL,BYTE PTR [DI+1] 
     614 0469  24 01                            AND     AL,1 
     615 046B  80 3E 0000 E 00                  CMP     BYTE PTR [TSTFLG],0 
     616 0470  74 04                            JZ      NOTTST 
     617 0472  0C A8                            OR      AL,10101000B 
     618 0474  EB 06                            JMP     SHORT TEST1 
     619 0476  0A 06 0000 E             NOTTST: OR      AL,BYTE PTR [MIDFLD] 
     620 047A  0C 04                            OR      AL,100B 
     621 047C  88 45 01                 TEST1:  MOV     BYTE PTR [DI+1],AL 
     622 047F  FE 0D                            DEC     BYTE PTR [DI] 
     623                                 
     624 0481  8A 1D                    GRP23:  MOV     BL,BYTE PTR [DI] 
     625 0483  32 FF                    GRP23X: XOR     BH,BH 
     626 0485  03 DF                            ADD     BX,DI 
     627 0487  43                               INC     BX 
     628 0488  A1 0000 E                        MOV     AX,WORD PTR [LOWNUM] 
     629 048B  89 07                            MOV     WORD PTR [BX],AX 
     630 048D  FE 05                            INC     BYTE PTR [DI] 
     631 048F  F6 45 01 01                      TEST    BYTE PTR [DI+1],1 
     632 0493  74 02                            JZ      GRPEX1 
     633 0495  FE 05                            INC     BYTE PTR [DI] 
     634 0497  E9 0595 R                GRPEX1: JMP     GRPEX 
     635                                ; 
     636                                ;       SECOND OPERAND WAS MEMORY OR RE
					GISTER 
     637                                ; 
     638 049A                           GRP21: 
     639 049A  80 3E 0000 E 00                  CMP     BYTE PTR [SEGFLG],0 
     640 049F  74 1D                            JZ      GRP28                  
					 ; FIRST OPERAND WAS A SEGMENT REG 
     641 04A1  A0 0000 E                        MOV     AL,BYTE PTR [REGMEM] 
     642 04A4  A8 10                            TEST    AL,10000B 
     643 04A6  74 03                            JZ      NOTSEG1 
     644 04A8  E9 05C5 R                ERRV3:  JMP     ASMERR 
     645 04AB  24 07                    NOTSEG1:AND     AL,111B 
     646 04AD  08 45 02                         OR      BYTE PTR [DI+2],AL 
     647 04B0  80 65 01 FE                      AND     BYTE PTR [DI+1],1111111
					0B 
     648 04B4  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
     649 04B9  75 35                            JNZ     G22V 
     650 04BB  E9 0595 R                        JMP     GRPEX 
     651                                 
     652 04BE  80 65 02 C7              GRP28:  AND     BYTE PTR [DI+2],1100011
					1B 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-15
                                                            

     653 04C2  8A 45 01                         MOV     AL,BYTE PTR [DI+1]     
					 ; GET FIRST OPCODE 
     654 04C5  24 01                            AND     AL,1B 
     655 04C7  80 3E 0000 E 00                  CMP     BYTE PTR [MOVFLG],0 
     656 04CC  74 04                            JZ      NOTMOV2 
     657 04CE  0C 88                            OR      AL,10001000B 
     658 04D0  EB 16                            JMP     SHORT MOV1 
     659 04D2  80 3E 0000 E 00          NOTMOV2:CMP     BYTE PTR [TSTFLG],0 
     660 04D7  74 0B                            JZ      NOTTST2 
     661 04D9  0C 84                            OR      AL,10000100B 
     662 04DB  80 3E 0000 E 02                  CMP     BYTE PTR [TSTFLG],2 
     663 04E0  75 02                            JNZ     NOTTST2 
     664 04E2  0C 02                            OR      AL,10B 
     665 04E4  0A 06 0000 E             NOTTST2:OR      AL,BYTE PTR [MIDFLD]   
					 ; MIDFLD IS ZERO FOR TST 
     666 04E8  88 45 01                 MOV1:   MOV     BYTE PTR [DI+1],AL 
     667 04EB  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
     668 04F0  75 53                    G22V:   JNZ     GRP22 
     669                                ; 
     670                                ;       SECOND OPERAND WAS A REGISTER 
     671                                ; 
     672 04F2  A0 0000 E                        MOV     AL,BYTE PTR [REGMEM] 
     673 04F5  A8 10                            TEST    AL,10000B              
					 ; SEGMENT REGISTER? 
     674 04F7  74 0B                            JZ      NOTSEG 
     675 04F9  80 3E 0000 E 00                  CMP     BYTE PTR [MOVFLG],0 
     676 04FE  74 A8                            JZ      ERRV3 
     677 0500  C6 45 01 8C                      MOV     BYTE PTR [DI+1],1000110
					0B 
     678                                 
     679 0504  24 07                    NOTSEG: AND     AL,111B 
     680 0506  D0 E0                            SHL     AL,1 
     681 0508  D0 E0                            SHL     AL,1 
     682 050A  D0 E0                            SHL     AL,1 
     683 050C  08 45 02                         OR      BYTE PTR [DI+2],AL 
     684                                ; 
     685                                ; SPECIAL FORM OF THE EXCHANGE COMMAND 
     686                                ; 
     687 050F  80 3E 0000 E 02                  CMP     BYTE PTR [TSTFLG],2 
     688 0514  75 7F                            JNZ     GRPEX 
     689 0516  F6 45 01 01                      TEST    BYTE PTR [DI+1],1 
     690 051A  74 79                            JZ      GRPEX 
     691 051C  50                               PUSH    AX 
     692 051D  8A 45 02                         MOV     AL,BYTE PTR [DI+2] 
     693 0520  24 C0                            AND     AL,11000000B 
     694 0522  3C C0                            CMP     AL,11000000B           
					 ; MUST BE REGISTER TO REGISTER 
     695 0524  58                               POP     AX 
     696 0525  72 6E                            JB      GRPEX 
     697 0527  0A C0                            OR      AL,AL 
     698 0529  74 0C                            JZ      SPECX 
     699 052B  8A 45 02                         MOV     AL,[DI+2] 
     700 052E  24 07                            AND     AL,00000111B 
     701 0530  75 63                            JNZ     GRPEX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-16
                                                            

     702 0532  B1 03                            MOV     CL,3 
     703 0534  D2 6D 02                         SHR     BYTE PTR [DI+2],CL 
     704 0537  8A 45 02                 SPECX:  MOV     AL,[DI+2] 
     705 053A  24 07                            AND     AL,00000111B 
     706 053C  0C 90                            OR      AL,10010000B 
     707 053E  88 45 01                         MOV     BYTE PTR [DI+1],AL 
     708 0541  FE 0D                            DEC     BYTE PTR [DI] 
     709 0543  EB 50                            JMP     SHORT GRPEX 
     710                                ; 
     711                                ;  SECOND OPERAND WAS A MEMORY REFERENC
					E 
     712                                ; 
     713 0545  80 3E 0000 E 00          GRP22:  CMP     BYTE PTR [TSTFLG],0 
     714 054A  75 04                            JNZ     TST2 
     715 054C  80 4D 01 02                      OR      BYTE PTR [DI+1],10B 
     716 0550  8A 45 02                 TST2:   MOV     AL,BYTE PTR [DI+2] 
     717 0553  3C C0                            CMP     AL,11000000B           
					 ; MUST BE A REGISTER 
     718 0555  72 6E                            JB      ASMERR 
     719 0557  80 3E 0000 E 00                  CMP     BYTE PTR [SEGFLG],0 
     720 055C  74 04                            JZ      GRP223 
     721 055E  24 18                            AND     AL,00011000B 
     722 0560  EB 08                            JMP     SHORT GRP222 
     723 0562  24 07                    GRP223: AND     AL,111B 
     724 0564  D0 E0                            SHL     AL,1 
     725 0566  D0 E0                            SHL     AL,1 
     726 0568  D0 E0                            SHL     AL,1 
     727 056A  0A 06 0000 E             GRP222: OR      AL,BYTE PTR [MODE] 
     728 056E  0A 06 0000 E                     OR      AL,BYTE PTR [REGMEM] 
     729 0572  88 45 02                         MOV     BYTE PTR [DI+2],AL 
     730 0575  A1 0000 E                        MOV     AX,WORD PTR [LOWNUM] 
     731 0578  89 45 03                         MOV     WORD PTR [DI+3],AX 
     732 057B  C6 05 02                 GRPSIZ: MOV     BYTE PTR [DI],2 
     733 057E  8A 45 02                         MOV     AL,BYTE PTR [DI+2] 
     734 0581  24 C7                            AND     AL,11000111B 
     735 0583  3C 06                            CMP     AL,00000110B 
     736 0585  74 0A                            JZ      GRP24 
     737 0587  24 C0                            AND     AL,11000000B 
     738 0589  3C 40                            CMP     AL,01000000B 
     739 058B  74 06                            JZ      GRP25 
     740 058D  3C 80                            CMP     AL,10000000B 
     741 058F  75 04                            JNZ     GRPEX 
     742 0591  FE 05                    GRP24:  INC     BYTE PTR [DI] 
     743 0593  FE 05                    GRP25:  INC     BYTE PTR [DI] 
     744                                 
     745 0595  80 3E 0000 E 00          GRPEX:  CMP     BYTE PTR [MOVFLG],0 
     746 059A  74 23                            JZ      ASSEM_EXIT 
     747                                ; 
     748                                ;       TEST FOR SPECIAL FORM OF MOV AX
					,[MEM] OR MOV [MEM],AX 
     749                                ; 
     750 059C  8A 45 01                         MOV     AL,[DI+1]              
					 ; GET OP-CODE 
     751 059F  24 FC                            AND     AL,11111100B 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-17
                                                            

     752 05A1  3C 88                            CMP     AL,10001000B 
     753 05A3  75 1A                            JNZ     ASSEM_EXIT 
     754 05A5  80 7D 02 06                      CMP     BYTE PTR [DI+2],0000011
					0B   ; MEM TO AX OR AX TO MEM 
     755 05A9  75 14                            JNZ     ASSEM_EXIT 
     756 05AB  8A 45 01                         MOV     AL,BYTE PTR [DI+1] 
     757 05AE  24 03                            AND     AL,11B 
     758 05B0  34 02                            XOR     AL,10B 
     759 05B2  0C A0                            OR      AL,10100000B 
     760 05B4  88 45 01                         MOV     BYTE PTR [DI+1],AL 
     761 05B7  FE 0D                            DEC     BYTE PTR [DI] 
     762 05B9  8B 45 03                         MOV     AX,[DI+3] 
     763 05BC  89 45 02                         MOV     WORD PTR [DI+2],AX 
     764                                 
     765 05BF                           ASSEM_EXIT: 
     766 05BF  E8 08B0 R                        CALL    STUFF_BYTES 
     767 05C2  E9 0015 R                        JMP     ASSEMLOOP 
     768                                 
     769                                ; Assem error. SI points to character i
					n the input buffer 
     770                                ; which caused error. By subtracting fr
					om start of buffer, 
     771                                ; we will know how far to tab over to a
					ppear directly below 
     772                                ; it on the terminal. Then print "^ Err
					or". 
     773                                 
     774 05C5                           ASMERR: 
     775 05C5  81 EE FFF6 E                     SUB     SI,OFFSET DG:(BYTEBUF-1
					0)   ; How many char processed so far? 
     776 05C9  8B CE                            MOV     CX,SI                  
					 ; Parameter for TAB in CX 
     777 05CB  E8 0000 E                        CALL    TAB                    
					 ; Directly below bad char 
     778 05CE  BE 0000 E                        MOV     SI,OFFSET DG:SYNERR    
					 ; Error message 
     779 05D1  E8 0000 E                        CALL    PRINTMES 
     780 05D4  E9 0015 R                        JMP     ASSEMLOOP 
     781                                ; 
     782                                ;  assemble the different parts into an
					 instruction 
     783                                ; 
     784 05D7                           BUILDIT: 
     785 05D7  A0 0000 E                        MOV     AL,BYTE PTR [AWORD] 
     786 05DA  0A C0                            OR      AL,AL 
     787 05DC  75 02                            JNZ     BUILD1 
     788 05DE  EB E5                    BLDERR: JMP     ASMERR 
     789                                 
     790 05E0  FE C8                    BUILD1: DEC     AL 
     791 05E2  08 45 01                         OR      BYTE PTR [DI+1],AL     
					 ; SET THE SIZE 
     792                                 
     793 05E5  80 3E 0000 E 00          BUILD2: CMP     BYTE PTR [NUMFLG],0    
					 ; TEST FOR IMMEDIATE DATA 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-18
                                                            

     794 05EA  74 07                            JZ      BUILD3 
     795 05EC  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
     796 05F1  74 EB                            JZ      BLDERR 
     797                                 
     798 05F3  A0 0000 E                BUILD3: MOV     AL,BYTE PTR [REGMEM] 
     799 05F6  3C FF                            CMP     AL,-1 
     800 05F8  74 26                            JZ      BLD1 
     801 05FA  A8 10                            TEST    AL,10000B              
					 ; TEST IF SEGMENT REGISTER 
     802 05FC  74 22                            JZ      BLD1 
     803 05FE  80 3E 0000 E 00                  CMP     BYTE PTR [MOVFLG],0 
     804 0603  74 D9                            JZ      BLDERR 
     805 0605  C7 45 01 008E                    MOV     WORD PTR [DI+1],1000111
					0B 
     806 060A  FE 06 0000 E                     INC     BYTE PTR [MOVFLG] 
     807 060E  FE 06 0000 E                     INC     BYTE PTR [SEGFLG] 
     808 0612  24 03                            AND     AL,00000011B 
     809 0614  D0 E0                            SHL     AL,1 
     810 0616  D0 E0                            SHL     AL,1 
     811 0618  D0 E0                            SHL     AL,1 
     812 061A  0C C0                            OR      AL,BYTE PTR 11000000B 
     813 061C  88 45 02                         MOV     BYTE PTR [DI+2],AL 
     814 061F  C3                               RET 
     815                                 
     816 0620  24 07                    BLD1:   AND     AL,00000111B 
     817 0622  0A 06 0000 E             BLD4:   OR      AL,BYTE PTR [MODE] 
     818 0626  0A 06 0000 E                     OR      AL,BYTE PTR [MIDFLD] 
     819 062A  88 45 02                         MOV     BYTE PTR [DI+2],AL 
     820 062D  A1 0000 E                        MOV     AX,WORD PTR [LOWNUM] 
     821 0630  89 45 03                         MOV     WORD PTR [DI+3],AX 
     822 0633  C3                               RET 
     823                                 
     824 0634                           GETREGMEM: 
     825 0634  C6 06 0000 E 00                  MOV     BYTE PTR [F8087],0 
     826 0639                           GETREGMEM2: 
     827 0639  E8 0000 E                        CALL    SCANP 
     828 063C  33 C0                            XOR     AX,AX 
     829 063E  A3 0000 E                        MOV     WORD PTR [LOWNUM],AX   
					 ; OFFSET 
     830 0641  A3 0000 E                        MOV     WORD PTR [DIFLG],AX    
					 ; DIFLG+SIFLG 
     831 0644  A3 0000 E                        MOV     WORD PTR [BXFLG],AX    
					 ; BXFLG+BPFLG 
     832 0647  A3 0000 E                        MOV     WORD PTR [NEGFLG],AX   
					 ; NEGFLG+NUMFLG 
     833 064A  A3 0000 E                        MOV     WORD PTR [MEMFLG],AX   
					 ; MEMFLG+REGFLG 
     834 064D  FE C8                            DEC     AL 
     835 064F  80 3E 0000 E 00                  CMP     BYTE PTR [F8087],0 
     836 0654  74 02                            JZ      PUTREG 
     837 0656  B0 01                            MOV     AL,1                   
					 ; DEFAULT 8087 REG IS 1 
     838 0658  A2 0000 E                PUTREG: MOV     BYTE PTR [REGMEM],AL 
     839                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-19
                                                            

     840 065B  C6 06 0000 E 00          GETLOOP:MOV     BYTE PTR [NEGFLG],0 
     841 0660                           GETLOOP1: 
     842 0660  8B 04                            MOV     AX,WORD PTR [SI] 
     843 0662  3C 2C                            CMP     AL,',' 
     844 0664  74 16                            JZ      GOMODE 
     845 0666  3C 0D                            CMP     AL,13 
     846 0668  74 12                            JZ      GOMODE 
     847 066A  3C 3B                            CMP     AL,';' 
     848 066C  74 0E                            JZ      GOMODE 
     849 066E  3C 09                            CMP     AL,9 
     850 0670  74 04                            JZ      GETTB 
     851 0672  3C 20                            CMP     AL,' ' 
     852 0674  75 03                            JNZ     GOGET 
     853 0676  46                       GETTB:  INC     SI 
     854 0677  EB E7                            JMP     GETLOOP1 
     855 0679  E9 073D R                GOGET:  JMP     GETINFO 
     856                                ; 
     857                                ;  DETERMINE THE MODE BITS 
     858                                ; 
     859 067C  BF 0000 E                GOMODE: MOV     DI,OFFSET DG:ASSEM_CNT 
     860 067F  C6 06 0000 E C0                  MOV     BYTE PTR [MODE],1100000
					0B 
     861 0684  C6 06 0000 E 02                  MOV     BYTE PTR [ASSEM_CNT],2 
     862 0689  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
     863 068E  75 22                            JNZ     GOMODE1 
     864 0690  A0 0000 E                        MOV     AL,[NUMFLG] 
     865 0693  0A 06 0000 E                     OR      AL,[REGFLG] 
     866 0697  75 15                            JNZ     MORET 
     867 0699  0A 06 0000 E                     OR      AL,[F8087] 
     868 069D  74 10                            JZ      ERRET 
     869 069F  8A 45 01                         MOV     AL,[DI+1] 
     870 06A2  0A 06 0000 E                     OR      AL,[DIRFLG] 
     871 06A6  3C DC                            CMP     AL,0DCH                
					 ; ARITHMETIC? 
     872 06A8  75 04                            JNZ     MORET 
     873 06AA  C6 45 01 DE                      MOV     BYTE PTR [DI+1],0DEH   
					 ; ADD POP TO NULL ARG 8087 
     874 06AE  C3                       MORET:  RET 
     875 06AF  E9 05C5 R                ERRET:  JMP     ASMERR 
     876                                 
     877 06B2  C6 06 0000 E 00          GOMODE1:MOV     BYTE PTR [MODE],0 
     878 06B7  80 3E 0000 E 00                  CMP     BYTE PTR [NUMFLG],0 
     879 06BC  74 26                            JZ      GOREGMEM 
     880                                 
     881 06BE  C6 05 04                         MOV     BYTE PTR [DI],4 
     882 06C1  A1 0000 E                        MOV     AX,WORD PTR [DIFLG] 
     883 06C4  0B 06 0000 E                     OR      AX,WORD PTR [BXFLG] 
     884 06C8  75 06                            JNZ     GOMODE2 
     885 06CA  C6 06 0000 E 06                  MOV     BYTE PTR [REGMEM],00000
					110B 
     886 06CF  C3                               RET 
     887                                 
     888 06D0  C6 06 0000 E 80          GOMODE2:MOV     BYTE PTR [MODE],1000000
					0B 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-20
                                                            

     889 06D5  E8 08EB R                        CALL    CHKSIZ1 
     890 06D8  80 F9 02                         CMP     CL,2 
     891 06DB  74 07                            JZ      GOREGMEM 
     892 06DD  FE 0D                            DEC     BYTE PTR [DI] 
     893 06DF  C6 06 0000 E 40                  MOV     BYTE PTR [MODE],0100000
					0B 
     894                                ; 
     895                                ;  DETERMINE THE REG-MEM BITS 
     896                                ; 
     897 06E4                           GOREGMEM: 
     898 06E4  8B 1E 0000 E                     MOV     BX,WORD PTR [BXFLG] 
     899 06E8  8B 0E 0000 E                     MOV     CX,WORD PTR [DIFLG] 
     900 06EC  33 D2                            XOR     DX,DX 
     901 06EE                           GOREG0: 
     902 06EE  8A C3                            MOV     AL,BL                  
					 ; BX 
     903 06F0  02 C5                            ADD     AL,CH                  
					 ; SI 
     904 06F2  3C 02                            CMP     AL,2 
     905 06F4  74 42                            JZ      GOGO 
     906 06F6  FE C2                            INC     DL 
     907 06F8  8A C3                            MOV     AL,BL 
     908 06FA  02 C1                            ADD     AL,CL 
     909 06FC  3C 02                            CMP     AL,2 
     910 06FE  74 38                            JZ      GOGO 
     911 0700  FE C2                            INC     DL 
     912 0702  8A C7                            MOV     AL,BH 
     913 0704  02 C5                            ADD     AL,CH 
     914 0706  3C 02                            CMP     AL,2 
     915 0708  74 2E                            JZ      GOGO 
     916 070A  FE C2                            INC     DL 
     917 070C  8A C7                            MOV     AL,BH 
     918 070E  02 C1                            ADD     AL,CL 
     919 0710  3C 02                            CMP     AL,2 
     920 0712  74 24                            JZ      GOGO 
     921 0714  FE C2                            INC     DL 
     922 0716  0A ED                            OR      CH,CH 
     923 0718  75 1E                            JNZ     GOGO 
     924 071A  FE C2                            INC     DL 
     925 071C  0A C9                            OR      CL,CL 
     926 071E  75 18                            JNZ     GOGO 
     927 0720  FE C2                            INC     DL                     
					 ; BP+DISP 
     928 0722  0A FF                            OR      BH,BH 
     929 0724  74 10                            JZ      GOREG1 
     930 0726  80 3E 0000 E 00                  CMP     BYTE PTR [MODE],0 
     931 072B  75 0B                            JNZ     GOGO 
     932 072D  C6 06 0000 E 40                  MOV     BYTE PTR [MODE],0100000
					0B 
     933 0732  FE 05                            INC     BYTE PTR [DI] 
     934 0734  FE CA                            DEC     DL 
     935 0736  FE C2                    GOREG1: INC     DL                     
					 ; BX+DISP 
     936 0738  88 16 0000 E             GOGO:   MOV     BYTE PTR [REGMEM],DL 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-21
                                                            

     937 073C  C3                               RET 
     938                                 
     939 073D  3D 454E                  GETINFO:CMP     AX,'EN'                
					 ; NEAR 
     940 0740  75 12                            JNZ     GETREG3 
     941 0742  B2 02                    GETREG0:MOV     DL,2 
     942 0744  E8 08CF R                GETRG01:CALL    SETSIZ1 
     943 0747  E8 08F7 R                GETREG1:CALL    SCANS 
     944 074A  8B 04                            MOV     AX,WORD PTR [SI] 
     945 074C  3D 5450                          CMP     AX,"TP"                
					 ; PTR 
     946 074F  74 F6                            JZ      GETREG1 
     947 0751  E9 065B R                        JMP     GETLOOP 
     948                                 
     949 0754  B9 0005                  GETREG3:MOV     CX,5 
     950 0757  BF 0000 E                        MOV     DI,OFFSET DG:SIZ8 
     951 075A  E8 08A6 R                        CALL    CHKREG                 
					 ; LOOK FOR BYTE, WORD, DWORD, ETC. 
     952 075D  74 06                            JZ      GETREG41 
     953 075F  FE C0                            INC     AL 
     954 0761  8A D0                            MOV     DL,AL 
     955 0763  EB DF                            JMP     GETRG01 
     956                                 
     957 0765                           GETREG41: 
     958 0765  8B 04                            MOV     AX,[SI] 
     959 0767  80 3E 0000 E 00                  CMP     BYTE PTR [F8087],0 
     960 076C  74 16                            JZ      GETREG5 
     961 076E  3D 5453                          CMP     AX,"TS"                
					 ; 8087 STACK OPERAND 
     962 0771  75 11                            JNZ     GETREG5 
     963 0773  80 7C 02 2C                      CMP     BYTE PTR [SI+2],"," 
     964 0777  75 0B                            JNZ     GETREG5 
     965 0779  C6 06 0000 E 00                  MOV     BYTE PTR [DIRFLG],0 
     966 077E  83 C6 03                         ADD     SI,3 
     967 0781  E9 065B R                        JMP     GETLOOP 
     968                                 
     969 0784  3D 4853                  GETREG5:CMP     AX,"HS"                
					 ; SHORT 
     970 0787  74 BE                            JZ      GETREG1 
     971                                 
     972 0789  3D 4146                          CMP     AX,"AF"                
					 ; FAR 
     973 078C  75 0D                            JNZ     GETRG51 
     974 078E  80 7C 02 52                      CMP     BYTE PTR [SI+2],"R" 
     975 0792  75 07                            JNZ     GETRG51 
     976 0794  83 C6 03                         ADD     SI,3 
     977 0797  B2 04                            MOV     DL,4 
     978 0799  EB A9                            JMP     GETRG01 
     979                                 
     980 079B  3C 5B                    GETRG51:CMP     AL,'[' 
     981 079D  75 08                            JNZ     GETREG7 
     982 079F  FE 06 0000 E             GETREG6:INC     BYTE PTR [MEMFLG] 
     983 07A3  46                               INC     SI 
     984 07A4  E9 065B R                        JMP     GETLOOP 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-22
                                                            

     985                                 
     986 07A7  3C 5D                    GETREG7:CMP     AL,']' 
     987 07A9  74 F4                            JZ      GETREG6 
     988 07AB  3C 2E                            CMP     AL,'.' 
     989 07AD  74 F0                            JZ      GETREG6 
     990 07AF  3C 2B                            CMP     AL,'+' 
     991 07B1  74 EC                            JZ      GETREG6 
     992 07B3  3C 2D                            CMP     AL,'-' 
     993 07B5  75 08                            JNZ     GETREG8 
     994 07B7  FE 06 0000 E                     INC     BYTE PTR [NEGFLG] 
     995 07BB  46                               INC     SI 
     996 07BC  E9 0660 R                        JMP     GETLOOP1 
     997                                 
     998 07BF                           GETREG8:                               
					 ; LOOK FOR A REGISTER 
     999 07BF  80 3E 0000 E 00                  CMP     BYTE PTR [F8087],0 
    1000 07C4  74 38                            JZ      GETREGREG 
    1001 07C6  3D 5453                          CMP     AX,"TS" 
    1002 07C9  75 33                            JNZ     GETREGREG 
    1003 07CB  80 7C 02 28                      CMP     BYTE PTR [SI+2],"(" 
    1004 07CF  75 2D                            JNZ     GETREGREG 
    1005 07D1  80 7C 04 29                      CMP     BYTE PTR [SI+4],")" 
    1006 07D5  75 54                            JNZ     ASMPOP 
    1007 07D7  8A 44 03                         MOV     AL,[SI+3] 
    1008 07DA  2C 30                            SUB     AL,"0" 
    1009 07DC  72 4D                            JB      ASMPOP 
    1010 07DE  3C 07                            CMP     AL,7 
    1011 07E0  77 49                            JA      ASMPOP 
    1012 07E2  A2 0000 E                        MOV     [REGMEM],AL 
    1013 07E5  FE 06 0000 E                     INC     BYTE PTR [REGFLG] 
    1014 07E9  83 C6 05                         ADD     SI,5 
    1015 07EC  81 3C 532C                       CMP     WORD PTR [SI],"S," 
    1016 07F0  75 09                            JNZ     ZLOOP 
    1017 07F2  80 7C 02 54                      CMP     BYTE PTR [SI+2],"T" 
    1018 07F6  75 03                            JNZ     ZLOOP 
    1019 07F8  83 C6 03                         ADD     SI,3 
    1020 07FB  E9 065B R                ZLOOP:  JMP     GETLOOP 
    1021                                 
    1022 07FE                           GETREGREG: 
    1023 07FE  B9 0014                          MOV     CX,20 
    1024 0801  BF 0000 E                        MOV     DI,OFFSET DG:REG8 
    1025 0804  E8 08A6 R                        CALL    CHKREG 
    1026 0807  74 5E                            JZ      GETREG12               
					 ; CX = 0 MEANS NO REGISTER 
    1027 0809  A2 0000 E                        MOV     BYTE PTR [REGMEM],AL 
    1028 080C  FE 06 0000 E                     INC     BYTE PTR [REGFLG]      
					 ; TELL EVERYONE WE FOUND A REG 
    1029 0810  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
    1030 0815  75 09                            JNZ     NOSIZE 
    1031 0817  E8 08C7 R                        CALL    SETSIZ 
    1032 081A  83 C6 02                 INCSI2: ADD     SI,2 
    1033 081D  E9 065B R                        JMP     GETLOOP 
    1034                                 
    1035 0820  3C 0B                    NOSIZE: CMP     AL,11                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-23
                                                            

					 ; BX REGISTER? 
    1036 0822  75 10                            JNZ     GETREG9 
    1037 0824  83 3E 0000 E 00                  CMP     WORD PTR [BXFLG],0 
    1038 0829  74 03                            JZ      GETOK 
    1039 082B  E9 05C5 R                ASMPOP: JMP     ASMERR 
    1040                                 
    1041 082E  FE 06 0000 E             GETOK:  INC     BYTE PTR [BXFLG] 
    1042 0832  EB E6                            JMP     INCSI2 
    1043 0834                           GETREG9: 
    1044 0834  3C 0D                            CMP     AL,13                  
					 ; BP REGISTER? 
    1045 0836  75 0D                            JNZ     GETREG10 
    1046 0838  83 3E 0000 E 00                  CMP     WORD PTR [BXFLG],0 
    1047 083D  75 EC                            JNZ     ASMPOP 
    1048 083F  FE 06 0000 E                     INC     BYTE PTR [BPFLG] 
    1049 0843  EB D5                            JMP     INCSI2 
    1050 0845                           GETREG10: 
    1051 0845  3C 0E                            CMP     AL,14                  
					 ; SI REGISTER? 
    1052 0847  75 0D                            JNZ     GETREG11 
    1053 0849  83 3E 0000 E 00                  CMP     WORD PTR [DIFLG],0 
    1054 084E  75 DB                            JNZ     ASMPOP 
    1055 0850  FE 06 0000 E                     INC     BYTE PTR [SIFLG] 
    1056 0854  EB C4                            JMP     INCSI2 
    1057 0856                           GETREG11: 
    1058 0856  3C 0F                            CMP     AL,15                  
					 ; DI REGISTER? 
    1059 0858  75 D1                            JNZ     ASMPOP                 
					 ; *** error 
    1060 085A  83 3E 0000 E 00                  CMP     WORD PTR [DIFLG],0 
    1061 085F  75 CA                            JNZ     ASMPOP 
    1062 0861  FE 06 0000 E                     INC     BYTE PTR [DIFLG] 
    1063 0865  EB B3                            JMP     INCSI2 
    1064                                 
    1065 0867                           GETREG12:                              
					 ; BETTER BE A NUMBER! 
    1066 0867  8B 2E 0002 E                     MOV     BP,WORD PTR [ASMADD+2] 
    1067 086B  80 3E 0000 E 00                  CMP     BYTE PTR [MEMFLG],0 
    1068 0870  74 08                            JZ      GTRG121 
    1069 0872  B9 0004                  GTRG119:MOV     CX,4 
    1070 0875  E8 0000 E                GTRG120:CALL    GETHX 
    1071 0878  EB 13                            JMP     SHORT GTRG122 
    1072 087A  B9 0002                  GTRG121:MOV     CX,2 
    1073 087D  80 3E 0000 E 01                  CMP     BYTE PTR [AWORD],1 
    1074 0882  74 F1                            JZ      GTRG120 
    1075 0884  38 0E 0000 E                     CMP     BYTE PTR [AWORD],CL 
    1076 0888  74 E8                            JZ      GTRG119 
    1077 088A  E8 0000 E                        CALL    GET_ADDRESS 
    1078 088D  72 9C                    GTRG122:JC      ASMPOP 
    1079 088F  A3 0000 E                        MOV     [HINUM],AX 
    1080 0892  80 3E 0000 E 00                  CMP     BYTE PTR [NEGFLG],0 
    1081 0897  74 02                            JZ      GETREG13 
    1082 0899  F7 DA                            NEG     DX 
    1083 089B                           GETREG13: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-24
                                                            

    1084 089B  01 16 0000 E                     ADD     WORD PTR [LOWNUM],DX 
    1085 089F  FE 06 0000 E                     INC     BYTE PTR [NUMFLG] 
    1086 08A3                           GETLOOPV: 
    1087 08A3  E9 065B R                        JMP     GETLOOP 
    1088                                 
    1089 08A6  51                       CHKREG: PUSH    CX 
    1090 08A7  41                               INC     CX 
    1091 08A8  F2/ AF                           REPNZ   SCASW 
    1092 08AA  58                               POP     AX 
    1093 08AB  2B C1                            SUB     AX,CX 
    1094 08AD  0B C9                            OR      CX,CX 
    1095 08AF  C3                               RET 
    1096                                 
    1097 08B0                           STUFF_BYTES: 
    1098 08B0  56                               PUSH    SI 
    1099 08B1  C4 3E 0000 E                     LES     DI,DWORD PTR ASMADD 
    1100 08B5  BE 0000 E                        MOV     SI,OFFSET DG:ASSEM_CNT 
    1101 08B8  33 C0                            XOR     AX,AX 
    1102 08BA  AC                               LODSB 
    1103 08BB  8B C8                            MOV     CX,AX 
    1104 08BD  E3 06                            JCXZ    STUFFRET 
    1105 08BF  F3/ A4                           REP     MOVSB 
    1106 08C1  89 3E 0000 E                     MOV     WORD PTR [ASMADD],DI 
    1107 08C5                           STUFFRET: 
    1108 08C5  5E                               POP     SI 
    1109 08C6  C3                               RET 
    1110                                 
    1111 08C7                           SETSIZ: 
    1112 08C7  B2 01                            MOV     DL,1 
    1113 08C9  A8 18                            TEST    AL,11000B              
					 ; 16 BIT OR SEGMENT REGISTER? 
    1114 08CB  74 02                            JZ      SETSIZ1 
    1115 08CD  FE C2                            INC     DL 
    1116 08CF                           SETSIZ1: 
    1117 08CF  80 3E 0000 E 00                  CMP     BYTE PTR [AWORD],0 
    1118 08D4  74 0A                            JZ      SETSIZ2 
    1119 08D6  38 16 0000 E                     CMP     BYTE PTR [AWORD],DL 
    1120 08DA  74 04                            JZ      SETSIZ2 
    1121 08DC  5A                       SETERR: POP     DX 
    1122 08DD  E9 082B R                        JMP     ASMPOP 
    1123 08E0  88 16 0000 E             SETSIZ2:MOV     BYTE PTR [AWORD],DL 
    1124 08E4  C3                               RET 
    1125                                ; 
    1126                                ;  DETERMINE IF NUMBER IN AX:DX IS 8 BI
					TS, 16 BITS, OR 32 BITS 
    1127                                ; 
    1128 08E5  B1 04                    CHKSIZ: MOV     CL,4 
    1129 08E7  3B C5                            CMP     AX,BP 
    1130 08E9  75 0B                            JNZ     RETCHK 
    1131 08EB  B1 02                    CHKSIZ1:MOV     CL,2 
    1132 08ED  8B C2                            MOV     AX,DX 
    1133 08EF  98                               CBW 
    1134 08F0  3B C2                            CMP     AX,DX 
    1135 08F2  75 02                            JNZ     RETCHK 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-25
                                                            

    1136 08F4  FE C9                            DEC     CL 
    1137 08F6  C3                       RETCHK: RET 
    1138                                ; 
    1139                                ;  get first character after first spac
					e 
    1140                                ; 
    1141 08F7  80 3C 0D                 SCANS:  CMP     BYTE PTR [SI],13 
    1142 08FA  74 FA                            JZ      RETCHK 
    1143 08FC  80 3C 5B                         CMP     BYTE PTR [SI],"[" 
    1144 08FF  74 F5                            JZ      RETCHK 
    1145 0901  AC                               LODSB 
    1146 0902  3C 20                            CMP     AL," " 
    1147 0904  74 04                            JZ      SCANBV 
    1148 0906  3C 09                            CMP     AL,9 
    1149 0908  75 ED                            JNZ     SCANS 
    1150 090A  E9 0000 E                SCANBV: JMP     SCANB 
    1151                                ; 
    1152                                ; Set up for 8087 op-codes 
    1153                                ; 
    1154 090D                           SETMID: 
    1155 090D  C6 06 0000 E D8                  MOV     BYTE PTR [ASSEM1],0D8H 
    1156 0912  8A E0                            MOV     AH,AL 
    1157 0914  24 07                            AND     AL,111B                
					 ; SET MIDDLE BITS OF SECOND BYTE 
    1158 0916  D0 E0                            SHL     AL,1 
    1159 0918  D0 E0                            SHL     AL,1 
    1160 091A  D0 E0                            SHL     AL,1 
    1161 091C  A2 0000 E                        MOV     [MIDFLD],AL 
    1162 091F  8A C4                            MOV     AL,AH                  
					 ; SET LOWER BITS OF FIRST BYTE 
    1163 0921  D0 E8                            SHR     AL,1 
    1164 0923  D0 E8                            SHR     AL,1 
    1165 0925  D0 E8                            SHR     AL,1 
    1166 0927  08 06 0000 E                     OR      [ASSEM1],AL 
    1167 092B  C6 06 0000 E 01                  MOV     BYTE PTR [F8087],1     
					 ; INDICATE 8087 OPERAND 
    1168 0930  C6 06 0000 E 04                  MOV     BYTE PTR [DIRFLG],100B 
    1169 0935  C3                               RET 
    1170                                ; 
    1171                                ; Set MF bits for 8087 op-codes 
    1172                                ; 
    1173 0936  A0 0000 E                SETMF:  MOV     AL,[AWORD] 
    1174 0939  F6 45 01 02                      TEST    BYTE PTR [DI+1],10B 
    1175 093D  75 18                            JNZ     SETMFI 
    1176 093F  80 65 01 F9                      AND     BYTE PTR [DI+1],1111100
					1B   ; CLEAR MF BITS 
    1177 0943  3C 03                            CMP     AL,3                   
					 ; DWORD? 
    1178 0945  74 34                            JZ      SETMFRET 
    1179 0947  3C 04                            CMP     AL,4                   
					 ; QWORD? 
    1180 0949  74 2C                            JZ      SETMFRET2 
    1181 094B  F6 45 01 01                      TEST    BYTE PTR [DI+1],1 
    1182 094F  74 2B                            JZ      SETMFERR 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-26
                                                            

    1183 0951  3C 05                            CMP     AL,5                   
					 ; TBYTE? 
    1184 0953  74 18                            JZ      SETMFRET3 
    1185 0955  EB 25                            JMP     SHORT SETMFERR 
    1186                                 
    1187 0957  3C 03                    SETMFI: CMP     AL,3                   
					 ; DWORD? 
    1188 0959  74 20                            JZ      SETMFRET 
    1189 095B  3C 02                            CMP     AL,2                   
					 ; WORD? 
    1190 095D  74 18                            JZ      SETMFRET2 
    1191 095F  F6 45 01 01                      TEST    BYTE PTR [DI+1],1 
    1192 0963  74 17                            JZ      SETMFERR 
    1193 0965  3C 04                            CMP     AL,4                   
					 ; QWORD? 
    1194 0967  75 13                            JNZ     SETMFERR 
    1195 0969  80 4D 01 07                      OR      BYTE PTR [DI+1],111B 
    1196 096D                           SETMFRET3: 
    1197 096D  80 4D 01 03                      OR      BYTE PTR [DI+1],011B 
    1198 0971  80 4D 02 28                      OR      BYTE PTR [DI+2],101000B
					 
    1199 0975  EB 04                            JMP     SHORT SETMFRET 
    1200 0977                           SETMFRET2: 
    1201 0977  80 4D 01 04                      OR      BYTE PTR [DI+1],100B 
    1202 097B                           SETMFRET: 
    1203 097B  C3                               RET 
    1204                                 
    1205 097C                           SETMFERR: 
    1206 097C  E9 082B R                        JMP     ASMPOP 
    1207                                 
    1208                                 
    1209 097F                           DW_OPER: 
    1210 097F  BD 0001                          MOV     BP,1 
    1211 0982  EB 02                            JMP     SHORT DBEN 
    1212                                 
    1213 0984                           DB_OPER: 
    1214 0984  33 ED                            XOR     BP,BP 
    1215 0986  BF 0000 E                DBEN:   MOV     DI,OFFSET DG:ASSEM_CNT 
    1216 0989  FE 0D                            DEC     BYTE PTR [DI] 
    1217 098B  47                               INC     DI 
    1218 098C  32 DB                    DB0:    XOR     BL,BL 
    1219 098E  E8 0000 E                        CALL    SCANP 
    1220 0991  75 03                            JNZ     DB1 
    1221 0993  E9 05BF R                DBEX:   JMP     ASSEM_EXIT 
    1222 0996  0A DB                    DB1:    OR      BL,BL 
    1223 0998  75 0F                            JNZ     DB3 
    1224 099A  8A 3C                            MOV     BH,BYTE PTR [SI] 
    1225 099C  80 FF 27                         CMP     BH,"'" 
    1226 099F  74 05                            JZ      DB2 
    1227 09A1  80 FF 22                         CMP     BH,'"' 
    1228 09A4  75 13                            JNZ     DB4 
    1229 09A6  46                       DB2:    INC     SI 
    1230 09A7  FE C3                            INC     BL 
    1231 09A9  AC                       DB3:    LODSB 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Page     1-27
                                                            

    1232 09AA  3C 0D                            CMP     AL,13 
    1233 09AC  74 E5                            JZ      DBEX 
    1234 09AE  3A C7                            CMP     AL,BH 
    1235 09B0  74 DA                            JZ      DB0 
    1236 09B2  AA                               STOSB 
    1237 09B3  FE 06 0000 E                     INC     BYTE PTR [ASSEM_CNT] 
    1238 09B7  EB F0                            JMP     DB3 
    1239 09B9  B9 0002                  DB4:    MOV     CX,2 
    1240 09BC  83 FD 00                         CMP     BP,0 
    1241 09BF  74 02                            JZ      DB41 
    1242 09C1  B1 04                            MOV     CL,4 
    1243 09C3  53                       DB41:   PUSH    BX 
    1244 09C4  E8 0000 E                        CALL    GETHX 
    1245 09C7  5B                               POP     BX 
    1246 09C8  73 03                            JNC     DB5 
    1247 09CA  E9 05C5 R                        JMP     ASMERR 
    1248 09CD  8B C2                    DB5:    MOV     AX,DX 
    1249 09CF  83 FD 00                         CMP     BP,0 
    1250 09D2  74 07                            JZ      DB6 
    1251 09D4  AB                               STOSW 
    1252 09D5  FE 06 0000 E                     INC     BYTE PTR [ASSEM_CNT] 
    1253 09D9  EB 01                            JMP     SHORT DB7 
    1254 09DB  AA                       DB6:    STOSB 
    1255 09DC  FE 06 0000 E             DB7:    INC     BYTE PTR [ASSEM_CNT] 
    1256 09E0  EB AA                            JMP     DB0 
    1257                                 
    1258 09E2                           CODE    ENDS 
    1259                                        END ASSEM 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-4
                                                             

SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DG . . . . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	09E2	BYTE	PUBLIC	'CODE'
  CONST  . . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  DATA . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	

Symbols:            

                N a m e         	Type	Value	Attr         

AA_OPER  . . . . . . . . . . . .  	L NEAR	008F	CODE	Global
ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-5
                                                             

ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASEXV  . . . . . . . . . . . . .  	L NEAR	029B	CODE
ASMADD . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASMERR . . . . . . . . . . . . .  	L NEAR	05C5	CODE
ASMEX3 . . . . . . . . . . . . .  	L NEAR	024A	CODE
ASMEX4 . . . . . . . . . . . . .  	L NEAR	022B	CODE
ASMEXV1  . . . . . . . . . . . .  	L NEAR	0392	CODE
ASMPOP . . . . . . . . . . . . .  	L NEAR	082B	CODE
ASMSP  . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
ASSEM  . . . . . . . . . . . . .  	L NEAR	0000	CODE	Global
ASSEM1 . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASSEM2 . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASSEM3 . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASSEM4 . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASSEM5 . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASSEM6 . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASSEMLOOP  . . . . . . . . . . .  	L NEAR	0015	CODE	Global
ASSEM_CNT  . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ASSEM_EXIT . . . . . . . . . . .  	L NEAR	05BF	CODE
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	
AWORD  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

BLANK  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
BLD1 . . . . . . . . . . . . . .  	L NEAR	0620	CODE
BLD4 . . . . . . . . . . . . . .  	L NEAR	0622	CODE
BLDERR . . . . . . . . . . . . .  	L NEAR	05DE	CODE
BPFLG  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
BPLEN  . . . . . . . . . . . . .  	Number	0032	
BPMAX  . . . . . . . . . . . . .  	Number	000A	
BPREG  . . . . . . . . . . . . .  	Number	5042	
BUFINSIZ . . . . . . . . . . . .  	Number	0010	
BUFLEN . . . . . . . . . . . . .  	Number	0050	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-6
                                                             

BUFSIZ . . . . . . . . . . . . .  	Number	0200	
BUILD1 . . . . . . . . . . . . .  	L NEAR	05E0	CODE
BUILD2 . . . . . . . . . . . . .  	L NEAR	05E5	CODE
BUILD3 . . . . . . . . . . . . .  	L NEAR	05F3	CODE
BUILDIT  . . . . . . . . . . . .  	L NEAR	05D7	CODE
BXFLG  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
BXREG  . . . . . . . . . . . . .  	Number	5842	
BYTEBUF  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

CALLJ1 . . . . . . . . . . . . .  	L NEAR	01A9	CODE
CALLJ2 . . . . . . . . . . . . .  	L NEAR	01BD	CODE
CALLJ3 . . . . . . . . . . . . .  	L NEAR	01CF	CODE
CALLJ5 . . . . . . . . . . . . .  	L NEAR	01E3	CODE
CALLJ6 . . . . . . . . . . . . .  	L NEAR	01F5	CODE
CALL_OPER  . . . . . . . . . . .  	L NEAR	018D	CODE	Global
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHKREG . . . . . . . . . . . . .  	L NEAR	08A6	CODE
CHKSIZ . . . . . . . . . . . . .  	L NEAR	08E5	CODE
CHKSIZ1  . . . . . . . . . . . .  	L NEAR	08EB	CODE
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
COMMA  . . . . . . . . . . . . .  	Number	2C00	
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CSSAVE . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DATRET . . . . . . . . . . . . .  	L NEAR	0107	CODE
DB0  . . . . . . . . . . . . . .  	L NEAR	098C	CODE
DB1  . . . . . . . . . . . . . .  	L NEAR	0996	CODE
DB2  . . . . . . . . . . . . . .  	L NEAR	09A6	CODE
DB3  . . . . . . . . . . . . . .  	L NEAR	09A9	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-7
                                                             

DB4  . . . . . . . . . . . . . .  	L NEAR	09B9	CODE
DB41 . . . . . . . . . . . . . .  	L NEAR	09C3	CODE
DB5  . . . . . . . . . . . . . .  	L NEAR	09CD	CODE
DB6  . . . . . . . . . . . . . .  	L NEAR	09DB	CODE
DB7  . . . . . . . . . . . . . .  	L NEAR	09DC	CODE
DBEN . . . . . . . . . . . . . .  	L NEAR	0986	CODE
DBEX . . . . . . . . . . . . . .  	L NEAR	0993	CODE
DBMN . . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DB_OPER  . . . . . . . . . . . .  	L NEAR	0984	CODE	Global
DCINC_OPER . . . . . . . . . . .  	L NEAR	0277	CODE	Global
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEFAULT  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIFLG  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DIREG  . . . . . . . . . . . . .  	Number	4944	
DIRFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DISP8_OPER . . . . . . . . . . .  	L NEAR	022E	CODE	Global
DISPX  . . . . . . . . . . . . .  	L NEAR	0243	CODE
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
DW_OPER  . . . . . . . . . . . .  	L NEAR	097F	CODE	Global

ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-8
                                                             

ERRET  . . . . . . . . . . . . .  	L NEAR	06AF	CODE
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
ERRV1  . . . . . . . . . . . . .  	L NEAR	0130	CODE
ERRV2  . . . . . . . . . . . . .  	L NEAR	029E	CODE
ERRV3  . . . . . . . . . . . . .  	L NEAR	04A8	CODE
ERRV5  . . . . . . . . . . . . .  	L NEAR	03F0	CODE
ERRZ4  . . . . . . . . . . . . .  	L NEAR	01AE	CODE
ESC_OPER . . . . . . . . . . . .  	L NEAR	02A1	CODE	Global
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXEFCB . . . . . . . . . . . . .  	Alias	 FCB		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	
EXVEC  . . . . . . . . . . . . .  	L NEAR	0427	CODE
EX_OPER  . . . . . . . . . . . .  	L NEAR	0395	CODE	Global

F8087  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
FALSE  . . . . . . . . . . . . .  	Number	0000	
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-9
                                                             

FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FD9_OPER . . . . . . . . . . . .  	L NEAR	0088	CODE	Global
FDB_OPER . . . . . . . . . . . .  	L NEAR	0084	CODE	Global
FDE_OPER . . . . . . . . . . . .  	L NEAR	0080	CODE	Global
FDX_OPER . . . . . . . . . . . .  	L NEAR	008A	CODE
FEXIT  . . . . . . . . . . . . .  	L NEAR	030C	CODE
FGROUP . . . . . . . . . . . . .  	L NEAR	02F1	CODE	Global
FGROUP1  . . . . . . . . . . . .  	L NEAR	0309	CODE
FGROUP3  . . . . . . . . . . . .  	L NEAR	0317	CODE	Global
FGROUP3E . . . . . . . . . . . .  	L NEAR	0319	CODE
FGROUP3W . . . . . . . . . . . .  	L NEAR	0313	CODE	Global
FGROUPB  . . . . . . . . . . . .  	L NEAR	030F	CODE	Global
FGROUPDS . . . . . . . . . . . .  	L NEAR	02C7	CODE	Global
FGROUPP  . . . . . . . . . . . .  	L NEAR	032F	CODE	Global
FGROUPX  . . . . . . . . . . . .  	L NEAR	02E7	CODE	Global
FGROUPZ  . . . . . . . . . . . .  	L NEAR	0344	CODE	Global
FGRP . . . . . . . . . . . . . .  	L NEAR	032A	CODE
FGRP2  . . . . . . . . . . . . .  	L NEAR	02F4	CODE
FGRPERR  . . . . . . . . . . . .  	L NEAR	0341	CODE
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	

G21V . . . . . . . . . . . . . .  	L NEAR	03F3	CODE
G22V . . . . . . . . . . . . . .  	L NEAR	04F0	CODE
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETHX  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
GETINFO  . . . . . . . . . . . .  	L NEAR	073D	CODE
GETLOOP  . . . . . . . . . . . .  	L NEAR	065B	CODE
GETLOOP1 . . . . . . . . . . . .  	L NEAR	0660	CODE
GETLOOPV . . . . . . . . . . . .  	L NEAR	08A3	CODE
GETOK  . . . . . . . . . . . . .  	L NEAR	082E	CODE
GETREG0  . . . . . . . . . . . .  	L NEAR	0742	CODE
GETREG1  . . . . . . . . . . . .  	L NEAR	0747	CODE
GETREG10 . . . . . . . . . . . .  	L NEAR	0845	CODE
GETREG11 . . . . . . . . . . . .  	L NEAR	0856	CODE
GETREG12 . . . . . . . . . . . .  	L NEAR	0867	CODE
GETREG13 . . . . . . . . . . . .  	L NEAR	089B	CODE
GETREG3  . . . . . . . . . . . .  	L NEAR	0754	CODE
GETREG41 . . . . . . . . . . . .  	L NEAR	0765	CODE
GETREG5  . . . . . . . . . . . .  	L NEAR	0784	CODE
GETREG6  . . . . . . . . . . . .  	L NEAR	079F	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-10
                                                             

GETREG7  . . . . . . . . . . . .  	L NEAR	07A7	CODE
GETREG8  . . . . . . . . . . . .  	L NEAR	07BF	CODE
GETREG9  . . . . . . . . . . . .  	L NEAR	0834	CODE
GETREGMEM  . . . . . . . . . . .  	L NEAR	0634	CODE
GETREGMEM2 . . . . . . . . . . .  	L NEAR	0639	CODE
GETREGREG  . . . . . . . . . . .  	L NEAR	07FE	CODE
GETRG01  . . . . . . . . . . . .  	L NEAR	0744	CODE
GETRG51  . . . . . . . . . . . .  	L NEAR	079B	CODE
GETTB  . . . . . . . . . . . . .  	L NEAR	0676	CODE
GET_ADDRESS  . . . . . . . . . .  	L NEAR	0000	CODE	External
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATA16 . . . . . . . . . . .  	L NEAR	00EF	CODE	Global
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOGET  . . . . . . . . . . . . .  	L NEAR	0679	CODE
GOGO . . . . . . . . . . . . . .  	L NEAR	0738	CODE
GOMODE . . . . . . . . . . . . .  	L NEAR	067C	CODE
GOMODE1  . . . . . . . . . . . .  	L NEAR	06B2	CODE
GOMODE2  . . . . . . . . . . . .  	L NEAR	06D0	CODE
GOREG0 . . . . . . . . . . . . .  	L NEAR	06EE	CODE
GOREG1 . . . . . . . . . . . . .  	L NEAR	0736	CODE
GOREGMEM . . . . . . . . . . . .  	L NEAR	06E4	CODE
GROUP1 . . . . . . . . . . . . .  	L NEAR	035E	CODE	Global
GROUP2 . . . . . . . . . . . . .  	L NEAR	03A7	CODE	Global
GROUPE . . . . . . . . . . . . .  	L NEAR	0363	CODE
GROUPM . . . . . . . . . . . . .  	L NEAR	03AC	CODE
GRP21  . . . . . . . . . . . . .  	L NEAR	049A	CODE
GRP22  . . . . . . . . . . . . .  	L NEAR	0545	CODE
GRP222 . . . . . . . . . . . . .  	L NEAR	056A	CODE
GRP223 . . . . . . . . . . . . .  	L NEAR	0562	CODE
GRP23  . . . . . . . . . . . . .  	L NEAR	0481	CODE
GRP23X . . . . . . . . . . . . .  	L NEAR	0483	CODE
GRP24  . . . . . . . . . . . . .  	L NEAR	0591	CODE
GRP25  . . . . . . . . . . . . .  	L NEAR	0593	CODE
GRP28  . . . . . . . . . . . . .  	L NEAR	04BE	CODE
GRPEX  . . . . . . . . . . . . .  	L NEAR	0595	CODE
GRPEX1 . . . . . . . . . . . . .  	L NEAR	0497	CODE
GRPSIZ . . . . . . . . . . . . .  	L NEAR	057B	CODE
GTRG119  . . . . . . . . . . . .  	L NEAR	0872	CODE
GTRG120  . . . . . . . . . . . .  	L NEAR	0875	CODE
GTRG121  . . . . . . . . . . . .  	L NEAR	087A	CODE
GTRG122  . . . . . . . . . . . .  	L NEAR	088D	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-11
                                                             


HINUM  . . . . . . . . . . . . .  	V WORD 	0000	DATA	External

IBMJAPAN . . . . . . . . . . . .  	Alias	 FALSE		
IBMVER . . . . . . . . . . . . .  	Alias	 TRUE		
IMMACC . . . . . . . . . . . . .  	L NEAR	0466	CODE
IMMED1 . . . . . . . . . . . . .  	L NEAR	03F6	CODE
INBUF  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
INCSI2 . . . . . . . . . . . . .  	L NEAR	081A	CODE
INDEX  . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_OPER . . . . . . . . . . . .  	L NEAR	010A	CODE	Global
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IN_0 . . . . . . . . . . . . . .  	L NEAR	0133	CODE
IN_1 . . . . . . . . . . . . . .  	L NEAR	0137	CODE
IN_OPER  . . . . . . . . . . . .  	L NEAR	0122	CODE	Global
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

JMP_OPER . . . . . . . . . . . .  	L NEAR	0189	CODE	Global

KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LOWNUM . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
L_OPER . . . . . . . . . . . . .  	L NEAR	024D	CODE	Global

MAXOP  . . . . . . . . . . . . .  	Number	0000		External
MEMFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
MIDFLD . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-12
                                                             

MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MODE . . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
MORET  . . . . . . . . . . . . .  	L NEAR	06AE	CODE
MOV1 . . . . . . . . . . . . . .  	L NEAR	04E8	CODE
MOVFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
MOVOP  . . . . . . . . . . . . .  	L NEAR	03A3	CODE
MOV_OPER . . . . . . . . . . . .  	L NEAR	039F	CODE	Global
MSVER  . . . . . . . . . . . . .  	Alias	 FALSE		

NEGFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
NOSIZE . . . . . . . . . . . . .  	L NEAR	0820	CODE
NOTMOV1  . . . . . . . . . . . .  	L NEAR	042A	CODE
NOTMOV2  . . . . . . . . . . . .  	L NEAR	04D2	CODE
NOTSEG . . . . . . . . . . . . .  	L NEAR	0504	CODE
NOTSEG1  . . . . . . . . . . . .  	L NEAR	04AB	CODE
NOTTST . . . . . . . . . . . . .  	L NEAR	0476	CODE
NOTTST2  . . . . . . . . . . . .  	L NEAR	04E4	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NO_OPER  . . . . . . . . . . . .  	L NEAR	0093	CODE	Global
NUMFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OP1  . . . . . . . . . . . . . .  	L NEAR	0047	CODE
OPBUF  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
OPBUFLEN . . . . . . . . . . . .  	Number	0023	
OPCODE . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
OPLOOK . . . . . . . . . . . . .  	L NEAR	002E	CODE
OPLOOP . . . . . . . . . . . . .  	L NEAR	0035	CODE
OPMATCH  . . . . . . . . . . . .  	L NEAR	0050	CODE
OPSCAN . . . . . . . . . . . . .  	L NEAR	0033	CODE
OPTAB  . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
OUTDI  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
OUT_0  . . . . . . . . . . . . .  	L NEAR	015F	CODE
OUT_1  . . . . . . . . . . . . .  	L NEAR	0174	CODE
OUT_OPER . . . . . . . . . . . .  	L NEAR	0152	CODE	Global

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
POP1 . . . . . . . . . . . . . .  	L NEAR	00A6	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-13
                                                             

POP2 . . . . . . . . . . . . . .  	L NEAR	00DC	CODE
POP3 . . . . . . . . . . . . . .  	L NEAR	00E9	CODE
POP_OPER . . . . . . . . . . . .  	L NEAR	00A4	CODE	Global
PRINTMES . . . . . . . . . . . .  	L NEAR	0000	CODE	External
PROMPT . . . . . . . . . . . . .  	Number	002D	
PUSH_OPER  . . . . . . . . . . .  	L NEAR	00A0	CODE	Global
PUTREG . . . . . . . . . . . . .  	L NEAR	0658	CODE

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REG16  . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
REG8 . . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
REGFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
REGMEM . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
REGTABLEN  . . . . . . . . . . .  	Number	000E	
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RETCHK . . . . . . . . . . . . .  	L NEAR	08F6	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
ROTERR . . . . . . . . . . . . .  	L NEAR	038A	CODE
ROTOP  . . . . . . . . . . . . .  	L NEAR	036E	CODE	Global
ROTOP1 . . . . . . . . . . . . .  	L NEAR	038D	CODE
RPRI . . . . . . . . . . . . . .  	Number	0006	

SCANB  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
SCANBV . . . . . . . . . . . . .  	L NEAR	090A	CODE
SCANP  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
SCANS  . . . . . . . . . . . . .  	L NEAR	08F7	CODE
SEGDIF . . . . . . . . . . . . .  	Number	0000	
SEGFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETCNTC  . . . . . . . . . . . .  	Alias	 TRUE		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETERR . . . . . . . . . . . . .  	L NEAR	08DC	CODE
SETMF  . . . . . . . . . . . . .  	L NEAR	0936	CODE
SETMFERR . . . . . . . . . . . .  	L NEAR	097C	CODE
SETMFI . . . . . . . . . . . . .  	L NEAR	0957	CODE
SETMFRET . . . . . . . . . . . .  	L NEAR	097B	CODE
SETMFRET2  . . . . . . . . . . .  	L NEAR	0977	CODE
SETMFRET3  . . . . . . . . . . .  	L NEAR	096D	CODE
SETMID . . . . . . . . . . . . .  	L NEAR	090D	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-14
                                                             

SETSIZ . . . . . . . . . . . . .  	L NEAR	08C7	CODE
SETSIZ1  . . . . . . . . . . . .  	L NEAR	08CF	CODE
SETSIZ2  . . . . . . . . . . . .  	L NEAR	08E0	CODE
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SIFLG  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
SIREG  . . . . . . . . . . . . .  	Number	4953	
SIZ8 . . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
SPECX  . . . . . . . . . . . . .  	L NEAR	0537	CODE
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STUFFRET . . . . . . . . . . . .  	L NEAR	08C5	CODE
STUFF_BYTES  . . . . . . . . . .  	L NEAR	08B0	CODE
SYNERR . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
SYSVER . . . . . . . . . . . . .  	Alias	 FALSE		

TAB  . . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
TEST1  . . . . . . . . . . . . .  	L NEAR	047C	CODE
TRUE . . . . . . . . . . . . . .  	Number	FFFF	
TST2 . . . . . . . . . . . . . .  	L NEAR	0550	CODE
TSTFLG . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
TST_OPER . . . . . . . . . . . .  	L NEAR	0399	CODE	Global

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:29:36

DEBASM                                                      Symbols-15
                                                             


XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZIBO . . . . . . . . . . . . . .  	Alias	 TRUE		
ZLOOP  . . . . . . . . . . . . .  	L NEAR	07FB	CODE


   2531 Source  Lines
   2594 Total   Lines
    741 Symbols

  15200 Bytes symbol space free

      1 Warning Errors
      0 Severe  Errors
