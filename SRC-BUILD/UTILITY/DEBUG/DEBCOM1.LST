Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-1
                                                            

       1                                TITLE   PART1 DEBUGGER COMMANDS 
       2                                 
       3                                ; Routines to perform debugger commands
					 except ASSEMble and UASSEMble 
       4                                 
       5                                
					 
debcom1.ASM(7) : error 1: Extra characters on line 
       6                                .list 
       7                                 
       8 0000                           CODE    SEGMENT PUBLIC BYTE 'CODE' 
       9 0000                           CODE    ENDS 
      10                                 
      11 0000                           CONST   SEGMENT PUBLIC BYTE 
      12                                 
      13                                        EXTRN   SYNERR:BYTE 
      14                                 
      15                                        EXTRN   DISPB:WORD,DSIZ:BYTE,DS
					SAVE:WORD 
      16                                        endif 
      17                                 
      18 0000                           CONST   ENDS 
      19                                 
      20 0000                           DATA    SEGMENT PUBLIC BYTE 
      21                                 
      22                                        EXTRN   DEFLEN:WORD,BYTEBUF:BYT
					E,DEFDUMP:BYTE 
      23                                 
      24 0000                           DATA    ENDS 
      25                                 
      26                                DG      GROUP   CODE,CONST,DATA 
      27                                 
      28                                 
      29 0000                           CODE    SEGMENT PUBLIC BYTE 'CODE' 
      30                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
      31                                 
      32                                 
      33                                        PUBLIC  HEXCHK,GETHEX1,PRINT,DS
					RANGE,ADDRESS,HEXIN,PERROR 
      34                                        PUBLIC  GETHEX,GET_ADDRESS,GETE
					OL,GETHX,PERR 
      35                                        PUBLIC  PERR,MOVE,DUMP,ENTER,FI
					LL,SEARCH,DEFAULT 
      36                                        endif 
      37                                 
      38                                        EXTRN   OUT:NEAR,CRLF:NEAR,OUTD
					I:NEAR,OUTSI:NEAR,SCANP:NEAR 
      39                                        EXTRN   SCANB:NEAR,BLANK:NEAR,T
					AB:NEAR,PRINTMES:NEAR,COMMAND:NEAR 
      40                                        EXTRN   HEX:NEAR,BACKUP:NEAR 
      41                                 
      42                                 
      43 0000                           DEBCOM1: 
      44                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-2
                                                            

      45                                ; RANGE - Looks for parameters defining
					 an address range. 
      46                                ; The first parameter is the starting a
					ddress. The second parameter 
      47                                ; may specify the ending address, or it
					 may be preceded by 
      48                                ; "L" and specify a length (4 digits ma
					x), or it may be 
      49                                ; omitted and a length of 128 bytes is 
					assumed. Returns with 
      50                                ; segment in AX, displacement in DX, an
					d length in CX. 
      51                                 
      52 0000                           DSRANGE: 
      53 0000  8B 2E 0000 E                     MOV     BP,[DSSAVE]            
					 ; Set default segment to DS 
      54 0004  C7 06 0000 E 0080                MOV     [DEFLEN],128           
					 ; And default length to 128 bytes 
      55 000A                           RANGE: 
      56 000A  E8 0237 R                        CALL    ADDRESS 
      57 000D  50                               PUSH    AX                     
					 ; Save segment 
      58 000E  52                               PUSH    DX                     
					 ; Save offset 
      59 000F  E8 0000 E                        CALL    SCANP                  
					 ; Get to next parameter 
      60 0012  8A 04                            MOV     AL,[SI] 
      61 0014  3C 4C                            CMP     AL,"L"                 
					 ; Length indicator? 
      62 0016  74 2B                            JE      GETLEN 
      63 0018  8B 16 0000 E                     MOV     DX,[DEFLEN]            
					 ; Default length 
      64 001C  E8 01C4 R                        CALL    HEXIN                  
					 ; Second parameter present? 
      65 001F  72 15                            JC      GetDef                 
					 ; If not, use default 
      66 0021  B9 0004                          MOV     CX,4 
      67 0024  E8 01B8 R                        CALL    GETHEX                 
					 ; Get ending address (same segment) 
      68 0027  8B CA                            MOV     CX,DX                  
					 ; Low 16 bits of ending addr. 
      69 0029  5A                               POP     DX                     
					 ; Low 16 bits of starting addr. 
      70 002A  2B CA                            SUB     CX,DX                  
					 ; Compute range 
      71 002C  73 03                            JAE     DSRNG2 
      72 002E  E9 0225 R                DSRNG1: JMP     PERROR                 
					 ; Negative range 
      73 0031  41                       DSRNG2: INC     CX                     
					 ; Include last location 
      74 0032  E3 FA                            JCXZ    DSRNG1                 
					 ; Wrap around error 
      75 0034  58                               POP     AX                     
					 ; Restore segment 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-3
                                                            

      76 0035  C3                               RET 
      77 0036                           GetDef: 
      78 0036  59                               POP     CX                     
					 ; get original offset 
      79 0037  51                               PUSH    CX                     
					 ; save it 
      80 0038  F7 D9                            NEG     CX                     
					 ; rest of segment 
      81 003A  74 0E                            JZ      RngRet                 
					 ; use default 
      82 003C  3B CA                            CMP     CX,DX                  
					 ; more room in segment? 
      83 003E  73 0A                            JAE     RngRet                 
					 ; yes, use default 
      84 0040  EB 0A 90                         JMP     RngRet1                
					 ; no, length is in CX 
      85                                 
      86 0043                           GETLEN: 
      87 0043  46                               INC     SI                     
					 ; Skip over "L" to length 
      88 0044  B9 0004                          MOV     CX,4                   
					 ; Length may have 4 digits 
      89 0047  E8 01B8 R                        CALL    GETHEX                 
					 ; Get the range 
      90 004A                           RNGRET: 
      91 004A  8B CA                            MOV     CX,DX                  
					 ; Length 
      92 004C                           RngRet1: 
      93 004C  5A                               POP     DX                     
					 ; Offset 
      94 004D  8B C1                            MOV     AX,CX 
      95 004F  03 C2                            ADD     AX,DX 
      96 0051  73 05                            JNC     OKRET 
      97 0053  3D 0001                          CMP     AX,1 
      98 0056  73 D6                            JAE     DSRNG1                 
					 ; Look for wrap error 
      99 0058                           OKRET: 
     100 0058  58                               POP     AX                     
					 ; Segment 
     101 0059  C3                               RET 
     102                                 
     103 005A                           DEFAULT: 
     104                                ; DI points to default address and CX h
					as default length 
     105 005A  E8 0000 E                        CALL    SCANP 
     106 005D  74 0A                            JZ      USEDEF                 
					 ; Use default if no parameters 
     107 005F  89 0E 0000 E                     MOV     [DEFLEN],CX 
     108 0063  E8 000A R                        CALL    RANGE 
     109 0066  E9 021E R                        JMP     GETEOL 
     110 0069                           USEDEF: 
     111 0069  8B F7                            MOV     SI,DI 
     112 006B  AD                               LODSW                          
					 ; Get default displacement 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-4
                                                            

     113 006C  8B D0                            MOV     DX,AX 
     114 006E  AD                               LODSW                          
					 ; Get default segment 
     115 006F  C3                               RET 
     116                                 
     117                                ; Dump an area of memory in both hex an
					d ASCII 
     118                                 
     119 0070                           DUMP: 
     120 0070  8B 2E 0000 E                     MOV     BP,[DSSAVE] 
     121 0074  8B 0E 0000 E                     MOV     CX,DISPB 
     122 0078  BF 0000 E                        MOV     DI,OFFSET DG:DEFDUMP 
     123 007B  E8 005A R                        CALL    DEFAULT                
					 ; Get range if specified 
     124 007E  8E D8                            MOV     DS,AX                  
					 ; Set segment 
     125 0080  8B F2                            MOV     SI,DX                  
					 ; SI has displacement in segment 
     126                                 
     127                                        IF  ZIBO 
     128 0082  56                               PUSH    SI                     
					 ; save SI away 
     129 0083  81 E6 FFF0                       AND     SI,0FFF0h              
					 ; convert to para number 
     130 0087  E8 0000 E                        CALL    OutSI                  
					 ; display location 
     131 008A  5E                               POP     SI                     
					 ; get SI back 
     132 008B  8B C6                            MOV     AX,SI                  
					 ; move offset 
     133 008D  B4 03                            MOV     AH,3                   
					 ; spaces per byte 
     134 008F  24 0F                            AND     AL,0Fh                 
					 ; convert to real offset 
     135 0091  F6 E4                            MUL     AH                     
					 ; compute (AL+1)*3-1 
     136 0093  0A C0                            OR      AL,AL                  
					 ; set flag 
     137 0095  74 0D                            JZ      InRow                  
					 ; if xero go on 
     138 0097  51                               PUSH    CX                     
					 ; save count 
     139 0098  8B C8                            MOV     CX,AX                  
					 ; move to convenient spot 
     140 009A  E8 0000 E                        CALL    Tab                    
					 ; move over 
     141 009D  59                               POP     CX                     
					 ; get back count 
     142 009E  EB 04 90                         JMP     InRow                  
					 ; display line 
     143                                        ENDIF 
     144                                 
     145 00A1                           ROW: 
     146 00A1  E8 0000 E                        CALL    OUTSI                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-5
                                                            

					 ; Print address at start of line 
     147 00A4                           InRow: 
     148 00A4  56                               PUSH    SI                     
					 ; Save address for ASCII dump 
     149 00A5  E8 0000 E                        CALL    BLANK 
     150 00A8                           BYTE0: 
     151 00A8  E8 0000 E                        CALL    BLANK                  
					 ; Space between bytes 
     152 00AB                           BYTE1: 
     153 00AB  AC                               LODSB                          
					 ; Get byte to dump 
     154 00AC  E8 0000 E                        CALL    HEX                    
					 ; and display it 
     155 00AF  5A                               POP     DX                     
					 ; DX has start addr. for ASCII dump 
     156 00B0  49                               DEC     CX                     
					 ; Drop loop count 
     157 00B1  74 1A                            JZ      ToAscii                
					 ; If through do ASCII dump 
     158 00B3  8B C6                            MOV     AX,SI 
     159 00B5  2E: 84 06 0000 E                 TEST    AL,CS:(BYTE PTR DSIZ)  
					 ; On 16-byte boundary? 
     160 00BA  74 0C                            JZ      ENDROW 
     161 00BC  52                               PUSH    DX                     
					 ; Didn't need ASCII addr. yet 
     162 00BD  A8 07                            TEST    AL,7                   
					 ; On 8-byte boundary? 
     163 00BF  75 E7                            JNZ     BYTE0 
     164 00C1  B0 2D                            MOV     AL,"-"                 
					 ; Mark every 8 bytes 
     165 00C3  E8 0000 E                        CALL    OUT 
     166 00C6  EB E3                            JMP     SHORT BYTE1 
     167 00C8                           ENDROW: 
     168 00C8  E8 00E0 R                        CALL    ASCII                  
					 ; Show it in ASCII 
     169 00CB  EB D4                            JMP     SHORT ROW              
					 ; Loop until count is zero 
     170 00CD                           ToAscii: 
     171 00CD  8B C6                            MOV     AX,SI                  
					 ; get offset 
     172 00CF  24 0F                            AND     AL,0Fh                 
					 ; real offset 
     173 00D1  74 0D                            JZ      ASCII                  
					 ; no loop if already there 
     174 00D3  2C 10                            SUB     AL,10h                 
					 ; remainder 
     175 00D5  F6 D8                            NEG     AL 
     176 00D7  B1 03                            MOV     CL,3 
     177 00D9  F6 E1                            MUL     CL 
     178 00DB  8B C8                            MOV     CX,AX                  
					 ; number of chars to move 
     179 00DD  E8 0000 E                        CALL    Tab 
     180 00E0                           ASCII: 
     181 00E0  51                               PUSH    CX                     
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-6
                                                            

					 ; Save byte count 
     182 00E1  8B C6                            MOV     AX,SI                  
					 ; Current dump address 
     183 00E3  8B F2                            MOV     SI,DX                  
					 ; ASCII dump address 
     184 00E5  2B C2                            SUB     AX,DX                  
					 ; AX=length of ASCII dump 
     185                                        ELSE 
     186 00E7  8B CE                            MOV     CX,SI                  
					 ; get starting point 
     187 00E9  49                               DEC     CX 
     188 00EA  81 E1 000F                       AND     CX,0Fh 
     189 00EE  41                               INC     CX 
     190 00EF  81 E1 000F                       AND     CX,0Fh 
     191 00F3  83 C1 03                         ADD     CX,3                   
					 ; we have the correct number to tab 
     192 00F6  50                               PUSH    AX                     
					 ; save count 
     193 00F7  E8 0000 E                        CALL    TAB 
     194 00FA  59                               POP     CX                     
					 ; get count back 
     195                                        ENDIF 
     196 00FB                           ASCDMP: 
     197 00FB  AC                               LODSB                          
					 ; Get ASCII byte to dump 
     198 00FC  24 7F                            AND     AL,7FH                 
					 ; ASCII uses 7 bits 
     199 00FE  3C 7F                            CMP     AL,7FH                 
					 ; Don't try to print RUBOUT 
     200 0100  74 04                            JZ      NOPRT 
     201 0102  3C 20                            CMP     AL," "                 
					 ; Check for control characters 
     202 0104  73 02                            JNC     PRIN 
     203 0106                           NOPRT: 
     204 0106  B0 2E                            MOV     AL,"."                 
					 ; If unprintable character 
     205 0108                           PRIN: 
     206 0108  E8 0000 E                        CALL    OUT                    
					 ; Print ASCII character 
     207 010B  E2 EE                            LOOP    ASCDMP                 
					 ; CX times 
     208 010D  59                               POP     CX                     
					     ; Restore overall dump length 
     209 010E  26: 89 36 0000 E                 MOV     ES:WORD PTR [DEFDUMP],S
					I 
     210 0113  26: 8C 1E 0002 E                 MOV     ES:WORD PTR [DEFDUMP+2]
					,DS  ; Save last address as default 
     211 0118  E8 0000 E                        CALL    CRLF                   
					     ; Print CR/LF and return 
     212 011B  C3                               RET 
     213                                 
     214                                 
     215                                ; Block move one area of memory to anot
					her. Overlapping moves 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-7
                                                            

     216                                ; are performed correctly, i.e., so tha
					t a source byte is not 
     217                                ; overwritten until after it has been m
					oved. 
     218                                 
     219 011C                           MOVE: 
     220 011C  E8 0000 R                        CALL    DSRANGE                
					 ; Get range of source area 
     221 011F  51                               PUSH    CX                     
					 ; Save length 
     222 0120  50                               PUSH    AX                     
					 ; Save segment 
     223 0121  52                               PUSH    DX                     
					 ; Save source displacement 
     224 0122  E8 0237 R                        CALL    ADDRESS                
					 ; Get destination address (same segmen
					t) 
     225 0125  E8 021E R                        CALL    GETEOL                 
					 ; Check for errors 
     226 0128  5E                               POP     SI 
     227 0129  8B FA                            MOV     DI,DX                  
					 ; Set dest. displacement 
     228 012B  5B                               POP     BX                     
					 ; Source segment 
     229 012C  8E DB                            MOV     DS,BX 
     230 012E  8E C0                            MOV     ES,AX                  
					 ; Destination segment 
     231 0130  59                               POP     CX                     
					 ; Length 
     232 0131  3B FE                            CMP     DI,SI                  
					 ; Check direction of move 
     233 0133  1B C3                            SBB     AX,BX                  
					 ; Extend the CMP to 32 bits 
     234 0135  72 07                            JB      COPYLIST               
					 ; Move forward into lower mem. 
     235                                ; Otherwise, move backward. Figure end 
					of source and destination 
     236                                ; areas and flip direction flag. 
     237 0137  49                               DEC     CX 
     238 0138  03 F1                            ADD     SI,CX                  
					 ; End of source area 
     239 013A  03 F9                            ADD     DI,CX                  
					 ; End of destination area 
     240 013C  FD                               STD                            
					 ; Reverse direction 
     241 013D  41                               INC     CX 
     242 013E                           COPYLIST: 
     243 013E  A4                               MOVSB                          
					 ; Do at least 1 - Range is 1-10000H no
					t 0-FFFFH 
     244 013F  49                               DEC     CX 
     245 0140  F3/ A4                           REP     MOVSB                  
					 ; Block move 
     246 0142  C3                       RET1:   RET 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-8
                                                            

     247                                 
     248                                ; Fill an area of memory with a list va
					lues. If the list 
     249                                ; is bigger than the area, don't use th
					e whole list. If the 
     250                                ; list is smaller, repeat it as many ti
					mes as necessary. 
     251                                 
     252 0143                           FILL: 
     253 0143  E8 0000 R                        CALL    DSRANGE                
					 ; Get range to fill 
     254 0146  51                               PUSH    CX                     
					 ; Save length 
     255 0147  50                               PUSH    AX                     
					 ; Save segment number 
     256 0148  52                               PUSH    DX                     
					 ; Save displacement 
     257 0149  E8 0210 R                        CALL    LIST                   
					 ; Get list of values to fill with 
     258 014C  5F                               POP     DI                     
					 ; Displacement in segment 
     259 014D  07                               POP     ES                     
					 ; Segment 
     260 014E  59                               POP     CX                     
					 ; Length 
     261 014F  3B D9                            CMP     BX,CX                  
					 ; BX is length of fill list 
     262 0151  BE 0000 E                        MOV     SI,OFFSET DG:BYTEBUF   
					 ; List is in byte buffer 
     263 0154  E3 02                            JCXZ    BIGRNG 
     264 0156  73 E6                            JAE     COPYLIST               
					 ; If list is big, copy part of it 
     265 0158                           BIGRNG: 
     266 0158  2B CB                            SUB     CX,BX                  
					 ; How much bigger is area than list? 
     267 015A  87 CB                            XCHG    CX,BX                  
					 ; CX=length of list 
     268 015C  57                               PUSH    DI                     
					 ; Save starting addr. of area 
     269 015D  F3/ A4                           REP     MOVSB                  
					 ; Move list into area 
     270 015F  5E                               POP     SI 
     271                                ; The list has been copied into the beg
					inning of the 
     272                                ; specified area of memory. SI is the f
					irst address 
     273                                ; of that area, DI is the end of the co
					py of the list 
     274                                ; plus one, which is where the list wil
					l begin to repeat. 
     275                                ; All we need to do now is copy [SI] to
					 [DI] until the 
     276                                ; end of the memory area is reached. Th
					is will cause the 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-9
                                                            

     277                                ; list to repeat as many times as neces
					sary. 
     278 0160  8B CB                            MOV     CX,BX                  
					 ; Length of area minus list 
     279 0162  06                               PUSH    ES                     
					 ; Different index register 
     280 0163  1F                               POP     DS                     
					 ; requires different segment reg. 
     281 0164  EB D8                            JMP     SHORT COPYLIST         
					 ; Do the block move 
     282                                 
     283                                ; Search a specified area of memory for
					 given list of bytes. 
     284                                ; Print address of first byte of each m
					atch. 
     285                                 
     286 0166                           SEARCH: 
     287 0166  E8 0000 R                        CALL    DSRANGE                
					 ; Get area to be searched 
     288 0169  51                               PUSH    CX                     
					 ; Save count 
     289 016A  50                               PUSH    AX                     
					 ; Save segment number 
     290 016B  52                               PUSH    DX                     
					 ; Save displacement 
     291 016C  E8 0210 R                        CALL    LIST                   
					 ; Get search list 
     292 016F  4B                               DEC     BX                     
					 ; No. of bytes in list-1 
     293 0170  5F                               POP     DI                     
					 ; Displacement within segment 
     294 0171  07                               POP     ES                     
					 ; Segment 
     295 0172  59                               POP     CX                     
					 ; Length to be searched 
     296 0173  2B CB                            SUB     CX,BX                  
					 ;  minus length of list 
     297 0175                           SCAN: 
     298 0175  BE 0000 E                        MOV     SI,OFFSET DG:BYTEBUF   
					 ; List kept in byte buffer 
     299 0178  AC                               LODSB                          
					 ; Bring first byte into AL 
     300 0179                           DOSCAN: 
     301 0179  AE                               SCASB                          
					 ; Search for first byte 
     302 017A  E0 FD                            LOOPNE  DOSCAN                 
					 ; Do at least once by using LOOP 
     303 017C  75 C4                            JNZ     RET1                   
					 ; Exit if not found 
     304 017E  53                               PUSH    BX                     
					 ; Length of list minus 1 
     305 017F  87 D9                            XCHG    BX,CX 
     306 0181  57                               PUSH    DI                     
					 ; Will resume search here 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-10
                                                            

     307 0182  F3/ A6                           REPE    CMPSB                  
					 ; Compare rest of string 
     308 0184  8B CB                            MOV     CX,BX                  
					 ; Area length back in CX 
     309 0186  5F                               POP     DI                     
					 ; Next search location 
     310 0187  5B                               POP     BX                     
					 ; Restore list length 
     311 0188  75 08                            JNZ     TEST                   
					 ; Continue search if no match 
     312 018A  4F                               DEC     DI                     
					 ; Match address 
     313 018B  E8 0000 E                        CALL    OUTDI                  
					 ; Print it 
     314 018E  47                               INC     DI                     
					 ; Restore search address 
     315 018F  E8 0000 E                        CALL    CRLF 
     316 0192                           TEST: 
     317 0192  E3 AE                            JCXZ    RET1 
     318 0194  EB DF                            JMP     SHORT SCAN             
					 ; Look for next occurrence 
     319                                 
     320                                ; Get the next parameter, which must be
					 a hex number. 
     321                                ; CX is maximum number of digits the nu
					mber may have. 
     322                                 
     323 0196                           GETHX: 
     324 0196  E8 0000 E                        CALL    SCANP 
     325 0199                           GETHX1: 
     326 0199  33 D2                            XOR     DX,DX                  
					 ; Initialize the number 
     327 019B  E8 01C4 R                        CALL    HEXIN                  
					 ; Get a hex digit 
     328 019E  72 23                            JC      HXERR                  
					 ; Must be one valid digit 
     329 01A0  8A D0                            MOV     DL,AL                  
					 ; First 4 bits in position 
     330 01A2                           GETLP: 
     331 01A2  46                               INC     SI                     
					 ; Next char in buffer 
     332 01A3  49                               DEC     CX                     
					 ; Digit count 
     333 01A4  E8 01C4 R                        CALL    HEXIN                  
					 ; Get another hex digit? 
     334 01A7  72 19                            JC      RETHX                  
					 ; All done if no more digits 
     335 01A9  F9                               STC 
     336 01AA  E3 17                            JCXZ    HXERR                  
					 ; Too many digits? 
     337 01AC  D1 E2                            SHL     DX,1                   
					 ; Multiply by 16 
     338 01AE  D1 E2                            SHL     DX,1 
     339 01B0  D1 E2                            SHL     DX,1 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-11
                                                            

     340 01B2  D1 E2                            SHL     DX,1 
     341 01B4  0A D0                            OR      DL,AL                  
					 ; and combine new digit 
     342 01B6  EB EA                            JMP     SHORT GETLP            
					 ; Get more digits 
     343                                 
     344 01B8                           GETHEX: 
     345 01B8  E8 0196 R                        CALL    GETHX                  
					 ; Scan to next parameter 
     346 01BB  EB 03                            JMP     SHORT GETHX2 
     347 01BD                           GETHEX1: 
     348 01BD  E8 0199 R                        CALL    GETHX1 
     349 01C0  72 63                    GETHX2: JC      PERROR 
     350 01C2  F8                       RETHX:  CLC 
     351 01C3  C3                       HXERR:  RET 
     352                                 
     353                                 
     354                                ; Check if next character in the input 
					buffer is a hex digit 
     355                                ; and convert it to binary if it is. Ca
					rry set if not. 
     356                                 
     357 01C4                           HEXIN: 
     358 01C4  8A 04                            MOV     AL,[SI] 
     359                                 
     360                                ; Check if AL has a hex digit and conve
					rt it to binary if it 
     361                                ; is. Carry set if not. 
     362                                 
     363 01C6                           HEXCHK: 
     364 01C6  2C 30                            SUB     AL,"0"                 
					 ; Kill ASCII numeric bias 
     365 01C8  72 10                            JC      RET2 
     366 01CA  3C 0A                            CMP     AL,10 
     367 01CC  F5                               CMC 
     368 01CD  73 0B                            JNC     RET2                   
					 ; OK if 0-9 
     369 01CF  24 5F                            AND     AL,5FH 
     370 01D1  2C 07                            SUB     AL,7                   
					 ; Kill A-F bias 
     371 01D3  3C 0A                            CMP     AL,10 
     372 01D5  72 03                            JC      RET2 
     373 01D7  3C 10                            CMP     AL,16 
     374 01D9  F5                               CMC 
     375 01DA  C3                       RET2:   RET 
     376                                 
     377                                ; Process one parameter when a list of 
					bytes is 
     378                                ; required. Carry set if parameter bad.
					 Called by LIST. 
     379                                 
     380 01DB                           LISTITEM: 
     381 01DB  E8 0000 E                        CALL    SCANP                  
					 ; Scan to parameter 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-12
                                                            

     382 01DE  E8 01C4 R                        CALL    HEXIN                  
					 ; Is it in hex? 
     383 01E1  72 0B                            JC      STRINGCHK              
					 ; If not, could be a string 
     384 01E3  B9 0002                          MOV     CX,2                   
					 ; Only 2 hex digits for bytes 
     385 01E6  E8 01B8 R                        CALL    GETHEX                 
					 ; Get the byte value 
     386 01E9  88 17                            MOV     [BX],DL                
					 ; Add to list 
     387 01EB  43                               INC     BX 
     388 01EC  F8                       GRET:   CLC                            
					 ; Parameter was OK 
     389 01ED  C3                               RET 
     390 01EE                           STRINGCHK: 
     391 01EE  8A 04                            MOV     AL,[SI]                
					 ; Get first character of param 
     392 01F0  3C 27                            CMP     AL,"'"                 
					 ; String? 
     393 01F2  74 06                            JZ      STRING 
     394 01F4  3C 22                            CMP     AL,'"'                 
					 ; Either quote is all right 
     395 01F6  74 02                            JZ      STRING 
     396 01F8  F9                               STC                            
					 ; Not string, not hex - bad 
     397 01F9  C3                               RET 
     398 01FA                           STRING: 
     399 01FA  8A E0                            MOV     AH,AL                  
					 ; Save for closing quote 
     400 01FC  46                               INC     SI 
     401 01FD                           STRNGLP: 
     402 01FD  AC                               LODSB                          
					 ; Next char of string 
     403 01FE  3C 0D                            CMP     AL,13                  
					 ; Check for end of line 
     404 0200  74 22                            JZ      PERR                   
					 ; Must find a close quote 
     405 0202  3A C4                            CMP     AL,AH                  
					 ; Check for close quote 
     406 0204  75 05                            JNZ     STOSTRG                
					 ; Add new character to list 
     407 0206  3A 24                            CMP     AH,[SI]                
					 ; Two quotes in a row? 
     408 0208  75 E2                            JNZ     GRET                   
					 ; If not, we're done 
     409 020A  46                               INC     SI                     
					 ; Yes - skip second one 
     410 020B                           STOSTRG: 
     411 020B  88 07                            MOV     [BX],AL                
					 ; Put new char in list 
     412 020D  43                               INC     BX 
     413 020E  EB ED                            JMP     SHORT STRNGLP          
					 ; Get more characters 
     414                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-13
                                                            

     415                                ; Get a byte list for ENTER, FILL or SE
					ARCH. Accepts any number 
     416                                ; of 2-digit hex values or character st
					rings in either single 
     417                                ; (') or double (") quotes. 
     418                                 
     419 0210                           LIST: 
     420 0210  BB 0000 E                        MOV     BX,OFFSET DG:BYTEBUF   
					 ; Put byte list in the byte buffer 
     421 0213                           LISTLP: 
     422 0213  E8 01DB R                        CALL    LISTITEM               
					 ; Process a parameter 
     423 0216  73 FB                            JNC     LISTLP                 
					 ; If OK, try for more 
     424 0218  81 EB 0000 E                     SUB     BX,OFFSET DG:BYTEBUF   
					 ; BX now has no. of bytes in list 
     425 021C  74 07                            JZ      PERROR                 
					 ; List must not be empty 
     426                                 
     427                                ; Make sure there is nothing more on th
					e line except for 
     428                                ; blanks and carriage return. If there 
					is, it is an 
     429                                ; unrecognized parameter and an error. 
     430                                 
     431 021E                           GETEOL: 
     432 021E  E8 0000 E                        CALL    SCANB                  
					 ; Skip blanks 
     433 0221  75 02                            JNZ     PERROR                 
					 ; Better be a RETURN 
     434 0223  C3                       RET3:   RET 
     435                                 
     436                                ; Command error. SI has been incremente
					d beyond the 
     437                                ; command letter so it must decremented
					 for the 
     438                                ; error pointer to work. 
     439                                 
     440 0224                           PERR: 
     441 0224  4E                               DEC     SI 
     442                                 
     443                                ; Syntax error. SI points to character 
					in the input buffer 
     444                                ; which caused error. By subtracting fr
					om start of buffer, 
     445                                ; we will know how far to tab over to a
					ppear directly below 
     446                                ; it on the terminal. Then print "^ Err
					or". 
     447                                 
     448 0225                           PERROR: 
     449 0225  81 EE FFFF E                     SUB     SI,OFFSET DG:(BYTEBUF-1
					); How many char processed so far? 
     450 0229  8B CE                            MOV     CX,SI                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-14
                                                            

					 ; Parameter for TAB in CX 
     451 022B  E8 0000 E                        CALL    TAB                    
					 ; Directly below bad char 
     452 022E  BE 0000 E                        MOV     SI,OFFSET DG:SYNERR    
					 ; Error message 
     453                                 
     454                                ; Print error message and abort to comm
					and level 
     455                                 
     456 0231                           PRINT: 
     457 0231  E8 0000 E                        CALL    PRINTMES 
     458 0234  E9 0000 E                        JMP     COMMAND 
     459                                 
     460                                ; Gets an address in Segment:Displaceme
					nt format. Segment may be omitted 
     461                                ; and a default (kept in BP) will be us
					ed, or it may be a segment 
     462                                ; register (DS, ES, SS, CS). Returns wi
					th segment in AX, OFFSET in DX. 
     463                                 
     464 0237                           ADDRESS: 
     465 0237  E8 023E R                        CALL    GET_ADDRESS 
     466 023A  72 E9                            JC      PERROR 
     467 023C  F9                       ADRERR: STC 
     468 023D  C3                               RET 
     469                                 
     470 023E                           GET_ADDRESS: 
     471 023E  E8 0000 E                        CALL    SCANP 
     472 0241  8A 44 01                         MOV     AL,[SI+1] 
     473 0244  3C 53                            CMP     AL,"S" 
     474 0246  74 1C                            JZ      SEGREG 
     475 0248  B9 0004                          MOV     CX,4 
     476 024B  E8 0196 R                        CALL    GETHX 
     477 024E  72 EC                            JC      ADRERR 
     478 0250  8B C5                            MOV     AX,BP                  
					 ; Get default segment 
     479 0252  80 3C 3A                         CMP     BYTE PTR [SI],":" 
     480 0255  75 0B                            JNZ     GETRET 
     481 0257  52                               PUSH    DX 
     482 0258                           GETDISP: 
     483 0258  46                               INC     SI                     
					 ; Skip over ":" 
     484 0259  B9 0004                          MOV     CX,4 
     485 025C  E8 0196 R                        CALL    GETHX 
     486 025F  58                               POP     AX 
     487 0260  72 DA                            JC      ADRERR 
     488 0262  F8                       GETRET: CLC 
     489 0263  C3                               RET 
     490 0264                           SEGREG: 
     491 0264  8A 04                            MOV     AL,[SI] 
     492 0266  BF 0281 R                        MOV     DI,OFFSET DG:SEGLET 
     493 0269  B9 0004                          MOV     CX,4 
     494 026C  F2/ AE                           REPNE   SCASB 
     495 026E  75 CC                            JNZ     ADRERR 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-15
                                                            

     496 0270  46                               INC     SI 
     497 0271  46                               INC     SI 
     498 0272  D1 E1                            SHL     CX,1 
     499 0274  8B D9                            MOV     BX,CX 
     500 0276  80 3C 3A                         CMP     BYTE PTR [SI],":" 
     501 0279  75 C1                            JNZ     ADRERR 
     502 027B  FF B7 0000 E                     PUSH    [BX+DSSAVE] 
     503 027F  EB D7                            JMP     SHORT GETDISP 
     504                                 
     505 0281  43 53 45 44              SEGLET  DB      "CSED" 
     506                                 
     507                                ; Short form of ENTER command. A list o
					f values from the 
     508                                ; command line are put into memory with
					out using normal 
     509                                ; ENTER mode. 
     510                                 
     511 0285                           GETLIST: 
     512 0285  E8 0210 R                        CALL    LIST                   
					 ; Get the bytes to enter 
     513 0288  5F                               POP     DI                     
					 ; Displacement within segment 
     514 0289  07                               POP     ES                     
					 ; Segment to enter into 
     515 028A  BE 0000 E                        MOV     SI,OFFSET DG:BYTEBUF   
					 ; List of bytes is in byte 2uffer 
     516 028D  8B CB                            MOV     CX,BX                  
					 ; Count of bytes 
     517 028F  F3/ A4                           REP     MOVSB                  
					 ; Enter that byte list 
     518 0291  C3                               RET 
     519                                 
     520                                ; Enter values into memory at a specifi
					ed address. If the 
     521                                ; line contains nothing but the address
					 we go into "enter 
     522                                ; mode", where the address and its curr
					ent value are printed 
     523                                ; and the user may change it if desired
					. To change, type in 
     524                                ; new value in hex. Backspace works to 
					correct errors. If 
     525                                ; an illegal hex digit or too many digi
					ts are typed, the 
     526                                ; bell is sounded but it is otherwise i
					gnored. To go to the 
     527                                ; next byte (with or without change), h
					it space bar. To 
     528                                ; back   CLDto a previous address, type
					 "-". On 
     529                                ; every 8-byte boundary a new line is s
					tarted and the address 
     530                                ; is printed. To terminate command, typ
					e carriage return. 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-16
                                                            

     531                                ;   Alternatively, the list of bytes to
					 be entered may be 
     532                                ; included on the original command line
					 immediately following 
     533                                ; the address. This is in regular LIST 
					format so any number 
     534                                ; of hex values or strings in quotes ma
					y be entered. 
     535                                 
     536 0292                           ENTER: 
     537 0292  8B 2E 0000 E                     MOV     BP,[DSSAVE]            
					 ; Set default segment to DS 
     538 0296  E8 0237 R                        CALL    ADDRESS 
     539 0299  50                               PUSH    AX                     
					 ; Save for later 
     540 029A  52                               PUSH    DX 
     541 029B  E8 0000 E                        CALL    SCANB                  
					 ; Any more parameters? 
     542 029E  75 E5                            JNZ     GETLIST                
					 ; If not end-of-line get list 
     543 02A0  5F                               POP     DI                     
					 ; Displacement of ENTER 
     544 02A1  07                               POP     ES                     
					 ; Segment 
     545 02A2                           GETROW: 
     546 02A2  E8 0000 E                        CALL    OUTDI                  
					 ; Print address of entry 
     547 02A5  E8 0000 E                        CALL    BLANK                  
					 ; Leave a space 
     548 02A8  E8 0000 E                        CALL    BLANK 
     549 02AB                           GETBYTE: 
     550 02AB  26: 8A 05                        MOV     AL,ES:[DI]             
					 ; Get current value 
     551 02AE  E8 0000 E                        CALL    HEX                    
					 ; And display it 
     552 02B1                           PUTDOT: 
     553 02B1  B0 2E                            MOV     AL,"." 
     554 02B3  E8 0000 E                        CALL    OUT                    
					 ; Prompt for new value 
     555 02B6  B9 0002                          MOV     CX,2                   
					 ; Max of 2 digits in new value 
     556 02B9  BA 0000                          MOV     DX,0                   
					 ; Intial new value 
     557 02BC                           GETDIG: 
     558 02BC  E8 0339 R                        CALL    IN                     
					 ; Get digit from user 
     559 02BF  8A E0                            MOV     AH,AL                  
					 ; Save 
     560 02C1  E8 01C6 R                        CALL    HEXCHK                 
					 ; Hex digit? 
     561 02C4  86 E0                            XCHG    AH,AL                  
					 ; Need original for echo 
     562 02C6  72 09                            JC      NOHEX                  
					 ; If not, try special command 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-17
                                                            

     563 02C8  8A F2                            MOV     DH,DL                  
					 ; Rotate new value 
     564 02CA  8A D4                            MOV     DL,AH                  
					 ; And include new digit 
     565 02CC  E2 EE                            LOOP    GETDIG                 
					 ; At most 2 digits 
     566                                ; We have two digits, so all we will ac
					cept now is a command. 
     567 02CE                           DWAIT: 
     568 02CE  E8 0339 R                        CALL    IN                     
					 ; Get command character 
     569 02D1                           NOHEX: 
     570 02D1  3C 08                            CMP     AL,8                   
					 ; Backspace 
     571 02D3  74 21                            JZ      BS 
     572 02D5  3C 7F                            CMP     AL,7FH                 
					 ; RUBOUT 
     573 02D7  74 18                            JZ      RUB 
     574 02D9  3C 2D                            CMP     AL,"-"                 
					 ; Back   CLDto previous address 
     575 02DB  74 4F                            JZ      PREV 
     576 02DD  3C 0D                            CMP     AL,13                  
					 ; All done with command? 
     577 02DF  74 52                            JZ      EOL 
     578 02E1  3C 20                            CMP     AL," "                 
					 ; Go to next address 
     579 02E3  74 33                            JZ      NEXT 
     580 02E5  B0 08                            MOV     AL,8 
     581 02E7  E8 0000 E                        CALL    OUT                    
					 ; Back   CLDover illegal character 
     582 02EA  E8 0000 E                        CALL    BACKUP 
     583 02ED  E3 DF                            JCXZ    DWAIT 
     584 02EF  EB CB                            JMP     SHORT GETDIG 
     585                                 
     586 02F1                           RUB: 
     587 02F1  B0 08                            MOV     AL,8 
     588 02F3  E8 0000 E                        CALL    OUT 
     589 02F6                           BS: 
     590 02F6  80 F9 02                         CMP     CL,2                   
					 ; CX=2 means nothing typed yet 
     591 02F9  74 B6                            JZ      PUTDOT                 
					 ; Put back the dot we backed     CLDov
					er 
     592 02FB  FE C1                            INC     CL                     
					 ; Accept one more character 
     593 02FD  8A D6                            MOV     DL,DH                  
					 ; Rotate out last digit 
     594 02FF  8A F5                            MOV     DH,CH                  
					 ; Zero this digit 
     595 0301  E8 0000 E                        CALL    BACKUP                 
					 ; Physical backspace 
     596 0304  EB B6                            JMP     SHORT GETDIG           
					 ; Get more digits 
     597                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-18
                                                            

     598                                ; If new value has been entered, conver
					t it to binary and 
     599                                ; put into memory. Always bump pointer 
					to next location 
     600                                 
     601 0306                           STORE: 
     602 0306  80 F9 02                         CMP     CL,2                   
					 ; CX=2 means nothing typed yet 
     603 0309  74 0B                            JZ      NOSTO                  
					 ; So no new value to store 
     604                                ; Rotate DH left 4 bits to combine with
					 DL and make a byte value 
     605 030B  51                               PUSH    CX 
     606 030C  B1 04                            MOV     CL,4 
     607 030E  D2 E6                            SHL     DH,CL 
     608 0310  59                               POP     CX 
     609 0311  0A D6                            OR      DL,DH                  
					 ; Hex is now converted to binary 
     610 0313  26: 88 15                        MOV     ES:[DI],DL             
					 ; Store new value 
     611 0316                           NOSTO: 
     612 0316  47                               INC     DI                     
					 ; Prepare for next location 
     613 0317  C3                               RET 
     614 0318                           NEXT: 
     615 0318  E8 0306 R                        CALL    STORE                  
					 ; Enter new value 
     616 031B  41                               INC     CX                     
					 ; Leave a space plus two for 
     617 031C  41                               INC     CX                     
					 ;  each digit not entered 
     618 031D  E8 0000 E                        CALL    TAB 
     619 0320  8B C7                            MOV     AX,DI                  
					 ; Next memory address 
     620 0322  24 07                            AND     AL,7                   
					 ; Check for 8-byte boundary 
     621 0324  75 85                            JNZ     GETBYTE                
					 ; Take 8 per line 
     622 0326                           NEWROW: 
     623 0326  E8 0000 E                        CALL    CRLF                   
					 ; Terminate line 
     624 0329  E9 02A2 R                        JMP     GETROW                 
					 ; Print address on new line 
     625 032C                           PREV: 
     626 032C  E8 0306 R                        CALL    STORE                  
					 ; Enter the new value 
     627                                ; DI has been bumped to next byte. Drop
					 it 2 to go to previous addr 
     628 032F  4F                               DEC     DI 
     629 0330  4F                               DEC     DI 
     630 0331  EB F3                            JMP     SHORT NEWROW           
					 ; Terminate line after backing   CLD 
     631                                 
     632 0333                           EOL: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Page     1-19
                                                            

     633 0333  E8 0306 R                        CALL    STORE                  
					 ; Enter the new value 
     634 0336  E9 0000 E                        JMP     CRLF                   
					 ; CR/LF and terminate 
     635                                 
     636                                ; Console input of single character 
     637                                 
     638                                        ELSE 
     639                                 
     640 0339                           IN: 
     641 0339  B4 01                            MOV     AH,1 
     642 033B  CD 21                            INT     21H 
     643 033D  C3                               RET 
     644                                        ENDIF 
     645                                 
     646 033E                           CODE    ENDS 
     647                                        END     DEBCOM1 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-4
                                                             

SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DG . . . . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	033E	BYTE	PUBLIC	'CODE'
  CONST  . . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  DATA . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDRESS  . . . . . . . . . . . .  	L NEAR	0237	CODE	Global
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-5
                                                             

ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ADRERR . . . . . . . . . . . . .  	L NEAR	023C	CODE
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASCDMP . . . . . . . . . . . . .  	L NEAR	00FB	CODE
ASCII  . . . . . . . . . . . . .  	L NEAR	00E0	CODE
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BACKUP . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
BIGRNG . . . . . . . . . . . . .  	L NEAR	0158	CODE
BLANK  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
BPLEN  . . . . . . . . . . . . .  	Number	0032	
BPMAX  . . . . . . . . . . . . .  	Number	000A	
BPREG  . . . . . . . . . . . . .  	Number	5042	
BS . . . . . . . . . . . . . . .  	L NEAR	02F6	CODE
BUFINSIZ . . . . . . . . . . . .  	Number	0010	
BUFLEN . . . . . . . . . . . . .  	Number	0050	
BUFSIZ . . . . . . . . . . . . .  	Number	0200	
BXREG  . . . . . . . . . . . . .  	Number	5842	
BYTE0  . . . . . . . . . . . . .  	L NEAR	00A8	CODE
BYTE1  . . . . . . . . . . . . .  	L NEAR	00AB	CODE
BYTEBUF  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
COMMA  . . . . . . . . . . . . .  	Number	2C00	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-6
                                                             

COMMAND  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
COPYLIST . . . . . . . . . . . .  	L NEAR	013E	CODE
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CRLF . . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEBCOM1  . . . . . . . . . . . .  	L NEAR	0000	CODE
DEFAULT  . . . . . . . . . . . .  	L NEAR	005A	CODE	Global
DEFDUMP  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DEFLEN . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIREG  . . . . . . . . . . . . .  	Number	4944	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-7
                                                             

DISPB  . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
DOSCAN . . . . . . . . . . . . .  	L NEAR	0179	CODE
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DSIZ . . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSRANGE  . . . . . . . . . . . .  	L NEAR	0000	CODE	Global
DSRNG1 . . . . . . . . . . . . .  	L NEAR	002E	CODE
DSRNG2 . . . . . . . . . . . . .  	L NEAR	0031	CODE
DSSAVE . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
DUMP . . . . . . . . . . . . . .  	L NEAR	0070	CODE	Global
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
DWAIT  . . . . . . . . . . . . .  	L NEAR	02CE	CODE

ENDROW . . . . . . . . . . . . .  	L NEAR	00C8	CODE
ENTER  . . . . . . . . . . . . .  	L NEAR	0292	CODE	Global
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
EOL  . . . . . . . . . . . . . .  	L NEAR	0333	CODE
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXEFCB . . . . . . . . . . . . .  	Alias	 FCB		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-8
                                                             

EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILL . . . . . . . . . . . . . .  	L NEAR	0143	CODE	Global
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETBYTE  . . . . . . . . . . . .  	L NEAR	02AB	CODE
GETDEF . . . . . . . . . . . . .  	L NEAR	0036	CODE
GETDIG . . . . . . . . . . . . .  	L NEAR	02BC	CODE
GETDISP  . . . . . . . . . . . .  	L NEAR	0258	CODE
GETEOL . . . . . . . . . . . . .  	L NEAR	021E	CODE	Global
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETHEX . . . . . . . . . . . . .  	L NEAR	01B8	CODE	Global
GETHEX1  . . . . . . . . . . . .  	L NEAR	01BD	CODE	Global
GETHX  . . . . . . . . . . . . .  	L NEAR	0196	CODE	Global
GETHX1 . . . . . . . . . . . . .  	L NEAR	0199	CODE
GETHX2 . . . . . . . . . . . . .  	L NEAR	01C0	CODE
GETLEN . . . . . . . . . . . . .  	L NEAR	0043	CODE
GETLIST  . . . . . . . . . . . .  	L NEAR	0285	CODE
GETLP  . . . . . . . . . . . . .  	L NEAR	01A2	CODE
GETRET . . . . . . . . . . . . .  	L NEAR	0262	CODE
GETROW . . . . . . . . . . . . .  	L NEAR	02A2	CODE
GET_ADDRESS  . . . . . . . . . .  	L NEAR	023E	CODE	Global
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-9
                                                             

GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GRET . . . . . . . . . . . . . .  	L NEAR	01EC	CODE

HEX  . . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
HEXCHK . . . . . . . . . . . . .  	L NEAR	01C6	CODE	Global
HEXIN  . . . . . . . . . . . . .  	L NEAR	01C4	CODE	Global
HXERR  . . . . . . . . . . . . .  	L NEAR	01C3	CODE

IBMJAPAN . . . . . . . . . . . .  	Alias	 FALSE		
IBMVER . . . . . . . . . . . . .  	Alias	 TRUE		
IN . . . . . . . . . . . . . . .  	L NEAR	0339	CODE
INROW  . . . . . . . . . . . . .  	L NEAR	00A4	CODE
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LIST . . . . . . . . . . . . . .  	L NEAR	0210	CODE
LISTITEM . . . . . . . . . . . .  	L NEAR	01DB	CODE
LISTLP . . . . . . . . . . . . .  	L NEAR	0213	CODE
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-10
                                                             

MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MOVE . . . . . . . . . . . . . .  	L NEAR	011C	CODE	Global
MSVER  . . . . . . . . . . . . .  	Alias	 FALSE		

NEWROW . . . . . . . . . . . . .  	L NEAR	0326	CODE
NEXT . . . . . . . . . . . . . .  	L NEAR	0318	CODE
NOHEX  . . . . . . . . . . . . .  	L NEAR	02D1	CODE
NOPRT  . . . . . . . . . . . . .  	L NEAR	0106	CODE
NOSTO  . . . . . . . . . . . . .  	L NEAR	0316	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OKRET  . . . . . . . . . . . . .  	L NEAR	0058	CODE
OPBUFLEN . . . . . . . . . . . .  	Number	0023	
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
OUT  . . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
OUTDI  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
OUTSI  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PERR . . . . . . . . . . . . . .  	L NEAR	0224	CODE	Global
PERROR . . . . . . . . . . . . .  	L NEAR	0225	CODE	Global
PREV . . . . . . . . . . . . . .  	L NEAR	032C	CODE
PRIN . . . . . . . . . . . . . .  	L NEAR	0108	CODE
PRINT  . . . . . . . . . . . . .  	L NEAR	0231	CODE	Global
PRINTMES . . . . . . . . . . . .  	L NEAR	0000	CODE	External
PROMPT . . . . . . . . . . . . .  	Number	002D	
PUTDOT . . . . . . . . . . . . .  	L NEAR	02B1	CODE

RANGE  . . . . . . . . . . . . .  	L NEAR	000A	CODE
RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REGTABLEN  . . . . . . . . . . .  	Number	000E	
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-11
                                                             

RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RET1 . . . . . . . . . . . . . .  	L NEAR	0142	CODE
RET2 . . . . . . . . . . . . . .  	L NEAR	01DA	CODE
RET3 . . . . . . . . . . . . . .  	L NEAR	0223	CODE
RETHX  . . . . . . . . . . . . .  	L NEAR	01C2	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RNGRET . . . . . . . . . . . . .  	L NEAR	004A	CODE
RNGRET1  . . . . . . . . . . . .  	L NEAR	004C	CODE
ROW  . . . . . . . . . . . . . .  	L NEAR	00A1	CODE
RPRI . . . . . . . . . . . . . .  	Number	0006	
RUB  . . . . . . . . . . . . . .  	L NEAR	02F1	CODE

SCAN . . . . . . . . . . . . . .  	L NEAR	0175	CODE
SCANB  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
SCANP  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
SEARCH . . . . . . . . . . . . .  	L NEAR	0166	CODE	Global
SEGDIF . . . . . . . . . . . . .  	Number	0000	
SEGLET . . . . . . . . . . . . .  	L BYTE 	0281	CODE
SEGREG . . . . . . . . . . . . .  	L NEAR	0264	CODE
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETCNTC  . . . . . . . . . . . .  	Alias	 TRUE		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SIREG  . . . . . . . . . . . . .  	Number	4953	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:30:00

PART1 DEBUGGER COMMANDS                                     Symbols-12
                                                             

STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STORE  . . . . . . . . . . . . .  	L NEAR	0306	CODE
STOSTRG  . . . . . . . . . . . .  	L NEAR	020B	CODE
STRING . . . . . . . . . . . . .  	L NEAR	01FA	CODE
STRINGCHK  . . . . . . . . . . .  	L NEAR	01EE	CODE
STRNGLP  . . . . . . . . . . . .  	L NEAR	01FD	CODE
SYNERR . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
SYSVER . . . . . . . . . . . . .  	Alias	 FALSE		

TAB  . . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
TEST . . . . . . . . . . . . . .  	L NEAR	0192	CODE
TOASCII  . . . . . . . . . . . .  	L NEAR	00CD	CODE
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USEDEF . . . . . . . . . . . . .  	L NEAR	0069	CODE
USERIDOPER . . . . . . . . . . .  	Number	005E	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZIBO . . . . . . . . . . . . . .  	Alias	 TRUE		


   1961 Source  Lines
   2024 Total   Lines
    606 Symbols

  19308 Bytes symbol space free

      1 Warning Errors
      0 Severe  Errors
