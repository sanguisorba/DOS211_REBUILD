Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-1
                                                            

       1                                ; 
       2                                ; Disk routines for MSDOS 
       3                                ; 
       4                                 
       5                             C  INCLUDE DOSSEG.ASM 
       6                             C  ; 
       7                             C  ; segment ordering for MSDOS 
       8                             C  ; 
       9                             C   
      10 0000                        C  CONSTANTS       SEGMENT BYTE PUBLIC 'CO
					NST' 
      11 0000                        C  CONSTANTS       ENDS 
      12                             C   
      13 0000                        C  DATA            SEGMENT BYTE PUBLIC 'DA
					TA' 
      14 0000                        C  DATA            ENDS 
      15                             C   
      16 0000                        C  CODE            SEGMENT BYTE PUBLIC 'CO
					DE' 
      17 0000                        C  CODE            ENDS 
      18                             C   
      19 0000                        C  LAST            SEGMENT BYTE PUBLIC 'LA
					ST' 
      20 0000                        C  LAST            ENDS 
      21                             C   
      22                             C  DOSGROUP    GROUP   CODE,CONSTANTS,DATA
					,LAST 
      23                                 
      24                                 
      25 0000                           CODE    SEGMENT BYTE PUBLIC  'CODE' 
      26                                        ASSUME  SS:DOSGROUP,CS:DOSGROUP
					 
      27                                 
      28                                .list 
      29                                 
      30                                TITLE   DISK - Disk utility routines 
      31                                NAME    Disk 
      32                                 
      33                                        i_need  COUTDSAV,BYTE 
      34 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      35 0000                         1  DATA ENDS
      36                                        i_need  COUTSAV,DWORD 
      37 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      38 0000                         1  DATA ENDS
      39                                        i_need  CINDSAV,BYTE 
      40 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      41 0000                         1  DATA ENDS
      42                                        i_need  CINSAV,DWORD 
      43 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      44 0000                         1  DATA ENDS
      45                                        i_need  CONSWAP,BYTE 
      46 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      47 0000                         1  DATA ENDS
      48                                        i_need  IDLEINT,BYTE 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-2
DEVICE TABLE AND SRH DEFINITION                             

      49 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      50 0000                         1  DATA ENDS
      51                                        i_need  THISFCB,DWORD 
      52 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      53 0000                         1  DATA ENDS
      54                                        i_need  DMAADD,DWORD 
      55 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      56 0000                         1  DATA ENDS
      57                                        i_need  DEVCALL,BYTE 
      58 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      59 0000                         1  DATA ENDS
      60                                        i_need  CALLSCNT,WORD 
      61 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      62 0000                         1  DATA ENDS
      63                                        i_need  CALLXAD,DWORD 
      64 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      65 0000                         1  DATA ENDS
      66                                        i_need  CONTPOS,WORD 
      67 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      68 0000                         1  DATA ENDS
      69                                        i_need  NEXTADD,WORD 
      70 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      71 0000                         1  DATA ENDS
      72                                        i_need  CONBUF,BYTE 
      73 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      74 0000                         1  DATA ENDS
      75                                        i_need  User_SS,WORD 
      76 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      77 0000                         1  DATA ENDS
      78                                        i_need  User_SP,WORD 
      79 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      80 0000                         1  DATA ENDS
      81                                        i_need  DSKStack,BYTE 
      82 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      83 0000                         1  DATA ENDS
      84                                        i_need  InDOS,BYTE 
      85 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      86 0000                         1  DATA ENDS
      87                                        i_need  NumIO,BYTE 
      88 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      89 0000                         1  DATA ENDS
      90                                        i_need  CurDrv,BYTE 
      91 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      92 0000                         1  DATA ENDS
      93                                        i_need  ThisDrv,BYTE 
      94 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      95 0000                         1  DATA ENDS
      96                                        i_need  ClusFac,BYTE 
      97 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      98 0000                         1  DATA ENDS
      99                                        i_need  SecClusPos,BYTE 
     100 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     101 0000                         1  DATA ENDS
     102                                        i_need  DirSec,WORD 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-3
DEVICE TABLE AND SRH DEFINITION                             

     103 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     104 0000                         1  DATA ENDS
     105                                        i_need  ClusNum,WORD 
     106 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     107 0000                         1  DATA ENDS
     108                                        i_need  NxtClusNum,WORD 
     109 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     110 0000                         1  DATA ENDS
     111                                        i_need  ReadOp,BYTE 
     112 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     113 0000                         1  DATA ENDS
     114                                        i_need  DskErr,BYTE 
     115 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     116 0000                         1  DATA ENDS
     117                                        i_need  RecCnt,WORD 
     118 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     119 0000                         1  DATA ENDS
     120                                        i_need  RecPos,4 
     121 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     122 0000                         1  DATA ENDS
     123                                        i_need  Trans,BYTE 
     124 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     125 0000                         1  DATA ENDS
     126                                        i_need  BytPos,4 
     127 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     128 0000                         1  DATA ENDS
     129                                        i_need  SecPos,WORD 
     130 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     131 0000                         1  DATA ENDS
     132                                        i_need  BytSecPos,WORD 
     133 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     134 0000                         1  DATA ENDS
     135                                        i_need  BytCnt1,WORD 
     136 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     137 0000                         1  DATA ENDS
     138                                        i_need  BytCnt2,WORD 
     139 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     140 0000                         1  DATA ENDS
     141                                        i_need  SecCnt,WORD 
     142 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     143 0000                         1  DATA ENDS
     144                                        i_need  ThisDPB,DWORD 
     145 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     146 0000                         1  DATA ENDS
     147                                        i_need  LastPos,WORD 
     148 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     149 0000                         1  DATA ENDS
     150                                        i_need  ValSec,WORD 
     151 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     152 0000                         1  DATA ENDS
     153                                        i_need  GrowCnt,DWORD 
     154 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
     155 0000                         1  DATA ENDS
     156                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-4
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

     157                                SUBTTL LOAD -- MAIN READ ROUTINE AND DE
					VICE IN ROUTINES 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-5
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

     158                                PAGE 
     159                                ; * * * * Drivers for file input from d
					evices * * * * 
     160                                 
     161                                        procedure   SWAPBACK,NEAR 
     162 0000                         1 SWAPBACK PROC NEAR
     163                                ASSUME  DS:DOSGROUP,ES:NOTHING 
     164 0000  06                               PUSH    ES 
     165 0001  57                               PUSH    DI 
     166 0002  56                               PUSH    SI 
     167 0003  53                               PUSH    BX 
     168 0004  BB 0001                          MOV     BX,1 
     169                                        invoke  get_sf_from_jfn 
     170 0007  E8 0000 E              1  CALL get_sf_from_jfn
     171 000A  83 C7 03                         ADD     DI,sf_fcb 
     172 000D  8A 1E 0000 E                     MOV     BL,BYTE PTR [COUTDSAV] 
     173 0011  C5 36 0000 E                     LDS     SI,[COUTSAV] 
     174                                ASSUME  DS:NOTHING 
     175 0015  26: 89 75 19                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS],SI 
     176 0019  26: 8C 5D 1B                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS+2],DS 
     177 001D  26: 88 5D 18                     MOV     ES:[DI.fcb_DEVID],BL 
     178 0021  16                               PUSH    SS 
     179 0022  1F                               POP     DS 
     180                                ASSUME  DS:DOSGROUP 
     181 0023  33 DB                            XOR     BX,BX 
     182                                        invoke  get_sf_from_jfn 
     183 0025  E8 0000 E              1  CALL get_sf_from_jfn
     184 0028  83 C7 03                         ADD     DI,sf_fcb 
     185 002B  8A 1E 0000 E                     MOV     BL,BYTE PTR [CINDSAV] 
     186 002F  C5 36 0000 E                     LDS     SI,[CINSAV] 
     187                                ASSUME  DS:NOTHING 
     188 0033  26: 89 75 19                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS],SI 
     189 0037  26: 8C 5D 1B                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS+2],DS 
     190 003B  26: 88 5D 18                     MOV     ES:[DI.fcb_DEVID],BL 
     191 003F  16                               PUSH    SS 
     192 0040  1F                               POP     DS 
     193                                ASSUME  DS:DOSGROUP 
     194 0041  C6 06 0000 E 00                  MOV     BYTE PTR [CONSWAP],0 
     195 0046  C6 06 0000 E 01                  MOV     BYTE PTR [IDLEINT],1 
     196 004B                           SWAPRET: 
     197 004B  5B                               POP     BX 
     198 004C  5E                               POP     SI 
     199 004D  5F                               POP     DI 
     200 004E  07                               POP     ES 
     201                                        return 
     202 004F                         1 ??0000:
     203 004F  C3                     1  RET
     204                                SWAPBACK    ENDP 
     205                                 
     206                                        procedure   SWAPCON,NEAR 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-6
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

     207 0050                         1 SWAPCON PROC NEAR
     208                                ASSUME  DS:DOSGROUP,ES:NOTHING 
     209 0050  06                               PUSH    ES 
     210 0051  57                               PUSH    DI 
     211 0052  56                               PUSH    SI 
     212 0053  53                               PUSH    BX 
     213 0054  C6 06 0000 E 01                  MOV     BYTE PTR [CONSWAP],1 
     214 0059  C6 06 0000 E 00                  MOV     BYTE PTR [IDLEINT],0 
     215 005E  33 DB                            XOR     BX,BX 
     216                                        invoke  get_sf_from_jfn 
     217 0060  E8 0000 E              1  CALL get_sf_from_jfn
     218 0063  83 C7 03                         ADD     DI,sf_fcb 
     219 0066  26: 8A 5D 18                     MOV     BL,ES:[DI.fcb_DEVID] 
     220 006A  88 1E 0000 E                     MOV     BYTE PTR [CINDSAV],BL 
     221 006E  26: C5 75 19                     LDS     SI,DWORD PTR ES:[DI.fcb
					_FIRCLUS] 
     222                                ASSUME  DS:NOTHING 
     223 0072  36: 89 36 0000 E                 MOV     WORD PTR [CINSAV],SI 
     224 0077  36: 8C 1E 0002 E                 MOV     WORD PTR [CINSAV+2],DS 
     225 007C  36: C5 36 0000 E                 LDS     SI,[THISFCB] 
     226 0081  8A 5C 18                         MOV     BL,[SI.fcb_DEVID] 
     227 0084  C5 74 19                         LDS     SI,DWORD PTR [SI.fcb_FI
					RCLUS] 
     228 0087  26: 88 5D 18                     MOV     ES:[DI.fcb_DEVID],BL 
     229 008B  26: 89 75 19                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS],SI 
     230 008F  26: 8C 5D 1B                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS+2],DS 
     231 0093  16                               PUSH    SS 
     232 0094  1F                               POP     DS 
     233                                ASSUME  DS:DOSGROUP 
     234 0095  BB 0001                          MOV     BX,1 
     235                                        invoke  get_sf_from_jfn 
     236 0098  E8 0000 E              1  CALL get_sf_from_jfn
     237 009B  83 C7 03                         ADD     DI,sf_fcb 
     238 009E  26: 8A 5D 18                     MOV     BL,ES:[DI.fcb_DEVID] 
     239 00A2  88 1E 0000 E                     MOV     BYTE PTR [COUTDSAV],BL 
     240 00A6  26: C5 75 19                     LDS     SI,DWORD PTR ES:[DI.fcb
					_FIRCLUS] 
     241                                ASSUME  DS:NOTHING 
     242 00AA  36: 89 36 0000 E                 MOV     WORD PTR [COUTSAV],SI 
     243 00AF  36: 8C 1E 0002 E                 MOV     WORD PTR [COUTSAV+2],DS
					 
     244 00B4  36: C5 36 0000 E                 LDS     SI,[THISFCB] 
     245 00B9  8A 5C 18                         MOV     BL,[SI.fcb_DEVID] 
     246 00BC  C5 74 19                         LDS     SI,DWORD PTR [SI.fcb_FI
					RCLUS] 
     247 00BF  26: 88 5D 18                     MOV     ES:[DI.fcb_DEVID],BL 
     248 00C3  26: 89 75 19                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS],SI 
     249 00C7  26: 8C 5D 1B                     MOV     WORD PTR ES:[DI.fcb_FIR
					CLUS+2],DS 
     250 00CB  16                               PUSH    SS 
     251 00CC  1F                               POP     DS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-7
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

     252 00CD  E9 004B R                        JMP     SWAPRET 
     253                                SWAPCON ENDP 
     254                                 
     255                                        procedure   LOAD,NEAR 
     256 00D0                         1 LOAD PROC NEAR
     257                                ASSUME  DS:NOTHING,ES:NOTHING 
     258                                ; 
     259                                ; Inputs: 
     260                                ;       DS:DI point to FCB 
     261                                ;       DX:AX = Position in file to rea
					d 
     262                                ;       CX = No. of records to read 
     263                                ; Outputs: 
     264                                ;       DX:AX = Position of last record
					 read 
     265                                ;       CX = No. of bytes read 
     266                                ;       ES:DI point to FCB 
     267                                ;       fcb_LSTCLUS, fcb_CLUSPOS fields
					 in FCB set 
     268                                 
     269 00D0  E8 03ED R                        call    SETUP 
     270                                ASSUME  DS:DOSGROUP 
     271 00D3  0A DB                            OR      BL,BL           ; Check
					 for named device I/O 
     272 00D5  78 04                            JS      READDEV 
     273 00D7  E8 0509 R                        call    DISKREAD 
     274                                        return 
     275 00DA                         1 ??0001:
     276 00DA  C3                     1  RET
     277                                 
     278 00DB                           READDEV: 
     279                                ASSUME  DS:DOSGROUP,ES:NOTHING 
     280 00DB  C4 3E 0000 E                     LES     DI,[DMAADD] 
     281 00DF  F6 C3 40                         TEST    BL,40H                 
					 ; End of file? 
     282 00E2  74 07                            JZ      ENDRDDEVJ3 
     283 00E4  F6 C3 04                         TEST    BL,ISNULL              
					 ; NUL device? 
     284 00E7  74 39                            JZ      TESTRAW                
					 ; NO 
     285 00E9  32 C0                            XOR     AL,AL                  
					 ; Indicate EOF 
     286 00EB  E9 0198 R                ENDRDDEVJ3: JMP ENDRDDEVJ2 
     287                                 
     288 00EE                           DVRDRAW: 
     289                                ASSUME  DS:DOSGROUP 
     290 00EE  06                               PUSH    ES 
     291 00EF  1F                               POP     DS 
     292                                ASSUME  DS:NOTHING 
     293 00F0                           DVRDRAWR: 
     294 00F0  8B DF                            MOV     BX,DI                  
					 ; DS:BX transfer addr 
     295 00F2  33 D2                            XOR     DX,DX                  
					 ; Start at 0 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-8
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

     296 00F4  33 C0                            XOR     AX,AX                  
					 ; Media Byte, unit = 0 
     297                                        invoke  SETREAD 
     298 00F6  E8 0000 E              1  CALL SETREAD
     299 00F9  36: C5 36 0000 E                 LDS     SI,[THISFCB] 
     300                                        invoke  DEVIOCALL 
     301 00FE  E8 0000 E              1  CALL DEVIOCALL
     302 0101  8B D7                            MOV     DX,DI                  
					 ; DX is preserved by INT 24 
     303 0103  B4 86                            MOV     AH,86H                 
					 ; Read error 
     304 0105  36: 8B 3E 0003 E                 MOV     DI,[DEVCALL.REQSTAT] 
     305 010A  F7 C7 8000                       TEST    DI,STERR 
     306 010E  74 09                            JZ      CRDROK                 
					 ; No errors 
     307                                        invoke  CHARHARD 
     308 0110  E8 0000 E              1  CALL CHARHARD
     309 0113  8B FA                            MOV     DI,DX 
     310 0115  3C 01                            CMP     AL,1 
     311 0117  74 D7                            JZ      DVRDRAWR               
					 ; Retry 
     312 0119                           CRDROK: 
     313 0119  8B FA                            MOV     DI,DX 
     314 011B  36: 03 3E 0000 E                 ADD     DI,[CALLSCNT]          
					 ; Amount transferred 
     315 0120  EB 76                            JMP     SHORT ENDRDDEVJ2 
     316                                 
     317 0122                           TESTRAW: 
     318 0122  F6 C3 20                         TEST    BL,020H                
					 ; Raw mode? 
     319 0125  75 C7                            JNZ     DVRDRAW 
     320 0127  F6 C3 01                         TEST    BL,ISCIN               
					 ; Is it console device? 
     321 012A  74 03                            JZ      NOTRDCON 
     322 012C  E9 01CE R                        JMP     READCON 
     323 012F                           NOTRDCON: 
     324 012F  8C C0                            MOV     AX,ES 
     325 0131  8E D8                            MOV     DS,AX 
     326                                ASSUME  DS:NOTHING 
     327 0133  8B DF                            MOV     BX,DI 
     328 0135  33 D2                            XOR     DX,DX 
     329 0137  8B C2                            MOV     AX,DX 
     330 0139  51                               PUSH    CX 
     331 013A  B9 0001                          MOV     CX,1 
     332                                        invoke  SETREAD 
     333 013D  E8 0000 E              1  CALL SETREAD
     334 0140  59                               POP     CX 
     335 0141  36: C5 36 0000 E                 LDS     SI,[THISFCB] 
     336 0146  C5 74 19                         LDS     SI,DWORD PTR [SI.fcb_FI
					RCLUS] 
     337 0149                           DVRDLP: 
     338                                        invoke  DSKSTATCHK 
     339 0149  E8 0000 E              1  CALL DSKSTATCHK
     340                                        invoke  DEVIOCALL2 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-9
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

     341 014C  E8 0000 E              1  CALL DEVIOCALL2
     342 014F  57                               PUSH    DI 
     343 0150  B4 86                            MOV     AH,86H 
     344 0152  36: 8B 3E 0003 E                 MOV     DI,[DEVCALL.REQSTAT] 
     345 0157  F7 C7 8000                       TEST    DI,STERR 
     346 015B  74 13                            JZ      CRDOK 
     347                                        invoke  CHARHARD 
     348 015D  E8 0000 E              1  CALL CHARHARD
     349 0160  5F                               POP     DI 
     350 0161  36: C7 06 0000 E 0001            MOV     [CALLSCNT],1 
     351 0168  3C 01                            CMP     AL,1 
     352 016A  74 DD                            JZ      DVRDLP                 
					 ;Retry 
     353 016C  32 C0                            XOR     AL,AL                  
					 ;Pick some random character 
     354 016E  EB 12                            JMP     SHORT DVRDIGN 
     355 0170                           CRDOK: 
     356 0170  5F                               POP     DI 
     357 0171  36: 83 3E 0000 E 01              CMP     [CALLSCNT],1 
     358 0177  75 1F                            JNZ     ENDRDDEVJ2 
     359 0179  1E                               PUSH    DS 
     360 017A  36: 8E 1E 0002 E                 MOV     DS,WORD PTR [CALLXAD+2]
					 
     361 017F  8A 05                            MOV     AL,BYTE PTR [DI] 
     362 0181  1F                               POP     DS 
     363 0182                           DVRDIGN: 
     364 0182  36: FF 06 0000 E                 INC     WORD PTR [CALLXAD] 
     365 0187  36: C7 06 0003 E 0000            MOV     [DEVCALL.REQSTAT],0 
     366 018E  47                               INC     DI 
     367 018F  3C 1A                            CMP     AL,1AH                 
					 ; ^Z? 
     368 0191  74 04                            JZ      ENDRDDEVJ 
     369 0193  3C 0D                            CMP     AL,c_CR                
					 ; CR? 
     370 0195  E0 B2                            LOOPNZ  DVRDLP 
     371 0197                           ENDRDDEVJ: 
     372 0197  4F                               DEC     DI 
     373 0198                           ENDRDDEVJ2: 
     374 0198  EB 1F                            JMP     SHORT ENDRDDEV 
     375                                 
     376                                ASSUME  DS:NOTHING,ES:NOTHING 
     377                                 
     378 019A                           TRANBUF: 
     379 019A  AC                               LODSB 
     380 019B  AA                               STOSB 
     381 019C  3C 0D                            CMP     AL,c_CR         ; Check
					 for carriage return 
     382 019E  75 03                            JNZ     NORMCH 
     383 01A0  C6 04 0A                         MOV     BYTE PTR [SI],c_LF 
     384 01A3                           NORMCH: 
     385 01A3  3C 0A                            CMP     AL,c_LF 
     386 01A5  E0 F3                            LOOPNZ  TRANBUF 
     387 01A7  75 07                            JNZ     ENDRDCON 
     388 01A9  33 F6                            XOR     SI,SI           ; Cause
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-10
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

					 a new buffer to be read 
     389                                        invoke  OUT             ; Trans
					mit linefeed 
     390 01AB  E8 0000 E              1  CALL OUT
     391 01AE  0C 01                            OR      AL,1            ; Clear
					 zero flag--not end of file 
     392 01B0                           ENDRDCON: 
     393 01B0  16                               PUSH    SS 
     394 01B1  1F                               POP     DS 
     395                                ASSUME  DS:DOSGROUP 
     396 01B2  E8 0000 R                        CALL    SWAPBACK 
     397 01B5  89 36 0000 E                     MOV     [CONTPOS],SI 
     398 01B9                           ENDRDDEV: 
     399 01B9  16                               PUSH    SS 
     400 01BA  1F                               POP     DS 
     401                                ASSUME  DS:DOSGROUP 
     402 01BB  89 3E 0000 E                     MOV     [NEXTADD],DI 
     403 01BF  75 09                            JNZ     SETFCBC         ; Zero 
					set if Ctrl-Z found in input 
     404 01C1  C4 3E 0000 E                     LES     DI,[THISFCB] 
     405 01C5  26: 80 65 18 BF                  AND     ES:BYTE PTR [DI.fcb_DEV
					ID],0FFH-40H ; Mark as no more data ava
					ilable 
     406 01CA                           SETFCBC: 
     407 01CA  E8 0607 R                        call    SETFCB 
     408                                        return 
     409 01CD                         1 ??0002:
     410 01CD  C3                     1  RET
     411                                 
     412                                ASSUME  DS:NOTHING,ES:NOTHING 
     413                                 
     414 01CE                           READCON: 
     415                                ASSUME  DS:DOSGROUP 
     416 01CE  E8 0050 R                        CALL    SWAPCON 
     417 01D1  8B 36 0000 E                     MOV     SI,[CONTPOS] 
     418 01D5  0B F6                            OR      SI,SI 
     419 01D7  75 C1                            JNZ     TRANBUF 
     420 01D9  80 3E 0000 E 80                  CMP     BYTE PTR [CONBUF],128 
     421 01DE  74 06                            JZ      GETBUF 
     422 01E0  C7 06 0000 E FF80                MOV     WORD PTR [CONBUF],0FF80
					H        ; Set up 128-byte buffer with 
					no template 
     423 01E6                           GETBUF: 
     424 01E6  51                               PUSH    CX 
     425 01E7  06                               PUSH    ES 
     426 01E8  57                               PUSH    DI 
     427 01E9  BA 0000 E                        MOV     DX,OFFSET DOSGROUP:CONB
					UF 
     428                                        invoke  $STD_CON_STRING_INPUT  
					         ; Get input buffer 
     429 01EC  E8 0000 E              1  CALL $STD_CON_STRING_INPUT
     430 01EF  5F                               POP     DI 
     431 01F0  07                               POP     ES 
     432 01F1  59                               POP     CX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-11
LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES            

     433 01F2  BE 0002 E                        MOV     SI,2 + OFFSET DOSGROUP:
					CONBUF 
     434 01F5  80 3C 1A                         CMP     BYTE PTR [SI],1AH      
					 ; Check for Ctrl-Z in first character 
     435 01F8  75 A0                            JNZ     TRANBUF 
     436 01FA  B0 1A                            MOV     AL,1AH 
     437 01FC  AA                               STOSB 
     438 01FD  4F                               DEC     DI 
     439 01FE  B0 0A                            MOV     AL,10 
     440                                        invoke  OUT             ; Send 
					linefeed 
     441 0200  E8 0000 E              1  CALL OUT
     442 0203  33 F6                            XOR     SI,SI 
     443 0205  EB A9                            JMP     SHORT ENDRDCON 
     444                                 
     445                                LOAD    ENDP 
     446                                 
     447                                SUBTTL STORE -- MAIN WRITE ROUTINE AND 
					DEVICE OUT ROUTINES 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-12
STORE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES         

     448                                PAGE 
     449                                ASSUME  DS:NOTHING,ES:NOTHING 
     450                                        procedure   STORE,NEAR 
     451 0207                         1 STORE PROC NEAR
     452                                ASSUME  DS:NOTHING,ES:NOTHING 
     453                                 
     454                                ; Inputs: 
     455                                ;       DS:DI point to FCB 
     456                                ;       DX:AX = Position in file of dis
					k transfer 
     457                                ;       CX = Record count 
     458                                ; Outputs: 
     459                                ;       DX:AX = Position of last record
					 written 
     460                                ;       CX = No. of records written 
     461                                ;       ES:DI point to FCB 
     462                                ;       fcb_LSTCLUS, fcb_CLUSPOS fields
					 in FCB set 
     463                                 
     464 0207  E8 03ED R                        call    SETUP 
     465                                ASSUME  DS:DOSGROUP 
     466 020A  0A DB                            OR      BL,BL 
     467 020C  78 65                            JS      WRTDEV 
     468                                        invoke  DATE16 
     469 020E  E8 0000 E              1  CALL DATE16
     470 0211  26: 89 45 14                     MOV     ES:[DI.fcb_FDATE],AX 
     471 0215  26: 89 55 16                     MOV     ES:[DI.fcb_FTIME],DX 
     472 0219  E8 0674 R                        call    DISKWRITE 
     473                                        return 
     474 021C                         1 ??0003:
     475 021C  C3                     1  RET
     476                                 
     477 021D                           WRITECON: 
     478 021D  1E                               PUSH    DS 
     479 021E  16                               PUSH    SS 
     480 021F  1F                               POP     DS 
     481                                ASSUME  DS:DOSGROUP 
     482 0220  E8 0050 R                        CALL    SWAPCON 
     483 0223  1F                               POP     DS 
     484                                ASSUME  DS:NOTHING 
     485 0224  8B F3                            MOV     SI,BX 
     486 0226  51                               PUSH    CX 
     487 0227                           WRCONLP: 
     488 0227  AC                               LODSB 
     489 0228  3C 1A                            CMP     AL,1AH          ; ^Z? 
     490 022A  74 05                            JZ      CONEOF 
     491                                        invoke  OUT 
     492 022C  E8 0000 E              1  CALL OUT
     493 022F  E2 F6                            LOOP    WRCONLP 
     494 0231                           CONEOF: 
     495 0231  58                               POP     AX                     
					 ; Count 
     496 0232  2B C1                            SUB     AX,CX                  
					 ; Amount actually written 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-13
STORE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES         

     497 0234  1F                               POP     DS 
     498                                ASSUME  DS:DOSGROUP 
     499 0235  E8 0000 R                        CALL    SWAPBACK 
     500 0238  EB 29                            JMP     SHORT ENDWRDEV 
     501                                 
     502 023A                           DVWRTRAW: 
     503                                ASSUME  DS:NOTHING 
     504 023A  33 C0                            XOR     AX,AX                  
					 ; Media Byte, unit = 0 
     505                                        invoke  SETWRITE 
     506 023C  E8 0000 E              1  CALL SETWRITE
     507 023F  36: C5 36 0000 E                 LDS     SI,[THISFCB] 
     508                                        invoke  DEVIOCALL 
     509 0244  E8 0000 E              1  CALL DEVIOCALL
     510 0247  8B D7                            MOV     DX,DI 
     511 0249  B4 87                            MOV     AH,87H 
     512 024B  36: 8B 3E 0003 E                 MOV     DI,[DEVCALL.REQSTAT] 
     513 0250  F7 C7 8000                       TEST    DI,STERR 
     514 0254  74 09                            JZ      CWRTROK 
     515                                        invoke  CHARHARD 
     516 0256  E8 0000 E              1  CALL CHARHARD
     517 0259  8B DA                            MOV     BX,DX                  
					 ; Recall transfer addr 
     518 025B  3C 01                            CMP     AL,1 
     519 025D  74 DB                            JZ      DVWRTRAW               
					 ; Try again 
     520 025F                           CWRTROK: 
     521 025F  1F                               POP     DS 
     522                                ASSUME  DS:DOSGROUP 
     523 0260  A1 0000 E                        MOV     AX,[CALLSCNT]          
					 ; Get actual number of bytes transferr
					ed 
     524 0263                           ENDWRDEV: 
     525 0263  C4 3E 0000 E                     LES     DI,[THISFCB] 
     526 0267  33 D2                            XOR     DX,DX 
     527 0269  26: F7 75 0E                     DIV     ES:[DI.fcb_RECSIZ] 
     528 026D  8B C8                            MOV     CX,AX                  
					 ; Partial record is ignored 
     529 026F  E8 0663 R                        call    ADDREC 
     530                                        return 
     531 0272                         1 ??0004:
     532 0272  C3                     1  RET
     533                                 
     534                                ASSUME  DS:DOSGROUP 
     535 0273                           WRTDEV: 
     536 0273  80 CB 40                         OR      BL,40H          ; Reset
					 EOF for input 
     537 0276  33 C0                            XOR     AX,AX 
     538 0278  E3 E9                            JCXZ    ENDWRDEV        ; probl
					em of creating on a device. 
     539 027A  1E                               PUSH    DS 
     540 027B  8A C3                            MOV     AL,BL 
     541 027D  C5 1E 0000 E                     LDS     BX,[DMAADD] 
     542                                ASSUME  DS:NOTHING 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-14
STORE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES         

     543 0281  8B FB                            MOV     DI,BX 
     544 0283  33 D2                            XOR     DX,DX                  
					 ; Set starting point 
     545 0285  A8 20                            TEST    AL,020H                
					 ; Raw? 
     546 0287  75 B1                            JNZ     DVWRTRAW 
     547 0289  A8 02                            TEST    AL,ISCOUT              
					 ; Console output device? 
     548 028B  75 90                            JNZ     WRITECON 
     549 028D  A8 04                            TEST    AL,ISNULL 
     550 028F  75 67                            JNZ     WRTNUL 
     551 0291  8B C2                            MOV     AX,DX 
     552 0293  80 3F 1A                         CMP     BYTE PTR [BX],1AH      
					 ; ^Z? 
     553 0296  74 5A                            JZ      WRTCOOKDONE            
					 ; Yes, transfer nothing 
     554 0298  51                               PUSH    CX 
     555 0299  B9 0001                          MOV     CX,1 
     556                                        invoke  SETWRITE 
     557 029C  E8 0000 E              1  CALL SETWRITE
     558 029F  59                               POP     CX 
     559 02A0  36: C5 36 0000 E                 LDS     SI,[THISFCB] 
     560 02A5  C5 74 19                         LDS     SI,DWORD PTR [SI.fcb_FI
					RCLUS] 
     561 02A8                           DVWRTLP: 
     562                                        invoke  DSKSTATCHK 
     563 02A8  E8 0000 E              1  CALL DSKSTATCHK
     564                                        invoke  DEVIOCALL2 
     565 02AB  E8 0000 E              1  CALL DEVIOCALL2
     566 02AE  57                               PUSH    DI 
     567 02AF  B4 87                            MOV     AH,87H 
     568 02B1  36: 8B 3E 0003 E                 MOV     DI,[DEVCALL.REQSTAT] 
     569 02B6  F7 C7 8000                       TEST    DI,STERR 
     570 02BA  74 11                            JZ      CWROK 
     571                                        invoke  CHARHARD 
     572 02BC  E8 0000 E              1  CALL CHARHARD
     573 02BF  5F                               POP     DI 
     574 02C0  36: C7 06 0000 E 0001            MOV     [CALLSCNT],1 
     575 02C7  3C 01                            CMP     AL,1 
     576 02C9  74 DD                            JZ      DVWRTLP 
     577 02CB  EB 09                            JMP     SHORT DVWRTIGN 
     578 02CD                           CWROK: 
     579 02CD  5F                               POP     DI 
     580 02CE  36: 83 3E 0000 E 00              CMP     [CALLSCNT],0 
     581 02D4  74 1C                            JZ      WRTCOOKDONE 
     582 02D6                           DVWRTIGN: 
     583 02D6  42                               INC     DX 
     584 02D7  36: FF 06 0000 E                 INC     WORD PTR [CALLXAD] 
     585 02DC  47                               INC     DI 
     586 02DD  1E                               PUSH    DS 
     587 02DE  36: 8E 1E 0002 E                 MOV     DS,WORD PTR [CALLXAD+2]
					 
     588 02E3  80 3D 1A                         CMP     BYTE PTR [DI],1AH      
					 ; ^Z? 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-15
STORE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES         

     589 02E6  1F                               POP     DS 
     590 02E7  74 09                            JZ      WRTCOOKDONE 
     591 02E9  36: C7 06 0003 E 0000            MOV     [DEVCALL.REQSTAT],0 
     592 02F0  E2 B6                            LOOP    DVWRTLP 
     593 02F2                           WRTCOOKDONE: 
     594 02F2  8B C2                            MOV     AX,DX 
     595 02F4  1F                               POP     DS 
     596 02F5  E9 0263 R                        JMP     ENDWRDEV 
     597                                 
     598 02F8                           WRTNUL: 
     599 02F8  8B D1                            MOV     DX,CX                  
					 ;Entire transfer done 
     600 02FA  EB F6                            JMP     WRTCOOKDONE 
     601                                 
     602                                STORE   ENDP 
     603                                 
     604                                        procedure   get_io_fcb,near 
     605 02FC                         1 get_io_fcb PROC near
     606                                ASSUME  DS:NOTHING,ES:NOTHING 
     607                                ; Convert JFN number in BX to FCB in DS
					:SI 
     608 02FC  16                               PUSH    SS 
     609 02FD  1F                               POP     DS 
     610                                ASSUME  DS:DOSGROUP 
     611 02FE  06                               PUSH    ES 
     612 02FF  57                               PUSH    DI 
     613                                        invoke  get_sf_from_jfn 
     614 0300  E8 0000 E              1  CALL get_sf_from_jfn
     615 0303  72 07                            JC      RET44P 
     616 0305  8B F7                            MOV     SI,DI 
     617 0307  83 C6 03                         ADD     SI,sf_fcb 
     618 030A  06                               PUSH    ES 
     619 030B  1F                               POP     DS 
     620                                ASSUME  DS:NOTHING 
     621 030C                           RET44P: 
     622 030C  5F                               POP     DI 
     623 030D  07                               POP     ES 
     624                                        return 
     625 030E                         1 ??0005:
     626 030E  C3                     1  RET
     627                                get_io_fcb  ENDP 
     628                                 
     629                                SUBTTL GETTHISDRV -- FIND CURRENT DRIVE
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-16
GETTHISDRV -- FIND CURRENT DRIVE                            

     630                                PAGE 
     631                                ; Input:    AL has drive identifier (1=
					A, 0=default) 
     632                                ; Output:   AL has physical drive (0=A)
					 
     633                                ; Carry set if invalid drive (and AL is
					 garbage anyway) 
     634                                        procedure   GetThisDrv,NEAR 
     635 030F                         1 GetThisDrv PROC NEAR
     636                                ASSUME  DS:NOTHING,ES:NOTHING 
     637 030F  36: 38 06 0000 E                 CMP     BYTE PTR [NUMIO],AL 
     638                                        retc 
     639 0314  72 F8                  2  ??0006: jc ret_l
     640 0316  FE C8                            DEC     AL 
     641 0318  79 04                            JNS     PHYDRV 
     642 031A  36: A0 0000 E                    MOV     AL,[CURDRV] 
     643 031E                           PHYDRV: 
     644 031E  36: A2 0000 E                    MOV     BYTE PTR [THISDRV],AL 
     645                                        return 
     646 0322                         1 ??0008:
     647 0322  C3                     1  RET
     648                                GetThisDrv  ENDP 
     649                                 
     650                                SUBTTL DIRREAD -- READ A DIRECTORY SECT
					OR 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-17
DIRREAD -- READ A DIRECTORY SECTOR                          

     651                                PAGE 
     652                                        procedure   DirRead,NEAR 
     653 0323                         1 DirRead PROC NEAR
     654                                ASSUME  DS:DOSGROUP,ES:NOTHING 
     655                                 
     656                                ; Inputs: 
     657                                ;       AX = Directory block number (re
					lative to first block of directory) 
     658                                ;       ES:BP = Base of drive parameter
					s 
     659                                ;       [DIRSEC] = First sector of firs
					t cluster of directory 
     660                                ;       [CLUSNUM] = Next cluster 
     661                                ;       [CLUSFAC] = Sectors/Cluster 
     662                                ; Function: 
     663                                ;       Read the directory block into [
					CURBUF]. 
     664                                ; Outputs: 
     665                                ;       [NXTCLUSNUM] = Next cluster (af
					ter the one skipped to) 
     666                                ;       [SECCLUSPOS] Set 
     667                                ;       ES:BP unchanged [CURBUF] Points
					 to Buffer with dir sector 
     668                                ; All other registers destroyed. 
     669                                 
     670 0323  8A 0E 0000 E                     MOV     CL,[CLUSFAC] 
     671 0327  F6 F1                            DIV     CL              ; AL # 
					clusters to skip, AH position in cluste
					r 
     672 0329  88 26 0000 E                     MOV     [SECCLUSPOS],AH 
     673 032D  8A C8                            MOV     CL,AL 
     674 032F  32 ED                            XOR     CH,CH 
     675 0331  8B 16 0000 E                     MOV     DX,[DIRSEC] 
     676 0335  02 D4                            ADD     DL,AH 
     677 0337  80 D6 00                         ADC     DH,0 
     678 033A  8B 1E 0000 E                     MOV     BX,[CLUSNUM] 
     679 033E  89 1E 0000 E                     MOV     [NXTCLUSNUM],BX 
     680 0342  E3 18                            JCXZ    FIRSTCLUSTER 
     681 0344                           SKPCLLP: 
     682                                        invoke  UNPACK 
     683 0344  E8 0000 E              1  CALL UNPACK
     684 0347  87 DF                            XCHG    BX,DI 
     685 0349  81 FB 0FF8                       CMP     BX,0FF8H 
     686 034D  73 02                            JAE     HAVESKIPPED 
     687 034F  E2 F3                            LOOP    SKPCLLP 
     688 0351                           HAVESKIPPED: 
     689 0351  89 1E 0000 E                     MOV     [NXTCLUSNUM],BX 
     690 0355  8B D7                            MOV     DX,DI 
     691 0357  8A DC                            MOV     BL,AH 
     692                                        invoke  FIGREC 
     693 0359  E8 0000 E              1  CALL FIGREC
     694                                        entry   FIRSTCLUSTER 
     695 035C                         1 FIRSTCLUSTER:
     696 035C  32 C0                            XOR     AL,AL           ; Indic
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-18
DIRREAD -- READ A DIRECTORY SECTOR                          

					ate pre-read 
     697 035E  B4 0F                            MOV     AH,DIRPRI 
     698                                        invoke  GETBUFFR 
     699 0360  E8 0000 E              1  CALL GETBUFFR
     700 0363  C3                               ret 
     701                                DirRead ENDP 
     702                                 
     703                                SUBTTL FATSECRD -- READ A FAT SECTOR 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-19
FATSECRD -- READ A FAT SECTOR                               

     704                                PAGE 
     705                                        procedure   FATSecRd,NEAR 
     706 0364                         1 FATSecRd PROC NEAR
     707                                ASSUME  DS:NOTHING,ES:NOTHING 
     708                                 
     709                                ; Inputs: 
     710                                ;       Same as DREAD 
     711                                ;       DS:BX = Transfer address 
     712                                ;       CX = Number of sectors 
     713                                ;       DX = Absolute record number 
     714                                ;       ES:BP = Base of drive parameter
					s 
     715                                ; Function: 
     716                                ;       Calls BIOS to perform FAT read.
					 
     717                                ; Outputs: 
     718                                ;       Same as DREAD 
     719                                 
     720 0364  8B F9                            MOV     DI,CX 
     721 0366  26: 8A 4E 08                     MOV     CL,ES:[BP.dpb_FAT_count
					] 
     722 036A  26: 8A 46 0F                     MOV     AL,ES:[BP.dpb_FAT_size]
					 
     723 036E  32 E4                            XOR     AH,AH 
     724 0370  8A EC                            MOV     CH,AH 
     725 0372  52                               PUSH    DX 
     726 0373                           NXTFAT: 
     727 0373  51                               PUSH    CX 
     728 0374  50                               PUSH    AX 
     729 0375  8B CF                            MOV     CX,DI 
     730 0377  E8 039A R                        CALL    DSKREAD 
     731 037A  58                               POP     AX 
     732 037B  59                               POP     CX 
     733 037C  74 1A                            JZ      RET41P 
     734 037E  03 D0                            ADD     DX,AX 
     735 0380  E2 F1                            LOOP    NXTFAT 
     736 0382  5A                               POP     DX 
     737 0383  8B CF                            MOV     CX,DI 
     738                                 
     739                                ; NOTE FALL THROUGH 
     740                                 
     741                                SUBTTL DREAD -- DO A DISK READ 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-20
DREAD -- DO A DISK READ                                     

     742                                PAGE 
     743                                        entry   DREAD 
     744 0385                         1 DREAD:
     745                                ASSUME  DS:NOTHING,ES:NOTHING 
     746                                 
     747                                ; Inputs: 
     748                                ;       DS:BX = Transfer address 
     749                                ;       CX = Number of sectors 
     750                                ;       DX = Absolute record number 
     751                                ;       ES:BP = Base of drive parameter
					s 
     752                                ; Function: 
     753                                ;       Calls BIOS to perform disk read
					. If BIOS reports 
     754                                ;       errors, will call HARDERR for f
					urther action. 
     755                                ; DS,ES:BP preserved. All other registe
					rs destroyed. 
     756                                 
     757 0385  E8 039A R                        CALL    DSKREAD 
     758                                        retz 
     759 0388  74 98                  2  ??0009: jz ret_l
     760 038A  36: C6 06 0000 E 00              MOV     BYTE PTR [READOP],0 
     761                                        invoke  HARDERR 
     762 0390  E8 0000 E              1  CALL HARDERR
     763 0393  3C 01                            CMP     AL,1            ; Check
					 for retry 
     764 0395  74 EE                            JZ      DREAD 
     765                                        return                  ; Ignor
					e otherwise 
     766 0397                         1 ??000B:
     767 0397  C3                     1  RET
     768 0398  5A                       RET41P: POP     DX 
     769                                        return 
     770 0399                         1 ??000C:
     771 0399  C3                     1  RET
     772                                FATSecRd    ENDP 
     773                                 
     774                                SUBTTL DSKREAD -- PHYSICAL DISK READ 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-21
DSKREAD -- PHYSICAL DISK READ                               

     775                                PAGE 
     776                                        procedure   DskRead,NEAR 
     777 039A                         1 DskRead PROC NEAR
     778                                ASSUME  DS:NOTHING,ES:NOTHING 
     779                                 
     780                                ; Inputs: 
     781                                ;       DS:BX = Transfer addr 
     782                                ;       CX = Number of sectors 
     783                                ;       DX = Absolute record number 
     784                                ;       ES:BP = Base of drive parameter
					s 
     785                                ; Function: 
     786                                ;       Call BIOS to perform disk read 
     787                                ; Outputs: 
     788                                ;       DI = CX on entry 
     789                                ;       CX = Number of sectors unsucces
					sfully transfered 
     790                                ;       AX = Status word as returned by
					 BIOS (error code in AL if error) 
     791                                ;       Zero set if OK (from BIOS) 
     792                                ;       Zero clear if error 
     793                                ; SI Destroyed, others preserved 
     794                                 
     795 039A  51                               PUSH    CX 
     796 039B  26: 8A 66 16                     MOV     AH,ES:[BP.dpb_media] 
     797 039F  26: 8A 46 01                     MOV     AL,ES:[BP.dpb_UNIT] 
     798 03A3  53                               PUSH    BX 
     799 03A4  06                               PUSH    ES 
     800                                        invoke  SETREAD 
     801 03A5  E8 0000 E              1  CALL SETREAD
     802 03A8  EB 22 90                         JMP     DODSKOP 
     803                                 
     804                                SUBTTL DWRITE -- SEE ABOUT WRITING 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-22
DWRITE -- SEE ABOUT WRITING                                 

     805                                PAGE 
     806                                        entry   DWRITE 
     807 03AB                         1 DWRITE:
     808                                ASSUME  DS:NOTHING,ES:NOTHING 
     809                                 
     810                                ; Inputs: 
     811                                ;       DS:BX = Transfer address 
     812                                ;       CX = Number of sectors 
     813                                ;       DX = Absolute record number 
     814                                ;       ES:BP = Base of drive parameter
					s 
     815                                ; Function: 
     816                                ;       Calls BIOS to perform disk writ
					e. If BIOS reports 
     817                                ;       errors, will call HARDERR for f
					urther action. 
     818                                ; BP preserved. All other registers des
					troyed. 
     819                                 
     820 03AB  E8 03BE R                        CALL    DSKWRITE 
     821                                        retz 
     822 03AE  74 E9                  2  ??000D: jz ret_l
     823 03B0  36: C6 06 0000 E 01              MOV     BYTE PTR [READOP],1 
     824                                        invoke  HARDERR 
     825 03B6  E8 0000 E              1  CALL HARDERR
     826 03B9  3C 01                            CMP     AL,1            ; Check
					 for retry 
     827 03BB  74 EE                            JZ      DWRITE 
     828                                        return 
     829 03BD                         1 ??000F:
     830 03BD  C3                     1  RET
     831                                 
     832                                SUBTTL DSKWRITE -- PHYSICAL DISK WRITE 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-23
DSKWRITE -- PHYSICAL DISK WRITE                             

     833                                PAGE 
     834                                        entry   DSKWRITE 
     835 03BE                         1 DSKWRITE:
     836                                ASSUME  DS:NOTHING,ES:NOTHING 
     837                                 
     838                                ; Inputs: 
     839                                ;       DS:BX = Transfer addr 
     840                                ;       CX = Number of sectors 
     841                                ;       DX = Absolute record number 
     842                                ;       ES:BP = Base of drive parameter
					s 
     843                                ; Function: 
     844                                ;       Call BIOS to perform disk read 
     845                                ; Outputs: 
     846                                ;       DI = CX on entry 
     847                                ;       CX = Number of sectors unsucces
					sfully transfered 
     848                                ;       AX = Status word as returned by
					 BIOS (error code in AL if error) 
     849                                ;       Zero set if OK (from BIOS) 
     850                                ;       Zero clear if error 
     851                                ; SI Destroyed, others preserved 
     852                                 
     853 03BE  51                               PUSH    CX 
     854 03BF  26: 8A 66 16                     MOV     AH,ES:[BP.dpb_media] 
     855 03C3  26: 8A 46 01                     MOV     AL,ES:[BP.dpb_UNIT] 
     856 03C7  53                               PUSH    BX 
     857 03C8  06                               PUSH    ES 
     858                                        invoke  SETWRITE 
     859 03C9  E8 0000 E              1  CALL SETWRITE
     860 03CC                           DODSKOP: 
     861 03CC  8C D9                            MOV     CX,DS           ; Save 
					DS 
     862 03CE  1F                               POP     DS              ; DS:BP
					 points to DPB 
     863 03CF  1E                               PUSH    DS 
     864 03D0  3E: C5 76 12                     LDS     SI,DS:[BP.dpb_driver_ad
					dr] 
     865                                        invoke  DEVIOCALL2 
     866 03D4  E8 0000 E              1  CALL DEVIOCALL2
     867 03D7  8E D9                            MOV     DS,CX           ; Resto
					re DS 
     868 03D9  07                               POP     ES              ; Resto
					re ES 
     869 03DA  5B                               POP     BX 
     870 03DB  36: 8B 0E 0000 E                 MOV     CX,[CALLSCNT]   ; Numbe
					r of sectors transferred 
     871 03E0  5F                               POP     DI 
     872 03E1  2B CF                            SUB     CX,DI 
     873 03E3  F7 D9                            NEG     CX              ; Numbe
					r of sectors not transferred 
     874 03E5  36: A1 0003 E                    MOV     AX,[DEVCALL.REQSTAT] 
     875 03E9  A9 8000                          TEST    AX,STERR 
     876                                        return 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-24
DSKWRITE -- PHYSICAL DISK WRITE                             

     877 03EC                         1 ??0010:
     878 03EC  C3                     1  RET
     879                                DskRead ENDP 
     880                                 
     881                                SUBTTL SETUP -- SETUP A DISK READ OR WR
					ITE FROM USER 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-25
SETUP -- SETUP A DISK READ OR WRITE FROM USER               

     882                                PAGE 
     883                                ASSUME  DS:DOSGROUP,ES:NOTHING 
     884                                 
     885                                        procedure   SETUP,NEAR 
     886 03ED                         1 SETUP PROC NEAR
     887                                ASSUME  DS:NOTHING,ES:NOTHING 
     888                                 
     889                                ; Inputs: 
     890                                ;       DS:DI point to FCB 
     891                                ;       DX:AX = Record position in file
					 of disk transfer 
     892                                ;       CX = Record count 
     893                                ; Outputs: 
     894                                ;       DS = DOSGROUP 
     895                                ;       BL = fcb_DEVID from FCB 
     896                                ;       CX = No. of bytes to transfer  
					(0 = 64K) 
     897                                ;       [THISDPB] = Base of drive param
					eters 
     898                                ;       [RECCNT] = Record count 
     899                                ;       [RECPOS] = Record position in f
					ile 
     900                                ;       ES:DI Points to FCB 
     901                                ;       [THISFCB] = ES:DI 
     902                                ;       [NEXTADD] = Displacement of dis
					k transfer within segment 
     903                                ;       [SECPOS] = Position of first se
					ctor 
     904                                ;       [BYTPOS] = Byte position in fil
					e 
     905                                ;       [BYTSECPOS] = Byte position in 
					first sector 
     906                                ;       [CLUSNUM] = First cluster 
     907                                ;       [SECCLUSPOS] = Sector within fi
					rst cluster 
     908                                ;       [DSKERR] = 0 (no errors yet) 
     909                                ;       [TRANS] = 0 (No transfers yet) 
     910                                ;       [THISDRV] = Physical drive unit
					 number 
     911                                 
     912 03ED  50                               PUSH    AX 
     913 03EE  8A 05                            MOV     AL,[DI] 
     914 03F0  FE C8                            DEC     AL 
     915 03F2  36: A2 0000 E                    MOV     BYTE PTR [THISDRV],AL 
     916 03F6  8A 45 18                         MOV     AL,[DI.fcb_DEVID] 
     917 03F9  8B 75 0E                         MOV     SI,[DI.fcb_RECSIZ] 
     918 03FC  0B F6                            OR      SI,SI 
     919 03FE  75 06                            JNZ     HAVRECSIZ 
     920 0400  BE 0080                          MOV     SI,128 
     921 0403  89 75 0E                         MOV     [DI.fcb_RECSIZ],SI 
     922 0406                           HAVRECSIZ: 
     923 0406  36: 8C 1E 0002 E                 MOV     WORD PTR [THISFCB+2],DS
					 
     924 040B  16                               PUSH    SS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-26
SETUP -- SETUP A DISK READ OR WRITE FROM USER               

     925 040C  1F                               POP     DS              ; Set D
					S to DOSGROUP 
     926                                ASSUME  DS:DOSGROUP 
     927 040D  89 3E 0000 E                     MOV     WORD PTR [THISFCB],DI 
     928 0411  0A C0                            OR      AL,AL           ; Is it
					 a device? 
     929 0413  79 02                            JNS     NOTDEVICE 
     930 0415  32 C0                            XOR     AL,AL           ; Fake 
					in drive 0 so we can get BP 
     931 0417                           NOTDEVICE: 
     932                                        invoke  GETBP 
     933 0417  E8 0000 E              1  CALL GETBP
     934 041A  58                               POP     AX 
     935 041B  73 09                            JNC     CheckRecLen 
     936 041D  33 C9                            XOR     CX,CX 
     937 041F  C6 06 0000 E 04                  MOV     BYTE PTR [DSKERR],4 
     938 0424  5B                               POP     BX 
     939                                        return 
     940 0425                         1 ??0011:
     941 0425  C3                     1  RET
     942                                 
     943 0426                           CheckRecLen: 
     944 0426  83 FE 40                         CMP     SI,64           ; Check
					 if highest byte of RECPOS is significa
					nt 
     945 0429  72 02                            JB      SMALREC 
     946 042B  32 F6                            XOR     DH,DH           ; Ignor
					e MSB if record >= 64 bytes 
     947 042D                           SMALREC: 
     948 042D  89 0E 0000 E                     MOV     [RECCNT],CX 
     949 0431  A3 0000 E                        MOV     WORD PTR [RECPOS],AX 
     950 0434  89 16 0002 E                     MOV     WORD PTR [RECPOS+2],DX 
     951 0438  8B 1E 0000 E                     MOV     BX,WORD PTR [DMAADD] 
     952 043C  89 1E 0000 E                     MOV     [NEXTADD],BX 
     953 0440  C6 06 0000 E 00                  MOV     BYTE PTR [DSKERR],0 
     954 0445  C6 06 0000 E 00                  MOV     BYTE PTR [TRANS],0 
     955 044A  8B DA                            MOV     BX,DX 
     956 044C  F7 E6                            MUL     SI 
     957 044E  A3 0000 E                        MOV     WORD PTR [BYTPOS],AX 
     958 0451  52                               PUSH    DX 
     959 0452  8B C3                            MOV     AX,BX 
     960 0454  F7 E6                            MUL     SI 
     961 0456  5B                               POP     BX 
     962 0457  03 C3                            ADD     AX,BX 
     963 0459  83 D2 00                         ADC     DX,0            ; Rippl
					e carry 
     964 045C  75 5E                            JNZ     EOFERR 
     965 045E  A3 0002 E                        MOV     WORD PTR [BYTPOS+2],AX 
     966 0461  8B D0                            MOV     DX,AX 
     967 0463  A1 0000 E                        MOV     AX,WORD PTR [BYTPOS] 
     968 0466  26: 8B 5E 02                     MOV     BX,ES:[BP.dpb_sector_si
					ze] 
     969 046A  3B D3                            CMP     DX,BX           ; See i
					f divide will overflow 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-27
SETUP -- SETUP A DISK READ OR WRITE FROM USER               

     970 046C  73 4E                            JNC     EOFERR 
     971 046E  F7 F3                            DIV     BX 
     972 0470  A3 0000 E                        MOV     [SECPOS],AX 
     973 0473  89 16 0000 E                     MOV     [BYTSECPOS],DX 
     974 0477  8B D0                            MOV     DX,AX 
     975 0479  26: 22 46 04                     AND     AL,ES:[BP.dpb_cluster_m
					ask] 
     976 047D  A2 0000 E                        MOV     [SECCLUSPOS],AL 
     977 0480  8B C1                            MOV     AX,CX           ; Recor
					d count 
     978 0482  26: 8A 4E 05                     MOV     CL,ES:[BP.dpb_cluster_s
					hift] 
     979 0486  D3 EA                            SHR     DX,CL 
     980 0488  89 16 0000 E                     MOV     [CLUSNUM],DX 
     981 048C  F7 E6                            MUL     SI              ; Multi
					ply by bytes per record 
     982 048E  8B C8                            MOV     CX,AX 
     983 0490  03 06 0000 E                     ADD     AX,WORD PTR [DMAADD]   
					  ; See if it will fit in one segment 
     984 0494  83 D2 00                         ADC     DX,0 
     985 0497  74 1A                            JZ      OK              ; Must 
					be less than 64K 
     986 0499  A1 0000 E                        MOV     AX,WORD PTR [DMAADD] 
     987 049C  F7 D8                            NEG     AX              ; Amoun
					t of room left in segment 
     988 049E  75 01                            JNZ     PARTSEG 
     989 04A0  48                               DEC     AX 
     990 04A1                           PARTSEG: 
     991 04A1  33 D2                            XOR     DX,DX 
     992 04A3  F7 F6                            DIV     SI              ; How m
					any records will fit? 
     993 04A5  A3 0000 E                        MOV     [RECCNT],AX 
     994 04A8  F7 E6                            MUL     SI              ; Trans
					late that back into bytes 
     995 04AA  C6 06 0000 E 02                  MOV     BYTE PTR [DSKERR],2    
					  ; Flag that trimming took place 
     996 04AF  8B C8                            MOV     CX,AX 
     997 04B1  E3 10                            JCXZ    NOROOM 
     998 04B3                           OK: 
     999 04B3  C4 3E 0000 E                     LES     DI,[THISFCB] 
    1000 04B7  26: 8A 5D 18                     MOV     BL,ES:[DI.fcb_DEVID] 
    1001                                        return 
    1002 04BB                         1 ??0012:
    1003 04BB  C3                     1  RET
    1004                                 
    1005 04BC                           EOFERR: 
    1006 04BC  C6 06 0000 E 01                  MOV     BYTE PTR [DSKERR],1 
    1007 04C1  33 C9                            XOR     CX,CX 
    1008 04C3                           NOROOM: 
    1009 04C3  C4 3E 0000 E                     LES     DI,[THISFCB] 
    1010 04C7  5B                               POP     BX              ; Kill 
					return address 
    1011                                        return 
    1012 04C8                         1 ??0013:
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-28
SETUP -- SETUP A DISK READ OR WRITE FROM USER               

    1013 04C8  C3                     1  RET
    1014                                SETUP   ENDP 
    1015                                 
    1016                                SUBTTL BREAKDOWN -- CUT A USER READ OR 
					WRITE INTO PIECES 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-29
BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES           

    1017                                PAGE 
    1018                                        procedure   BREAKDOWN,near 
    1019 04C9                         1 BREAKDOWN PROC near
    1020                                ASSUME  DS:DOSGROUP,ES:NOTHING 
    1021                                 
    1022                                ; Inputs: 
    1023                                ;       CX = Length of disk transfer in
					 bytes 
    1024                                ;       ES:BP = Base of drive parameter
					s 
    1025                                ;       [BYTSECPOS] = Byte position wit
					in first sector 
    1026                                ; Outputs: 
    1027                                ;       [BYTCNT1] = Bytes to transfer i
					n first sector 
    1028                                ;       [SECCNT] = No. of whole sectors
					 to transfer 
    1029                                ;       [BYTCNT2] = Bytes to transfer i
					n last sector 
    1030                                ; AX, BX, DX destroyed. No other regist
					ers affected. 
    1031                                 
    1032 04C9  A1 0000 E                        MOV     AX,[BYTSECPOS] 
    1033 04CC  8B D9                            MOV     BX,CX 
    1034 04CE  0B C0                            OR      AX,AX 
    1035 04D0  74 0E                            JZ      SAVFIR          ; Parti
					al first sector? 
    1036 04D2  26: 2B 46 02                     SUB     AX,ES:[BP.dpb_sector_si
					ze] 
    1037 04D6  F7 D8                            NEG     AX              ; Max n
					umber of bytes left in first sector 
    1038 04D8  2B D8                            SUB     BX,AX           ; Subtr
					act from total length 
    1039 04DA  73 04                            JAE     SAVFIR 
    1040 04DC  03 C3                            ADD     AX,BX           ; Don't
					 use all of the rest of the sector 
    1041 04DE  33 DB                            XOR     BX,BX           ; And n
					o bytes are left 
    1042 04E0                           SAVFIR: 
    1043 04E0  A3 0000 E                        MOV     [BYTCNT1],AX 
    1044 04E3  8B C3                            MOV     AX,BX 
    1045 04E5  33 D2                            XOR     DX,DX 
    1046 04E7  26: F7 76 02                     DIV     ES:[BP.dpb_sector_size]
					  ; How many whole sectors? 
    1047 04EB  A3 0000 E                        MOV     [SECCNT],AX 
    1048 04EE  89 16 0000 E                     MOV     [BYTCNT2],DX    ; Bytes
					 remaining for last sector 
    1049 04F2  0B 16 0000 E                     OR      DX,[BYTCNT1] 
    1050                                        retnz                   ; NOT (
					BYTCNT1 = BYTCNT2 = 0) 
    1051 04F6  75 D0                  2  ??0014: jnz ret_l
    1052 04F8  3D 0001                          CMP     AX,1 
    1053                                        retnz 
    1054 04FB  75 CB                  2  ??0016: jnz ret_l
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-30
BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES           

    1055 04FD  26: 8B 46 02                     MOV     AX,ES:[BP.dpb_sector_si
					ze]       ; Buffer EXACT one sector I/O
					 
    1056 0501  A3 0000 E                        MOV     [BYTCNT2],AX 
    1057 0504  89 16 0000 E                     MOV     [SECCNT],DX            
					 ; DX = 0 
    1058                                        return 
    1059 0508                         1 ??0018:
    1060 0508  C3                     1  RET
    1061                                BreakDown   ENDP 
    1062                                 
    1063                                SUBTTL DISKREAD -- PERFORM USER DISK RE
					AD 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-31
DISKREAD -- PERFORM USER DISK READ                          

    1064                                PAGE 
    1065                                        procedure   DISKREAD,NEAR 
    1066 0509                         1 DISKREAD PROC NEAR
    1067                                ASSUME  DS:DOSGROUP,ES:NOTHING 
    1068                                 
    1069                                ; Inputs: 
    1070                                ;       Outputs of SETUP 
    1071                                ; Function: 
    1072                                ;       Perform disk read 
    1073                                ; Outputs: 
    1074                                ;       DX:AX = Position of last record
					 read 
    1075                                ;       CX = No. of records read 
    1076                                ;       ES:DI point to FCB 
    1077                                ;       fcb_LSTCLUS, fcb_CLUSPOS fields
					 in FCB set 
    1078                                 
    1079 0509  26: 8B 45 10                     MOV     AX,ES:WORD PTR [DI.fcb_
					FILSIZ] 
    1080 050D  26: 8B 5D 12                     MOV     BX,ES:WORD PTR [DI.fcb_
					FILSIZ+2] 
    1081 0511  2B 06 0000 E                     SUB     AX,WORD PTR [BYTPOS] 
    1082 0515  1B 1E 0002 E                     SBB     BX,WORD PTR [BYTPOS+2] 
    1083 0519  72 1E                            JB      RDERR 
    1084 051B  75 0A                            JNZ     ENUF 
    1085 051D  0B C0                            OR      AX,AX 
    1086 051F  74 18                            JZ      RDERR 
    1087 0521  3B C1                            CMP     AX,CX 
    1088 0523  73 02                            JAE     ENUF 
    1089 0525  8B C8                            MOV     CX,AX 
    1090 0527                           ENUF: 
    1091 0527  C4 2E 0000 E                     LES     BP,[THISDPB] 
    1092 052B  E8 04C9 R                        CALL    BREAKDOWN 
    1093 052E  8B 0E 0000 E                     MOV     CX,[CLUSNUM] 
    1094                                        invoke  FNDCLUS 
    1095 0532  E8 0000 E              1  CALL FNDCLUS
    1096 0535  0B C9                            OR      CX,CX 
    1097 0537  74 09                            JZ      SHORT SKIPERR 
    1098 0539                           RDERR: 
    1099 0539  E9 06ED R                        JMP     WRTERR 
    1100 053C  E9 05EF R                RDLASTJ:JMP     RDLAST 
    1101 053F  E9 0607 R                SETFCBJ2: JMP   SETFCB 
    1102                                 
    1103 0542                           SKIPERR: 
    1104                                 
    1105 0542  89 16 0000 E                     MOV     [LASTPOS],DX 
    1106 0546  89 1E 0000 E                     MOV     [CLUSNUM],BX 
    1107 054A  83 3E 0000 E 00                  CMP     [BYTCNT1],0 
    1108 054F  74 03                            JZ      RDMID 
    1109                                        invoke  BUFRD 
    1110 0551  E8 0000 E              1  CALL BUFRD
    1111 0554                           RDMID: 
    1112 0554  83 3E 0000 E 00                  CMP     [SECCNT],0 
    1113 0559  74 E1                            JZ      RDLASTJ 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-32
DISKREAD -- PERFORM USER DISK READ                          

    1114                                        invoke  NEXTSEC 
    1115 055B  E8 0000 E              1  CALL NEXTSEC
    1116 055E  72 DF                            JC      SETFCBJ2 
    1117 0560  C6 06 0000 E 01                  MOV     BYTE PTR [TRANS],1     
					 ; A transfer is taking place 
    1118 0565                           ONSEC: 
    1119 0565  8A 16 0000 E                     MOV     DL,[SECCLUSPOS] 
    1120 0569  8B 0E 0000 E                     MOV     CX,[SECCNT] 
    1121 056D  8B 1E 0000 E                     MOV     BX,[CLUSNUM] 
    1122 0571                           RDLP: 
    1123                                        invoke  OPTIMIZE 
    1124 0571  E8 0000 E              1  CALL OPTIMIZE
    1125 0574  57                               PUSH    DI 
    1126 0575  50                               PUSH    AX 
    1127 0576  53                               PUSH    BX 
    1128 0577  8E 1E 0002 E                     MOV     DS,WORD PTR [DMAADD+2] 
    1129                                ASSUME  DS:NOTHING 
    1130 057B  52                               PUSH    DX 
    1131 057C  51                               PUSH    CX 
    1132 057D  E8 0385 R                        CALL    DREAD 
    1133 0580  5B                               POP     BX 
    1134 0581  5A                               POP     DX 
    1135 0582  03 DA                            ADD     BX,DX           ; Upper
					 bound of read 
    1136 0584  26: 8A 46 00                     MOV     AL,ES:[BP.dpb_drive] 
    1137                                        invoke  SETVISIT 
    1138 0588  E8 0000 E              1  CALL SETVISIT
    1139 058B                           NXTBUF:                         ; Must 
					see if one of these sectors is buffered
					 
    1140 058B  C6 45 07 01                      MOV     [DI.VISIT],1    ; Mark 
					as visited 
    1141 058F  3A 45 04                         CMP     AL,[DI.BUFDRV] 
    1142 0592  75 41                            JNZ     DONXTBUF        ; Not f
					or this drive 
    1143 0594  39 55 08                         CMP     [DI.BUFSECNO],DX 
    1144 0597  72 3C                            JC      DONXTBUF        ; Below
					 first sector 
    1145 0599  39 5D 08                         CMP     [DI.BUFSECNO],BX 
    1146 059C  73 37                            JNC     DONXTBUF        ; Above
					 last sector 
    1147 059E  80 7D 05 00                      CMP     BYTE PTR [DI.BUFDIRTY],
					0 
    1148 05A2  74 2E                            JZ      CLBUFF                 
					 ; Buffer is clean, so OK 
    1149                                ; A sector has been read in when a dirt
					y copy of it is in a buffer 
    1150                                ; The buffered sector must now be read 
					into the right place 
    1151 05A4  58                               POP     AX              ; Recal
					l transfer address 
    1152 05A5  50                               PUSH    AX 
    1153 05A6  57                               PUSH    DI              ; Save 
					search environment 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-33
DISKREAD -- PERFORM USER DISK READ                          

    1154 05A7  52                               PUSH    DX 
    1155 05A8  2B 55 08                         SUB     DX,[DI.BUFSECNO]   ; Ho
					w far into transfer? 
    1156 05AB  F7 DA                            NEG     DX 
    1157 05AD  8B F7                            MOV     SI,DI 
    1158 05AF  8B F8                            MOV     DI,AX 
    1159 05B1  8B C2                            MOV     AX,DX 
    1160 05B3  26: 8B 4E 02                     MOV     CX,ES:[BP.dpb_sector_si
					ze] 
    1161 05B7  F7 E1                            MUL     CX 
    1162 05B9  03 F8                            ADD     DI,AX           ; Put t
					he buffer here 
    1163 05BB  83 C6 10                         ADD     SI,BUFINSIZ 
    1164 05BE  D1 E9                            SHR     CX,1 
    1165 05C0  06                               PUSH    ES 
    1166 05C1  36: 8E 06 0002 E                 MOV     ES,WORD PTR [DMAADD+2] 
    1167 05C6  F3/ A5                           REP     MOVSW 
    1168 05C8  73 01                            JNC     EVENMOV 
    1169 05CA  A4                               MOVSB 
    1170 05CB                           EVENMOV: 
    1171 05CB  07                               POP     ES 
    1172 05CC  5A                               POP     DX 
    1173 05CD  5F                               POP     DI 
    1174 05CE  26: 8A 46 00                     MOV     AL,ES:[BP.dpb_drive] 
    1175 05D2                           CLBUFF: 
    1176                                        invoke  SCANPLACE 
    1177 05D2  E8 0000 E              1  CALL SCANPLACE
    1178 05D5                           DONXTBUF: 
    1179                                        invoke  SKIPVISIT 
    1180 05D5  E8 0000 E              1  CALL SKIPVISIT
    1181 05D8  75 B1                            JNZ     NXTBUF 
    1182 05DA  16                               PUSH    SS 
    1183 05DB  1F                               POP     DS 
    1184                                ASSUME  DS:DOSGROUP 
    1185 05DC  59                               POP     CX 
    1186 05DD  59                               POP     CX 
    1187 05DE  5B                               POP     BX 
    1188 05DF  E3 0E                            JCXZ    RDLAST 
    1189 05E1  81 FB 0FF8                       CMP     BX,0FF8H 
    1190 05E5  73 20                            JAE     SETFCB 
    1191 05E7  B2 00                            MOV     DL,0 
    1192 05E9  FF 06 0000 E                     INC     [LASTPOS]       ; We'll
					 be using next cluster 
    1193 05ED  EB 82                            JMP     RDLP 
    1194                                 
    1195 05EF                           RDLAST: 
    1196 05EF  A1 0000 E                        MOV     AX,[BYTCNT2] 
    1197 05F2  0B C0                            OR      AX,AX 
    1198 05F4  74 11                            JZ      SETFCB 
    1199 05F6  A3 0000 E                        MOV     [BYTCNT1],AX 
    1200                                        invoke  NEXTSEC 
    1201 05F9  E8 0000 E              1  CALL NEXTSEC
    1202 05FC  72 09                            JC      SETFCB 
    1203 05FE  C7 06 0000 E 0000                MOV     [BYTSECPOS],0 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-34
DISKREAD -- PERFORM USER DISK READ                          

    1204                                        invoke  BUFRD 
    1205 0604  E8 0000 E              1  CALL BUFRD
    1206                                 
    1207                                        entry   SETFCB 
    1208 0607                         1 SETFCB:
    1209 0607  C4 36 0000 E                     LES     SI,[THISFCB] 
    1210 060B  A1 0000 E                        MOV     AX,[NEXTADD] 
    1211 060E  8B F8                            MOV     DI,AX 
    1212 0610  2B 06 0000 E                     SUB     AX,WORD PTR [DMAADD]   
					  ; Number of bytes transfered 
    1213 0614  33 D2                            XOR     DX,DX 
    1214 0616  26: 8B 4C 0E                     MOV     CX,ES:[SI.fcb_RECSIZ] 
    1215 061A  F7 F1                            DIV     CX              ; Numbe
					r of records 
    1216 061C  3B 06 0000 E                     CMP     AX,[RECCNT]     ; Check
					 if all records transferred 
    1217 0620  74 22                            JZ      FULLREC 
    1218 0622  C6 06 0000 E 01                  MOV     BYTE PTR [DSKERR],1 
    1219 0627  0B D2                            OR      DX,DX 
    1220 0629  74 19                            JZ      FULLREC         ; If re
					mainder 0, then full record transfered 
    1221 062B  C6 06 0000 E 03                  MOV     BYTE PTR [DSKERR],3    
					  ; Flag partial last record 
    1222 0630  2B CA                            SUB     CX,DX           ; Bytes
					 left in last record 
    1223 0632  06                               PUSH    ES 
    1224 0633  8E 06 0002 E                     MOV     ES,WORD PTR [DMAADD+2] 
    1225 0637  93                               XCHG    AX,BX           ; Save 
					the record count temporarily 
    1226 0638  33 C0                            XOR     AX,AX           ; Fill 
					with zeros 
    1227 063A  D1 E9                            SHR     CX,1 
    1228 063C  73 01                            JNC     EVENFIL 
    1229 063E  AA                               STOSB 
    1230 063F                           EVENFIL: 
    1231 063F  F3/ AB                           REP     STOSW 
    1232 0641  93                               XCHG    AX,BX           ; Resto
					re record count to AX 
    1233 0642  07                               POP     ES 
    1234 0643  40                               INC     AX              ; Add l
					ast (partial) record to total 
    1235 0644                           FULLREC: 
    1236 0644  8B C8                            MOV     CX,AX 
    1237 0646  8B FE                            MOV     DI,SI           ; ES:DI
					 point to FCB 
    1238 0648                           SETCLUS: 
    1239 0648  26: F6 45 18 FF                  TEST    ES:[DI].fcb_DEVID,-1 
    1240 064D  78 14                            JS      ADDREC                 
					 ; don't set clisters if device 
    1241 064F  A1 0000 E                        MOV     AX,[CLUSNUM] 
    1242 0652  26: 81 65 1D F000                AND     ES:[DI.fcb_LSTCLUS],0F0
					00h  ; fcb_lstclus is packed with dir c
					lus 
    1243 0658  26: 09 45 1D                     OR      ES:[DI.fcb_LSTCLUS],AX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-35
DISKREAD -- PERFORM USER DISK READ                          

					     ; drop in the correct part of fcb_
					lstclus 
    1244 065C  A1 0000 E                        MOV     AX,[LASTPOS] 
    1245 065F  26: 89 45 1B                     MOV     ES:[DI.fcb_CLUSPOS],AX 
    1246                                        entry   AddRec 
    1247 0663                         1 AddRec:
    1248 0663  A1 0000 E                        MOV     AX,WORD PTR [RECPOS] 
    1249 0666  8B 16 0002 E                     MOV     DX,WORD PTR [RECPOS+2] 
    1250 066A  E3 07                            JCXZ    RET28           ; If no
					 records read, don't change position 
    1251 066C  49                               DEC     CX 
    1252 066D  03 C1                            ADD     AX,CX           ; Updat
					e current record position 
    1253 066F  83 D2 00                         ADC     DX,0 
    1254 0672  41                               INC     CX 
    1255 0673                           RET28:  return 
    1256 0673                         1 ??0019:
    1257 0673  C3                     1  RET
    1258                                DISKREAD    ENDP 
    1259                                 
    1260                                SUBTTL DISKWRITE -- PERFORM USER DISK W
					RITE 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-36
DISKWRITE -- PERFORM USER DISK WRITE                        

    1261                                PAGE 
    1262                                        procedure   DISKWRITE,NEAR 
    1263 0674                         1 DISKWRITE PROC NEAR
    1264                                ASSUME  DS:DOSGROUP,ES:NOTHING 
    1265                                 
    1266                                ; Inputs: 
    1267                                ;       Outputs of SETUP 
    1268                                ; Function: 
    1269                                ;       Perform disk write 
    1270                                ; Outputs: 
    1271                                ;       DX:AX = Position of last record
					 written 
    1272                                ;       CX = No. of records written 
    1273                                ;       ES:DI point to FCB 
    1274                                ;       fcb_LSTCLUS, fcb_CLUSPOS fields
					 in FCB set 
    1275                                 
    1276 0674  80 E3 3F                         AND     BL,3FH          ; Mark 
					file as dirty 
    1277 0677  26: 88 5D 18                     MOV     ES:[DI.fcb_DEVID],BL 
    1278 067B  C4 2E 0000 E                     LES     BP,[THISDPB] 
    1279 067F  E8 04C9 R                        CALL    BREAKDOWN 
    1280 0682  A1 0000 E                        MOV     AX,WORD PTR [BYTPOS] 
    1281 0685  8B 16 0002 E                     MOV     DX,WORD PTR [BYTPOS+2] 
    1282 0689  E3 78                            JCXZ    WRTEOFJ 
    1283 068B  03 C1                            ADD     AX,CX 
    1284 068D  83 D2 00                         ADC     DX,0            ; AX:DX
					=last byte accessed 
    1285 0690  26: F7 76 02                     DIV     ES:[BP.dpb_sector_size]
					  ; AX=last sector accessed 
    1286 0694  8B D8                            MOV     BX,AX           ; Save 
					last full sector 
    1287 0696  0B D2                            OR      DX,DX 
    1288 0698  75 01                            JNZ     CALCLUS 
    1289 069A  48                               DEC     AX              ; AX mu
					st be zero base indexed 
    1290 069B                           CALCLUS: 
    1291 069B  26: 8A 4E 05                     MOV     CL,ES:[BP.dpb_cluster_s
					hift] 
    1292 069F  D3 E8                            SHR     AX,CL           ; Last 
					cluster to be accessed 
    1293 06A1  50                               PUSH    AX 
    1294 06A2  52                               PUSH    DX              ; Save 
					the size of the "tail" 
    1295 06A3  06                               PUSH    ES 
    1296 06A4  C4 3E 0000 E                     LES     DI,[THISFCB] 
    1297 06A8  26: 8B 45 10                     MOV     AX,ES:WORD PTR [DI.fcb_
					FILSIZ] 
    1298 06AC  26: 8B 55 12                     MOV     DX,ES:WORD PTR [DI.fcb_
					FILSIZ+2] 
    1299 06B0  07                               POP     ES 
    1300 06B1  26: F7 76 02                     DIV     ES:[BP.dpb_sector_size]
					 
    1301 06B5  8B C8                            MOV     CX,AX           ; Save 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-37
DISKWRITE -- PERFORM USER DISK WRITE                        

					last full sector of current file 
    1302 06B7  0B D2                            OR      DX,DX 
    1303 06B9  74 01                            JZ      NORNDUP 
    1304 06BB  40                               INC     AX              ; Round
					 up if any remainder 
    1305 06BC                           NORNDUP: 
    1306 06BC  A3 0000 E                        MOV     [VALSEC],AX     ; Numbe
					r of sectors that have been written 
    1307 06BF  33 C0                            XOR     AX,AX 
    1308 06C1  A3 0000 E                        MOV     WORD PTR [GROWCNT],AX 
    1309 06C4  A3 0002 E                        MOV     WORD PTR [GROWCNT+2],AX
					 
    1310 06C7  58                               POP     AX 
    1311 06C8  2B D9                            SUB     BX,CX           ; Numbe
					r of full sectors 
    1312 06CA  72 47                            JB      NOGROW 
    1313 06CC  74 38                            JZ      TESTTAIL 
    1314 06CE  8B CA                            MOV     CX,DX 
    1315 06D0  93                               XCHG    AX,BX 
    1316 06D1  26: F7 66 02                     MUL     ES:[BP.dpb_sector_size]
					  ; Bytes of full sector growth 
    1317 06D5  2B C1                            SUB     AX,CX           ; Take 
					off current "tail" 
    1318 06D7  83 DA 00                         SBB     DX,0            ; 32-bi
					t extension 
    1319 06DA  03 C3                            ADD     AX,BX           ; Add o
					n new "tail" 
    1320 06DC  83 D2 00                         ADC     DX,0            ; rippl
					e tim's head off 
    1321 06DF  EB 2B                            JMP     SHORT SETGRW 
    1322                                 
    1323 06E1                           HAVSTART: 
    1324 06E1  8B C8                            MOV     CX,AX 
    1325                                        invoke  SKPCLP 
    1326 06E3  E8 0000 E              1  CALL SKPCLP
    1327 06E6  E3 18                            JCXZ    DOWRTJ 
    1328                                        invoke  ALLOCATE 
    1329 06E8  E8 0000 E              1  CALL ALLOCATE
    1330 06EB  73 13                            JNC     DOWRTJ 
    1331 06ED                           WRTERR: 
    1332 06ED  33 C9                            XOR     CX,CX 
    1333 06EF  C6 06 0000 E 01                  MOV     BYTE PTR [DSKERR],1 
    1334 06F4  A1 0000 E                        MOV     AX,WORD PTR [RECPOS] 
    1335 06F7  8B 16 0002 E                     MOV     DX,WORD PTR [RECPOS+2] 
    1336 06FB  C4 3E 0000 E                     LES     DI,[THISFCB] 
    1337                                        return 
    1338 06FF                         1 ??001A:
    1339 06FF  C3                     1  RET
    1340                                 
    1341 0700  EB 45 90                 DOWRTJ: JMP     DOWRT 
    1342                                 
    1343 0703                           WRTEOFJ: 
    1344 0703  E9 07F9 R                        JMP     WRTEOF 
    1345                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-38
DISKWRITE -- PERFORM USER DISK WRITE                        

    1346 0706                           TESTTAIL: 
    1347 0706  2B C2                            SUB     AX,DX 
    1348 0708  76 09                            JBE     NOGROW 
    1349 070A  33 D2                            XOR     DX,DX 
    1350 070C                           SETGRW: 
    1351 070C  A3 0000 E                        MOV     WORD PTR [GROWCNT],AX 
    1352 070F  89 16 0002 E                     MOV     WORD PTR [GROWCNT+2],DX
					 
    1353 0713                           NOGROW: 
    1354 0713  58                               POP     AX 
    1355 0714  8B 0E 0000 E                     MOV     CX,[CLUSNUM]    ; First
					 cluster accessed 
    1356                                        invoke  FNDCLUS 
    1357 0718  E8 0000 E              1  CALL FNDCLUS
    1358 071B  89 1E 0000 E                     MOV     [CLUSNUM],BX 
    1359 071F  89 16 0000 E                     MOV     [LASTPOS],DX 
    1360 0723  2B C2                            SUB     AX,DX           ; Last 
					cluster minus current cluster 
    1361 0725  74 20                            JZ      DOWRT           ; If we
					 have last clus, we must have first 
    1362 0727  E3 B8                            JCXZ    HAVSTART        ; See i
					f no more data 
    1363 0729  51                               PUSH    CX              ; No. o
					f clusters short of first 
    1364 072A  8B C8                            MOV     CX,AX 
    1365                                        invoke  ALLOCATE 
    1366 072C  E8 0000 E              1  CALL ALLOCATE
    1367 072F  58                               POP     AX 
    1368 0730  72 BB                            JC      WRTERR 
    1369 0732  8B C8                            MOV     CX,AX 
    1370 0734  8B 16 0000 E                     MOV     DX,[LASTPOS] 
    1371 0738  42                               INC     DX 
    1372 0739  49                               DEC     CX 
    1373 073A  74 03                            JZ      NOSKIP 
    1374                                        invoke  SKPCLP 
    1375 073C  E8 0000 E              1  CALL SKPCLP
    1376 073F                           NOSKIP: 
    1377 073F  89 1E 0000 E                     MOV     [CLUSNUM],BX 
    1378 0743  89 16 0000 E                     MOV     [LASTPOS],DX 
    1379 0747                           DOWRT: 
    1380 0747  83 3E 0000 E 00                  CMP     [BYTCNT1],0 
    1381 074C  74 07                            JZ      WRTMID 
    1382 074E  8B 1E 0000 E                     MOV     BX,[CLUSNUM] 
    1383                                        invoke  BUFWRT 
    1384 0752  E8 0000 E              1  CALL BUFWRT
    1385 0755                           WRTMID: 
    1386 0755  A1 0000 E                        MOV     AX,[SECCNT] 
    1387 0758  0B C0                            OR      AX,AX 
    1388 075A  74 65                            JZ      WRTLAST 
    1389 075C  01 06 0000 E                     ADD     [SECPOS],AX 
    1390                                        invoke  NEXTSEC 
    1391 0760  E8 0000 E              1  CALL NEXTSEC
    1392 0763  C6 06 0000 E 01                  MOV     BYTE PTR [TRANS],1     
					  ; A transfer is taking place 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-39
DISKWRITE -- PERFORM USER DISK WRITE                        

    1393 0768  8A 16 0000 E                     MOV     DL,[SECCLUSPOS] 
    1394 076C  8B 1E 0000 E                     MOV     BX,[CLUSNUM] 
    1395 0770  8B 0E 0000 E                     MOV     CX,[SECCNT] 
    1396 0774                           WRTLP: 
    1397                                        invoke  OPTIMIZE 
    1398 0774  E8 0000 E              1  CALL OPTIMIZE
    1399 0777  57                               PUSH    DI 
    1400 0778  50                               PUSH    AX 
    1401 0779  52                               PUSH    DX 
    1402 077A  53                               PUSH    BX 
    1403 077B  26: 8A 46 00                     MOV     AL,ES:[BP.dpb_drive] 
    1404 077F  8B D9                            MOV     BX,CX 
    1405 0781  03 DA                            ADD     BX,DX           ; Upper
					 bound of write 
    1406                                        invoke  SETVISIT 
    1407 0783  E8 0000 E              1  CALL SETVISIT
    1408                                ASSUME  DS:NOTHING 
    1409 0786                           NEXTBUFF:                       ; Searc
					h for buffers 
    1410 0786  C6 45 07 01                      MOV     [DI.VISIT],1    ; Mark 
					as visited 
    1411 078A  3A 45 04                         CMP     AL,[DI.BUFDRV] 
    1412 078D  75 12                            JNZ     DONEXTBUFF      ; Not f
					or this drive 
    1413 078F  39 55 08                         CMP     [DI.BUFSECNO],DX 
    1414 0792  72 0D                            JC      DONEXTBUFF      ; Buffe
					r is not in range of write 
    1415 0794  39 5D 08                         CMP     [DI.BUFSECNO],BX 
    1416 0797  73 08                            JNC     DONEXTBUFF      ; Buffe
					r is not in range of write 
    1417 0799  C7 45 04 00FF                    MOV     WORD PTR [DI.BUFDRV],00
					FFH    ; Free the buffer, it is being o
					ver written 
    1418                                        invoke  SCANPLACE 
    1419 079E  E8 0000 E              1  CALL SCANPLACE
    1420 07A1                           DONEXTBUFF: 
    1421                                        invoke  SKIPVISIT 
    1422 07A1  E8 0000 E              1  CALL SKIPVISIT
    1423 07A4  75 E0                            JNZ     NEXTBUFF 
    1424 07A6  5B                               POP     BX 
    1425 07A7  5A                               POP     DX 
    1426 07A8  36: 8E 1E 0002 E                 MOV     DS,WORD PTR [DMAADD+2] 
    1427 07AD  E8 03AB R                        CALL    DWRITE 
    1428 07B0  59                               POP     CX 
    1429 07B1  5B                               POP     BX 
    1430 07B2  16                               PUSH    SS 
    1431 07B3  1F                               POP     DS 
    1432                                ASSUME  DS:DOSGROUP 
    1433 07B4  E3 0B                            JCXZ    WRTLAST 
    1434 07B6  B2 00                            MOV     DL,0 
    1435 07B8  FF 06 0000 E                     INC     [LASTPOS]       ; We'll
					 be using next cluster 
    1436 07BC  EB B6                            JMP     SHORT WRTLP 
    1437                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-40
DISKWRITE -- PERFORM USER DISK WRITE                        

    1438 07BE  E9 06ED R                WRTERRJ: JMP     WRTERR 
    1439                                 
    1440 07C1                           WRTLAST: 
    1441 07C1  A1 0000 E                        MOV     AX,[BYTCNT2] 
    1442 07C4  0B C0                            OR      AX,AX 
    1443 07C6  74 0F                            JZ      FINWRT 
    1444 07C8  A3 0000 E                        MOV     [BYTCNT1],AX 
    1445                                        invoke  NEXTSEC 
    1446 07CB  E8 0000 E              1  CALL NEXTSEC
    1447 07CE  C7 06 0000 E 0000                MOV     [BYTSECPOS],0 
    1448                                        invoke  BUFWRT 
    1449 07D4  E8 0000 E              1  CALL BUFWRT
    1450 07D7                           FINWRT: 
    1451 07D7  C4 3E 0000 E                     LES     DI,[THISFCB] 
    1452 07DB  A1 0000 E                        MOV     AX,WORD PTR [GROWCNT] 
    1453 07DE  8B 0E 0002 E                     MOV     CX,WORD PTR [GROWCNT+2]
					 
    1454 07E2  0B C0                            OR      AX,AX 
    1455 07E4  75 04                            JNZ     UPDATE_size 
    1456 07E6  0B C9                            OR      CX,CX 
    1457 07E8  74 08                            JZ      SAMSIZ 
    1458 07EA                           Update_size: 
    1459 07EA  26: 01 45 10                     ADD     WORD PTR ES:[DI.fcb_FIL
					SIZ],AX 
    1460 07EE  26: 11 4D 12                     ADC     WORD PTR ES:[DI.fcb_FIL
					SIZ+2],CX 
    1461 07F2                           SAMSIZ: 
    1462 07F2  8B 0E 0000 E                     MOV     CX,[RECCNT] 
    1463 07F6  E9 0648 R                        JMP     SETCLUS 
    1464                                 
    1465 07F9                           WRTEOF: 
    1466 07F9  8B C8                            MOV     CX,AX 
    1467 07FB  0B CA                            OR      CX,DX 
    1468 07FD  74 3B                            JZ      KILLFIL 
    1469 07FF  2D 0001                          SUB     AX,1 
    1470 0802  83 DA 00                         SBB     DX,0 
    1471 0805  26: F7 76 02                     DIV     ES:[BP.dpb_sector_size]
					 
    1472 0809  26: 8A 4E 05                     MOV     CL,ES:[BP.dpb_cluster_s
					hift] 
    1473 080D  D3 E8                            SHR     AX,CL 
    1474 080F  8B C8                            MOV     CX,AX 
    1475                                        invoke  FNDCLUS 
    1476 0811  E8 0000 E              1  CALL FNDCLUS
    1477 0814  E3 1C                            JCXZ    RELFILE 
    1478                                        invoke  ALLOCATE 
    1479 0816  E8 0000 E              1  CALL ALLOCATE
    1480 0819  72 A3                            JC      WRTERRJ 
    1481 081B                           UPDATE: 
    1482 081B  C4 3E 0000 E                     LES     DI,[THISFCB] 
    1483 081F  A1 0000 E                        MOV     AX,WORD PTR [BYTPOS] 
    1484 0822  26: 89 45 10                     MOV     ES:WORD PTR [DI.fcb_FIL
					SIZ],AX 
    1485 0826  A1 0002 E                        MOV     AX,WORD PTR [BYTPOS+2] 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Page     1-41
DISKWRITE -- PERFORM USER DISK WRITE                        

    1486 0829  26: 89 45 12                     MOV     ES:WORD PTR [DI.fcb_FIL
					SIZ+2],AX 
    1487 082D  33 C9                            XOR     CX,CX 
    1488 082F  E9 0663 R                        JMP     ADDREC 
    1489                                 
    1490 0832                           RELFILE: 
    1491 0832  BA 0FFF                          MOV     DX,0FFFH 
    1492                                        invoke  RELBLKS 
    1493 0835  E8 0000 E              1  CALL RELBLKS
    1494 0838  EB E1                            JMP     SHORT UPDATE 
    1495                                 
    1496 083A                           KILLFIL: 
    1497 083A  33 DB                            XOR     BX,BX 
    1498 083C  06                               PUSH    ES 
    1499 083D  C4 3E 0000 E                     LES     DI,[THISFCB] 
    1500 0841  26: 89 5D 1B                     MOV     ES:[DI.fcb_CLUSPOS],BX 
    1501 0845  26: 87 5D 19                     XCHG    BX,ES:[DI.fcb_FIRCLUS] 
    1502 0849  26: 81 65 1D F000                AND     ES:[DI.fcb_LSTCLUS],0F0
					00H 
    1503 084F  07                               POP     ES 
    1504 0850  0B DB                            OR      BX,BX 
    1505 0852  74 C7                            JZ      UPDATE 
    1506                                        invoke  RELEASE 
    1507 0854  E8 0000 E              1  CALL RELEASE
    1508 0857  EB C2                            JMP     SHORT UPDATE 
    1509                                DISKWRITE   ENDP 
    1510                                do_ext 
    1511                                 
    1512 0859                           CODE    ENDS 
    1513                                    END 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DOSGROUP . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	0859	BYTE	PUBLIC	'CODE'
  CONSTANTS  . . . . . . . . . .  	0000	BYTE	PUBLIC	'CONST'
  DATA . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-5
                                                             

  LAST . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'LAST'

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDREC . . . . . . . . . . . . .  	L NEAR	0663	CODE	Global
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BREAKDOWN  . . . . . . . . . . .  	N PROC	04C9	CODE	Global	Length = 0040
BUFINSIZ . . . . . . . . . . . .  	Number	0010	
BYTCNT1  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
BYTCNT2  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
BYTPOS . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
BYTSECPOS  . . . . . . . . . . .  	V WORD 	0000	DATA	External

CALCLUS  . . . . . . . . . . . .  	L NEAR	069B	CODE
CALLSCNT . . . . . . . . . . . .  	V WORD 	0000	DATA	External
CALLXAD  . . . . . . . . . . . .  	V DWORD	0000	DATA	External
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHECKRECLEN  . . . . . . . . . .  	L NEAR	0426	CODE
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-6
                                                             

CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CINDSAV  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CINSAV . . . . . . . . . . . . .  	V DWORD	0000	DATA	External
CLBUFF . . . . . . . . . . . . .  	L NEAR	05D2	CODE
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CLUSFAC  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CLUSNUM  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
CONBUF . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CONEOF . . . . . . . . . . . . .  	L NEAR	0231	CODE
CONSWAP  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CONTPOS  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
COUTDSAV . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
COUTSAV  . . . . . . . . . . . .  	V DWORD	0000	DATA	External
CRDOK  . . . . . . . . . . . . .  	L NEAR	0170	CODE
CRDROK . . . . . . . . . . . . .  	L NEAR	0119	CODE
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURDRV . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
CWROK  . . . . . . . . . . . . .  	L NEAR	02CD	CODE
CWRTROK  . . . . . . . . . . . .  	L NEAR	025F	CODE
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DBPBHL . . . . . . . . . . . . .  	Number	0016	
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVCALL  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-7
                                                             

DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
DEVOFL . . . . . . . . . . . . .  	Number	000B	
DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRREAD  . . . . . . . . . . . .  	N PROC	0323	CODE	Global	Length = 0041
DIRSEC . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISKREAD . . . . . . . . . . . .  	N PROC	0509	CODE	Global	Length = 016B
DISKWRITE  . . . . . . . . . . .  	N PROC	0674	CODE	Global	Length = 01E5
DISK_RESET . . . . . . . . . . .  	Number	000D	
DMAADD . . . . . . . . . . . . .  	V DWORD	0000	DATA	External
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DODSKOP  . . . . . . . . . . . .  	L NEAR	03CC	CODE
DONEXTBUFF . . . . . . . . . . .  	L NEAR	07A1	CODE
DONXTBUF . . . . . . . . . . . .  	L NEAR	05D5	CODE
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DOWRT  . . . . . . . . . . . . .  	L NEAR	0747	CODE
DOWRTJ . . . . . . . . . . . . .  	L NEAR	0700	CODE
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DREAD  . . . . . . . . . . . . .  	L NEAR	0385	CODE	Global
DSKERR . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DSKREAD  . . . . . . . . . . . .  	N PROC	039A	CODE	Global	Length = 0053
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSKSTACK . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DSKWRITE . . . . . . . . . . . .  	L NEAR	03BE	CODE	Global
DSTATHL  . . . . . . . . . . . .  	Number	000D	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-8
                                                             

DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
DVRDIGN  . . . . . . . . . . . .  	L NEAR	0182	CODE
DVRDLP . . . . . . . . . . . . .  	L NEAR	0149	CODE
DVRDRAW  . . . . . . . . . . . .  	L NEAR	00EE	CODE
DVRDRAWR . . . . . . . . . . . .  	L NEAR	00F0	CODE
DVWRTIGN . . . . . . . . . . . .  	L NEAR	02D6	CODE
DVWRTLP  . . . . . . . . . . . .  	L NEAR	02A8	CODE
DVWRTRAW . . . . . . . . . . . .  	L NEAR	023A	CODE
DWRITE . . . . . . . . . . . . .  	L NEAR	03AB	CODE	Global

ENDRDCON . . . . . . . . . . . .  	L NEAR	01B0	CODE
ENDRDDEV . . . . . . . . . . . .  	L NEAR	01B9	CODE
ENDRDDEVJ  . . . . . . . . . . .  	L NEAR	0197	CODE
ENDRDDEVJ2 . . . . . . . . . . .  	L NEAR	0198	CODE
ENDRDDEVJ3 . . . . . . . . . . .  	L NEAR	00EB	CODE
ENDWRDEV . . . . . . . . . . . .  	L NEAR	0263	CODE
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENUF . . . . . . . . . . . . . .  	L NEAR	0527	CODE
EOFERR . . . . . . . . . . . . .  	L NEAR	04BC	CODE
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EVENFIL  . . . . . . . . . . . .  	L NEAR	063F	CODE
EVENMOV  . . . . . . . . . . . .  	L NEAR	05CB	CODE
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-9
                                                             

EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FATPRI . . . . . . . . . . . . .  	Number	001E	
FATSECRD . . . . . . . . . . . .  	N PROC	0364	CODE	Global	Length = 0036
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FINWRT . . . . . . . . . . . . .  	L NEAR	07D7	CODE
FIRSTCLUSTER . . . . . . . . . .  	L NEAR	035C	CODE	Global
FREEPRI  . . . . . . . . . . . .  	Number	0000	
FULLREC  . . . . . . . . . . . .  	L NEAR	0644	CODE

GETBUF . . . . . . . . . . . . .  	L NEAR	01E6	CODE
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETTHISDRV . . . . . . . . . . .  	N PROC	030F	CODE	Global	Length = 0014
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_IO_FCB . . . . . . . . . . .  	N PROC	02FC	CODE	Global	Length = 0013
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GROWCNT  . . . . . . . . . . . .  	V DWORD	0000	DATA	External

HAVESKIPPED  . . . . . . . . . .  	L NEAR	0351	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-10
                                                             

HAVRECSIZ  . . . . . . . . . . .  	L NEAR	0406	CODE
HAVSTART . . . . . . . . . . . .  	L NEAR	06E1	CODE

IDLEINT  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
INDOS  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KEEP_PROCESS . . . . . . . . . .  	Number	0031	
KILLFIL  . . . . . . . . . . . .  	L NEAR	083A	CODE

LASTPOS  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LOAD . . . . . . . . . . . . . .  	N PROC	00D0	CODE	Global	Length = 0137
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		

NEXTADD  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
NEXTBUFF . . . . . . . . . . . .  	L NEAR	0786	CODE
NOGROW . . . . . . . . . . . . .  	L NEAR	0713	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-11
                                                             

NORMCH . . . . . . . . . . . . .  	L NEAR	01A3	CODE
NORNDUP  . . . . . . . . . . . .  	L NEAR	06BC	CODE
NOROOM . . . . . . . . . . . . .  	L NEAR	04C3	CODE
NOSKIP . . . . . . . . . . . . .  	L NEAR	073F	CODE
NOTDEVICE  . . . . . . . . . . .  	L NEAR	0417	CODE
NOTRDCON . . . . . . . . . . . .  	L NEAR	012F	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NUMIO  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
NXTBUF . . . . . . . . . . . . .  	L NEAR	058B	CODE
NXTCLUSNUM . . . . . . . . . . .  	V WORD 	0000	DATA	External
NXTFAT . . . . . . . . . . . . .  	L NEAR	0373	CODE

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OK . . . . . . . . . . . . . . .  	L NEAR	04B3	CODE
ONSEC  . . . . . . . . . . . . .  	L NEAR	0565	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PARTSEG  . . . . . . . . . . . .  	L NEAR	04A1	CODE
PHYDRV . . . . . . . . . . . . .  	L NEAR	031E	CODE

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
RDERR  . . . . . . . . . . . . .  	L NEAR	0539	CODE
RDLAST . . . . . . . . . . . . .  	L NEAR	05EF	CODE
RDLASTJ  . . . . . . . . . . . .  	L NEAR	053C	CODE
RDLP . . . . . . . . . . . . . .  	L NEAR	0571	CODE
RDMID  . . . . . . . . . . . . .  	L NEAR	0554	CODE
READ . . . . . . . . . . . . . .  	Number	003F	
READCON  . . . . . . . . . . . .  	L NEAR	01CE	CODE
READDEV  . . . . . . . . . . . .  	L NEAR	00DB	CODE
READOP . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RECCNT . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
RECPOS . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
RELFILE  . . . . . . . . . . . .  	L NEAR	0832	CODE
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-12
                                                             

RET28  . . . . . . . . . . . . .  	L NEAR	0673	CODE
RET41P . . . . . . . . . . . . .  	L NEAR	0398	CODE
RET44P . . . . . . . . . . . . .  	L NEAR	030C	CODE
RET_C  . . . . . . . . . . . . .  	NEAR 	0314	CODE
RET_L  . . . . . . . . . . . . .  	NEAR 	06FF	CODE
RET_NZ . . . . . . . . . . . . .  	NEAR 	04FB	CODE
RET_Z  . . . . . . . . . . . . .  	NEAR 	03AE	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SAMSIZ . . . . . . . . . . . . .  	L NEAR	07F2	CODE
SAVFIR . . . . . . . . . . . . .  	L NEAR	04E0	CODE
SECCLUSPOS . . . . . . . . . . .  	V BYTE 	0000	DATA	External
SECCNT . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
SECPOS . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETCLUS  . . . . . . . . . . . .  	L NEAR	0648	CODE
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETFCB . . . . . . . . . . . . .  	L NEAR	0607	CODE	Global
SETFCBC  . . . . . . . . . . . .  	L NEAR	01CA	CODE
SETFCBJ2 . . . . . . . . . . . .  	L NEAR	053F	CODE
SETGRW . . . . . . . . . . . . .  	L NEAR	070C	CODE
SETUP  . . . . . . . . . . . . .  	N PROC	03ED	CODE	Global	Length = 00DC
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SKIPERR  . . . . . . . . . . . .  	L NEAR	0542	CODE
SKPCLLP  . . . . . . . . . . . .  	L NEAR	0344	CODE
SMALREC  . . . . . . . . . . . .  	L NEAR	042D	CODE
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-13
                                                             

STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
STORE  . . . . . . . . . . . . .  	N PROC	0207	CODE	Global	Length = 00F5
SWAPBACK . . . . . . . . . . . .  	N PROC	0000	CODE	Global	Length = 0050
SWAPCON  . . . . . . . . . . . .  	N PROC	0050	CODE	Global	Length = 0080
SWAPRET  . . . . . . . . . . . .  	L NEAR	004B	CODE

TESTRAW  . . . . . . . . . . . .  	L NEAR	0122	CODE
TESTTAIL . . . . . . . . . . . .  	L NEAR	0706	CODE
THISDPB  . . . . . . . . . . . .  	V DWORD	0000	DATA	External
THISDRV  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
THISFCB  . . . . . . . . . . . .  	V DWORD	0000	DATA	External
TRANBUF  . . . . . . . . . . . .  	L NEAR	019A	CODE
TRANS  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
UPDATE . . . . . . . . . . . . .  	L NEAR	081B	CODE
UPDATE_SIZE  . . . . . . . . . .  	L NEAR	07EA	CODE
USERIDOPER . . . . . . . . . . .  	Number	005E	
USER_SP  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
USER_SS  . . . . . . . . . . . .  	V WORD 	0000	DATA	External

VALSEC . . . . . . . . . . . . .  	V WORD 	0000	DATA	External

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRCONLP  . . . . . . . . . . . .  	L NEAR	0227	CODE
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITECON . . . . . . . . . . . .  	L NEAR	021D	CODE
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
WRTCOOKDONE  . . . . . . . . . .  	L NEAR	02F2	CODE
WRTDEV . . . . . . . . . . . . .  	L NEAR	0273	CODE
WRTEOF . . . . . . . . . . . . .  	L NEAR	07F9	CODE
WRTEOFJ  . . . . . . . . . . . .  	L NEAR	0703	CODE
WRTERR . . . . . . . . . . . . .  	L NEAR	06ED	CODE
WRTERRJ  . . . . . . . . . . . .  	L NEAR	07BE	CODE
WRTLAST  . . . . . . . . . . . .  	L NEAR	07C1	CODE
WRTLP  . . . . . . . . . . . . .  	L NEAR	0774	CODE
WRTMID . . . . . . . . . . . . .  	L NEAR	0755	CODE
WRTNUL . . . . . . . . . . . . .  	L NEAR	02F8	CODE

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:41

DISK - Disk utility routines                                Symbols-14
                                                             


??0000 . . . . . . . . . . . . .  	L NEAR	004F	CODE
??0001 . . . . . . . . . . . . .  	L NEAR	00DA	CODE
??0002 . . . . . . . . . . . . .  	L NEAR	01CD	CODE
??0003 . . . . . . . . . . . . .  	L NEAR	021C	CODE
??0004 . . . . . . . . . . . . .  	L NEAR	0272	CODE
??0005 . . . . . . . . . . . . .  	L NEAR	030E	CODE
??0006 . . . . . . . . . . . . .  	L NEAR	0314	CODE
??0008 . . . . . . . . . . . . .  	L NEAR	0322	CODE
??0009 . . . . . . . . . . . . .  	L NEAR	0388	CODE
??000B . . . . . . . . . . . . .  	L NEAR	0397	CODE
??000C . . . . . . . . . . . . .  	L NEAR	0399	CODE
??000D . . . . . . . . . . . . .  	L NEAR	03AE	CODE
??000F . . . . . . . . . . . . .  	L NEAR	03BD	CODE
??0010 . . . . . . . . . . . . .  	L NEAR	03EC	CODE
??0011 . . . . . . . . . . . . .  	L NEAR	0425	CODE
??0012 . . . . . . . . . . . . .  	L NEAR	04BB	CODE
??0013 . . . . . . . . . . . . .  	L NEAR	04C8	CODE
??0014 . . . . . . . . . . . . .  	L NEAR	04F6	CODE
??0016 . . . . . . . . . . . . .  	L NEAR	04FB	CODE
??0018 . . . . . . . . . . . . .  	L NEAR	0508	CODE
??0019 . . . . . . . . . . . . .  	L NEAR	0673	CODE
??001A . . . . . . . . . . . . .  	L NEAR	06FF	CODE


   2613 Source  Lines
   3823 Total   Lines
    732 Symbols

  14410 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
