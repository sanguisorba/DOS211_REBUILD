Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-1
                                                            

       1                             C  	INCLUDE	STDSW.ASM 
       2 = FFFF                      C  TRUE    EQU     0FFFFH 
       3 = 0000                      C  FALSE   EQU     NOT TRUE 
       4                             C   
       5                             C  ; Use the switches below to produce the
					 standard Microsoft version or the IBM 
       6                             C  ; version of the operating system 
       7 =                           C  MSVER   EQU     true 
       8 =                           C  IBM     EQU     false 
       9 =                           C  WANG    EQU     FALSE 
      10 =                           C  ALTVECT EQU     FALSE 
      11                             C   
      12                             C  ; Set this switch to cause DOS to move 
					itself to the end of memory 
      13 =                           C  HIGHMEM EQU     FALSE 
      14                             C   
      15                             C          ELSE 
      16                             C          ELSE 
      17 = 001B                      C  ESCCH   EQU     1BH 
      18                             C          ENDIF 
      19 = 0018                      C  CANCEL  EQU     "X"-"@"                
					 ;Cancel with Ctrl-X 
      20 =                           C  TOGLINS EQU     WANG                   
					 ;Separate keys for insert mode on 
      21                             C                                         
					 ;and off if not WANG 
      22 =                           C  TOGLPRN EQU     FALSE                  
					 ;Separate keys for printer echo on 
      23                             C                                         
					 ;and off 
      24 =                           C  ZEROEXT EQU     TRUE 
      25                             C          ENDIF 
      26                             C   
      27                                 
      28                                 
      29 =                              KANJI   EQU     FALSE 
      30                                 
      31 =                              Rainbow EQU FALSE 
      32                                 
      33                             C          INCLUDE DOSSYM.ASM 
      34                             C  include DOSMAC.ASM 
      35                             C  ; 
      36                             C  ; Macro file for MSDOS. 
      37                             C  ; 
      38                             C   
      39                             C  SUBTTL BREAK a listing into pages and g
					ive new subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-2
BREAK a listing into pages and give new subtitles           

      40                             C  PAGE 
      41                             C  BREAK MACRO subtitle 
      42                             C   SUBTTL subtitle 
      43                             C   PAGE 
      44                             C  ENDM 
      45                             C   
      46                             C  BREAK <I_NEED: declare a variable exter
					nal, if necessary, and allocate a size>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-3
I_NEED: declare a variable external, if necessary, and alloc

      47                             C   
      48                             C  ; 
      49                             C  ; declare a variable external and alloc
					ate a size 
      50                             C  ; 
      51                             C  I_NEED MACRO sym,len 
      52                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
      53                             C   IFIDN <len>,<WORD> 
      54                             C   EXTRN &sym:WORD 
      55                             C   ELSE 
      56                             C   IFIDN <len>,<DWORD> 
      57                             C   EXTRN &sym:DWORD 
      58                             C   ELSE 
      59                             C   EXTRN &sym:BYTE 
      60                             C   ENDIF 
      61                             C   ENDIF 
      62                             C   DATA ENDS 
      63                             C  ENDM 
      64                             C   
      65                             C  ; 
      66                             C  ; call a procedure that may be external
					. The call will be short. 
      67                             C  ; 
      68                             C  invoke MACRO name 
      69                             C  .xcref 
      70                             C   IF2 
      71                             C   IFNDEF name 
      72                             C   EXTRN name:NEAR 
      73                             C   ENDIF 
      74                             C   ENDIF 
      75                             C  .cref 
      76                             C   CALL name 
      77                             C  ENDM 
      78                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

      79                             C  PAGE 
      80                             C  ; 
      81                             C  ; jump to a label that may be external.
					 The jump will be near. 
      82                             C  ; 
      83                             C  transfer MACRO name 
      84                             C  .xcref 
      85                             C   IF2 
      86                             C   IFNDEF name 
      87                             C   EXTRN name:NEAR 
      88                             C   ENDIF 
      89                             C   ENDIF 
      90                             C  .cref 
      91                             C   JUMP name 
      92                             C  ENDM 
      93                             C   
      94                             C  ; 
      95                             C  ; get a short address in a word 
      96                             C  ; 
      97                             C  short_addr MACRO name 
      98                             C   IFDIF <name>,<?> 
      99                             C  .xcref 
     100                             C   IF2 
     101                             C   IFNDEF name 
     102                             C   EXTRN name:NEAR 
     103                             C   ENDIF 
     104                             C   ENDIF 
     105                             C  .cref 
     106                             C   DW OFFSET DOSGROUP:name 
     107                             C   ELSE 
     108                             C   DW ? 
     109                             C   ENDIF 
     110                             C  ENDM 
     111                             C   
     112                             C  ; 
     113                             C  ; get a long address in a dword 
     114                             C  ; 
     115                             C  long_addr MACRO name 
     116                             C  .xcref 
     117                             C   IF2 
     118                             C   IFNDEF name 
     119                             C   EXTRN name:NEAR 
     120                             C   ENDIF 
     121                             C  .cref 
     122                             C   DD name 
     123                             C  ENDM 
     124                             C   
     125                             C  ; 
     126                             C  ; declare a PROC near or far but PUBLIC
					 nonetheless 
     127                             C  ; 
     128                             C  procedure MACRO name,distance 
     129                             C   PUBLIC name 
     130                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

     131                             C  ENDM 
     132                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

     133                             C  PAGE 
     134                             C  ; 
     135                             C  ; define a data item to be public and o
					f an appropriate size/type 
     136                             C  ; 
     137                             C  I_AM MACRO name,size 
     138                             C   PUBLIC name 
     139                             C   
     140                             C   IFIDN <size>,<WORD> 
     141                             C  name DW ? 
     142                             C   ELSE 
     143                             C   IFIDN <size>,<DWORD> 
     144                             C  name DD ? 
     145                             C   ELSE 
     146                             C   IFIDN <size>,<BYTE> 
     147                             C  name DB ? 
     148                             C   ELSE 
     149                             C  name DB size DUP (?) 
     150                             C   ENDIF 
     151                             C   ENDIF 
     152                             C   ENDIF 
     153                             C  ENDM 
     154                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

     155                             C  PAGE 
     156                             C  ; 
     157                             C  ; call the macro chain 
     158                             C  ; 
     159                             C  do_ext macro 
     160                             C  endm 
     161                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

     162                             C  PAGE 
     163                             C   
     164                             C  ; 
     165                             C  ; define an entry in a procedure 
     166                             C  ; 
     167                             C  entry macro name 
     168                             C   PUBLIC name 
     169                             C  name: 
     170                             C  endm 
     171                             C   
     172                             C  BREAK <ERROR - print a message and then
					 jump to a label> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-9
ERROR - print a message and then jump to a label            

     173                             C   
     174                             C  error macro code 
     175                             C   local a 
     176                             C  .xcref 
     177                             C   MOV AL,code 
     178                             C   transfer SYS_RET_ERR 
     179                             C  .cref 
     180                             C  ENDM 
     181                             C   
     182                             C  BREAK <JUMP - real jump that links up s
					hortwise> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-10
JUMP - real jump that links up shortwise                    

     183                             C  ; 
     184                             C  ; given a label <lbl> either 2 byte jum
					p to another label <lbl>_J 
     185                             C  ; if it is near enough or 3 byte jump t
					o <lbl> 
     186                             C  ; 
     187                             C   
     188                             C  jump macro lbl 
     189                             C   local a 
     190                             C  .xcref 
     191                             C   a: 
     192                             C   ifndef lbl&_J ;; is this the first inv
					ocation 
     193                             C   JMP lbl 
     194                             C   ELSE 
     195                             C   IF lbl&_J GE $ 
     196                             C   JMP lbl 
     197                             C   ELSE 
     198                             C   IF ($-lbl&_J) GT 126 ;; is the jump to
					o far away? 
     199                             C   JMP lbl 
     200                             C   ELSE ;; do the short one... 
     201                             C   JMP lbl&_J 
     202                             C   ENDIF 
     203                             C   ENDIF 
     204                             C   ENDIF 
     205                             C   lbl&_j = a 
     206                             C  .cref 
     207                             C  endm 
     208                             C   
     209                             C  BREAK <RETURN - return from a function>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-11
RETURN - return from a function                             

     210                             C   
     211                             C  return macro 
     212                             C   local a 
     213                             C  .xcref 
     214                             C  a: 
     215                             C   RET 
     216                             C  ret_l = a 
     217                             C  .cref 
     218                             C  endm 
     219                             C   
     220                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-12
CONDRET - conditional return                                

     221                             C   
     222                             C  makelab macro l,cc,ncc 
     223                             C   local a 
     224                             C   j&ncc a ;; j<NCC> a: 
     225                             C   return ;; return 
     226                             C   a: ;; a: 
     227                             C   ret_&cc = ret_l ;; define ret_<CC> to 
					be ret_l 
     228                             C  endm 
     229                             C   
     230                             C  condret macro cc,ncc 
     231                             C   local a,b 
     232                             C   ifdef ret_l ;; if ret_l is defined 
     233                             C   if (($ - ret_l) le 126) and ($ gt ret_
					l) 
     234                             C   ;; if ret_l is near enough then 
     235                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
     236                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     237                             C   else 
     238                             C   makelab a,cc,ncc 
     239                             C   endif 
     240                             C   else 
     241                             C   ifdef ret_&cc ;; if ret_<CC> defined 
     242                             C   if (($ - ret_&cc) le 126) and ($ gt re
					t_&cc) 
     243                             C   ;; if ret_<CC> is near enough 
     244                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC
					> 
     245                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     246                             C   else 
     247                             C   makelab a,cc,ncc 
     248                             C   endif 
     249                             C   else 
     250                             C   makelab a,cc,ncc 
     251                             C   endif 
     252                             C   endif 
     253                             C  endm 
     254                             C  ;condret macro cc,ncc 
     255                             C  ; local a,b 
     256                             C  ; ifdef ret_l ; if ret_l is defined 
     257                             C  ; if (($ - ret_l) le 126) and ($ gt ret
					_l) 
     258                             C  ; ; if ret_l is near enough then 
     259                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
     260                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     261                             C  ; exitm 
     262                             C  ; endif 
     263                             C  ; endif 
     264                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
     265                             C  ; if (($ - ret_&cc) le 126) and ($ gt r
					et_&cc) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-13
CONDRET - conditional return                                

     266                             C  ; ; if ret_<CC> is near enough 
     267                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC
					> 
     268                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     269                             C  ; exitm 
     270                             C  ; endif 
     271                             C  ; endif 
     272                             C  ; j&ncc a ; j<NCC> a: 
     273                             C  ; return ; return 
     274                             C  ; a: ; a: 
     275                             C  ; ret_&cc = ret_l ; define ret_<CC> to 
					be ret_l 
     276                             C  ;endm 
     277                             C  ; 
     278                             C  BREAK <RETZ - return if zero, links up 
					shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-14
RETZ - return if zero, links up shortwise if necessary      

     279                             C   
     280                             C  retz macro 
     281                             C   condret z,nz 
     282                             C  endm 
     283                             C   
     284                             C  BREAK <RETNZ - return if not zero, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-15
RETNZ - return if not zero, links up shortwise if necessary 

     285                             C   
     286                             C  retnz macro 
     287                             C   condret nz,z 
     288                             C  endm 
     289                             C   
     290                             C  BREAK <RETC - return if carry set, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-16
RETC - return if carry set, links up shortwise if necessary 

     291                             C   
     292                             C  retc macro 
     293                             C   condret c,nc 
     294                             C  endm 
     295                             C   
     296                             C  BREAK <RETNC - return if not carry, lin
					ks up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-17
RETNC - return if not carry, links up shortwise if necessary

     297                             C   
     298                             C  retnc macro 
     299                             C   condret nc,c 
     300                             C  endm 
     301                             C   
     302                             C  BREAK <CONTEXT - set the DOS context to
					 a particular register> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-18
CONTEXT - set the DOS context to a particular register      

     303                             C   
     304                             C  context macro r 
     305                             C   PUSH SS 
     306                             C   POP r 
     307                             C   ASSUME r:DOSGROUP 
     308                             C  endm 
     309                             C   
     310                             C  IF2 
     311                             C      %OUT    DOSSYM in Pass 2 
     312                             C  ENDIF 
     313                             C   
     314                             C  ENDIF 
     315                             C   
     316 = 0002                      C  DOS_MAJOR_VERSION   EQU      2 
     317 = 000B                      C  DOS_MINOR_VERSION   EQU     11 
     318                             C   
     319                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-19
Control character definitions                               

     320                             C   
     321 = 007F                      C  c_DEL       EQU     7Fh         ;    AS
					CII rubout or delete previous char 
     322 = 0008                      C  c_BS        EQU     08h         ; ^H AS
					CII backspace 
     323 = 000D                      C  c_CR        EQU     0Dh         ; ^M AS
					CII carriage return 
     324 = 000A                      C  c_LF        EQU     0Ah         ; ^J AS
					CII linefeed 
     325 = 0017                      C  c_ETB       EQU     17h         ; ^W AS
					CII end of transmission 
     326 = 0015                      C  c_NAK       EQU     15h         ; ^U AS
					CII negative acknowledge 
     327 = 0003                      C  c_ETX       EQU     03h         ; ^C AS
					CII end of text 
     328 = 0009                      C  c_HT        EQU     09h         ; ^I AS
					CII tab 
     329                             C   
     330                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-20
BPB Definition                                              

     331                             C   
     332                             C   
     333                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     334                             C  ;                                      
					                                    ; 
     335                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     336                             C  ;                                      
					                                    ; 
     337                             C  ; Certain structures, constants and sys
					tem  calls  below  are  private  to ; 
     338                             C  ; the DOS  and  are  extremely  version
					-dependent.  They may change at any ; 
     339                             C  ; time at  the  implementors'  whim.   
					As  a  result,  they  must  not  be ; 
     340                             C  ; documented to  the  general  public. 
					  If  an  extreme case arises, they ; 
     341                             C  ; must be documented with this warning.
					                                    ; 
     342                             C  ;                                      
					                                    ; 
     343                             C  ; Those structures and constants that a
					re subject to  the  above  will  be ; 
     344                             C  ; marked and bracketed with the flag:  
					                                    ; 
     345                             C  ;                                      
					                                    ; 
     346                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     347                             C  ;                                      
					                                    ; 
     348                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     349                             C   
     350                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-21
Bios Parameter Block                                        

     351                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     352                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     353                             C  ;                                      
					                                    ; 
     354                             C   
     355                             C  ; Bios Parameter Block definition 
     356                             C  ; This structure is used to build a ful
					l DPB 
     357                             C   
     358                             C  BPBLOCK STRUC 
     359 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes
					 of physical sector 
     360 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc
					 unit 
     361 0003  ????                  C  BPRES   DW      ?       ; Number of res
					erved sectors 
     362 0005  ??                    C  BPFTCNT DB      ?       ; Number of FAT
					s 
     363 0006  ????                  C  BPDRCNT DW      ?       ; Number of dir
					ectory entries 
     364 0008  ????                  C  BPSCCNT DW      ?       ; Total number 
					of sectors 
     365 000A  ??                    C  BPMEDIA DB      ?       ; Media descrip
					tor byte 
     366 000B  ????                  C  BPFTSEC DW      ?       ; Number of sec
					tors taken up by one FAT 
     367 000D                        C  BPBLOCK ENDS 
     368                             C  ;                                      
					                                    ; 
     369                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     370                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     371                             C   
     372                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-22
Disk I/O Buffer Header                                      

     373                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     374                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     375                             C  ;                                      
					                                    ; 
     376                             C   
     377                             C  ; Field definition for I/O buffer infor
					mation 
     378                             C   
     379                             C  BUFFINFO        STRUC 
     380 0000  ????????              C  NEXTBUF         DD      ?       ; Point
					er to next buffer in list 
     381                             C  ; The next two items are often refed as
					 a word 
     382 0004  ??                    C  BUFDRV          DB      ?       ; Logic
					al drive # assoc with buffer FF = free 
     383 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty
					 flag 
     384 0006  ??                    C  BUFPRI          DB      ?       ; Buffe
					r selection priority (see EQUs below) 
     385 0007  ??                    C  VISIT           DB      ?       ; Visit
					 flag for buffer pool scans 
     386 0008  ????                  C  BUFSECNO        DW      ?       ; Secto
					r number of buffer 
     387                             C  ; The next two items are often refed as
					 a word 
     388 000A  ??                    C  BUFWRTCNT       DB      ?       ; For F
					AT sectors, # times sector written out 
     389 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "
					     "   , # sectors between each write
					 
     390 000C  ????????              C  BUFDRVDP        DD      ?       ; Point
					er to drive parameters 
     391 0010                        C  BUFFINFO        ENDS 
     392                             C   
     393 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
     394                             C                                  ; Size 
					of structure in bytes 
     395                             C   
     396 = 0000                      C  FREEPRI EQU     0 
     397 = 0002                      C  LBRPRI  EQU     2               ; Last 
					byte of buffer read 
     398 = 0004                      C  LBWPRI  EQU     4               ; Last 
					byte written 
     399 = 0006                      C  RPRI    EQU     6               ; Read 
					but not last byte 
     400 = 0008                      C  WPRI    EQU     8               ; Writt
					en but not last byte 
     401 = 000F                      C  DIRPRI  EQU     15              ; Direc
					tory Sector 
     402 = 001E                      C  FATPRI  EQU     30              ; FAT s
					ector 
     403                             C  ;                                      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-23
Disk I/O Buffer Header                                      

					                                    ; 
     404                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     405                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     406                             C   
     407                             C  BREAK <User stack inside of system call
					> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-24
User stack inside of system call                            

     408                             C  ; Location of user registers relative u
					ser stack pointer 
     409                             C   
     410                             C  user_environ    STRUC 
     411 0000  ????                  C  user_AX     DW      ? 
     412 0002  ????                  C  user_BX     DW      ? 
     413 0004  ????                  C  user_CX     DW      ? 
     414 0006  ????                  C  user_DX     DW      ? 
     415 0008  ????                  C  user_SI     DW      ? 
     416 000A  ????                  C  user_DI     DW      ? 
     417 000C  ????                  C  user_BP     DW      ? 
     418 000E  ????                  C  user_DS     DW      ? 
     419 0010  ????                  C  user_ES     DW      ? 
     420 0012  ????                  C  user_IP     DW      ? 
     421 0014  ????                  C  user_CS     DW      ? 
     422 0016  ????                  C  user_F      DW      ? 
     423 0018                        C  user_environ    ENDS 
     424                             C   
     425                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-25
interrupt definitions                                       

     426                             C   
     427 = 0020                      C  INTTAB          EQU     20H 
     428 = 0080                      C  INTBASE         EQU     4 * inttab 
     429 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
     430                             C   
     431                             C          ENDIF 
     432                             C   
     433                             C  ; 
     434                             C  ; interrupt assignments 
     435                             C  ; 
     436                             C          IF      NOT ALTVECT 
     437 =                           C  int_abort           EQU     INTTAB     
					     ; abort process 
     438 = 0021                      C  int_command         EQU     int_abort+1
					     ; call MSDOS 
     439 = 0022                      C  int_terminate       EQU     int_abort+2
					     ; int to terminate address 
     440 = 0023                      C  int_ctrl_c          EQU     int_abort+3
					     ; ^c trapper 
     441 = 0024                      C  int_fatal_abort     EQU     int_abort+4
					     ; hard disk error 
     442 = 0025                      C  int_disk_read       EQU     int_abort+5
					     ; logical sector disk read 
     443 = 0026                      C  int_disk_write      EQU     int_abort+6
					     ; logical sector disk write 
     444 = 0027                      C  int_keep_process    EQU     int_abort+7
					     ; terminate program and stay 
     445                             C                                         
					     ; resident 
     446                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     447                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     448                             C  ;                                      
					                                    ; 
     449 = 0028                      C  int_spooler         EQU     int_abort+8
					     ; spooler call 
     450 = 0029                      C  int_fastcon         EQU     int_abort+9
					     ; fast CON interrupt 
     451                             C  ;                                      
					                                    ; 
     452                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     453                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     454                             C          ENDIF 
     455                             C   
     456 = 0080                      C  addr_int_abort          EQU    4 * int_
					abort 
     457 = 0084                      C  addr_int_command        EQU    4 * int_
					command 
     458 = 0088                      C  addr_int_terminate      EQU    4 * int_
					terminate 
     459 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-26
interrupt definitions                                       

					ctrl_c 
     460 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_
					fatal_abort 
     461 = 0094                      C  addr_int_disk_read      EQU    4 * int_
					disk_read 
     462 = 0098                      C  addr_int_disk_write     EQU    4 * int_
					disk_write 
     463 = 009C                      C  addr_int_keep_process   EQU    4 * int_
					keep_process 
     464                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     465                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     466                             C  ;                                      
					                                    ; 
     467 = 00A0                      C  addr_int_spooler        EQU    4 * int_
					spooler 
     468 = 00A4                      C  addr_int_fastcon        EQU    4 * int_
					fastcon 
     469                             C  ;                                      
					                                    ; 
     470                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     471                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     472                             C   
     473                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-27
Disk map                                                    

     474                             C  ;  MSDOS partitions the disk into 4 sec
					tions: 
     475                             C  ; 
     476                             C  ;  phys sector 0:   +------------------
					-+ 
     477                             C  ;       |           | boot/reserved    
					 | 
     478                             C  ;       |           +------------------
					-+ 
     479                             C  ;       |           |  File allocation 
					 | 
     480                             C  ;       v           |      table(s)    
					 | 
     481                             C  ;                   |  (multiple copies
					 | 
     482                             C  ;                   |     are kept)    
					 | 
     483                             C  ;                   +------------------
					-+ 
     484                             C  ;                   |     Directory    
					 | 
     485                             C  ;                   +------------------
					-+ 
     486                             C  ;                   |     File space   
					 | 
     487                             C  ;                   +------------------
					-+ 
     488                             C  ;                   |   Unaddressable  
					 | 
     489                             C  ;                   |  (to end of disk)
					 | 
     490                             C  ;                   +------------------
					-+ 
     491                             C  ; 
     492                             C  ; All partition boundaries are sector b
					oundaries.  The size of the FAT is 
     493                             C  ; adjusted to maximize the file space a
					ddressable. 
     494                             C   
     495                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-28
Directory entry                                             

     496                             C   
     497                             C  ; 
     498                             C  ;       +---------------------------+ 
     499                             C  ;       |  (12 BYTE) filename/ext   |  
					     0       0 
     500                             C  ;       +---------------------------+ 
     501                             C  ;       |     (BYTE) attributes     |  
					     11      B 
     502                             C  ;       +---------------------------+ 
     503                             C  ;       |    (10 BYTE) reserved     |  
					     12      C 
     504                             C  ;       +---------------------------+ 
     505                             C  ;       | (WORD) time of last write |  
					     22      16 
     506                             C  ;       +---------------------------+ 
     507                             C  ;       | (WORD) date of last write |  
					     24      18 
     508                             C  ;       +---------------------------+ 
     509                             C  ;       |   (WORD) First cluster    |  
					     26      1A 
     510                             C  ;       +---------------------------+ 
     511                             C  ;       |     (DWORD) file size     |  
					     28      1C 
     512                             C  ;       +---------------------------+ 
     513                             C  ; 
     514                             C  ;   First byte of filename  = E5 -> fre
					e directory entry 
     515                             C  ;                           = 00 -> end
					 of allocated directory 
     516                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-
					10=minute, 11-15=hour 
     517                             C  ;   Date:   Bits 0-4=day, bits 5-8=mont
					h, bits 9-15=year-1980 
     518                             C  ; 
     519                             C  dir_entry   STRUC 
     520 0000  000B[                 C  dir_name    DB      11 DUP (?)         
					 ; file name 
     521            ??               C  
     522                         ]   C  
     523                             C  
     524 000B  ??                    C  dir_attr    DB      ?                  
					 ; attribute bits 
     525 000C  000A[                 C  dir_pad     DB      10 DUP (?)         
					 ; reserved for expansion 
     526            ??               C  
     527                         ]   C  
     528                             C  
     529 0016  ????                  C  dir_time    DW      ?                  
					 ; time of last write 
     530 0018  ????                  C  dir_date    DW      ?                  
					 ; date of last write 
     531 001A  ????                  C  dir_first   DW      ?                  
					 ; first allocation unit of file 
     532 001C  ????                  C  dir_size_l  DW      ?                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-29
Directory entry                                             

					 ; low 16 bits of file size 
     533 001E  ????                  C  dir_size_h  DW      ?                  
					 ; high 16 bits of file size 
     534 0020                        C  dir_entry   ENDS 
     535                             C   
     536 = 0001                      C  attr_read_only      EQU      1h 
     537 = 0002                      C  attr_hidden         EQU      2h 
     538 = 0004                      C  attr_system         EQU      4h 
     539 = 0008                      C  attr_volume_id      EQU      8h 
     540 = 0010                      C  attr_directory      EQU     10h 
     541 = 0020                      C  attr_archive        EQU     20h 
     542                             C   
     543 = 0016                      C  attr_all            EQU     attr_hidden
					+attr_system+attr_directory 
     544                             C                                         
					 ; OR of hard attributes for FINDENTRY 
     545                             C   
     546 = 0021                      C  attr_ignore         EQU     attr_read_o
					nly+attr_archive 
     547                             C                                         
					 ; ignore this(ese) attribute(s) during
					 
     548                             C                                         
					 ; search first/next 
     549                             C   
     550 = 0027                      C  attr_changeable     EQU     attr_read_o
					nly+attr_hidden+attr_system+attr_archiv
					e 
     551                             C                                         
					 ; changeable via CHMOD 
     552                             C   
     553                             C  BREAK <File allocation Table informatio
					n> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-30
File allocation Table information                           

     554                             C  ; 
     555                             C  ; The File Allocation Table uses a 12-b
					it entry for each allocation unit on 
     556                             C  ; the disk.  These entries are packed, 
					two for every three bytes.  The content
					s 
     557                             C  ; of entry number N is found by 1) mult
					iplying N by 1.5; 2) adding the result 
     558                             C  ; to the base address of the Allocation
					 Table; 3) fetching the 16-bit word 
     559                             C  ; at this address; 4) If N was odd (so 
					that N*1.5 was not an integer), shift 
     560                             C  ; the word right four bits; 5) mask to 
					12 bits (AND with 0FFF hex).  Entry 
     561                             C  ; number zero is used as an end-of-file
					 trap in the OS and is passed to the 
     562                             C  ; BIOS to help determine disk format.  
					Entry 1 is reserved for future use. 
     563                             C  ; The first available allocation unit i
					s assigned entry number two, and even 
     564                             C  ; though it is the first, is called clu
					ster 2.  Entries greater than 0FF8H 
     565                             C  ; are end of file marks; entries of zer
					o are unallocated.  Otherwise, the 
     566                             C  ; contents of a FAT entry is the number
					 of the next cluster in the file. 
     567                             C  ; 
     568                             C  ; Clusters with bad sectors are tagged 
					with FF7H.  Any non-zero number would 
     569                             C  ; do because these clusters show as all
					ocated, but are not part of any 
     570                             C  ; allocation chain and thus will never 
					be allocated to a file.  A particular 
     571                             C  ; number is selected so that disk check
					ing programs know what to do (ie.  a 
     572                             C  ; cluster with entry FF7H which is not 
					in a chain is not an error). 
     573                             C   
     574                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-31
DPB structure                                               

     575                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     576                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     577                             C  ;                                      
					                                    ; 
     578                             C   
     579 = 0040                      C  DIRSTRLEN       EQU     64      ; Max l
					ength in bytes of directory strings 
     580                             C   
     581                             C  dpb     STRUC 
     582 0000  ??                    C  dpb_drive           DB      ?   ; Logic
					al drive # assoc with DPB (A=0,B=1,...)
					 
     583 0001  ??                    C  dpb_UNIT            DB      ?   ; Drive
					r unit number of DPB 
     584 0002  ????                  C  dpb_sector_size     DW      ?   ; Size 
					of physical sector in bytes 
     585 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Secto
					rs/cluster - 1 
     586 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 
					of sectors/cluster 
     587 0006  ????                  C  dpb_first_FAT       DW      ?   ; Start
					ing record of FATs 
     588 0008  ??                    C  dpb_FAT_count       DB      ?   ; Numbe
					r of FATs for this drive 
     589 0009  ????                  C  dpb_root_entries    DW      ?   ; Numbe
					r of directory entries 
     590 000B  ????                  C  dpb_first_sector    DW      ?   ; First
					 sector of first cluster 
     591 000D  ????                  C  dpb_max_cluster     DW      ?   ; Numbe
					r of clusters on drive + 1 
     592 000F  ??                    C  dpb_FAT_size        DB      ?   ; Numbe
					r of records occupied by FAT 
     593 0010  ????                  C  dpb_dir_sector      DW      ?   ; Start
					ing record of directory 
     594 0012  ????????              C  dpb_driver_addr     DD      ?   ; Point
					er to driver 
     595 0016  ??                    C  dpb_media           DB      ?   ; Media
					 byte 
     596 0017  ??                    C  dpb_first_access    DB      ?   ; This 
					is initialized to -1 to force a media 
     597                             C                                  ; check
					 the first time this DPB is used 
     598 0018  ????????              C  dpb_next_dpb        DD      ?   ; Point
					er to next Drive parameter block 
     599 001C  ????                  C  dpb_current_dir     DW      ?   ; Clust
					er number of start of current directory
					 
     600                             C                                  ; 0 ind
					icates root, -1 indicates invalid (disk
					 
     601                             C                                  ; ?  ch
					anged) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-32
DPB structure                                               

     602 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN D
					UP(?) 
     603            ??               C  
     604                         ]   C  
     605                             C  
     606                             C                                  ; ASCIZ
					 string of current directory 
     607 005E                        C  dpb     ENDS 
     608                             C   
     609 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size 
					of the structure in bytes 
     610                             C   
     611 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size 
					of disk (temp used during init only) 
     612                             C  ;                                      
					                                    ; 
     613                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     614                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     615                             C   
     616                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-33
File Control Block definition                               

     617                             C  ; 
     618                             C  ; Field definition for FCBs 
     619                             C  ; The FCB has the following structure: 
     620                             C  ; 
     621                             C  ;       +---------------------------+ 
     622                             C  ;       |   Drive indicator(byte)   | 
     623                             C  ;       +---------------------------+ 
     624                             C  ;       |    Filename (8 chars)     | 
     625                             C  ;       +---------------------------+ 
     626                             C  ;       |    Extension (3 chars)    | 
     627                             C  ;       +---------------------------+ 
     628                             C  ;       |   Current Extent(word)    | 
     629                             C  ;       +---------------------------+ 
     630                             C  ;       |    Record size (word)     | 
     631                             C  ;       +---------------------------+ 
     632                             C  ;       |    File Size (2 words)    | 
     633                             C  ;       +---------------------------+ 
     634                             C  ;       |       Date of write       | 
     635                             C  ;       +---------------------------+ 
     636                             C  ;       |       Time of write       | 
     637                             C  ;       +---------------------------+ 
     638                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     639                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     640                             C  ;                                      
					                                    ; 
     641                             C  ;       | Flags:                    | 
     642                             C  ;       |  bit 7=0 file/1 device    | 
     643                             C  ;       |  bit 6=0 if dirty         | 
     644                             C  ;       |  bits 0-5 deviceid        | 
     645                             C  ;       +---------------------------+ 
     646                             C  ;       |   first cluster in file   | 
     647                             C  ;       +---------------------------+ 
     648                             C  ;       | position of last cluster  | 
     649                             C  ;       +---------------------------+ 
     650                             C  ;       |   last cluster accessed   |  
					 12 bit-+--- packed in 3 bytes 
     651                             C  ;       +---------------------------+  
					        | 
     652                             C  ;       |     parent directory      |  
					 <------+ 
     653                             C  ;       +---------------------------+ 
     654                             C  ;                                      
					                                    ; 
     655                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     656                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     657                             C  ;       |    next record number     | 
     658                             C  ;       +---------------------------+ 
     659                             C  ;       |   random record number    | 
     660                             C  ;       +---------------------------+ 
     661                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-34
File Control Block definition                               

     662                             C   
     663                             C  sys_fcb     STRUC 
     664 0000  ??                    C  fcb_drive   DB      ? 
     665 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
     666            ??               C  
     667                         ]   C  
     668                             C  
     669 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
     670            ??               C  
     671                         ]   C  
     672                             C  
     673 000C  ????                  C  fcb_EXTENT  DW      ? 
     674 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of r
					ecord (user settable) 
     675 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of f
					ile in bytes; used with the following 
     676                             C                              ; word 
     677 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SE
					ARCH FIRST and SEARCH NEXT 
     678 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of l
					ast writing 
     679 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of l
					ast writing 
     680                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     681                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     682                             C  ;                                      
					                                    ; 
     683 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID
					 number, bits 0-5 if file. 
     684                             C                              ; bit 7=0 f
					or file, bit 7=1 for I/O device 
     685                             C                              ; If file, 
					bit 6=0 if dirty 
     686                             C                              ; If I/O de
					vice, bit 6=0 if EOF (input) 
     687                             C                              ;          
					     Bit 5=1 if Raw mode 
     688                             C                              ;          
					     Bit 0=1 if console input device 
     689                             C                              ;          
					     Bit 1=1 if console output device 
     690                             C                              ;          
					     Bit 2=1 if null device 
     691                             C                              ;          
					     Bit 3=1 if clock device 
     692 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First clu
					ster of file 
     693 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position 
					of last cluster accessed 
     694 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last clus
					ter accessed and directory pack 2 12 
     695 001F  ??                    C              DB      ?       ; bit numbe
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-35
File Control Block definition                               

					rs into 24 bits... 
     696                             C  ;                                      
					                                    ; 
     697                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     698                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     699 0020  ??                    C  fcb_NR      DB      ?       ; Next reco
					rd 
     700 0021  0004[                 C  fcb_RR      DB      4 DUP (?)          
					     ; Random record 
     701            ??               C  
     702                         ]   C  
     703                             C  
     704 0025                        C  sys_fcb     ENDS 
     705                             C   
     706 = 0010                      C  FILDIRENT       = fcb_FILSIZ           
					 ; Used only by SEARCH FIRST and SEARCH
					 
     707                             C                                         
					 ; NEXT 
     708                             C   
     709                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     710                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     711                             C  ;                                      
					                                    ; 
     712 = 0040                      C  devid_file_clean        EQU     40h    
					 ; true if file and not written 
     713 = 003F                      C  devid_file_mask_drive   EQU     3Fh    
					 ; mask for drive number 
     714                             C   
     715 = 0080                      C  devid_device            EQU     80h    
					 ; true if a device 
     716 = 0040                      C  devid_device_EOF        EQU     40h    
					 ; true if end of file reached 
     717 = 0020                      C  devid_device_raw        EQU     20h    
					 ; true if in raw mode 
     718 = 0010                      C  devid_device_special    EQU     10h    
					 ; true if special device 
     719 = 0008                      C  devid_device_clock      EQU     08h    
					 ; true if clock device 
     720 = 0004                      C  devid_device_null       EQU     04h    
					 ; true if null device 
     721 = 0002                      C  devid_device_con_out    EQU     02h    
					 ; true if console output 
     722 = 0001                      C  devid_device_con_in     EQU     01h    
					 ; true if consle input 
     723                             C   
     724                             C  ; 
     725                             C  ; structure of devid field as returned 
					by IOCTL is: 
     726                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-36
File Control Block definition                               

     727                             C  ;       BIT     7   6   5   4   3   2  
					 1   0 
     728                             C  ;             |---|---|---|---|---|---|
					---|---| 
     729                             C  ;             | I | E | R | S | I | I |
					 I | I | 
     730                             C  ;             | S | O | A | P | S | S |
					 S | S | 
     731                             C  ;             | D | F | W | E | C | N |
					 C | C | 
     732                             C  ;             | E |   |   | C | L | U |
					 O | I | 
     733                             C  ;             | V |   |   | L | K | L |
					 T | N | 
     734                             C  ;             |---|---|---|---|---|---|
					---|---| 
     735                             C  ;       ISDEV = 1 if this channel is a 
					device 
     736                             C  ;             = 0 if this channel is a 
					disk file 
     737                             C  ; 
     738                             C  ;       If ISDEV = 1 
     739                             C  ; 
     740                             C  ;             EOF = 0 if End Of File on
					 input 
     741                             C  ;             RAW = 1 if this device is
					 in Raw mode 
     742                             C  ;                 = 0 if this device is
					 cooked 
     743                             C  ;             ISCLK = 1 if this device 
					is the clock device 
     744                             C  ;             ISNUL = 1 if this device 
					is the null device 
     745                             C  ;             ISCOT = 1 if this device 
					is the console output 
     746                             C  ;             ISCIN = 1 if this device 
					is the console input 
     747                             C  ; 
     748                             C  ;       If ISDEV = 0 
     749                             C  ;             EOF = 0 if channel has be
					en written 
     750                             C  ;             Bits 0-5  are  the  block
					  device  number  for 
     751                             C  ;                 the channel (0 = A, 1
					 = B, ...) 
     752                             C  ; 
     753 = 0080                      C  devid_ISDEV     EQU     80h 
     754 = 0040                      C  devid_EOF       EQU     40h 
     755 = 0020                      C  devid_RAW       EQU     20h 
     756 = 0010                      C  devid_SPECIAL   EQU     10H 
     757 = 0008                      C  devid_ISCLK     EQU     08h 
     758 = 0004                      C  devid_ISNUL     EQU     04h 
     759 = 0002                      C  devid_ISCOT     EQU     02h 
     760 = 0001                      C  devid_ISCIN     EQU     01h 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-37
File Control Block definition                               

     761                             C   
     762 = 001F                      C  devid_block_dev EQU     1Fh            
					 ; mask for block device number 
     763                             C   
     764                             C  ; 
     765                             C  ; find first/next buffer 
     766                             C  ; 
     767                             C  find_buf    STRUC 
     768 0000  ??                    C  find_buf_sattr      DB  ?           ; a
					ttribute of search 
     769 0001  ??                    C  find_buf_drive      DB  ?           ; d
					rive of search 
     770 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; f
					ormatted name 
     771            ??               C  
     772                         ]   C  
     773                             C  
     774 000D  ????                  C  find_buf_LastEnt    DW  ?           ; L
					astEnt 
     775 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; T
					his DPB 
     776 0013  ????                  C  find_buf_DirStart   DW  ?           ; D
					irStart 
     777                             C  ;                                      
					                                    ; 
     778                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     779                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     780                             C   
     781 0015  ??                    C  find_buf_attr       DB  ?           ; a
					ttribute found 
     782 0016  ????                  C  find_buf_time       DW  ?           ; t
					ime 
     783 0018  ????                  C  find_buf_date       DW  ?           ; d
					ate 
     784 001A  ????                  C  find_buf_size_l     DW  ?           ; l
					ow(size) 
     785 001C  ????                  C  find_buf_size_h     DW  ?           ; h
					igh(size) 
     786 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; p
					acked name 
     787            ??               C  
     788                         ]   C  
     789                             C  
     790 002B                        C  find_buf    ENDS 
     791                             C   
     792                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-38
Process data block                                          

     793                             C  ; 
     794                             C  ; Process data block (otherwise known a
					s program header) 
     795                             C  ; 
     796                             C   
     797 = 0014                      C  FilPerProc          EQU     20 
     798                             C   
     799                             C  Process_data_block  STRUC 
     800 0000  ????                  C  PDB_Exit_Call       DW      ?          
					 ; INT int_abort system terminate 
     801 0002  ????                  C  PDB_block_len       DW      ?          
					 ; size of execution block 
     802 0004  ??                    C                      DB      ? 
     803 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)      
					 ; ancient call to system 
     804            ??               C  
     805                         ]   C  
     806                             C  
     807 000A  ????????              C  PDB_Exit            DD      ?          
					 ; pointer to exit routine 
     808 000E  ????????              C  PDB_Ctrl_C          DD      ?          
					 ; pointer to ^C routine 
     809 0012  ????????              C  PDB_Fatal_abort     DD      ?          
					 ; pointer to fatal error 
     810                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     811                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     812                             C  ;                                      
					                                    ; 
     813 0016  ????                  C  PDB_Parent_PID      DW      ?          
					 ; PID of parent (terminate PID) 
     814 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP 
					(?) 
     815            ??               C  
     816                         ]   C  
     817                             C  
     818                             C                                         
					 ; indices into system table 
     819                             C  ;                                      
					                                    ; 
     820                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     821                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     822 002C  ????                  C  PDB_environ         DW      ?          
					 ; seg addr of environment 
     823                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     824                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     825                             C  ;                                      
					                                    ; 
     826 002E  ????????              C  PDB_User_stack      DD      ?          
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-39
Process data block                                          

					 ; stack of self during system calls 
     827 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?)
					 
     828            ??               C  
     829                         ]   C  
     830                             C  
     831                             C  ;                                      
					                                    ; 
     832                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     833                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     834 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)  
					 ; portable method of system call 
     835            ??               C  
     836                         ]   C  
     837                             C  
     838                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     839                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     840                             C  ;                                      
					                                    ; 
     841 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?) 
					 ; 
     842            ??               C  
     843                         ]   C  
     844                             C  
     845                             C  ;                                      
					                                    ; 
     846                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     847                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     848 005B                        C  Process_data_block  ENDS 
     849                             C   
     850                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-40
EXEC and EXE file structures                                

     851                             C  ; 
     852                             C  ; EXEC arg block - load/go program 
     853                             C  ; 
     854                             C   
     855                             C  ; 
     856                             C  ; The following get used as arguments t
					o the EXEC system call.  They indicate 
     857                             C  ; whether or not the program is execute
					d or whether or not a program header 
     858                             C  ; gets created. 
     859                             C  ; 
     860 = 0001                      C  exec_func_no_execute    EQU 1          
					 ; no execute bit 
     861 = 0002                      C  exec_func_overlay       EQU 2          
					 ; overlay bit 
     862                             C   
     863                             C  Exec0           STRUC 
     864 0000  ????                  C  Exec0_environ   DW      ?              
					 ; seg addr of environment 
     865 0002  ????????              C  Exec0_com_line  DD      ?              
					 ; pointer to asciz command line 
     866 0006  ????????              C  Exec0_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     867 000A  ????????              C  Exec0_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     868 000E                        C  Exec0           ENDS 
     869                             C   
     870                             C  Exec1           STRUC 
     871 0000  ????                  C  Exec1_environ   DW      ?              
					 ; seg addr of environment 
     872 0002  ????????              C  Exec1_com_line  DD      ?              
					 ; pointer to asciz command line 
     873 0006  ????????              C  Exec1_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     874 000A  ????????              C  Exec1_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     875 000E  ????                  C  Exec1_SP        DW      ?              
					 ; stack pointer of program 
     876 0010  ????                  C  Exec1_SS        DW      ?              
					 ; stack seg register of program 
     877 0012  ????                  C  Exec1_IP        DW      ?              
					 ; entry point IP 
     878 0014  ????                  C  Exec1_CS        DW      ?              
					 ; entry point CS 
     879 0016                        C  Exec1           ENDS 
     880                             C   
     881                             C  Exec3           STRUC 
     882 0000  ????                  C  Exec3_load_addr DW      ?              
					 ; seg address of load point 
     883 0002  ????                  C  Exec3_reloc_fac DW      ?              
					 ; relocation factor 
     884 0004                        C  Exec3           ENDS 
     885                             C   
     886                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-41
EXEC and EXE file structures                                

     887                             C  ; Exit codes in upper byte 
     888                             C  ; 
     889 = 0000                      C  Exit_terminate      EQU     0 
     890 = 0000                      C  Exit_abort          EQU     0 
     891 = 0001                      C  Exit_Ctrl_C         EQU     1 
     892 = 0002                      C  Exit_Hard_Error     EQU     2 
     893 = 0003                      C  Exit_Keep_process   EQU     3 
     894                             C   
     895                             C  ; 
     896                             C  ; EXE file header 
     897                             C  ; 
     898                             C   
     899                             C  EXE_file    STRUC 
     900 0000  ????                  C  exe_signature   DW  ?                  
					 ; must contain 4D5A  (yay zibo!) 
     901 0002  ????                  C  exe_len_mod_512 DW  ?                  
					 ; low 9 bits of length 
     902 0004  ????                  C  exe_pages       DW  ?                  
					 ; number of 512b pages in file 
     903 0006  ????                  C  exe_rle_count   DW  ?                  
					 ; count of reloc entries 
     904 0008  ????                  C  exe_par_dir     DW  ?                  
					 ; number of paragraphs before image 
     905 000A  ????                  C  exe_min_BSS     DW  ?                  
					 ; minimum number of para of BSS 
     906 000C  ????                  C  exe_max_BSS     DW  ?                  
					 ; max number of para of BSS 
     907 000E  ????                  C  exe_SS          DW  ?                  
					 ; stack of image 
     908 0010  ????                  C  exe_SP          DW  ?                  
					 ; SP of image 
     909 0012  ????                  C  exe_chksum      DW  ?                  
					 ; checksum  of file (ignored) 
     910 0014  ????                  C  exe_IP          DW  ?                  
					 ; IP of entry 
     911 0016  ????                  C  exe_CS          DW  ?                  
					 ; CS of entry 
     912 0018  ????                  C  exe_rle_table   DW  ?                  
					 ; byte offset of reloc table 
     913 001A  ????                  C  exe_iov         DW  ?                  
					 ; overlay number (0 for root) 
     914 001C  ????????              C  exe_sym_tab     DD  ?                  
					 ; offset of symbol table in file 
     915 0020                        C  EXE_file    ENDS 
     916                             C   
     917 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
     918 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
     919                             C   
     920                             C  symbol_entry    STRUC 
     921 0000  ????????              C  sym_value       DD  ? 
     922 0004  ????                  C  sym_type        DW  ? 
     923 0006  ??                    C  sym_len         DB  ? 
     924 0007  00FF[                 C  sym_name        DB  255 dup (?) 
     925            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-42
EXEC and EXE file structures                                

     926                         ]   C  
     927                             C  
     928 0106                        C  symbol_entry    ENDS 
     929                             C   
     930                             C  BREAK <Internal system file table forma
					t> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-43
Internal system file table format                           

     931                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     932                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     933                             C  ;                                      
					                                    ; 
     934                             C  ; 
     935                             C  ; system file table 
     936                             C  ; 
     937                             C   
     938                             C  sft             STRUC 
     939 0000  ????????              C  sft_link        DD      ? 
     940 0004  ????                  C  sft_count       DW      ?              
					 ; number of entries 
     941 0006  ????                  C  sft_table       DW      ?              
					 ; beginning of array of the following 
     942 0008                        C  sft             ENDS 
     943                             C   
     944                             C  ; 
     945                             C  ; system file table entry 
     946                             C  ; 
     947                             C   
     948                             C  sf_entry        STRUC 
     949 0000  ??                    C  sf_ref_count    DB      ?              
					 ; number of processes sharing fcb 
     950 0001  ??                    C  sf_mode         DB      ?              
					 ; mode of access 
     951 0002  ??                    C  sf_attr         DB      ?              
					 ; attribute of file 
     952 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) 
					DUP (?) 
     953            ??               C  
     954                         ]   C  
     955                             C  
     956                             C                                         
					 ; actual FCB 
     957 0028                        C  sf_entry        ENDS 
     958                             C   
     959 = 0005                      C  sf_default_number   EQU     5h 
     960                             C  ;                                      
					                                    ; 
     961                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     962                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     963                             C   
     964                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-44
Memory arena structure                                      

     965                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     966                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     967                             C  ;                                      
					                                    ; 
     968                             C  ; 
     969                             C  ; arena item 
     970                             C  ; 
     971                             C  arena   STRUC 
     972 0000  ??                    C  arena_signature     DB  ?              
					 ; 4D for valid item, 5A for last item 
     973 0001  ????                  C  arena_owner         DW  ?              
					 ; owner of arena item 
     974 0003  ????                  C  arena_size          DW  ?              
					 ; size in paragraphs of item 
     975 0005                        C  arena   ENDS 
     976                             C   
     977                             C  ; 
     978                             C  ; Current structure of the data returne
					d by the international call 
     979                             C  ; 
     980                             C   
     981                             C  internat_block STRUC 
     982 0000  ????                  C  Date_tim_format DW      ?           ; 0
					-USA, 1-EUR, 2-JAP 
     983 0002  ??                    C  Currency_sym    DB      ?           ; C
					urrency Symbol 5 bytes 
     984 0003  ??                    C                  DB      ? 
     985 0004  ??                    C                  DB      ? 
     986 0005  ??                    C                  DB      ? 
     987 0006  ??                    C                  DB      ? 
     988 0007  ??                    C  Thous_sep       DB      ?           ; T
					housands separator 2 bytes 
     989 0008  ??                    C                  DB      ? 
     990 0009  ??                    C  Decimal_sep     DB      ?           ; D
					ecimal separator 2 bytes 
     991 000A  ??                    C                  DB      ? 
     992 000B  ??                    C  Date_sep        DB      ?           ; D
					ate separator 2 bytes 
     993 000C  ??                    C                  DB      ? 
     994 000D  ??                    C  Time_sep        DB      ?           ; D
					ecimal separator 2 bytes 
     995 000E  ??                    C                  DB      ? 
     996 000F  ??                    C  Bit_feild       DB      ?           ; B
					it values 
     997                             C                                      ;  
					 Bit 0 = 0 if currency symbol first 
     998                             C                                      ;  
					       = 1 if currency symbol last 
     999                             C                                      ;  
					 Bit 1 = 0 if No space after currency s
					ymbol 
    1000                             C                                      ;  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-45
Memory arena structure                                      

					       = 1 if space after currency symb
					ol 
    1001 0010  ??                    C  Currency_cents  DB      ?           ; N
					umber of places after currency dec poin
					t 
    1002 0011  ??                    C  Time_24         DB      ?           ; 1
					 if 24 hour time, 0 if 12 hour time 
    1003 0012  ????                  C  Map_call        DW      ?           ; A
					ddress of case mapping call (DWORD) 
    1004 0014  ????                  C                  DW      ?           ; T
					HIS IS TWO WORDS SO IT CAN BE INITIALIZ
					ED 
    1005                             C                                      ;  
					in pieces. 
    1006 0016  ??                    C  Data_sep        DB      ?           ; D
					ata list separator character 
    1007 0017  ??                    C                  DB      ? 
    1008 0018                        C  internat_block ENDS 
    1009                             C   
    1010                             C  ; 
    1011                             C  ; Max size of the block returned by the
					 INTERNATIONAL call 
    1012                             C  ; 
    1013 = 0020                      C  internat_block_max      EQU     32 
    1014                             C   
    1015                             C  ; 
    1016                             C  ; CAUTION: The routines in ALLOC.ASM re
					ly on the fact that arena_signature 
    1017                             C  ; and arena_owner_system are all equal 
					to zero and are contained in DI.  Chang
					e 
    1018                             C  ; them and change ALLOC.ASM. 
    1019                             C   
    1020 = 0000                      C  arena_owner_system  EQU 0              
					 ; free block indication 
    1021                             C   
    1022 = 004D                      C  arena_signature_normal  EQU 4Dh        
					 ; valid signature, not end of arena 
    1023 = 005A                      C  arena_signature_end     EQU 5Ah        
					 ; valid signature, last block in arena
					 
    1024                             C  ;                                      
					                                    ; 
    1025                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1026                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1027                             C   
    1028                             C  BREAK <Machine instruction definitions>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-46
Machine instruction definitions                             

    1029                             C   
    1030 = 00CD                      C  mi_INT          EQU     0CDh 
    1031 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
    1032 = 009A                      C  mi_Long_CALL    EQU     09Ah 
    1033 = 00CB                      C  mi_Long_RET     EQU     0CBh 
    1034                             C   
    1035                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-47
Standard I/O assignments                                    

    1036                             C   
    1037 = 0000                      C  stdin       EQU     0 
    1038 = 0001                      C  stdout      EQU     1 
    1039 = 0002                      C  stderr      EQU     2 
    1040 = 0003                      C  stdaux      EQU     3 
    1041 = 0004                      C  stdprn      EQU     4 
    1042                             C   
    1043                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-48
Xenix subfunction assignments                               

    1044                             C   
    1045 = 0000                      C  open_for_read   EQU 0 
    1046 = 0001                      C  open_for_write  EQU 1 
    1047 = 0002                      C  open_for_both   EQU 2 
    1048                             C   
    1049                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-49
Xenix error codes                                           

    1050                             C   
    1051                             C  ; 
    1052                             C  ; XENIX calls all return error codes th
					rough AX.  If an error occurred then 
    1053                             C  ; the carry bit will be set and the err
					or code is in AX.  If no error occurred
					 
    1054                             C  ; then the carry bit is reset and AX co
					ntains returned info. 
    1055                             C  ; 
    1056                             C   
    1057 =                           C  no_error_occurred               EQU    
					 0                                     
					                         ? 
    1058                             C   
    1059 = 0001                      C  error_invalid_function          EQU    
					 1 
    1060 = 0002                      C  error_file_not_found            EQU    
					 2 
    1061 = 0003                      C  error_path_not_found            EQU    
					 3 
    1062 = 0004                      C  error_too_many_open_files       EQU    
					 4 
    1063 = 0005                      C  error_access_denied             EQU    
					 5 
    1064 = 0006                      C  error_invalid_handle            EQU    
					 6 
    1065 = 0007                      C  error_arena_trashed             EQU    
					 7 
    1066 = 0008                      C  error_not_enough_memory         EQU    
					 8 
    1067 = 0009                      C  error_invalid_block             EQU    
					 9 
    1068 = 000A                      C  error_bad_environment           EQU    
					 10 
    1069 = 000B                      C  error_bad_format                EQU    
					 11 
    1070 = 000C                      C  error_invalid_access            EQU    
					 12 
    1071 = 000D                      C  error_invalid_data              EQU    
					 13 
    1072                             C  ;**** unused                    EQU    
					 14 
    1073 = 000F                      C  error_invalid_drive             EQU    
					 15 
    1074 = 0010                      C  error_current_directory         EQU    
					 16 
    1075 = 0011                      C  error_not_same_device           EQU    
					 17 
    1076 = 0012                      C  error_no_more_files             EQU    
					 18 
    1077                             C   
    1078 =                           C  country_not_found               EQU    
					 error_file_not_found 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-50
Xenix error codes                                           

    1079 =                           C  alloc_not_enough_memory         EQU    
					 error_not_enough_memory 
    1080 =                           C  alloc_arena_trashed             EQU    
					 error_arena_trashed 
    1081                             C   
    1082 =                           C  close_invalid_handle            EQU    
					 error_invalid_handle 
    1083 =                           C  close_invalid_function          EQU    
					 error_invalid_function 
    1084                             C   
    1085 =                           C  chdir_path_not_found            EQU    
					 error_path_not_found 
    1086                             C   
    1087 =                           C  chmod_path_not_found            EQU    
					 error_path_not_found 
    1088 =                           C  chmod_access_denied             EQU    
					 error_access_denied 
    1089 =                           C  chmod_invalid_function          EQU    
					 error_invalid_function 
    1090                             C   
    1091 =                           C  creat_access_denied             EQU    
					 error_access_denied 
    1092 =                           C  creat_path_not_found            EQU    
					 error_path_not_found 
    1093 =                           C  creat_too_many_open_files       EQU    
					 error_too_many_open_files 
    1094                             C   
    1095 =                           C  curdir_invalid_drive            EQU    
					 error_invalid_drive 
    1096                             C   
    1097 =                           C  dealloc_invalid_block           EQU    
					 error_invalid_block 
    1098 =                           C  dealloc_arena_trashed           EQU    
					 error_arena_trashed 
    1099                             C   
    1100 =                           C  dup_invalid_handle              EQU    
					 error_invalid_handle 
    1101 =                           C  dup_too_many_open_files         EQU    
					 error_too_many_open_files 
    1102                             C   
    1103 =                           C  dup2_invalid_handle             EQU    
					 error_invalid_handle 
    1104                             C   
    1105 =                           C  exec_invalid_function           EQU    
					 error_invalid_function 
    1106 =                           C  exec_bad_environment            EQU    
					 error_bad_environment 
    1107 =                           C  exec_bad_format                 EQU    
					 error_bad_format 
    1108 =                           C  exec_not_enough_memory          EQU    
					 error_not_enough_memory 
    1109 =                           C  exec_file_not_found             EQU    
					 error_file_not_found 
    1110                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-51
Xenix error codes                                           

    1111 =                           C  filetimes_invalid_function      EQU    
					 error_invalid_function 
    1112 =                           C  filetimes_invalid_handle        EQU    
					 error_invalid_handle 
    1113                             C   
    1114 =                           C  findfirst_file_not_found        EQU    
					 error_file_not_found 
    1115 =                           C  findfirst_no_more_files         EQU    
					 error_no_more_files 
    1116 =                           C  findnext_no_more_files          EQU    
					 error_no_more_files 
    1117                             C   
    1118 =                           C  international_invalid_function  EQU    
					 error_invalid_function 
    1119                             C   
    1120 =                           C  ioctl_invalid_handle            EQU    
					 error_invalid_handle 
    1121 =                           C  ioctl_invalid_function          EQU    
					 error_invalid_function 
    1122 =                           C  ioctl_invalid_data              EQU    
					 error_invalid_data 
    1123                             C   
    1124 =                           C  lseek_invalid_handle            EQU    
					 error_invalid_handle 
    1125 =                           C  lseek_invalid_function          EQU    
					 error_invalid_function 
    1126                             C   
    1127 =                           C  mkdir_path_not_found            EQU    
					 error_path_not_found 
    1128 =                           C  mkdir_access_denied             EQU    
					 error_access_denied 
    1129                             C   
    1130 =                           C  open_invalid_access             EQU    
					 error_invalid_access 
    1131 =                           C  open_file_not_found             EQU    
					 error_file_not_found 
    1132 =                           C  open_access_denied              EQU    
					 error_access_denied 
    1133 =                           C  open_too_many_open_files        EQU    
					 error_too_many_open_files 
    1134                             C   
    1135 =                           C  read_invalid_handle             EQU    
					 error_invalid_handle 
    1136 =                           C  read_access_denied              EQU    
					 error_access_denied 
    1137                             C   
    1138 =                           C  rename_file_not_found           EQU    
					 error_file_not_found 
    1139 =                           C  rename_not_same_device          EQU    
					 error_not_same_device 
    1140 =                           C  rename_access_denied            EQU    
					 error_access_denied 
    1141                             C   
    1142 =                           C  rmdir_path_not_found            EQU    
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-52
Xenix error codes                                           

					 error_path_not_found 
    1143 =                           C  rmdir_access_denied             EQU    
					 error_access_denied 
    1144 =                           C  rmdir_current_directory         EQU    
					 error_current_directory 
    1145                             C   
    1146 =                           C  setblock_invalid_block          EQU    
					 error_invalid_block 
    1147 =                           C  setblock_arena_trashed          EQU    
					 error_arena_trashed 
    1148 =                           C  setblock_not_enough_memory      EQU    
					 error_not_enough_memory 
    1149 =                           C  setblock_invalid_function       EQU    
					 error_invalid_function 
    1150                             C   
    1151 =                           C  unlink_file_not_found           EQU    
					 error_file_not_found 
    1152 =                           C  unlink_access_denied            EQU    
					 error_access_denied 
    1153                             C   
    1154 =                           C  write_invalid_handle            EQU    
					 error_invalid_handle 
    1155 =                           C  write_access_denied             EQU    
					 error_access_denied 
    1156                             C   
    1157                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-53
system call definitions                                     

    1158                             C   
    1159 = 0000                      C  Abort                           EQU 0  
					 ;  0      0 
    1160 = 0001                      C  Std_Con_Input                   EQU 1  
					 ;  1      1 
    1161 = 0002                      C  Std_Con_Output                  EQU 2  
					 ;  2      2 
    1162 = 0003                      C  Std_Aux_Input                   EQU 3  
					 ;  3      3 
    1163 = 0004                      C  Std_Aux_Output                  EQU 4  
					 ;  4      4 
    1164 = 0005                      C  Std_Printer_Output              EQU 5  
					 ;  5      5 
    1165 = 0006                      C  Raw_Con_IO                      EQU 6  
					 ;  6      6 
    1166 = 0007                      C  Raw_Con_Input                   EQU 7  
					 ;  7      7 
    1167 = 0008                      C  Std_Con_Input_No_Echo           EQU 8  
					 ;  8      8 
    1168 = 0009                      C  Std_Con_String_Output           EQU 9  
					 ;  9      9 
    1169 = 000A                      C  Std_Con_String_Input            EQU 10 
					 ; 10      A 
    1170 = 000B                      C  Std_Con_Input_Status            EQU 11 
					 ; 11      B 
    1171 = 000C                      C  Std_Con_Input_Flush             EQU 12 
					 ; 12      C 
    1172 = 000D                      C  Disk_Reset                      EQU 13 
					 ; 13      D 
    1173 = 000E                      C  Set_Default_Drive               EQU 14 
					 ; 14      E 
    1174 = 000F                      C  FCB_Open                        EQU 15 
					 ; 15      F 
    1175 = 0010                      C  FCB_Close                       EQU 16 
					 ; 16     10 
    1176 = 0011                      C  Dir_Search_First                EQU 17 
					 ; 17     11 
    1177 = 0012                      C  Dir_Search_Next                 EQU 18 
					 ; 18     12 
    1178 = 0013                      C  FCB_Delete                      EQU 19 
					 ; 19     13 
    1179 = 0014                      C  FCB_Seq_Read                    EQU 20 
					 ; 20     14 
    1180 = 0015                      C  FCB_Seq_Write                   EQU 21 
					 ; 21     15 
    1181 = 0016                      C  FCB_Create                      EQU 22 
					 ; 22     16 
    1182 = 0017                      C  FCB_Rename                      EQU 23 
					 ; 23     17 
    1183 = 0019                      C  Get_Default_Drive               EQU 25 
					 ; 25     19 
    1184 = 001A                      C  Set_DMA                         EQU 26 
					 ; 26     1A 
    1185                             C  ;----+----+----+----+----+----+----+---
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-54
system call definitions                                     

					-+----+----+----+----+----+----+----; 
    1186                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1187                             C  ;                                      
					                                    ; 
    1188 = 001F                      C  Get_Default_DPB                 EQU 31 
					 ; 31     1F 
    1189                             C  ;                                      
					                                    ; 
    1190                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1191                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1192 = 0021                      C  FCB_Random_Read                 EQU 33 
					 ; 33     21 
    1193 = 0022                      C  FCB_Random_Write                EQU 34 
					 ; 34     22 
    1194 = 0023                      C  Get_FCB_File_Length             EQU 35 
					 ; 35     23 
    1195 = 0024                      C  Get_FCB_Position                EQU 36 
					 ; 36     24 
    1196 = 0025                      C  Set_Interrupt_Vector            EQU 37 
					 ; 37     25 
    1197 = 0026                      C  Create_Process_Data_Block       EQU 38 
					 ; 38     26 
    1198 = 0027                      C  FCB_Random_Read_Block           EQU 39 
					 ; 39     27 
    1199 = 0028                      C  FCB_Random_Write_Block          EQU 40 
					 ; 40     28 
    1200 = 0029                      C  Parse_File_Descriptor           EQU 41 
					 ; 41     29 
    1201 = 002A                      C  Get_Date                        EQU 42 
					 ; 42     2A 
    1202 = 002B                      C  Set_Date                        EQU 43 
					 ; 43     2B 
    1203 = 002C                      C  Get_Time                        EQU 44 
					 ; 44     2C 
    1204 = 002D                      C  Set_Time                        EQU 45 
					 ; 45     2D 
    1205 = 002E                      C  Set_Verify_On_Write             EQU 46 
					 ; 46     2E 
    1206                             C  ; Extended functionality group 
    1207 = 002F                      C  Get_DMA                         EQU 47 
					 ; 47     2F 
    1208 = 0030                      C  Get_Version                     EQU 48 
					 ; 48     30 
    1209 = 0031                      C  Keep_Process                    EQU 49 
					 ; 49     31 
    1210                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1211                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1212                             C  ;                                      
					                                    ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-55
system call definitions                                     

    1213 = 0032                      C  Get_DPB                         EQU 50 
					 ; 50     32 
    1214                             C  ;                                      
					                                    ; 
    1215                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1216                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1217 = 0033                      C  Set_CTRL_C_Trapping             EQU 51 
					 ; 51     33 
    1218 = 0034                      C  Get_InDOS_Flag                  EQU 52 
					 ; 52     34 
    1219 = 0035                      C  Get_Interrupt_Vector            EQU 53 
					 ; 53     35 
    1220 = 0036                      C  Get_Drive_Freespace             EQU 54 
					 ; 54     36 
    1221 = 0037                      C  Char_Oper                       EQU 55 
					 ; 55     37 
    1222 = 0038                      C  International                   EQU 56 
					 ; 56     38 
    1223                             C  ;   Directory Group 
    1224 = 0039                      C  MKDir                           EQU 57 
					 ; 57     39 
    1225 = 003A                      C  RMDir                           EQU 58 
					 ; 58     3A 
    1226 = 003B                      C  CHDir                           EQU 59 
					 ; 59     3B 
    1227                             C  ;   File Group 
    1228 = 003C                      C  Creat                           EQU 60 
					 ; 60     3C 
    1229 = 003D                      C  Open                            EQU 61 
					 ; 61     3D 
    1230 = 003E                      C  Close                           EQU 62 
					 ; 62     3E 
    1231 = 003F                      C  Read                            EQU 63 
					 ; 63     3F 
    1232 = 0040                      C  Write                           EQU 64 
					 ; 64     40 
    1233 = 0041                      C  Unlink                          EQU 65 
					 ; 65     41 
    1234 = 0042                      C  LSeek                           EQU 66 
					 ; 66     42 
    1235 = 0043                      C  CHMod                           EQU 67 
					 ; 67     43 
    1236 = 0044                      C  IOCtl                           EQU 68 
					 ; 68     44 
    1237 = 0045                      C  XDup                            EQU 69 
					 ; 69     45 
    1238 = 0046                      C  XDup2                           EQU 70 
					 ; 70     46 
    1239 = 0047                      C  Current_Dir                     EQU 71 
					 ; 71     47 
    1240                             C  ;    Memory Group 
    1241 = 0048                      C  Alloc                           EQU 72 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-56
system call definitions                                     

					 ; 72     48 
    1242 = 0049                      C  Dealloc                         EQU 73 
					 ; 73     49 
    1243 = 004A                      C  Setblock                        EQU 74 
					 ; 74     4A 
    1244                             C  ;    Process Group 
    1245 = 004B                      C  Exec                            EQU 75 
					 ; 75     4B 
    1246 = 004C                      C  Exit                            EQU 76 
					 ; 76     4C 
    1247 = 004D                      C  Wait                            EQU 77 
					 ; 77     4D 
    1248 = 004E                      C  Find_First                      EQU 78 
					 ; 78     4E 
    1249                             C  ;   Special Group 
    1250 = 004F                      C  Find_Next                       EQU 79 
					 ; 79     4F 
    1251                             C  ; SPECIAL SYSTEM GROUP 
    1252                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1253                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1254                             C  ;                                      
					                                    ; 
    1255 = 0050                      C  Set_Current_PDB                 EQU 80 
					 ; 80     50 
    1256 = 0051                      C  Get_Current_PDB                 EQU 81 
					 ; 81     51 
    1257 = 0052                      C  Get_In_Vars                     EQU 82 
					 ; 82     52 
    1258 = 0053                      C  SetDPB                          EQU 83 
					 ; 83     53 
    1259                             C  ;                                      
					                                    ; 
    1260                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1261                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1262 = 0054                      C  Get_Verify_On_Write             EQU 84 
					 ; 84     54 
    1263                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1264                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1265                             C  ;                                      
					                                    ; 
    1266 = 0055                      C  Dup_PDB                         EQU 85 
					 ; 85     55 
    1267                             C  ;                                      
					                                    ; 
    1268                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1269                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-57
system call definitions                                     

    1270 = 0056                      C  Rename                          EQU 86 
					 ; 86     56 
    1271 = 0057                      C  File_Times                      EQU 87 
					 ; 87     57 
    1272 = 0058                      C  AllocOper                       EQU 88 
					 ; 88     58 
    1273                             C  ; Network extention system calls 
    1274 = 0059                      C  GetExtendedError                EQU 89 
					 ; 89     59 
    1275 = 005A                      C  CreateTempFile                  EQU 90 
					 ; 90     5A 
    1276 = 005B                      C  CreateNewFile                   EQU 91 
					 ; 91     5B 
    1277 = 005C                      C  LockOper                        EQU 92 
					 ; 92     5C Lock and Unlock 
    1278 = 005D                      C  ServerCall                      EQU 93 
					 ; 93     5D CommitAll, ServerDOSCall, 
    1279                             C                                         
					 ;           CloseByName, CloseUser, 
    1280                             C                                         
					 ;           CloseUserProcess, 
    1281                             C                                         
					 ;           GetOpenFileList 
    1282 = 005E                      C  UserIDOper                      EQU 94 
					 ; 94     5E Get and Set 
    1283 = 005F                      C  AssignOper                      EQU 95 
					 ; 95     5F On, Off, Get, Set, Cancel 
    1284                             C   
    1285 = 00F8                      C  Set_Oem_Handler                 EQU 248
					 ; 248    F8 
    1286 = 00F9                      C  OEM_C1                          EQU 249
					 ; 249    F9 
    1287 = 00FA                      C  OEM_C2                          EQU 250
					 ; 250    FA 
    1288 = 00FB                      C  OEM_C3                          EQU 251
					 ; 251    FB 
    1289 = 00FC                      C  OEM_C4                          EQU 252
					 ; 252    FC 
    1290 = 00FD                      C  OEM_C5                          EQU 253
					 ; 253    FD 
    1291 = 00FE                      C  OEM_C6                          EQU 254
					 ; 254    FE 
    1292 = 00FF                      C  OEM_C7                          EQU 255
					 ; 255    FF 
    1293                             C  SUBTTL 
    1294                                 
    1295                                ; 
    1296                                ; segment ordering for MSDOS 
    1297                                ; 
    1298                                 
    1299 0000                           CONSTANTS       SEGMENT BYTE PUBLIC 'CO
					NST' 
    1300 0000                           CONSTANTS       ENDS 
    1301                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-58
                                                            

    1302 0000                           DATA            SEGMENT BYTE PUBLIC 'DA
					TA' 
    1303 0000                           DATA            ENDS 
    1304                                 
    1305 0000                           CODE            SEGMENT BYTE PUBLIC 'CO
					DE' 
    1306 0000                           CODE            ENDS 
    1307                                 
    1308 0000                           LAST            SEGMENT BYTE PUBLIC 'LA
					ST' 
    1309 0000                           LAST            ENDS 
    1310                                 
    1311                                DOSGROUP    GROUP   CODE,CONSTANTS,DATA
					,LAST 
    1312                                 
    1313 0000                           CONSTANTS       SEGMENT BYTE PUBLIC 'CO
					NST' 
    1314                                 
    1315                                        PUBLIC  DIVMES 
    1316 0000  0D 0A 44 69 76 69 64     DIVMES  DB      13,10,"Divide overflow"
					,13,10 
    1317       65 20 6F 76 65 72 66     
    1318       6C 6F 77 0D 0A           
    1319                                 
    1320                                        PUBLIC  DivMesLen 
    1321 0013  13                       DivMesLen   DB  $-DivMes        ; Lengt
					h of the above message in bytes 
    1322                                 
    1323                                 
    1324                                ; 
    1325                                ; The next variable points to the count
					ry table for the current country 
    1326                                ;       ( the table returned by the AL=
					0 INTERNATIONAL call). 
    1327                                ; 
    1328                                        PUBLIC  Current_Country 
    1329                                 
    1330                                        ELSE 
    1331 0014  0018 R                   Current_Country DW      OFFSET DOSGROUP
					:USTABLE 
    1332                                        ENDIF 
    1333                                 
    1334                                ; 
    1335                                ; The international tabel(s). 
    1336                                ; This is simply a sequence of tables o
					f the following form: 
    1337                                ; 
    1338                                ;               BYTE  Size of this tabl
					e excluding this byte and the next 
    1339                                ;               BYTE  Country code repr
					esented by this table 
    1340                                ;	                A sequence of n bytes
					, where n is the number specified 
    1341                                ;                       by the first by
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-59
                                                            

					te above and is not > internat_block_ma
					x, 
    1342                                ;                       in the correct 
					order for being returned by the 
    1343                                ;                       INTERNATIONAL c
					all as follows: 
    1344                                ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
					 
    1345                                ;		5 BYTE	Currency symbol null terminat
					ed 
    1346                                ;		2 BYTE	thousands separator null term
					inated 
    1347                                ;		2 BYTE	Decimal point null terminated
					 
    1348                                ;		2 BYTE	Date separator null terminate
					d 
    1349                                ;		2 BYTE	Time separator null terminate
					d 
    1350                                ;		1 BYTE	Bit field.  Currency format. 
    1351                                ;			Bit 0.  =0 $ before #  =1 $ after #
					 
    1352                                ;			Bit 1.	no. of spaces between # and 
					$ (0 or 1) 
    1353                                ;		1 BYTE	No. of significant decimal di
					gits in currency 
    1354                                ;		1 BYTE	Bit field.  Time format. 
    1355                                ;			Bit 0.  =0 12 hour clock  =1 24 hou
					r 
    1356                                ;		WORD	Segment offset for address of c
					ase conversion routine 
    1357                                ;		WORD	RESERVED.  Filled in by DOS.  S
					egment value for above routine 
    1358                                ;		2 BYTE	Data list separator null term
					inated. 
    1359                                ;                  NOTE: The segment pa
					rt of the DWORD Map_call is set 
    1360                                ;                       by the INTERNAT
					IONAL call. Do not try to initialize 
    1361                                ;                       it to anything 
					meaningful. 
    1362                                ; 
    1363                                ; The list of tables is terminated by p
					utting a byte of -1 after the last 
    1364                                ;       table (a table with length -1).
					 
    1365                                 
    1366                                        PUBLIC  international_table 
    1367                                 
    1368 0016                           international_table LABEL       BYTE 
    1369                                 
    1370                                        ENDIF 
    1371                                 
    1372 0016  18                                           DB  SIZE internat_b
					lock   ; Size in bytes of this table 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-60
                                                            

    1373 0017  01                                           DB  1              
					 ; Country code 
    1374 0018  0000                     USTABLE internat_block <0,'$',0,0,0,0,'
					,',0,'.',0,'-',0,':',0,0,2,0,OFFSET DOS
					GROUP:MAP_DCASE,0,',',0> 
    1375 001A  24                       
    1376 001B  00                       
    1377 001C  00                       
    1378 001D  00                       
    1379 001E  00                       
    1380 001F  2C                       
    1381 0020  00                       
    1382 0021  2E                       
    1383 0022  00                       
    1384 0023  2D                       
    1385 0024  00                       
    1386 0025  3A                       
    1387 0026  00                       
    1388 0027  00                       
    1389 0028  02                       
    1390 0029  00                       
    1391 002A  0000 R                   
    1392 002C  0000                     
    1393 002E  2C                       
    1394 002F  00                       
    1395                                
    1396                                ;	Tables for the IBM PC character set f
					ollow.  The values 
    1397                                ;	associated with some of the currency 
					symbols may change with 
    1398                                ;	other character sets.  You may wish t
					o add or delete country 
    1399                                ;	entries.  NOTE: It is not a mistake t
					hat the JAPANESE entry 
    1400                                ;	has different currency symbols for th
					e KANJI and 
    1401                                ;	non-KANJI versions. 
    1402                                 
    1403                                IF	NOT	KANJI 
    1404                                ENDIF 
    1405                                ENDIF 
    1406 0030  FF                                           DB  -1             
					 ; End of tables 
    1407                                 
    1408 0031                           CONSTANTS       ENDS 
    1409                                 
    1410                                 
    1411 0000                           CODE            SEGMENT BYTE PUBLIC 'CO
					DE' 
    1412                                ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHI
					NG,SS:NOTHING 
    1413                                 
    1414                                ;CASE MAPPER ROUTINE FOR 80H-FFH charac
					ter range 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-61
                                                            

    1415                                ;     ENTRY: AL = Character to map 
    1416                                ;     EXIT:  AL = The converted charact
					er 
    1417                                ; Alters no registers except AL and fla
					gs. 
    1418                                ; The routine should do nothing to char
					s below 80H. 
    1419                                ; 
    1420                                ; Example: 
    1421 0000                                  MAP_DCASE       PROC FAR 
    1422                                IF	NOT	KANJI 
    1423                                ENDIF 
    1424                                ENDIF 
    1425 0000  CB                              L_RET:  RET 
    1426                                       MAP_DCASE ENDP 
    1427                                IF	NOT KANJI 
    1428                                ENDIF 
    1429                                ENDIF 
    1430                                 
    1431                                SUBTTL EDIT FUNCTION ASSIGNMENTS AND HE
					ADERS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-62
EDIT FUNCTION ASSIGNMENTS AND HEADERS                       

    1432                                PAGE 
    1433                                ; The following two tables implement th
					e current buffered input editing 
    1434                                ; routines.  The tables are pairwise as
					sociated in reverse order for ease 
    1435                                ; in indexing.  That is; The first entr
					y in ESCTAB corresponds to the last 
    1436                                ; entry in ESCFUNC, and the last entry 
					in ESCTAB to the first entry in ESCFUNC
					. 
    1437                                 
    1438                                 
    1439                                        PUBLIC  ESCCHAR 
    1440 0001  1B                       ESCCHAR DB      ESCCH                  
					 ;Lead-in character for escape sequence
					s 
    1441                                        IF      NOT Rainbow 
    1442 0002                           ESCTAB: 
    1443                                        IF      NOT IBM 
    1444                                        ELSE 
    1445                                                                       
					 ; VT52 equivalences 
    1446 0002  5A                               DB      "Z"                    
					 ; ^Z inserter 
    1447 0003  53                               DB      "S"                    
					 ; F1 Copy one char 
    1448 0004  56                               DB      "V"                    
					 ; F4 Skip one char 
    1449 0005  54                               DB      "T"                    
					 ; F2 Copy to char 
    1450 0006  57                               DB      "W"                    
					 ; F5 Skip to char 
    1451 0007  55                               DB      "U"                    
					 ; F3 Copy line 
    1452 0008  45                               DB      "E"                    
					 ; SHIFT ERASE Kill line (no change in 
					template) 
    1453 0009  4A                               DB      "J"                    
					 ; ERASE Reedit line (new template) 
    1454 000A  44                               DB      "D"                    
					 ; LEFT Backspace 
    1455 000B  50                               DB      "P"                    
					 ; BLUE Enter insert mode 
    1456 000C  51                               DB      "Q"                    
					 ; RED Exit insert mode 
    1457 000D  52                               DB      "R"                    
					 ; GRAY Escape character 
    1458 000E  52                               DB      "R"                    
					 ; End of table 
    1459                                        ENDIF 
    1460                                        ENDIF 
    1461                                        ENDIF 
    1462 000F                           ESCEND: 
    1463 = 000D                         ESCTABLEN EQU   ESCEND-ESCTAB 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-63
EDIT FUNCTION ASSIGNMENTS AND HEADERS                       

    1464                                 
    1465 000F                           ESCFUNC LABEL   WORD 
    1466                                        short_addr  GETCH              
					 ; Ignore the escape sequence 
    1467 000F  0000 E                 1  DW OFFSET DOSGROUP:GETCH
    1468                                        short_addr  TWOESC 
    1469 0011  0000 E                 1  DW OFFSET DOSGROUP:TWOESC
    1470                                        IF      NOT TOGLINS 
    1471                                        short_addr  EXITINS 
    1472 0013  0000 E                 1  DW OFFSET DOSGROUP:EXITINS
    1473                                        ENDIF 
    1474                                        short_addr  ENTERINS 
    1475 0015  0000 E                 1  DW OFFSET DOSGROUP:ENTERINS
    1476                                        short_addr  BACKSP 
    1477 0017  0000 E                 1  DW OFFSET DOSGROUP:BACKSP
    1478                                        short_addr  REEDIT 
    1479 0019  0000 E                 1  DW OFFSET DOSGROUP:REEDIT
    1480                                        short_addr  KILNEW 
    1481 001B  0000 E                 1  DW OFFSET DOSGROUP:KILNEW
    1482                                        short_addr  COPYLIN 
    1483 001D  0000 E                 1  DW OFFSET DOSGROUP:COPYLIN
    1484                                        short_addr  SKIPSTR 
    1485 001F  0000 E                 1  DW OFFSET DOSGROUP:SKIPSTR
    1486                                        short_addr  COPYSTR 
    1487 0021  0000 E                 1  DW OFFSET DOSGROUP:COPYSTR
    1488                                        short_addr  SKIPONE 
    1489 0023  0000 E                 1  DW OFFSET DOSGROUP:SKIPONE
    1490                                        short_addr  COPYONE 
    1491 0025  0000 E                 1  DW OFFSET DOSGROUP:COPYONE
    1492                                 
    1493                                        ENDIF 
    1494                                        short_addr  CTRLZ 
    1495 0027  0000 E                 1  DW OFFSET DOSGROUP:CTRLZ
    1496                                        ENDIF 
    1497                                 
    1498                                ; 
    1499                                ; OEMFunction key is expected to proces
					s a single function 
    1500                                ;   key input from a device and dispatc
					h to the proper 
    1501                                ;   routines leaving all registers UNTO
					UCHED. 
    1502                                ; 
    1503                                ; Inputs:   CS, SS are DOSGROUP 
    1504                                ; Outputs:  None. This function is expe
					cted to JMP to onw of 
    1505                                ;           the following labels: 
    1506                                ; 
    1507                                ;           GetCh       - ignore the se
					quence 
    1508                                ;           TwoEsc      - insert an ESC
					Char in the buffer 
    1509                                ;           ExitIns     - toggle insert
					 mode 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-64
EDIT FUNCTION ASSIGNMENTS AND HEADERS                       

    1510                                ;           EnterIns    - toggle insert
					 mode 
    1511                                ;           BackSp      - move backward
					s one space 
    1512                                ;           ReEdit      - reedit the li
					ne with a new template 
    1513                                ;           KilNew      - discard the c
					urrent line and start from scratch 
    1514                                ;           CopyLin     - copy the rest
					 of the template into the line 
    1515                                ;           SkipStr     - read the next
					 character and skip to it in the templa
					te 
    1516                                ;           CopyStr     - read next cha
					r and copy from template to line until 
					char 
    1517                                ;           SkipOne     - advance posit
					ion in template one character 
    1518                                ;           CopyOne     - copy next cha
					racter in template into line 
    1519                                ;           CtrlZ       - place a ^Z in
					to the template 
    1520                                ; Registers that are allowed to be modi
					fied by this function are: 
    1521                                ;           AX, CX, BP 
    1522                                 
    1523                                        PUBLIC OEMFunctionKey 
    1524 0029                           OEMFunctionKey  PROC    NEAR 
    1525                                        ASSUME  DS:NOTHING,ES:NOTHING,S
					S:DOSGROUP 
    1526                                        invoke  $STD_CON_INPUT_NO_ECHO 
					 ; Get the second byte of the sequence 
    1527 0029  E8 0000 E              1  CALL $STD_CON_INPUT_NO_ECHO
    1528                                 
    1529                                        IF NOT Rainbow 
    1530 002C  B1 0D                            MOV     CL,ESCTABLEN           
					 ; length of table for scan 
    1531 002E  57                               PUSH    DI                     
					 ; save DI (cannot change it!) 
    1532 002F  BF 0002 R                        MOV     DI,OFFSET DOSGROUP:ESCT
					AB   ; offset of second byte table 
    1533 0032  F2/ AE                           REPNE   SCASB                  
					 ; Look it up in the table 
    1534 0034  5F                               POP     DI                     
					 ; restore DI 
    1535 0035  D1 E1                            SHL     CX,1                   
					 ; convert byte offset to word 
    1536 0037  8B E9                            MOV     BP,CX                  
					 ; move to indexable register 
    1537 0039  FF A6 000F R                     JMP     [BP+OFFSET DOSGROUP:ESC
					FUNC]    ; Go to the right routine 
    1538                                        ENDIF 
    1539                                        ENDIF 
    1540                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Page     1-65
EDIT FUNCTION ASSIGNMENTS AND HEADERS                       

    1541                                OEMFunctionKey  ENDP 
    1542                                 
    1543 003D                           CODE            ENDS 
    1544                                 
    1545                                        do_ext 
    1546                                        END 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-4
                                                             

SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DOSGROUP . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	003D	BYTE	PUBLIC	'CODE'
  CONSTANTS  . . . . . . . . . .  	0031	BYTE	PUBLIC	'CONST'
  DATA . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'DATA'
  LAST . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'LAST'

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-5
                                                             

ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Alias	 FALSE		
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CANCEL . . . . . . . . . . . . .  	Number	0018	
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENT_COUNTRY  . . . . . . . .  	L WORD 	0014	CONSTANTS	Global
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-6
                                                             

C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DIVMES . . . . . . . . . . . . .  	L BYTE 	0000	CONSTANTS	Global
DIVMESLEN  . . . . . . . . . . .  	L BYTE 	0013	CONSTANTS	Global
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-7
                                                             

ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
ESCCH  . . . . . . . . . . . . .  	Number	001B	
ESCCHAR  . . . . . . . . . . . .  	L BYTE 	0001	CODE	Global
ESCEND . . . . . . . . . . . . .  	L NEAR	000F	CODE
ESCFUNC  . . . . . . . . . . . .  	L WORD 	000F	CODE
ESCTAB . . . . . . . . . . . . .  	L NEAR	0002	CODE
ESCTABLEN  . . . . . . . . . . .  	Number	000D	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-8
                                                             

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	

HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		

IBM  . . . . . . . . . . . . . .  	Alias	 FALSE		
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNATIONAL_TABLE  . . . . . .  	L BYTE 	0016	CONSTANTS	Global
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

KANJI  . . . . . . . . . . . . .  	Alias	 FALSE		
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
L_RET  . . . . . . . . . . . . .  	L NEAR	0000	CODE

MAP_DCASE  . . . . . . . . . . .  	F PROC	0000	CODE	Length = 0001
MI_INT . . . . . . . . . . . . .  	Number	00CD	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-9
                                                             

MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MSVER  . . . . . . . . . . . . .  	Alias	 TRUE		

NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		

OEMFUNCTIONKEY . . . . . . . . .  	N PROC	0029	CODE	Global	Length = 0014
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	

RAINBOW  . . . . . . . . . . . .  	Alias	 FALSE		
RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:35

                                                            Symbols-10
                                                             

SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	

TOGLINS  . . . . . . . . . . . .  	Alias	 WANG		
TOGLPRN  . . . . . . . . . . . .  	Alias	 FALSE		
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USTABLE  . . . . . . . . . . . .  	L 0018	0018	CONSTANTS

WAIT . . . . . . . . . . . . . .  	Number	004D	
WANG . . . . . . . . . . . . . .  	Alias	 FALSE		
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZEROEXT  . . . . . . . . . . . .  	Alias	 TRUE		


   1623 Source  Lines
   1850 Total   Lines
    526 Symbols

  21816 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
