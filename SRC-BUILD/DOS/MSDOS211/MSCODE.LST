Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-1
                                                            

       1                                ; 
       2                                ; MSCODE.ASM -- MSDOS code 
       3                                ; 
       4                                 
       5                             C  INCLUDE DOSSEG.ASM 
       6                             C  ; 
       7                             C  ; segment ordering for MSDOS 
       8                             C  ; 
       9                             C   
      10 0000                        C  CONSTANTS       SEGMENT BYTE PUBLIC 'CO
					NST' 
      11 0000                        C  CONSTANTS       ENDS 
      12                             C   
      13 0000                        C  DATA            SEGMENT BYTE PUBLIC 'DA
					TA' 
      14 0000                        C  DATA            ENDS 
      15                             C   
      16 0000                        C  CODE            SEGMENT BYTE PUBLIC 'CO
					DE' 
      17 0000                        C  CODE            ENDS 
      18                             C   
      19 0000                        C  LAST            SEGMENT BYTE PUBLIC 'LA
					ST' 
      20 0000                        C  LAST            ENDS 
      21                             C   
      22                             C  DOSGROUP    GROUP   CODE,CONSTANTS,DATA
					,LAST 
      23                                 
      24                             C  INCLUDE STDSW.ASM 
      25 = FFFF                      C  TRUE    EQU     0FFFFH 
      26 = 0000                      C  FALSE   EQU     NOT TRUE 
      27                             C   
      28                             C  ; Use the switches below to produce the
					 standard Microsoft version or the IBM 
      29                             C  ; version of the operating system 
      30 =                           C  MSVER   EQU     true 
      31 =                           C  IBM     EQU     false 
      32 =                           C  WANG    EQU     FALSE 
      33 =                           C  ALTVECT EQU     FALSE 
      34                             C   
      35                             C  ; Set this switch to cause DOS to move 
					itself to the end of memory 
      36 =                           C  HIGHMEM EQU     FALSE 
      37                             C   
      38                             C          ELSE 
      39                             C          ELSE 
      40 = 001B                      C  ESCCH   EQU     1BH 
      41                             C          ENDIF 
      42 = 0018                      C  CANCEL  EQU     "X"-"@"                
					 ;Cancel with Ctrl-X 
      43 =                           C  TOGLINS EQU     WANG                   
					 ;Separate keys for insert mode on 
      44                             C                                         
					 ;and off if not WANG 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-2
                                                            

      45 =                           C  TOGLPRN EQU     FALSE                  
					 ;Separate keys for printer echo on 
      46                             C                                         
					 ;and off 
      47 =                           C  ZEROEXT EQU     TRUE 
      48                             C          ENDIF 
      49                             C   
      50                                 
      51                                 
      52 0000                           CODE    SEGMENT BYTE PUBLIC  'CODE' 
      53                                ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHI
					NG,SS:NOTHING 
      54                                 
      55                                .xcref 
      56                             C  INCLUDE DOSSYM.ASM 
      57                             C  include DOSMAC.ASM 
      58                             C  ; 
      59                             C  ; Macro file for MSDOS. 
      60                             C  ; 
      61                             C   
      62                             C  SUBTTL BREAK a listing into pages and g
					ive new subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-3
BREAK a listing into pages and give new subtitles           

      63                             C  PAGE 
      64                             C  BREAK MACRO subtitle 
      65                             C   SUBTTL subtitle 
      66                             C   PAGE 
      67                             C  ENDM 
      68                             C   
      69                             C  BREAK <I_NEED: declare a variable exter
					nal, if necessary, and allocate a size>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

      70                             C   
      71                             C  ; 
      72                             C  ; declare a variable external and alloc
					ate a size 
      73                             C  ; 
      74                             C  I_NEED MACRO sym,len 
      75                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
      76                             C   IFIDN <len>,<WORD> 
      77                             C   EXTRN &sym:WORD 
      78                             C   ELSE 
      79                             C   IFIDN <len>,<DWORD> 
      80                             C   EXTRN &sym:DWORD 
      81                             C   ELSE 
      82                             C   EXTRN &sym:BYTE 
      83                             C   ENDIF 
      84                             C   ENDIF 
      85                             C   DATA ENDS 
      86                             C  ENDM 
      87                             C   
      88                             C  ; 
      89                             C  ; call a procedure that may be external
					. The call will be short. 
      90                             C  ; 
      91                             C  invoke MACRO name 
      92                             C  .xcref 
      93                             C   IF2 
      94                             C   IFNDEF name 
      95                             C   EXTRN name:NEAR 
      96                             C   ENDIF 
      97                             C   ENDIF 
      98                             C  .cref 
      99                             C   CALL name 
     100                             C  ENDM 
     101                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

     102                             C  PAGE 
     103                             C  ; 
     104                             C  ; jump to a label that may be external.
					 The jump will be near. 
     105                             C  ; 
     106                             C  transfer MACRO name 
     107                             C  .xcref 
     108                             C   IF2 
     109                             C   IFNDEF name 
     110                             C   EXTRN name:NEAR 
     111                             C   ENDIF 
     112                             C   ENDIF 
     113                             C  .cref 
     114                             C   JUMP name 
     115                             C  ENDM 
     116                             C   
     117                             C  ; 
     118                             C  ; get a short address in a word 
     119                             C  ; 
     120                             C  short_addr MACRO name 
     121                             C   IFDIF <name>,<?> 
     122                             C  .xcref 
     123                             C   IF2 
     124                             C   IFNDEF name 
     125                             C   EXTRN name:NEAR 
     126                             C   ENDIF 
     127                             C   ENDIF 
     128                             C  .cref 
     129                             C   DW OFFSET DOSGROUP:name 
     130                             C   ELSE 
     131                             C   DW ? 
     132                             C   ENDIF 
     133                             C  ENDM 
     134                             C   
     135                             C  ; 
     136                             C  ; get a long address in a dword 
     137                             C  ; 
     138                             C  long_addr MACRO name 
     139                             C  .xcref 
     140                             C   IF2 
     141                             C   IFNDEF name 
     142                             C   EXTRN name:NEAR 
     143                             C   ENDIF 
     144                             C  .cref 
     145                             C   DD name 
     146                             C  ENDM 
     147                             C   
     148                             C  ; 
     149                             C  ; declare a PROC near or far but PUBLIC
					 nonetheless 
     150                             C  ; 
     151                             C  procedure MACRO name,distance 
     152                             C   PUBLIC name 
     153                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

     154                             C  ENDM 
     155                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

     156                             C  PAGE 
     157                             C  ; 
     158                             C  ; define a data item to be public and o
					f an appropriate size/type 
     159                             C  ; 
     160                             C  I_AM MACRO name,size 
     161                             C   PUBLIC name 
     162                             C   
     163                             C   IFIDN <size>,<WORD> 
     164                             C  name DW ? 
     165                             C   ELSE 
     166                             C   IFIDN <size>,<DWORD> 
     167                             C  name DD ? 
     168                             C   ELSE 
     169                             C   IFIDN <size>,<BYTE> 
     170                             C  name DB ? 
     171                             C   ELSE 
     172                             C  name DB size DUP (?) 
     173                             C   ENDIF 
     174                             C   ENDIF 
     175                             C   ENDIF 
     176                             C  ENDM 
     177                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

     178                             C  PAGE 
     179                             C  ; 
     180                             C  ; call the macro chain 
     181                             C  ; 
     182                             C  do_ext macro 
     183                             C  endm 
     184                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

     185                             C  PAGE 
     186                             C   
     187                             C  ; 
     188                             C  ; define an entry in a procedure 
     189                             C  ; 
     190                             C  entry macro name 
     191                             C   PUBLIC name 
     192                             C  name: 
     193                             C  endm 
     194                             C   
     195                             C  BREAK <ERROR - print a message and then
					 jump to a label> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-10
ERROR - print a message and then jump to a label            

     196                             C   
     197                             C  error macro code 
     198                             C   local a 
     199                             C  .xcref 
     200                             C   MOV AL,code 
     201                             C   transfer SYS_RET_ERR 
     202                             C  .cref 
     203                             C  ENDM 
     204                             C   
     205                             C  BREAK <JUMP - real jump that links up s
					hortwise> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-11
JUMP - real jump that links up shortwise                    

     206                             C  ; 
     207                             C  ; given a label <lbl> either 2 byte jum
					p to another label <lbl>_J 
     208                             C  ; if it is near enough or 3 byte jump t
					o <lbl> 
     209                             C  ; 
     210                             C   
     211                             C  jump macro lbl 
     212                             C   local a 
     213                             C  .xcref 
     214                             C   a: 
     215                             C   ifndef lbl&_J ;; is this the first inv
					ocation 
     216                             C   JMP lbl 
     217                             C   ELSE 
     218                             C   IF lbl&_J GE $ 
     219                             C   JMP lbl 
     220                             C   ELSE 
     221                             C   IF ($-lbl&_J) GT 126 ;; is the jump to
					o far away? 
     222                             C   JMP lbl 
     223                             C   ELSE ;; do the short one... 
     224                             C   JMP lbl&_J 
     225                             C   ENDIF 
     226                             C   ENDIF 
     227                             C   ENDIF 
     228                             C   lbl&_j = a 
     229                             C  .cref 
     230                             C  endm 
     231                             C   
     232                             C  BREAK <RETURN - return from a function>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-12
RETURN - return from a function                             

     233                             C   
     234                             C  return macro 
     235                             C   local a 
     236                             C  .xcref 
     237                             C  a: 
     238                             C   RET 
     239                             C  ret_l = a 
     240                             C  .cref 
     241                             C  endm 
     242                             C   
     243                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-13
CONDRET - conditional return                                

     244                             C   
     245                             C  makelab macro l,cc,ncc 
     246                             C   local a 
     247                             C   j&ncc a ;; j<NCC> a: 
     248                             C   return ;; return 
     249                             C   a: ;; a: 
     250                             C   ret_&cc = ret_l ;; define ret_<CC> to 
					be ret_l 
     251                             C  endm 
     252                             C   
     253                             C  condret macro cc,ncc 
     254                             C   local a,b 
     255                             C   ifdef ret_l ;; if ret_l is defined 
     256                             C   if (($ - ret_l) le 126) and ($ gt ret_
					l) 
     257                             C   ;; if ret_l is near enough then 
     258                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
     259                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     260                             C   else 
     261                             C   makelab a,cc,ncc 
     262                             C   endif 
     263                             C   else 
     264                             C   ifdef ret_&cc ;; if ret_<CC> defined 
     265                             C   if (($ - ret_&cc) le 126) and ($ gt re
					t_&cc) 
     266                             C   ;; if ret_<CC> is near enough 
     267                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC
					> 
     268                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     269                             C   else 
     270                             C   makelab a,cc,ncc 
     271                             C   endif 
     272                             C   else 
     273                             C   makelab a,cc,ncc 
     274                             C   endif 
     275                             C   endif 
     276                             C  endm 
     277                             C  ;condret macro cc,ncc 
     278                             C  ; local a,b 
     279                             C  ; ifdef ret_l ; if ret_l is defined 
     280                             C  ; if (($ - ret_l) le 126) and ($ gt ret
					_l) 
     281                             C  ; ; if ret_l is near enough then 
     282                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
     283                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     284                             C  ; exitm 
     285                             C  ; endif 
     286                             C  ; endif 
     287                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
     288                             C  ; if (($ - ret_&cc) le 126) and ($ gt r
					et_&cc) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-14
CONDRET - conditional return                                

     289                             C  ; ; if ret_<CC> is near enough 
     290                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC
					> 
     291                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     292                             C  ; exitm 
     293                             C  ; endif 
     294                             C  ; endif 
     295                             C  ; j&ncc a ; j<NCC> a: 
     296                             C  ; return ; return 
     297                             C  ; a: ; a: 
     298                             C  ; ret_&cc = ret_l ; define ret_<CC> to 
					be ret_l 
     299                             C  ;endm 
     300                             C  ; 
     301                             C  BREAK <RETZ - return if zero, links up 
					shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-15
RETZ - return if zero, links up shortwise if necessary      

     302                             C   
     303                             C  retz macro 
     304                             C   condret z,nz 
     305                             C  endm 
     306                             C   
     307                             C  BREAK <RETNZ - return if not zero, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-16
RETNZ - return if not zero, links up shortwise if necessary 

     308                             C   
     309                             C  retnz macro 
     310                             C   condret nz,z 
     311                             C  endm 
     312                             C   
     313                             C  BREAK <RETC - return if carry set, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-17
RETC - return if carry set, links up shortwise if necessary 

     314                             C   
     315                             C  retc macro 
     316                             C   condret c,nc 
     317                             C  endm 
     318                             C   
     319                             C  BREAK <RETNC - return if not carry, lin
					ks up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-18
RETNC - return if not carry, links up shortwise if necessary

     320                             C   
     321                             C  retnc macro 
     322                             C   condret nc,c 
     323                             C  endm 
     324                             C   
     325                             C  BREAK <CONTEXT - set the DOS context to
					 a particular register> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-19
CONTEXT - set the DOS context to a particular register      

     326                             C   
     327                             C  context macro r 
     328                             C   PUSH SS 
     329                             C   POP r 
     330                             C   ASSUME r:DOSGROUP 
     331                             C  endm 
     332                             C   
     333                             C  IF2 
     334                             C      %OUT    DOSSYM in Pass 2 
     335                             C  ENDIF 
     336                             C   
     337                             C  ENDIF 
     338                             C   
     339 = 0002                      C  DOS_MAJOR_VERSION   EQU      2 
     340 = 000B                      C  DOS_MINOR_VERSION   EQU     11 
     341                             C   
     342                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-20
Control character definitions                               

     343                             C   
     344 = 007F                      C  c_DEL       EQU     7Fh         ;    AS
					CII rubout or delete previous char 
     345 = 0008                      C  c_BS        EQU     08h         ; ^H AS
					CII backspace 
     346 = 000D                      C  c_CR        EQU     0Dh         ; ^M AS
					CII carriage return 
     347 = 000A                      C  c_LF        EQU     0Ah         ; ^J AS
					CII linefeed 
     348 = 0017                      C  c_ETB       EQU     17h         ; ^W AS
					CII end of transmission 
     349 = 0015                      C  c_NAK       EQU     15h         ; ^U AS
					CII negative acknowledge 
     350 = 0003                      C  c_ETX       EQU     03h         ; ^C AS
					CII end of text 
     351 = 0009                      C  c_HT        EQU     09h         ; ^I AS
					CII tab 
     352                             C   
     353                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-21
BPB Definition                                              

     354                             C   
     355                             C   
     356                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     357                             C  ;                                      
					                                    ; 
     358                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     359                             C  ;                                      
					                                    ; 
     360                             C  ; Certain structures, constants and sys
					tem  calls  below  are  private  to ; 
     361                             C  ; the DOS  and  are  extremely  version
					-dependent.  They may change at any ; 
     362                             C  ; time at  the  implementors'  whim.   
					As  a  result,  they  must  not  be ; 
     363                             C  ; documented to  the  general  public. 
					  If  an  extreme case arises, they ; 
     364                             C  ; must be documented with this warning.
					                                    ; 
     365                             C  ;                                      
					                                    ; 
     366                             C  ; Those structures and constants that a
					re subject to  the  above  will  be ; 
     367                             C  ; marked and bracketed with the flag:  
					                                    ; 
     368                             C  ;                                      
					                                    ; 
     369                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     370                             C  ;                                      
					                                    ; 
     371                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     372                             C   
     373                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-22
Bios Parameter Block                                        

     374                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     375                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     376                             C  ;                                      
					                                    ; 
     377                             C   
     378                             C  ; Bios Parameter Block definition 
     379                             C  ; This structure is used to build a ful
					l DPB 
     380                             C   
     381                             C  BPBLOCK STRUC 
     382 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes
					 of physical sector 
     383 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc
					 unit 
     384 0003  ????                  C  BPRES   DW      ?       ; Number of res
					erved sectors 
     385 0005  ??                    C  BPFTCNT DB      ?       ; Number of FAT
					s 
     386 0006  ????                  C  BPDRCNT DW      ?       ; Number of dir
					ectory entries 
     387 0008  ????                  C  BPSCCNT DW      ?       ; Total number 
					of sectors 
     388 000A  ??                    C  BPMEDIA DB      ?       ; Media descrip
					tor byte 
     389 000B  ????                  C  BPFTSEC DW      ?       ; Number of sec
					tors taken up by one FAT 
     390 000D                        C  BPBLOCK ENDS 
     391                             C  ;                                      
					                                    ; 
     392                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     393                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     394                             C   
     395                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-23
Disk I/O Buffer Header                                      

     396                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     397                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     398                             C  ;                                      
					                                    ; 
     399                             C   
     400                             C  ; Field definition for I/O buffer infor
					mation 
     401                             C   
     402                             C  BUFFINFO        STRUC 
     403 0000  ????????              C  NEXTBUF         DD      ?       ; Point
					er to next buffer in list 
     404                             C  ; The next two items are often refed as
					 a word 
     405 0004  ??                    C  BUFDRV          DB      ?       ; Logic
					al drive # assoc with buffer FF = free 
     406 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty
					 flag 
     407 0006  ??                    C  BUFPRI          DB      ?       ; Buffe
					r selection priority (see EQUs below) 
     408 0007  ??                    C  VISIT           DB      ?       ; Visit
					 flag for buffer pool scans 
     409 0008  ????                  C  BUFSECNO        DW      ?       ; Secto
					r number of buffer 
     410                             C  ; The next two items are often refed as
					 a word 
     411 000A  ??                    C  BUFWRTCNT       DB      ?       ; For F
					AT sectors, # times sector written out 
     412 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "
					     "   , # sectors between each write
					 
     413 000C  ????????              C  BUFDRVDP        DD      ?       ; Point
					er to drive parameters 
     414 0010                        C  BUFFINFO        ENDS 
     415                             C   
     416 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
     417                             C                                  ; Size 
					of structure in bytes 
     418                             C   
     419 = 0000                      C  FREEPRI EQU     0 
     420 = 0002                      C  LBRPRI  EQU     2               ; Last 
					byte of buffer read 
     421 = 0004                      C  LBWPRI  EQU     4               ; Last 
					byte written 
     422 = 0006                      C  RPRI    EQU     6               ; Read 
					but not last byte 
     423 = 0008                      C  WPRI    EQU     8               ; Writt
					en but not last byte 
     424 = 000F                      C  DIRPRI  EQU     15              ; Direc
					tory Sector 
     425 = 001E                      C  FATPRI  EQU     30              ; FAT s
					ector 
     426                             C  ;                                      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-24
Disk I/O Buffer Header                                      

					                                    ; 
     427                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     428                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     429                             C   
     430                             C  BREAK <User stack inside of system call
					> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-25
User stack inside of system call                            

     431                             C  ; Location of user registers relative u
					ser stack pointer 
     432                             C   
     433                             C  user_environ    STRUC 
     434 0000  ????                  C  user_AX     DW      ? 
     435 0002  ????                  C  user_BX     DW      ? 
     436 0004  ????                  C  user_CX     DW      ? 
     437 0006  ????                  C  user_DX     DW      ? 
     438 0008  ????                  C  user_SI     DW      ? 
     439 000A  ????                  C  user_DI     DW      ? 
     440 000C  ????                  C  user_BP     DW      ? 
     441 000E  ????                  C  user_DS     DW      ? 
     442 0010  ????                  C  user_ES     DW      ? 
     443 0012  ????                  C  user_IP     DW      ? 
     444 0014  ????                  C  user_CS     DW      ? 
     445 0016  ????                  C  user_F      DW      ? 
     446 0018                        C  user_environ    ENDS 
     447                             C   
     448                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-26
interrupt definitions                                       

     449                             C   
     450 = 0020                      C  INTTAB          EQU     20H 
     451 = 0080                      C  INTBASE         EQU     4 * inttab 
     452 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
     453                             C   
     454                             C          ENDIF 
     455                             C   
     456                             C  ; 
     457                             C  ; interrupt assignments 
     458                             C  ; 
     459                             C          IF      NOT ALTVECT 
     460 =                           C  int_abort           EQU     INTTAB     
					     ; abort process 
     461 = 0021                      C  int_command         EQU     int_abort+1
					     ; call MSDOS 
     462 = 0022                      C  int_terminate       EQU     int_abort+2
					     ; int to terminate address 
     463 = 0023                      C  int_ctrl_c          EQU     int_abort+3
					     ; ^c trapper 
     464 = 0024                      C  int_fatal_abort     EQU     int_abort+4
					     ; hard disk error 
     465 = 0025                      C  int_disk_read       EQU     int_abort+5
					     ; logical sector disk read 
     466 = 0026                      C  int_disk_write      EQU     int_abort+6
					     ; logical sector disk write 
     467 = 0027                      C  int_keep_process    EQU     int_abort+7
					     ; terminate program and stay 
     468                             C                                         
					     ; resident 
     469                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     470                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     471                             C  ;                                      
					                                    ; 
     472 = 0028                      C  int_spooler         EQU     int_abort+8
					     ; spooler call 
     473 = 0029                      C  int_fastcon         EQU     int_abort+9
					     ; fast CON interrupt 
     474                             C  ;                                      
					                                    ; 
     475                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     476                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     477                             C          ENDIF 
     478                             C   
     479 = 0080                      C  addr_int_abort          EQU    4 * int_
					abort 
     480 = 0084                      C  addr_int_command        EQU    4 * int_
					command 
     481 = 0088                      C  addr_int_terminate      EQU    4 * int_
					terminate 
     482 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-27
interrupt definitions                                       

					ctrl_c 
     483 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_
					fatal_abort 
     484 = 0094                      C  addr_int_disk_read      EQU    4 * int_
					disk_read 
     485 = 0098                      C  addr_int_disk_write     EQU    4 * int_
					disk_write 
     486 = 009C                      C  addr_int_keep_process   EQU    4 * int_
					keep_process 
     487                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     488                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     489                             C  ;                                      
					                                    ; 
     490 = 00A0                      C  addr_int_spooler        EQU    4 * int_
					spooler 
     491 = 00A4                      C  addr_int_fastcon        EQU    4 * int_
					fastcon 
     492                             C  ;                                      
					                                    ; 
     493                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     494                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     495                             C   
     496                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-28
Disk map                                                    

     497                             C  ;  MSDOS partitions the disk into 4 sec
					tions: 
     498                             C  ; 
     499                             C  ;  phys sector 0:   +------------------
					-+ 
     500                             C  ;       |           | boot/reserved    
					 | 
     501                             C  ;       |           +------------------
					-+ 
     502                             C  ;       |           |  File allocation 
					 | 
     503                             C  ;       v           |      table(s)    
					 | 
     504                             C  ;                   |  (multiple copies
					 | 
     505                             C  ;                   |     are kept)    
					 | 
     506                             C  ;                   +------------------
					-+ 
     507                             C  ;                   |     Directory    
					 | 
     508                             C  ;                   +------------------
					-+ 
     509                             C  ;                   |     File space   
					 | 
     510                             C  ;                   +------------------
					-+ 
     511                             C  ;                   |   Unaddressable  
					 | 
     512                             C  ;                   |  (to end of disk)
					 | 
     513                             C  ;                   +------------------
					-+ 
     514                             C  ; 
     515                             C  ; All partition boundaries are sector b
					oundaries.  The size of the FAT is 
     516                             C  ; adjusted to maximize the file space a
					ddressable. 
     517                             C   
     518                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-29
Directory entry                                             

     519                             C   
     520                             C  ; 
     521                             C  ;       +---------------------------+ 
     522                             C  ;       |  (12 BYTE) filename/ext   |  
					     0       0 
     523                             C  ;       +---------------------------+ 
     524                             C  ;       |     (BYTE) attributes     |  
					     11      B 
     525                             C  ;       +---------------------------+ 
     526                             C  ;       |    (10 BYTE) reserved     |  
					     12      C 
     527                             C  ;       +---------------------------+ 
     528                             C  ;       | (WORD) time of last write |  
					     22      16 
     529                             C  ;       +---------------------------+ 
     530                             C  ;       | (WORD) date of last write |  
					     24      18 
     531                             C  ;       +---------------------------+ 
     532                             C  ;       |   (WORD) First cluster    |  
					     26      1A 
     533                             C  ;       +---------------------------+ 
     534                             C  ;       |     (DWORD) file size     |  
					     28      1C 
     535                             C  ;       +---------------------------+ 
     536                             C  ; 
     537                             C  ;   First byte of filename  = E5 -> fre
					e directory entry 
     538                             C  ;                           = 00 -> end
					 of allocated directory 
     539                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-
					10=minute, 11-15=hour 
     540                             C  ;   Date:   Bits 0-4=day, bits 5-8=mont
					h, bits 9-15=year-1980 
     541                             C  ; 
     542                             C  dir_entry   STRUC 
     543 0000  000B[                 C  dir_name    DB      11 DUP (?)         
					 ; file name 
     544            ??               C  
     545                         ]   C  
     546                             C  
     547 000B  ??                    C  dir_attr    DB      ?                  
					 ; attribute bits 
     548 000C  000A[                 C  dir_pad     DB      10 DUP (?)         
					 ; reserved for expansion 
     549            ??               C  
     550                         ]   C  
     551                             C  
     552 0016  ????                  C  dir_time    DW      ?                  
					 ; time of last write 
     553 0018  ????                  C  dir_date    DW      ?                  
					 ; date of last write 
     554 001A  ????                  C  dir_first   DW      ?                  
					 ; first allocation unit of file 
     555 001C  ????                  C  dir_size_l  DW      ?                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-30
Directory entry                                             

					 ; low 16 bits of file size 
     556 001E  ????                  C  dir_size_h  DW      ?                  
					 ; high 16 bits of file size 
     557 0020                        C  dir_entry   ENDS 
     558                             C   
     559 = 0001                      C  attr_read_only      EQU      1h 
     560 = 0002                      C  attr_hidden         EQU      2h 
     561 = 0004                      C  attr_system         EQU      4h 
     562 = 0008                      C  attr_volume_id      EQU      8h 
     563 = 0010                      C  attr_directory      EQU     10h 
     564 = 0020                      C  attr_archive        EQU     20h 
     565                             C   
     566 = 0016                      C  attr_all            EQU     attr_hidden
					+attr_system+attr_directory 
     567                             C                                         
					 ; OR of hard attributes for FINDENTRY 
     568                             C   
     569 = 0021                      C  attr_ignore         EQU     attr_read_o
					nly+attr_archive 
     570                             C                                         
					 ; ignore this(ese) attribute(s) during
					 
     571                             C                                         
					 ; search first/next 
     572                             C   
     573 = 0027                      C  attr_changeable     EQU     attr_read_o
					nly+attr_hidden+attr_system+attr_archiv
					e 
     574                             C                                         
					 ; changeable via CHMOD 
     575                             C   
     576                             C  BREAK <File allocation Table informatio
					n> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-31
File allocation Table information                           

     577                             C  ; 
     578                             C  ; The File Allocation Table uses a 12-b
					it entry for each allocation unit on 
     579                             C  ; the disk.  These entries are packed, 
					two for every three bytes.  The content
					s 
     580                             C  ; of entry number N is found by 1) mult
					iplying N by 1.5; 2) adding the result 
     581                             C  ; to the base address of the Allocation
					 Table; 3) fetching the 16-bit word 
     582                             C  ; at this address; 4) If N was odd (so 
					that N*1.5 was not an integer), shift 
     583                             C  ; the word right four bits; 5) mask to 
					12 bits (AND with 0FFF hex).  Entry 
     584                             C  ; number zero is used as an end-of-file
					 trap in the OS and is passed to the 
     585                             C  ; BIOS to help determine disk format.  
					Entry 1 is reserved for future use. 
     586                             C  ; The first available allocation unit i
					s assigned entry number two, and even 
     587                             C  ; though it is the first, is called clu
					ster 2.  Entries greater than 0FF8H 
     588                             C  ; are end of file marks; entries of zer
					o are unallocated.  Otherwise, the 
     589                             C  ; contents of a FAT entry is the number
					 of the next cluster in the file. 
     590                             C  ; 
     591                             C  ; Clusters with bad sectors are tagged 
					with FF7H.  Any non-zero number would 
     592                             C  ; do because these clusters show as all
					ocated, but are not part of any 
     593                             C  ; allocation chain and thus will never 
					be allocated to a file.  A particular 
     594                             C  ; number is selected so that disk check
					ing programs know what to do (ie.  a 
     595                             C  ; cluster with entry FF7H which is not 
					in a chain is not an error). 
     596                             C   
     597                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-32
DPB structure                                               

     598                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     599                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     600                             C  ;                                      
					                                    ; 
     601                             C   
     602 = 0040                      C  DIRSTRLEN       EQU     64      ; Max l
					ength in bytes of directory strings 
     603                             C   
     604                             C  dpb     STRUC 
     605 0000  ??                    C  dpb_drive           DB      ?   ; Logic
					al drive # assoc with DPB (A=0,B=1,...)
					 
     606 0001  ??                    C  dpb_UNIT            DB      ?   ; Drive
					r unit number of DPB 
     607 0002  ????                  C  dpb_sector_size     DW      ?   ; Size 
					of physical sector in bytes 
     608 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Secto
					rs/cluster - 1 
     609 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 
					of sectors/cluster 
     610 0006  ????                  C  dpb_first_FAT       DW      ?   ; Start
					ing record of FATs 
     611 0008  ??                    C  dpb_FAT_count       DB      ?   ; Numbe
					r of FATs for this drive 
     612 0009  ????                  C  dpb_root_entries    DW      ?   ; Numbe
					r of directory entries 
     613 000B  ????                  C  dpb_first_sector    DW      ?   ; First
					 sector of first cluster 
     614 000D  ????                  C  dpb_max_cluster     DW      ?   ; Numbe
					r of clusters on drive + 1 
     615 000F  ??                    C  dpb_FAT_size        DB      ?   ; Numbe
					r of records occupied by FAT 
     616 0010  ????                  C  dpb_dir_sector      DW      ?   ; Start
					ing record of directory 
     617 0012  ????????              C  dpb_driver_addr     DD      ?   ; Point
					er to driver 
     618 0016  ??                    C  dpb_media           DB      ?   ; Media
					 byte 
     619 0017  ??                    C  dpb_first_access    DB      ?   ; This 
					is initialized to -1 to force a media 
     620                             C                                  ; check
					 the first time this DPB is used 
     621 0018  ????????              C  dpb_next_dpb        DD      ?   ; Point
					er to next Drive parameter block 
     622 001C  ????                  C  dpb_current_dir     DW      ?   ; Clust
					er number of start of current directory
					 
     623                             C                                  ; 0 ind
					icates root, -1 indicates invalid (disk
					 
     624                             C                                  ; ?  ch
					anged) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-33
DPB structure                                               

     625 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN D
					UP(?) 
     626            ??               C  
     627                         ]   C  
     628                             C  
     629                             C                                  ; ASCIZ
					 string of current directory 
     630 005E                        C  dpb     ENDS 
     631                             C   
     632 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size 
					of the structure in bytes 
     633                             C   
     634 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size 
					of disk (temp used during init only) 
     635                             C  ;                                      
					                                    ; 
     636                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     637                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     638                             C   
     639                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-34
File Control Block definition                               

     640                             C  ; 
     641                             C  ; Field definition for FCBs 
     642                             C  ; The FCB has the following structure: 
     643                             C  ; 
     644                             C  ;       +---------------------------+ 
     645                             C  ;       |   Drive indicator(byte)   | 
     646                             C  ;       +---------------------------+ 
     647                             C  ;       |    Filename (8 chars)     | 
     648                             C  ;       +---------------------------+ 
     649                             C  ;       |    Extension (3 chars)    | 
     650                             C  ;       +---------------------------+ 
     651                             C  ;       |   Current Extent(word)    | 
     652                             C  ;       +---------------------------+ 
     653                             C  ;       |    Record size (word)     | 
     654                             C  ;       +---------------------------+ 
     655                             C  ;       |    File Size (2 words)    | 
     656                             C  ;       +---------------------------+ 
     657                             C  ;       |       Date of write       | 
     658                             C  ;       +---------------------------+ 
     659                             C  ;       |       Time of write       | 
     660                             C  ;       +---------------------------+ 
     661                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     662                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     663                             C  ;                                      
					                                    ; 
     664                             C  ;       | Flags:                    | 
     665                             C  ;       |  bit 7=0 file/1 device    | 
     666                             C  ;       |  bit 6=0 if dirty         | 
     667                             C  ;       |  bits 0-5 deviceid        | 
     668                             C  ;       +---------------------------+ 
     669                             C  ;       |   first cluster in file   | 
     670                             C  ;       +---------------------------+ 
     671                             C  ;       | position of last cluster  | 
     672                             C  ;       +---------------------------+ 
     673                             C  ;       |   last cluster accessed   |  
					 12 bit-+--- packed in 3 bytes 
     674                             C  ;       +---------------------------+  
					        | 
     675                             C  ;       |     parent directory      |  
					 <------+ 
     676                             C  ;       +---------------------------+ 
     677                             C  ;                                      
					                                    ; 
     678                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     679                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     680                             C  ;       |    next record number     | 
     681                             C  ;       +---------------------------+ 
     682                             C  ;       |   random record number    | 
     683                             C  ;       +---------------------------+ 
     684                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-35
File Control Block definition                               

     685                             C   
     686                             C  sys_fcb     STRUC 
     687 0000  ??                    C  fcb_drive   DB      ? 
     688 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
     689            ??               C  
     690                         ]   C  
     691                             C  
     692 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
     693            ??               C  
     694                         ]   C  
     695                             C  
     696 000C  ????                  C  fcb_EXTENT  DW      ? 
     697 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of r
					ecord (user settable) 
     698 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of f
					ile in bytes; used with the following 
     699                             C                              ; word 
     700 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SE
					ARCH FIRST and SEARCH NEXT 
     701 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of l
					ast writing 
     702 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of l
					ast writing 
     703                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     704                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     705                             C  ;                                      
					                                    ; 
     706 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID
					 number, bits 0-5 if file. 
     707                             C                              ; bit 7=0 f
					or file, bit 7=1 for I/O device 
     708                             C                              ; If file, 
					bit 6=0 if dirty 
     709                             C                              ; If I/O de
					vice, bit 6=0 if EOF (input) 
     710                             C                              ;          
					     Bit 5=1 if Raw mode 
     711                             C                              ;          
					     Bit 0=1 if console input device 
     712                             C                              ;          
					     Bit 1=1 if console output device 
     713                             C                              ;          
					     Bit 2=1 if null device 
     714                             C                              ;          
					     Bit 3=1 if clock device 
     715 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First clu
					ster of file 
     716 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position 
					of last cluster accessed 
     717 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last clus
					ter accessed and directory pack 2 12 
     718 001F  ??                    C              DB      ?       ; bit numbe
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-36
File Control Block definition                               

					rs into 24 bits... 
     719                             C  ;                                      
					                                    ; 
     720                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     721                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     722 0020  ??                    C  fcb_NR      DB      ?       ; Next reco
					rd 
     723 0021  0004[                 C  fcb_RR      DB      4 DUP (?)          
					     ; Random record 
     724            ??               C  
     725                         ]   C  
     726                             C  
     727 0025                        C  sys_fcb     ENDS 
     728                             C   
     729 = 0010                      C  FILDIRENT       = fcb_FILSIZ           
					 ; Used only by SEARCH FIRST and SEARCH
					 
     730                             C                                         
					 ; NEXT 
     731                             C   
     732                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     733                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     734                             C  ;                                      
					                                    ; 
     735 = 0040                      C  devid_file_clean        EQU     40h    
					 ; true if file and not written 
     736 = 003F                      C  devid_file_mask_drive   EQU     3Fh    
					 ; mask for drive number 
     737                             C   
     738 = 0080                      C  devid_device            EQU     80h    
					 ; true if a device 
     739 = 0040                      C  devid_device_EOF        EQU     40h    
					 ; true if end of file reached 
     740 = 0020                      C  devid_device_raw        EQU     20h    
					 ; true if in raw mode 
     741 = 0010                      C  devid_device_special    EQU     10h    
					 ; true if special device 
     742 = 0008                      C  devid_device_clock      EQU     08h    
					 ; true if clock device 
     743 = 0004                      C  devid_device_null       EQU     04h    
					 ; true if null device 
     744 = 0002                      C  devid_device_con_out    EQU     02h    
					 ; true if console output 
     745 = 0001                      C  devid_device_con_in     EQU     01h    
					 ; true if consle input 
     746                             C   
     747                             C  ; 
     748                             C  ; structure of devid field as returned 
					by IOCTL is: 
     749                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-37
File Control Block definition                               

     750                             C  ;       BIT     7   6   5   4   3   2  
					 1   0 
     751                             C  ;             |---|---|---|---|---|---|
					---|---| 
     752                             C  ;             | I | E | R | S | I | I |
					 I | I | 
     753                             C  ;             | S | O | A | P | S | S |
					 S | S | 
     754                             C  ;             | D | F | W | E | C | N |
					 C | C | 
     755                             C  ;             | E |   |   | C | L | U |
					 O | I | 
     756                             C  ;             | V |   |   | L | K | L |
					 T | N | 
     757                             C  ;             |---|---|---|---|---|---|
					---|---| 
     758                             C  ;       ISDEV = 1 if this channel is a 
					device 
     759                             C  ;             = 0 if this channel is a 
					disk file 
     760                             C  ; 
     761                             C  ;       If ISDEV = 1 
     762                             C  ; 
     763                             C  ;             EOF = 0 if End Of File on
					 input 
     764                             C  ;             RAW = 1 if this device is
					 in Raw mode 
     765                             C  ;                 = 0 if this device is
					 cooked 
     766                             C  ;             ISCLK = 1 if this device 
					is the clock device 
     767                             C  ;             ISNUL = 1 if this device 
					is the null device 
     768                             C  ;             ISCOT = 1 if this device 
					is the console output 
     769                             C  ;             ISCIN = 1 if this device 
					is the console input 
     770                             C  ; 
     771                             C  ;       If ISDEV = 0 
     772                             C  ;             EOF = 0 if channel has be
					en written 
     773                             C  ;             Bits 0-5  are  the  block
					  device  number  for 
     774                             C  ;                 the channel (0 = A, 1
					 = B, ...) 
     775                             C  ; 
     776 = 0080                      C  devid_ISDEV     EQU     80h 
     777 = 0040                      C  devid_EOF       EQU     40h 
     778 = 0020                      C  devid_RAW       EQU     20h 
     779 = 0010                      C  devid_SPECIAL   EQU     10H 
     780 = 0008                      C  devid_ISCLK     EQU     08h 
     781 = 0004                      C  devid_ISNUL     EQU     04h 
     782 = 0002                      C  devid_ISCOT     EQU     02h 
     783 = 0001                      C  devid_ISCIN     EQU     01h 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-38
File Control Block definition                               

     784                             C   
     785 = 001F                      C  devid_block_dev EQU     1Fh            
					 ; mask for block device number 
     786                             C   
     787                             C  ; 
     788                             C  ; find first/next buffer 
     789                             C  ; 
     790                             C  find_buf    STRUC 
     791 0000  ??                    C  find_buf_sattr      DB  ?           ; a
					ttribute of search 
     792 0001  ??                    C  find_buf_drive      DB  ?           ; d
					rive of search 
     793 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; f
					ormatted name 
     794            ??               C  
     795                         ]   C  
     796                             C  
     797 000D  ????                  C  find_buf_LastEnt    DW  ?           ; L
					astEnt 
     798 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; T
					his DPB 
     799 0013  ????                  C  find_buf_DirStart   DW  ?           ; D
					irStart 
     800                             C  ;                                      
					                                    ; 
     801                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     802                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     803                             C   
     804 0015  ??                    C  find_buf_attr       DB  ?           ; a
					ttribute found 
     805 0016  ????                  C  find_buf_time       DW  ?           ; t
					ime 
     806 0018  ????                  C  find_buf_date       DW  ?           ; d
					ate 
     807 001A  ????                  C  find_buf_size_l     DW  ?           ; l
					ow(size) 
     808 001C  ????                  C  find_buf_size_h     DW  ?           ; h
					igh(size) 
     809 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; p
					acked name 
     810            ??               C  
     811                         ]   C  
     812                             C  
     813 002B                        C  find_buf    ENDS 
     814                             C   
     815                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-39
Process data block                                          

     816                             C  ; 
     817                             C  ; Process data block (otherwise known a
					s program header) 
     818                             C  ; 
     819                             C   
     820 = 0014                      C  FilPerProc          EQU     20 
     821                             C   
     822                             C  Process_data_block  STRUC 
     823 0000  ????                  C  PDB_Exit_Call       DW      ?          
					 ; INT int_abort system terminate 
     824 0002  ????                  C  PDB_block_len       DW      ?          
					 ; size of execution block 
     825 0004  ??                    C                      DB      ? 
     826 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)      
					 ; ancient call to system 
     827            ??               C  
     828                         ]   C  
     829                             C  
     830 000A  ????????              C  PDB_Exit            DD      ?          
					 ; pointer to exit routine 
     831 000E  ????????              C  PDB_Ctrl_C          DD      ?          
					 ; pointer to ^C routine 
     832 0012  ????????              C  PDB_Fatal_abort     DD      ?          
					 ; pointer to fatal error 
     833                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     834                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     835                             C  ;                                      
					                                    ; 
     836 0016  ????                  C  PDB_Parent_PID      DW      ?          
					 ; PID of parent (terminate PID) 
     837 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP 
					(?) 
     838            ??               C  
     839                         ]   C  
     840                             C  
     841                             C                                         
					 ; indices into system table 
     842                             C  ;                                      
					                                    ; 
     843                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     844                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     845 002C  ????                  C  PDB_environ         DW      ?          
					 ; seg addr of environment 
     846                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     847                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     848                             C  ;                                      
					                                    ; 
     849 002E  ????????              C  PDB_User_stack      DD      ?          
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-40
Process data block                                          

					 ; stack of self during system calls 
     850 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?)
					 
     851            ??               C  
     852                         ]   C  
     853                             C  
     854                             C  ;                                      
					                                    ; 
     855                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     856                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     857 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)  
					 ; portable method of system call 
     858            ??               C  
     859                         ]   C  
     860                             C  
     861                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     862                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     863                             C  ;                                      
					                                    ; 
     864 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?) 
					 ; 
     865            ??               C  
     866                         ]   C  
     867                             C  
     868                             C  ;                                      
					                                    ; 
     869                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     870                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     871 005B                        C  Process_data_block  ENDS 
     872                             C   
     873                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-41
EXEC and EXE file structures                                

     874                             C  ; 
     875                             C  ; EXEC arg block - load/go program 
     876                             C  ; 
     877                             C   
     878                             C  ; 
     879                             C  ; The following get used as arguments t
					o the EXEC system call.  They indicate 
     880                             C  ; whether or not the program is execute
					d or whether or not a program header 
     881                             C  ; gets created. 
     882                             C  ; 
     883 = 0001                      C  exec_func_no_execute    EQU 1          
					 ; no execute bit 
     884 = 0002                      C  exec_func_overlay       EQU 2          
					 ; overlay bit 
     885                             C   
     886                             C  Exec0           STRUC 
     887 0000  ????                  C  Exec0_environ   DW      ?              
					 ; seg addr of environment 
     888 0002  ????????              C  Exec0_com_line  DD      ?              
					 ; pointer to asciz command line 
     889 0006  ????????              C  Exec0_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     890 000A  ????????              C  Exec0_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     891 000E                        C  Exec0           ENDS 
     892                             C   
     893                             C  Exec1           STRUC 
     894 0000  ????                  C  Exec1_environ   DW      ?              
					 ; seg addr of environment 
     895 0002  ????????              C  Exec1_com_line  DD      ?              
					 ; pointer to asciz command line 
     896 0006  ????????              C  Exec1_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     897 000A  ????????              C  Exec1_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     898 000E  ????                  C  Exec1_SP        DW      ?              
					 ; stack pointer of program 
     899 0010  ????                  C  Exec1_SS        DW      ?              
					 ; stack seg register of program 
     900 0012  ????                  C  Exec1_IP        DW      ?              
					 ; entry point IP 
     901 0014  ????                  C  Exec1_CS        DW      ?              
					 ; entry point CS 
     902 0016                        C  Exec1           ENDS 
     903                             C   
     904                             C  Exec3           STRUC 
     905 0000  ????                  C  Exec3_load_addr DW      ?              
					 ; seg address of load point 
     906 0002  ????                  C  Exec3_reloc_fac DW      ?              
					 ; relocation factor 
     907 0004                        C  Exec3           ENDS 
     908                             C   
     909                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-42
EXEC and EXE file structures                                

     910                             C  ; Exit codes in upper byte 
     911                             C  ; 
     912 = 0000                      C  Exit_terminate      EQU     0 
     913 = 0000                      C  Exit_abort          EQU     0 
     914 = 0001                      C  Exit_Ctrl_C         EQU     1 
     915 = 0002                      C  Exit_Hard_Error     EQU     2 
     916 = 0003                      C  Exit_Keep_process   EQU     3 
     917                             C   
     918                             C  ; 
     919                             C  ; EXE file header 
     920                             C  ; 
     921                             C   
     922                             C  EXE_file    STRUC 
     923 0000  ????                  C  exe_signature   DW  ?                  
					 ; must contain 4D5A  (yay zibo!) 
     924 0002  ????                  C  exe_len_mod_512 DW  ?                  
					 ; low 9 bits of length 
     925 0004  ????                  C  exe_pages       DW  ?                  
					 ; number of 512b pages in file 
     926 0006  ????                  C  exe_rle_count   DW  ?                  
					 ; count of reloc entries 
     927 0008  ????                  C  exe_par_dir     DW  ?                  
					 ; number of paragraphs before image 
     928 000A  ????                  C  exe_min_BSS     DW  ?                  
					 ; minimum number of para of BSS 
     929 000C  ????                  C  exe_max_BSS     DW  ?                  
					 ; max number of para of BSS 
     930 000E  ????                  C  exe_SS          DW  ?                  
					 ; stack of image 
     931 0010  ????                  C  exe_SP          DW  ?                  
					 ; SP of image 
     932 0012  ????                  C  exe_chksum      DW  ?                  
					 ; checksum  of file (ignored) 
     933 0014  ????                  C  exe_IP          DW  ?                  
					 ; IP of entry 
     934 0016  ????                  C  exe_CS          DW  ?                  
					 ; CS of entry 
     935 0018  ????                  C  exe_rle_table   DW  ?                  
					 ; byte offset of reloc table 
     936 001A  ????                  C  exe_iov         DW  ?                  
					 ; overlay number (0 for root) 
     937 001C  ????????              C  exe_sym_tab     DD  ?                  
					 ; offset of symbol table in file 
     938 0020                        C  EXE_file    ENDS 
     939                             C   
     940 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
     941 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
     942                             C   
     943                             C  symbol_entry    STRUC 
     944 0000  ????????              C  sym_value       DD  ? 
     945 0004  ????                  C  sym_type        DW  ? 
     946 0006  ??                    C  sym_len         DB  ? 
     947 0007  00FF[                 C  sym_name        DB  255 dup (?) 
     948            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-43
EXEC and EXE file structures                                

     949                         ]   C  
     950                             C  
     951 0106                        C  symbol_entry    ENDS 
     952                             C   
     953                             C  BREAK <Internal system file table forma
					t> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-44
Internal system file table format                           

     954                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     955                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     956                             C  ;                                      
					                                    ; 
     957                             C  ; 
     958                             C  ; system file table 
     959                             C  ; 
     960                             C   
     961                             C  sft             STRUC 
     962 0000  ????????              C  sft_link        DD      ? 
     963 0004  ????                  C  sft_count       DW      ?              
					 ; number of entries 
     964 0006  ????                  C  sft_table       DW      ?              
					 ; beginning of array of the following 
     965 0008                        C  sft             ENDS 
     966                             C   
     967                             C  ; 
     968                             C  ; system file table entry 
     969                             C  ; 
     970                             C   
     971                             C  sf_entry        STRUC 
     972 0000  ??                    C  sf_ref_count    DB      ?              
					 ; number of processes sharing fcb 
     973 0001  ??                    C  sf_mode         DB      ?              
					 ; mode of access 
     974 0002  ??                    C  sf_attr         DB      ?              
					 ; attribute of file 
     975 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) 
					DUP (?) 
     976            ??               C  
     977                         ]   C  
     978                             C  
     979                             C                                         
					 ; actual FCB 
     980 0028                        C  sf_entry        ENDS 
     981                             C   
     982 = 0005                      C  sf_default_number   EQU     5h 
     983                             C  ;                                      
					                                    ; 
     984                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     985                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     986                             C   
     987                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-45
Memory arena structure                                      

     988                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     989                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     990                             C  ;                                      
					                                    ; 
     991                             C  ; 
     992                             C  ; arena item 
     993                             C  ; 
     994                             C  arena   STRUC 
     995 0000  ??                    C  arena_signature     DB  ?              
					 ; 4D for valid item, 5A for last item 
     996 0001  ????                  C  arena_owner         DW  ?              
					 ; owner of arena item 
     997 0003  ????                  C  arena_size          DW  ?              
					 ; size in paragraphs of item 
     998 0005                        C  arena   ENDS 
     999                             C   
    1000                             C  ; 
    1001                             C  ; Current structure of the data returne
					d by the international call 
    1002                             C  ; 
    1003                             C   
    1004                             C  internat_block STRUC 
    1005 0000  ????                  C  Date_tim_format DW      ?           ; 0
					-USA, 1-EUR, 2-JAP 
    1006 0002  ??                    C  Currency_sym    DB      ?           ; C
					urrency Symbol 5 bytes 
    1007 0003  ??                    C                  DB      ? 
    1008 0004  ??                    C                  DB      ? 
    1009 0005  ??                    C                  DB      ? 
    1010 0006  ??                    C                  DB      ? 
    1011 0007  ??                    C  Thous_sep       DB      ?           ; T
					housands separator 2 bytes 
    1012 0008  ??                    C                  DB      ? 
    1013 0009  ??                    C  Decimal_sep     DB      ?           ; D
					ecimal separator 2 bytes 
    1014 000A  ??                    C                  DB      ? 
    1015 000B  ??                    C  Date_sep        DB      ?           ; D
					ate separator 2 bytes 
    1016 000C  ??                    C                  DB      ? 
    1017 000D  ??                    C  Time_sep        DB      ?           ; D
					ecimal separator 2 bytes 
    1018 000E  ??                    C                  DB      ? 
    1019 000F  ??                    C  Bit_feild       DB      ?           ; B
					it values 
    1020                             C                                      ;  
					 Bit 0 = 0 if currency symbol first 
    1021                             C                                      ;  
					       = 1 if currency symbol last 
    1022                             C                                      ;  
					 Bit 1 = 0 if No space after currency s
					ymbol 
    1023                             C                                      ;  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-46
Memory arena structure                                      

					       = 1 if space after currency symb
					ol 
    1024 0010  ??                    C  Currency_cents  DB      ?           ; N
					umber of places after currency dec poin
					t 
    1025 0011  ??                    C  Time_24         DB      ?           ; 1
					 if 24 hour time, 0 if 12 hour time 
    1026 0012  ????                  C  Map_call        DW      ?           ; A
					ddress of case mapping call (DWORD) 
    1027 0014  ????                  C                  DW      ?           ; T
					HIS IS TWO WORDS SO IT CAN BE INITIALIZ
					ED 
    1028                             C                                      ;  
					in pieces. 
    1029 0016  ??                    C  Data_sep        DB      ?           ; D
					ata list separator character 
    1030 0017  ??                    C                  DB      ? 
    1031 0018                        C  internat_block ENDS 
    1032                             C   
    1033                             C  ; 
    1034                             C  ; Max size of the block returned by the
					 INTERNATIONAL call 
    1035                             C  ; 
    1036 = 0020                      C  internat_block_max      EQU     32 
    1037                             C   
    1038                             C  ; 
    1039                             C  ; CAUTION: The routines in ALLOC.ASM re
					ly on the fact that arena_signature 
    1040                             C  ; and arena_owner_system are all equal 
					to zero and are contained in DI.  Chang
					e 
    1041                             C  ; them and change ALLOC.ASM. 
    1042                             C   
    1043 = 0000                      C  arena_owner_system  EQU 0              
					 ; free block indication 
    1044                             C   
    1045 = 004D                      C  arena_signature_normal  EQU 4Dh        
					 ; valid signature, not end of arena 
    1046 = 005A                      C  arena_signature_end     EQU 5Ah        
					 ; valid signature, last block in arena
					 
    1047                             C  ;                                      
					                                    ; 
    1048                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1049                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1050                             C   
    1051                             C  BREAK <Machine instruction definitions>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-47
Machine instruction definitions                             

    1052                             C   
    1053 = 00CD                      C  mi_INT          EQU     0CDh 
    1054 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
    1055 = 009A                      C  mi_Long_CALL    EQU     09Ah 
    1056 = 00CB                      C  mi_Long_RET     EQU     0CBh 
    1057                             C   
    1058                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-48
Standard I/O assignments                                    

    1059                             C   
    1060 = 0000                      C  stdin       EQU     0 
    1061 = 0001                      C  stdout      EQU     1 
    1062 = 0002                      C  stderr      EQU     2 
    1063 = 0003                      C  stdaux      EQU     3 
    1064 = 0004                      C  stdprn      EQU     4 
    1065                             C   
    1066                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-49
Xenix subfunction assignments                               

    1067                             C   
    1068 = 0000                      C  open_for_read   EQU 0 
    1069 = 0001                      C  open_for_write  EQU 1 
    1070 = 0002                      C  open_for_both   EQU 2 
    1071                             C   
    1072                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-50
Xenix error codes                                           

    1073                             C   
    1074                             C  ; 
    1075                             C  ; XENIX calls all return error codes th
					rough AX.  If an error occurred then 
    1076                             C  ; the carry bit will be set and the err
					or code is in AX.  If no error occurred
					 
    1077                             C  ; then the carry bit is reset and AX co
					ntains returned info. 
    1078                             C  ; 
    1079                             C   
    1080 =                           C  no_error_occurred               EQU    
					 0                                     
					                         ? 
    1081                             C   
    1082 = 0001                      C  error_invalid_function          EQU    
					 1 
    1083 = 0002                      C  error_file_not_found            EQU    
					 2 
    1084 = 0003                      C  error_path_not_found            EQU    
					 3 
    1085 = 0004                      C  error_too_many_open_files       EQU    
					 4 
    1086 = 0005                      C  error_access_denied             EQU    
					 5 
    1087 = 0006                      C  error_invalid_handle            EQU    
					 6 
    1088 = 0007                      C  error_arena_trashed             EQU    
					 7 
    1089 = 0008                      C  error_not_enough_memory         EQU    
					 8 
    1090 = 0009                      C  error_invalid_block             EQU    
					 9 
    1091 = 000A                      C  error_bad_environment           EQU    
					 10 
    1092 = 000B                      C  error_bad_format                EQU    
					 11 
    1093 = 000C                      C  error_invalid_access            EQU    
					 12 
    1094 = 000D                      C  error_invalid_data              EQU    
					 13 
    1095                             C  ;**** unused                    EQU    
					 14 
    1096 = 000F                      C  error_invalid_drive             EQU    
					 15 
    1097 = 0010                      C  error_current_directory         EQU    
					 16 
    1098 = 0011                      C  error_not_same_device           EQU    
					 17 
    1099 = 0012                      C  error_no_more_files             EQU    
					 18 
    1100                             C   
    1101 =                           C  country_not_found               EQU    
					 error_file_not_found 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-51
Xenix error codes                                           

    1102 =                           C  alloc_not_enough_memory         EQU    
					 error_not_enough_memory 
    1103 =                           C  alloc_arena_trashed             EQU    
					 error_arena_trashed 
    1104                             C   
    1105 =                           C  close_invalid_handle            EQU    
					 error_invalid_handle 
    1106 =                           C  close_invalid_function          EQU    
					 error_invalid_function 
    1107                             C   
    1108 =                           C  chdir_path_not_found            EQU    
					 error_path_not_found 
    1109                             C   
    1110 =                           C  chmod_path_not_found            EQU    
					 error_path_not_found 
    1111 =                           C  chmod_access_denied             EQU    
					 error_access_denied 
    1112 =                           C  chmod_invalid_function          EQU    
					 error_invalid_function 
    1113                             C   
    1114 =                           C  creat_access_denied             EQU    
					 error_access_denied 
    1115 =                           C  creat_path_not_found            EQU    
					 error_path_not_found 
    1116 =                           C  creat_too_many_open_files       EQU    
					 error_too_many_open_files 
    1117                             C   
    1118 =                           C  curdir_invalid_drive            EQU    
					 error_invalid_drive 
    1119                             C   
    1120 =                           C  dealloc_invalid_block           EQU    
					 error_invalid_block 
    1121 =                           C  dealloc_arena_trashed           EQU    
					 error_arena_trashed 
    1122                             C   
    1123 =                           C  dup_invalid_handle              EQU    
					 error_invalid_handle 
    1124 =                           C  dup_too_many_open_files         EQU    
					 error_too_many_open_files 
    1125                             C   
    1126 =                           C  dup2_invalid_handle             EQU    
					 error_invalid_handle 
    1127                             C   
    1128 =                           C  exec_invalid_function           EQU    
					 error_invalid_function 
    1129 =                           C  exec_bad_environment            EQU    
					 error_bad_environment 
    1130 =                           C  exec_bad_format                 EQU    
					 error_bad_format 
    1131 =                           C  exec_not_enough_memory          EQU    
					 error_not_enough_memory 
    1132 =                           C  exec_file_not_found             EQU    
					 error_file_not_found 
    1133                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-52
Xenix error codes                                           

    1134 =                           C  filetimes_invalid_function      EQU    
					 error_invalid_function 
    1135 =                           C  filetimes_invalid_handle        EQU    
					 error_invalid_handle 
    1136                             C   
    1137 =                           C  findfirst_file_not_found        EQU    
					 error_file_not_found 
    1138 =                           C  findfirst_no_more_files         EQU    
					 error_no_more_files 
    1139 =                           C  findnext_no_more_files          EQU    
					 error_no_more_files 
    1140                             C   
    1141 =                           C  international_invalid_function  EQU    
					 error_invalid_function 
    1142                             C   
    1143 =                           C  ioctl_invalid_handle            EQU    
					 error_invalid_handle 
    1144 =                           C  ioctl_invalid_function          EQU    
					 error_invalid_function 
    1145 =                           C  ioctl_invalid_data              EQU    
					 error_invalid_data 
    1146                             C   
    1147 =                           C  lseek_invalid_handle            EQU    
					 error_invalid_handle 
    1148 =                           C  lseek_invalid_function          EQU    
					 error_invalid_function 
    1149                             C   
    1150 =                           C  mkdir_path_not_found            EQU    
					 error_path_not_found 
    1151 =                           C  mkdir_access_denied             EQU    
					 error_access_denied 
    1152                             C   
    1153 =                           C  open_invalid_access             EQU    
					 error_invalid_access 
    1154 =                           C  open_file_not_found             EQU    
					 error_file_not_found 
    1155 =                           C  open_access_denied              EQU    
					 error_access_denied 
    1156 =                           C  open_too_many_open_files        EQU    
					 error_too_many_open_files 
    1157                             C   
    1158 =                           C  read_invalid_handle             EQU    
					 error_invalid_handle 
    1159 =                           C  read_access_denied              EQU    
					 error_access_denied 
    1160                             C   
    1161 =                           C  rename_file_not_found           EQU    
					 error_file_not_found 
    1162 =                           C  rename_not_same_device          EQU    
					 error_not_same_device 
    1163 =                           C  rename_access_denied            EQU    
					 error_access_denied 
    1164                             C   
    1165 =                           C  rmdir_path_not_found            EQU    
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-53
Xenix error codes                                           

					 error_path_not_found 
    1166 =                           C  rmdir_access_denied             EQU    
					 error_access_denied 
    1167 =                           C  rmdir_current_directory         EQU    
					 error_current_directory 
    1168                             C   
    1169 =                           C  setblock_invalid_block          EQU    
					 error_invalid_block 
    1170 =                           C  setblock_arena_trashed          EQU    
					 error_arena_trashed 
    1171 =                           C  setblock_not_enough_memory      EQU    
					 error_not_enough_memory 
    1172 =                           C  setblock_invalid_function       EQU    
					 error_invalid_function 
    1173                             C   
    1174 =                           C  unlink_file_not_found           EQU    
					 error_file_not_found 
    1175 =                           C  unlink_access_denied            EQU    
					 error_access_denied 
    1176                             C   
    1177 =                           C  write_invalid_handle            EQU    
					 error_invalid_handle 
    1178 =                           C  write_access_denied             EQU    
					 error_access_denied 
    1179                             C   
    1180                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-54
system call definitions                                     

    1181                             C   
    1182 = 0000                      C  Abort                           EQU 0  
					 ;  0      0 
    1183 = 0001                      C  Std_Con_Input                   EQU 1  
					 ;  1      1 
    1184 = 0002                      C  Std_Con_Output                  EQU 2  
					 ;  2      2 
    1185 = 0003                      C  Std_Aux_Input                   EQU 3  
					 ;  3      3 
    1186 = 0004                      C  Std_Aux_Output                  EQU 4  
					 ;  4      4 
    1187 = 0005                      C  Std_Printer_Output              EQU 5  
					 ;  5      5 
    1188 = 0006                      C  Raw_Con_IO                      EQU 6  
					 ;  6      6 
    1189 = 0007                      C  Raw_Con_Input                   EQU 7  
					 ;  7      7 
    1190 = 0008                      C  Std_Con_Input_No_Echo           EQU 8  
					 ;  8      8 
    1191 = 0009                      C  Std_Con_String_Output           EQU 9  
					 ;  9      9 
    1192 = 000A                      C  Std_Con_String_Input            EQU 10 
					 ; 10      A 
    1193 = 000B                      C  Std_Con_Input_Status            EQU 11 
					 ; 11      B 
    1194 = 000C                      C  Std_Con_Input_Flush             EQU 12 
					 ; 12      C 
    1195 = 000D                      C  Disk_Reset                      EQU 13 
					 ; 13      D 
    1196 = 000E                      C  Set_Default_Drive               EQU 14 
					 ; 14      E 
    1197 = 000F                      C  FCB_Open                        EQU 15 
					 ; 15      F 
    1198 = 0010                      C  FCB_Close                       EQU 16 
					 ; 16     10 
    1199 = 0011                      C  Dir_Search_First                EQU 17 
					 ; 17     11 
    1200 = 0012                      C  Dir_Search_Next                 EQU 18 
					 ; 18     12 
    1201 = 0013                      C  FCB_Delete                      EQU 19 
					 ; 19     13 
    1202 = 0014                      C  FCB_Seq_Read                    EQU 20 
					 ; 20     14 
    1203 = 0015                      C  FCB_Seq_Write                   EQU 21 
					 ; 21     15 
    1204 = 0016                      C  FCB_Create                      EQU 22 
					 ; 22     16 
    1205 = 0017                      C  FCB_Rename                      EQU 23 
					 ; 23     17 
    1206 = 0019                      C  Get_Default_Drive               EQU 25 
					 ; 25     19 
    1207 = 001A                      C  Set_DMA                         EQU 26 
					 ; 26     1A 
    1208                             C  ;----+----+----+----+----+----+----+---
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-55
system call definitions                                     

					-+----+----+----+----+----+----+----; 
    1209                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1210                             C  ;                                      
					                                    ; 
    1211 = 001F                      C  Get_Default_DPB                 EQU 31 
					 ; 31     1F 
    1212                             C  ;                                      
					                                    ; 
    1213                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1214                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1215 = 0021                      C  FCB_Random_Read                 EQU 33 
					 ; 33     21 
    1216 = 0022                      C  FCB_Random_Write                EQU 34 
					 ; 34     22 
    1217 = 0023                      C  Get_FCB_File_Length             EQU 35 
					 ; 35     23 
    1218 = 0024                      C  Get_FCB_Position                EQU 36 
					 ; 36     24 
    1219 = 0025                      C  Set_Interrupt_Vector            EQU 37 
					 ; 37     25 
    1220 = 0026                      C  Create_Process_Data_Block       EQU 38 
					 ; 38     26 
    1221 = 0027                      C  FCB_Random_Read_Block           EQU 39 
					 ; 39     27 
    1222 = 0028                      C  FCB_Random_Write_Block          EQU 40 
					 ; 40     28 
    1223 = 0029                      C  Parse_File_Descriptor           EQU 41 
					 ; 41     29 
    1224 = 002A                      C  Get_Date                        EQU 42 
					 ; 42     2A 
    1225 = 002B                      C  Set_Date                        EQU 43 
					 ; 43     2B 
    1226 = 002C                      C  Get_Time                        EQU 44 
					 ; 44     2C 
    1227 = 002D                      C  Set_Time                        EQU 45 
					 ; 45     2D 
    1228 = 002E                      C  Set_Verify_On_Write             EQU 46 
					 ; 46     2E 
    1229                             C  ; Extended functionality group 
    1230 = 002F                      C  Get_DMA                         EQU 47 
					 ; 47     2F 
    1231 = 0030                      C  Get_Version                     EQU 48 
					 ; 48     30 
    1232 = 0031                      C  Keep_Process                    EQU 49 
					 ; 49     31 
    1233                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1234                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1235                             C  ;                                      
					                                    ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-56
system call definitions                                     

    1236 = 0032                      C  Get_DPB                         EQU 50 
					 ; 50     32 
    1237                             C  ;                                      
					                                    ; 
    1238                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1239                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1240 = 0033                      C  Set_CTRL_C_Trapping             EQU 51 
					 ; 51     33 
    1241 = 0034                      C  Get_InDOS_Flag                  EQU 52 
					 ; 52     34 
    1242 = 0035                      C  Get_Interrupt_Vector            EQU 53 
					 ; 53     35 
    1243 = 0036                      C  Get_Drive_Freespace             EQU 54 
					 ; 54     36 
    1244 = 0037                      C  Char_Oper                       EQU 55 
					 ; 55     37 
    1245 = 0038                      C  International                   EQU 56 
					 ; 56     38 
    1246                             C  ;   Directory Group 
    1247 = 0039                      C  MKDir                           EQU 57 
					 ; 57     39 
    1248 = 003A                      C  RMDir                           EQU 58 
					 ; 58     3A 
    1249 = 003B                      C  CHDir                           EQU 59 
					 ; 59     3B 
    1250                             C  ;   File Group 
    1251 = 003C                      C  Creat                           EQU 60 
					 ; 60     3C 
    1252 = 003D                      C  Open                            EQU 61 
					 ; 61     3D 
    1253 = 003E                      C  Close                           EQU 62 
					 ; 62     3E 
    1254 = 003F                      C  Read                            EQU 63 
					 ; 63     3F 
    1255 = 0040                      C  Write                           EQU 64 
					 ; 64     40 
    1256 = 0041                      C  Unlink                          EQU 65 
					 ; 65     41 
    1257 = 0042                      C  LSeek                           EQU 66 
					 ; 66     42 
    1258 = 0043                      C  CHMod                           EQU 67 
					 ; 67     43 
    1259 = 0044                      C  IOCtl                           EQU 68 
					 ; 68     44 
    1260 = 0045                      C  XDup                            EQU 69 
					 ; 69     45 
    1261 = 0046                      C  XDup2                           EQU 70 
					 ; 70     46 
    1262 = 0047                      C  Current_Dir                     EQU 71 
					 ; 71     47 
    1263                             C  ;    Memory Group 
    1264 = 0048                      C  Alloc                           EQU 72 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-57
system call definitions                                     

					 ; 72     48 
    1265 = 0049                      C  Dealloc                         EQU 73 
					 ; 73     49 
    1266 = 004A                      C  Setblock                        EQU 74 
					 ; 74     4A 
    1267                             C  ;    Process Group 
    1268 = 004B                      C  Exec                            EQU 75 
					 ; 75     4B 
    1269 = 004C                      C  Exit                            EQU 76 
					 ; 76     4C 
    1270 = 004D                      C  Wait                            EQU 77 
					 ; 77     4D 
    1271 = 004E                      C  Find_First                      EQU 78 
					 ; 78     4E 
    1272                             C  ;   Special Group 
    1273 = 004F                      C  Find_Next                       EQU 79 
					 ; 79     4F 
    1274                             C  ; SPECIAL SYSTEM GROUP 
    1275                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1276                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1277                             C  ;                                      
					                                    ; 
    1278 = 0050                      C  Set_Current_PDB                 EQU 80 
					 ; 80     50 
    1279 = 0051                      C  Get_Current_PDB                 EQU 81 
					 ; 81     51 
    1280 = 0052                      C  Get_In_Vars                     EQU 82 
					 ; 82     52 
    1281 = 0053                      C  SetDPB                          EQU 83 
					 ; 83     53 
    1282                             C  ;                                      
					                                    ; 
    1283                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1284                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1285 = 0054                      C  Get_Verify_On_Write             EQU 84 
					 ; 84     54 
    1286                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1287                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1288                             C  ;                                      
					                                    ; 
    1289 = 0055                      C  Dup_PDB                         EQU 85 
					 ; 85     55 
    1290                             C  ;                                      
					                                    ; 
    1291                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1292                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-58
system call definitions                                     

    1293 = 0056                      C  Rename                          EQU 86 
					 ; 86     56 
    1294 = 0057                      C  File_Times                      EQU 87 
					 ; 87     57 
    1295 = 0058                      C  AllocOper                       EQU 88 
					 ; 88     58 
    1296                             C  ; Network extention system calls 
    1297 = 0059                      C  GetExtendedError                EQU 89 
					 ; 89     59 
    1298 = 005A                      C  CreateTempFile                  EQU 90 
					 ; 90     5A 
    1299 = 005B                      C  CreateNewFile                   EQU 91 
					 ; 91     5B 
    1300 = 005C                      C  LockOper                        EQU 92 
					 ; 92     5C Lock and Unlock 
    1301 = 005D                      C  ServerCall                      EQU 93 
					 ; 93     5D CommitAll, ServerDOSCall, 
    1302                             C                                         
					 ;           CloseByName, CloseUser, 
    1303                             C                                         
					 ;           CloseUserProcess, 
    1304                             C                                         
					 ;           GetOpenFileList 
    1305 = 005E                      C  UserIDOper                      EQU 94 
					 ; 94     5E Get and Set 
    1306 = 005F                      C  AssignOper                      EQU 95 
					 ; 95     5F On, Off, Get, Set, Cancel 
    1307                             C   
    1308 = 00F8                      C  Set_Oem_Handler                 EQU 248
					 ; 248    F8 
    1309 = 00F9                      C  OEM_C1                          EQU 249
					 ; 249    F9 
    1310 = 00FA                      C  OEM_C2                          EQU 250
					 ; 250    FA 
    1311 = 00FB                      C  OEM_C3                          EQU 251
					 ; 251    FB 
    1312 = 00FC                      C  OEM_C4                          EQU 252
					 ; 252    FC 
    1313 = 00FD                      C  OEM_C5                          EQU 253
					 ; 253    FD 
    1314 = 00FE                      C  OEM_C6                          EQU 254
					 ; 254    FE 
    1315 = 00FF                      C  OEM_C7                          EQU 255
					 ; 255    FF 
    1316                             C  SUBTTL 
    1317                                 
    1318                             C  INCLUDE DEVSYM.ASM 
    1319                             C  SUBTTL DEVICE TABLE AND SRH DEFINITION 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-59
DEVICE TABLE AND SRH DEFINITION                             

    1320                             C  PAGE 
    1321                             C  ; The device table list has the form: 
    1322                             C  SYSDEV  STRUC 
    1323 0000  ????????              C  SDEVNEXT        DD      ?       ;Pointe
					r to next device header 
    1324 0004  ????                  C  SDEVATT         DW      ?       ;Attrib
					utes of the device 
    1325 0006  ????                  C  SDEVSTRAT       DW      ?       ;Strate
					gy entry point 
    1326 0008  ????                  C  SDEVINT         DW      ?       ;Interr
					upt entry point 
    1327 000A  0008[                 C  SDEVNAME        DB      8 DUP (?) ;Name
					 of device (only first byte used for bl
					ock) 
    1328            ??               C  
    1329                         ]   C  
    1330                             C  
    1331 0012                        C  SYSDEV  ENDS 
    1332                             C   
    1333                             C  ;Attribute bit masks 
    1334 = 8000                      C  DEVTYP  EQU     8000H           ;Bit 15
					 - 1  if Char, 0 if block 
    1335 = 4000                      C  DEVIOCTL EQU    4000H           ;Bit 14
					 - CONTROL mode bit 
    1336 = 2000                      C  ISFATBYDEV EQU  2000H           ;Bit 13
					 - Device uses FAT ID bytes, comp media
					. 
    1337 = 0001                      C  ISCIN   EQU     0001H           ;Bit 0 
					- This device is the console input. 
    1338 = 0002                      C  ISCOUT  EQU     0002H           ;Bit 1 
					- This device is the console output. 
    1339 = 0004                      C  ISNULL  EQU     0004H           ;Bit 2 
					- This device is the null device. 
    1340 = 0008                      C  ISCLOCK EQU     0008H           ;Bit 3 
					- This device is the clock device. 
    1341 = 0010                      C  ISIBM   EQU     0010H           ;Bit 4 
					- This device is special 
    1342                             C   
    1343                             C  ;Static Reguest Header 
    1344                             C  SRHEAD  STRUC 
    1345 0000  ??                    C  REQLEN  DB      ?               ;Length
					 in bytes of request block 
    1346 0001  ??                    C  REQUNIT DB      ?               ;Device
					 unit number 
    1347 0002  ??                    C  REQFUNC DB      ?               ;Type o
					f request 
    1348 0003  ????                  C  REQSTAT DW      ?               ;Status
					 Word 
    1349 0005  0008[                 C          DB      8 DUP(?)        ;Reserv
					ed for queue links 
    1350            ??               C  
    1351                         ]   C  
    1352                             C  
    1353 000D                        C  SRHEAD  ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-60
DEVICE TABLE AND SRH DEFINITION                             

    1354                             C   
    1355                             C  ;Status word masks 
    1356 = 8000                      C  STERR   EQU     8000H           ;Bit 15
					 - Error 
    1357 = 0200                      C  STBUI   EQU     0200H           ;Bit 9 
					- Buisy 
    1358 = 0100                      C  STDON   EQU     0100H           ;Bit 8 
					- Done 
    1359 = 00FF                      C  STECODE EQU     00FFH           ;Error 
					code 
    1360 = 0000                      C  WRECODE EQU     0 
    1361                             C   
    1362                             C  ;Function codes 
    1363 = 0000                      C  DEVINIT EQU     0               ;Initia
					lization 
    1364 = 001A                      C  DINITHL EQU     26              ;Size o
					f init header 
    1365 = 0001                      C  DEVMDCH EQU     1               ;Media 
					check 
    1366 = 000F                      C  DMEDHL  EQU     15              ;Size o
					f media check header 
    1367 = 0002                      C  DEVBPB  EQU     2               ;Get BP
					B 
    1368 = 0003                      C  DEVRDIOCTL EQU  3               ;IOCTL 
					read 
    1369 = 0016                      C  DBPBHL  EQU     22              ;Size o
					f Get BPB header 
    1370 = 0004                      C  DEVRD   EQU     4               ;Read 
    1371 = 0016                      C  DRDWRHL EQU     22              ;Size o
					f RD/WR header 
    1372 = 0005                      C  DEVRDND EQU     5               ;Non de
					structive read no wait (character devs)
					 
    1373 = 000E                      C  DRDNDHL EQU     14              ;Size o
					f non destructive read header 
    1374 = 0006                      C  DEVIST  EQU     6               ;Input 
					status 
    1375 = 000D                      C  DSTATHL EQU     13              ;Size o
					f status header 
    1376 = 0007                      C  DEVIFL  EQU     7               ;Input 
					flush 
    1377 = 000F                      C  DFLSHL  EQU     15              ;Size o
					f flush header 
    1378 = 0008                      C  DEVWRT  EQU     8               ;Write 
    1379 = 0009                      C  DEVWRTV EQU     9               ;Write 
					with verify 
    1380 = 000A                      C  DEVOST  EQU     10              ;Output
					 status 
    1381 = 000B                      C  DEVOFL  EQU     11              ;Output
					 flush 
    1382 = 000C                      C  DEVWRIOCTL EQU  12              ;IOCTL 
					write 
    1383                                
					write 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-61
DEVICE TABLE AND SRH DEFINITION                             

    1384                                .cref 
    1385                                .list 
    1386                                 
    1387                                ENDIF 
    1388                                 
    1389                                ENDIF 
    1390                                 
    1391                                ENDIF 
    1392                                 
    1393                                 
    1394                                        i_need  USER_SP,WORD 
    1395 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1396 0000                         1  DATA ENDS
    1397                                        i_need  USER_SS,WORD 
    1398 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1399 0000                         1  DATA ENDS
    1400                                        i_need  SAVEDS,WORD 
    1401 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1402 0000                         1  DATA ENDS
    1403                                        i_need  SAVEBX,WORD 
    1404 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1405 0000                         1  DATA ENDS
    1406                                        i_need  INDOS,BYTE 
    1407 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1408 0000                         1  DATA ENDS
    1409                                        i_need  NSP,WORD 
    1410 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1411 0000                         1  DATA ENDS
    1412                                        i_need  NSS,WORD 
    1413 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1414 0000                         1  DATA ENDS
    1415                                        i_need  CURRENTPDB,WORD 
    1416 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1417 0000                         1  DATA ENDS
    1418                                        i_need  AUXSTACK,BYTE 
    1419 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1420 0000                         1  DATA ENDS
    1421                                        i_need  CONSWAP,BYTE 
    1422 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1423 0000                         1  DATA ENDS
    1424                                        i_need  IDLEINT,BYTE 
    1425 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1426 0000                         1  DATA ENDS
    1427                                        i_need  NOSETDIR,BYTE 
    1428 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1429 0000                         1  DATA ENDS
    1430                                        i_need  ERRORMODE,BYTE 
    1431 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1432 0000                         1  DATA ENDS
    1433                                        i_need  IOSTACK,BYTE 
    1434 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1435 0000                         1  DATA ENDS
    1436                                        i_need  WPERR,BYTE 
    1437 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-62
DEVICE TABLE AND SRH DEFINITION                             

    1438 0000                         1  DATA ENDS
    1439                                        i_need  DSKSTACK,BYTE 
    1440 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1441 0000                         1  DATA ENDS
    1442                                        i_need  CNTCFLAG,BYTE 
    1443 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1444 0000                         1  DATA ENDS
    1445                                        i_need  LEAVEADDR,WORD 
    1446 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1447 0000                         1  DATA ENDS
    1448                                        i_need  NULLDEVPT,DWORD 
    1449 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1450 0000                         1  DATA ENDS
    1451                                 
    1452                                        IF NOT IBM 
    1453                                        i_need  OEM_HANDLER,DWORD 
    1454 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
    1455 0000                         1  DATA ENDS
    1456                                        ENDIF 
    1457                                 
    1458                                        EXTRN   DSKSTATCHK:NEAR,GETBP:N
					EAR,DSKREAD:NEAR,DSKWRITE:NEAR 
    1459                                 
    1460                                 
    1461                                BREAK   <Copyright notice and version> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-63
Copyright notice and version                                

    1462                                 
    1463 = 0000                         CODSTRT EQU     $ 
    1464                                 
    1465                                        IF      NOT IBM 
    1466                                        IF      NOT KANJI 
    1467                                        PUBLIC  HEADER 
    1468 0000  0D 0A 4D 69 63 72 6F     HEADER  DB      13,10,"Microsoft MS-DOS
					 version " 
    1469       73 6F 66 74 20 4D 53     
    1470       2D 44 4F 53 20 76 65     
    1471       72 73 69 6F 6E 20        
    1472 001B  32                               DB      DOS_MAJOR_VERSION + "0"
					 
    1473 001C  2E                               DB      "." 
    1474 001D  31                               DB      (DOS_MINOR_VERSION / 10
					) + "0" 
    1475 001E  31                               DB      (DOS_MINOR_VERSION MOD 
					10) + "0" 
    1476                                        ENDIF 
    1477                                        ENDIF 
    1478                                        ENDIF 
    1479 001F  0D 0A                            DB      13,10 
    1480 0021  43 6F 70 79 72 69 67             DB      "Copyright 1981,82,83 M
					icrosoft Corp.",13,10,"$" 
    1481       68 74 20 31 39 38 31     
    1482       2C 38 32 2C 38 33 20     
    1483       4D 69 63 72 6F 73 6F     
    1484       66 74 20 43 6F 72 70     
    1485       2E 0D 0A 24              
    1486                                        ENDIF 
    1487                                BREAK   <System call entry points and d
					ispatcher> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-64
System call entry points and dispatcher                     

    1488                                ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHI
					NG,SS:NOTHING 
    1489                                 
    1490                                        procedure   SYSTEM_CALL,NEAR 
    1491 0048                         1 SYSTEM_CALL PROC NEAR
    1492                                entry   QUIT                           
					        ; INT 20H entry point 
    1493 0048                         1 QUIT:
    1494 0048  B4 00                            MOV     AH,0 
    1495 004A  EB 28                            JMP     SHORT SAVREGS 
    1496                                 
    1497                                entry   COMMAND                        
					 ; Interrupt call entry point (INT 21H)
					 
    1498 004C                         1 COMMAND:
    1499                                 
    1500                                        IF      NOT IBM 
    1501 004C  80 FC F8                         CMP     AH,SET_OEM_HANDLER 
    1502 004F  72 03                            JB      NOTOEM 
    1503 0051  E9 021E R                        JMP     $SET_OEM_HANDLER 
    1504 0054                           NOTOEM: 
    1505                                        ENDIF 
    1506                                 
    1507 0054  80 FC 58 90                      CMP     AH,MAXCOM 
    1508 0058  76 1A                            JBE     SAVREGS 
    1509 005A                           BADCALL: 
    1510 005A  B0 00                            MOV     AL,0 
    1511                                entry   IRET 
    1512 005C                         1 IRET:
    1513 005C  CF                               IRET 
    1514                                 
    1515                                entry   CALL_ENTRY                     
					 ; System call entry point and dispatch
					er 
    1516 005D                         1 CALL_ENTRY:
    1517 005D  58                               POP     AX                     
					 ; IP from the long call at 5 
    1518 005E  58                               POP     AX                     
					 ; Segment from the long call at 5 
    1519 005F  2E: 8F 06 0000 E                 POP     [User_SP]              
					 ; IP from the CALL 5 
    1520 0064  9C                               PUSHF                          
					 ; Start re-ordering the stack 
    1521 0065  FA                               CLI 
    1522 0066  50                               PUSH    AX                     
					 ; Save segment 
    1523 0067  2E: FF 36 0000 E                 PUSH    [User_SP]              
					 ; Stack now ordered as if INT had been
					 used 
    1524 006C  80 F9 24 90                      CMP     CL,MAXCALL             
					 ; This entry point doesn't get as many
					 calls 
    1525 0070  77 E8                            JA      BADCALL 
    1526 0072  8A E1                            MOV     AH,CL 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-65
System call entry points and dispatcher                     

    1527 0074                           SAVREGS: 
    1528 0074  E8 0153 R                        CALL    save_world 
    1529 0077  2E: 8C 1E 0000 E                 MOV     [SaveDS],DS 
    1530 007C  2E: 89 1E 0000 E                 MOV     [SaveBX],BX 
    1531 0081  8C CB                            MOV     BX,CS 
    1532 0083  8E DB                            MOV     DS,BX 
    1533                                ASSUME  DS:DOSGROUP 
    1534 0085  FE 06 0000 E                     INC     [INDOS]                
					 ; Flag that we're in the DOS 
    1535 0089  A1 0000 E                        MOV     AX,[user_SP] 
    1536 008C  A3 0000 E                        MOV     [NSP],AX 
    1537 008F  A1 0000 E                        MOV     AX,[user_SS] 
    1538 0092  A3 0000 E                        MOV     [NSS],AX 
    1539 0095  58                               POP     AX 
    1540 0096  50                               PUSH    AX 
    1541 0097  89 26 0000 E                     MOV     [user_SP],SP 
    1542 009B  8C 16 0000 E                     MOV     [user_SS],SS 
    1543                                ; 
    1544                                ; save user stack in his area for later
					 returns (possibly from EXEC) 
    1545                                ; Here comes multitasking!!! 
    1546                                ; 
    1547 009F  8E 1E 0000 E                     MOV     DS,[CurrentPDB] 
    1548 00A3  89 26 002E                       MOV     WORD PTR DS:[PDB_User_s
					tack],SP 
    1549 00A7  8C 16 0030                       MOV     WORD PTR DS:[PDB_User_s
					tack+2],SS 
    1550                                 
    1551 00AB  8C CB                            MOV     BX,CS                  
					 ; no holes here. 
    1552 00AD  8E D3                            MOV     SS,BX 
    1553                                ASSUME  SS:DOSGROUP 
    1554                                 
    1555                                    entry   REDISP 
    1556 00AF                         1 REDISP:
    1557 00AF  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:AUXS
					TACK     ; Enough stack for interrupts 
    1558 00B2  FB                               STI                            
					 ; Stack OK now 
    1559 00B3  0E                               PUSH    CS 
    1560 00B4  1F                               POP     DS 
    1561 00B5  32 FF                            XOR     BH,BH 
    1562 00B7  88 3E 0000 E                     MOV     [CONSWAP],BH 
    1563 00BB  C6 06 0000 E 01                  MOV     [IDLEINT],1 
    1564 00C0  C6 06 0000 E 00                  MOV     BYTE PTR [NoSetDir],0  
					 ; set directories on search 
    1565 00C5  8A DC                            MOV     BL,AH 
    1566 00C7  D1 E3                            SHL     BX,1 
    1567 00C9  FC                               CLD 
    1568 00CA  0A E4                            OR      AH,AH 
    1569 00CC  74 1B                            JZ      DSKROUT                
					 ; ABORT 
    1570 00CE  80 FC 0C                         CMP     AH,12 
    1571 00D1  76 0A                            JBE     IOROUT                 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-66
System call entry points and dispatcher                     

					 ; Character I/O 
    1572 00D3  80 FC 51                         CMP     AH,GET_CURRENT_PDB     
					 ; INT 24 needs GET,SET PDB 
    1573 00D6  74 05                            JZ      IOROUT 
    1574 00D8  80 FC 50                         CMP     AH,SET_CURRENT_PDB 
    1575 00DB  75 0C                            JNZ     DSKROUT 
    1576 00DD                           IOROUT: 
    1577 00DD  80 3E 0000 E 00                  CMP     [ERRORMODE],0 
    1578 00E2  75 1E                            JNZ     DISPCALL               
					 ; Stay on AUXSTACK if INT 24 
    1579 00E4  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:IOST
					ACK 
    1580 00E7  EB 19                            JMP     SHORT DISPCALL 
    1581                                 
    1582 00E9                           DSKROUT: 
    1583 00E9  C6 06 0000 E 00                  MOV     [ERRORMODE],0          
					 ; Cannot make non 1-12 calls in 
    1584 00EE  C6 06 0000 E FF                  MOV     [WPERR],-1             
					 ; error mode, so good place to 
    1585                                                                       
					 ; make sure flags are reset 
    1586 00F3  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:DSKS
					TACK 
    1587 00F6  F6 06 0000 E FF                  TEST    [CNTCFLAG],-1 
    1588 00FB  74 05                            JZ      DISPCALL 
    1589 00FD  50                               PUSH    AX 
    1590                                        invoke  DSKSTATCHK 
    1591 00FE  E8 0000 E              1  CALL DSKSTATCHK
    1592 0101  58                               POP     AX 
    1593 0102                           DISPCALL: 
    1594 0102  FF 36 0000 E                     PUSH    [LEAVEADDR] 
    1595 0106  2E: FF B7 0169 R                 PUSH    CS:[BX+DISPATCH] 
    1596 010B  8B 1E 0000 E                     MOV     BX,[SaveBX] 
    1597 010F  8E 1E 0000 E                     MOV     DS,[SaveDS] 
    1598                                ASSUME  DS:NOTHING 
    1599                                        return 
    1600 0113                         1 ??0000:
    1601 0113  C3                     1  RET
    1602                                 
    1603                                        entry LEAVE 
    1604 0114                         1 LEAVE:
    1605                                ASSUME  SS:NOTHING                     
					 ; User routines may misbehave 
    1606 0114  FA                               CLI 
    1607 0115  2E: FE 0E 0000 E                 DEC     [INDOS] 
    1608 011A  2E: 8B 26 0000 E                 MOV     SP,[user_SP] 
    1609 011F  2E: 8E 16 0000 E                 MOV     SS,[user_SS] 
    1610 0124  8B EC                            MOV     BP,SP 
    1611 0126  88 46 00                         MOV     BYTE PTR [BP.user_AX],A
					L 
    1612 0129  2E: A1 0000 E                    MOV     AX,[NSP] 
    1613 012D  2E: A3 0000 E                    MOV     [user_SP],AX 
    1614 0131  2E: A1 0000 E                    MOV     AX,[NSS] 
    1615 0135  2E: A3 0000 E                    MOV     [user_SS],AX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-67
System call entry points and dispatcher                     

    1616 0139  E8 013F R                        CALL    restore_world 
    1617                                 
    1618 013C  CF                               IRET 
    1619                                SYSTEM_CALL ENDP 
    1620                                 
    1621                                ; 
    1622                                ; restore_world restores all registers 
					('cept SS:SP, CS:IP, flags) from 
    1623                                ; the stack prior to giving the user co
					ntrol 
    1624                                ; 
    1625                                        ASSUME  DS:NOTHING,ES:NOTHING 
    1626 013D  ????                     restore_tmp DW  ? 
    1627                                        procedure   restore_world,NEAR 
    1628 013F                         1 restore_world PROC NEAR
    1629 013F  2E: 8F 06 013D R                 POP     restore_tmp     ; POP  
					   restore_tmp 
    1630 0144  58                               POP     AX              ; PUSH 
					   ES 
    1631 0145  5B                               POP     BX              ; PUSH 
					   DS 
    1632 0146  59                               POP     CX              ; PUSH 
					   BP 
    1633 0147  5A                               POP     DX              ; PUSH 
					   DI 
    1634 0148  5E                               POP     SI              ; PUSH 
					   SI 
    1635 0149  5F                               POP     DI              ; PUSH 
					   DX 
    1636 014A  5D                               POP     BP              ; PUSH 
					   CX 
    1637 014B  1F                               POP     DS              ; PUSH 
					   BX 
    1638 014C  07                               POP     ES              ; PUSH 
					   AX 
    1639 014D                           world_ret: 
    1640 014D  2E: FF 36 013D R                 PUSH    restore_tmp     ; PUSH 
					   restore_tmp 
    1641                                        return 
    1642 0152                         1 ??0001:
    1643 0152  C3                     1  RET
    1644                                restore_world   ENDP 
    1645                                 
    1646                                ; 
    1647                                ; save_world saves complete registers o
					n the stack 
    1648                                ; 
    1649                                        procedure   save_world,NEAR 
    1650 0153                         1 save_world PROC NEAR
    1651 0153  2E: 8F 06 013D R                 POP     restore_tmp 
    1652 0158  06                               PUSH    ES 
    1653 0159  1E                               PUSH    DS 
    1654 015A  55                               PUSH    BP 
    1655 015B  57                               PUSH    DI 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-68
System call entry points and dispatcher                     

    1656 015C  56                               PUSH    SI 
    1657 015D  52                               PUSH    DX 
    1658 015E  51                               PUSH    CX 
    1659 015F  53                               PUSH    BX 
    1660 0160  50                               PUSH    AX 
    1661 0161  EB EA                            JMP     SHORT world_ret 
    1662                                save_world      ENDP 
    1663                                 
    1664                                ; 
    1665                                ; get_user_stack returns the user's sta
					ck (and hence registers) in DS:SI 
    1666                                ; 
    1667                                        procedure   get_user_stack,NEAR
					 
    1668 0163                         1 get_user_stack PROC NEAR
    1669 0163  2E: C5 36 0000 E                 LDS     SI,DWORD PTR [user_SP] 
    1670                                        return 
    1671 0168                         1 ??0002:
    1672 0168  C3                     1  RET
    1673                                get_user_stack  ENDP 
    1674                                 
    1675                                ; Standard Functions 
    1676 0169                           DISPATCH    LABEL WORD 
    1677                                .lall 
    1678                                        short_addr  $ABORT             
					             ;  0      0 
    1679                              1  IFDIF <$ABORT>,<?>
    1680                              1 .xcref
    1681                              1  IF2
    1682                              1  IFNDEF $ABORT
    1683                              1  EXTRN $ABORT:NEAR
    1684                              1  ENDIF
    1685                              1  ENDIF
    1686                              1 .cref
    1687 0169  0000 E                 1  DW OFFSET DOSGROUP:$ABORT
    1688                              1  ENDIF
    1689                                .xall 
    1690                                        short_addr  $STD_CON_INPUT     
					             ;  1      1 
    1691 016B  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT
    1692                                        short_addr  $STD_CON_OUTPUT    
					             ;  2      2 
    1693 016D  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_OUTPUT
    1694                                        short_addr  $STD_AUX_INPUT     
					             ;  3      3 
    1695 016F  0000 E                 1  DW OFFSET DOSGROUP:$STD_AUX_INPUT
    1696                                        short_addr  $STD_AUX_OUTPUT    
					             ;  4      4 
    1697 0171  0000 E                 1  DW OFFSET DOSGROUP:$STD_AUX_OUTPUT
    1698                                        short_addr  $STD_PRINTER_OUTPUT
					             ;  5      5 
    1699 0173  0000 E                 1  DW OFFSET DOSGROUP:$STD_PRINTER_OUTPUT
					
    1700                                        short_addr  $RAW_CON_IO        
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-69
System call entry points and dispatcher                     

					             ;  6      6 
    1701 0175  0000 E                 1  DW OFFSET DOSGROUP:$RAW_CON_IO
    1702                                        short_addr  $RAW_CON_INPUT     
					             ;  7      7 
    1703 0177  0000 E                 1  DW OFFSET DOSGROUP:$RAW_CON_INPUT
    1704                                        short_addr  $STD_CON_INPUT_NO_E
					CHO          ;  8      8 
    1705 0179  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT_NO_E
					CHO
    1706                                        short_addr  $STD_CON_STRING_OUT
					PUT          ;  9      9 
    1707 017B  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_STRING_OUT
					PUT
    1708                                        short_addr  $STD_CON_STRING_INP
					UT           ; 10      A 
    1709 017D  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_STRING_INP
					UT
    1710                                        short_addr  $STD_CON_INPUT_STAT
					US           ; 11      B 
    1711 017F  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT_STAT
					US
    1712                                        short_addr  $STD_CON_INPUT_FLUS
					H            ; 12      C 
    1713 0181  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT_FLUS
					H
    1714                                        short_addr  $DISK_RESET        
					             ; 13      D 
    1715 0183  0000 E                 1  DW OFFSET DOSGROUP:$DISK_RESET
    1716                                        short_addr  $SET_DEFAULT_DRIVE 
					             ; 14      E 
    1717 0185  0000 E                 1  DW OFFSET DOSGROUP:$SET_DEFAULT_DRIVE
    1718                                        short_addr  $FCB_OPEN          
					             ; 15      F 
    1719 0187  0000 E                 1  DW OFFSET DOSGROUP:$FCB_OPEN
    1720                                        short_addr  $FCB_CLOSE         
					             ; 16     10 
    1721 0189  0000 E                 1  DW OFFSET DOSGROUP:$FCB_CLOSE
    1722                                        short_addr  $DIR_SEARCH_FIRST  
					             ; 17     11 
    1723 018B  0000 E                 1  DW OFFSET DOSGROUP:$DIR_SEARCH_FIRST
    1724                                        short_addr  $DIR_SEARCH_NEXT   
					             ; 18     12 
    1725 018D  0000 E                 1  DW OFFSET DOSGROUP:$DIR_SEARCH_NEXT
    1726                                        short_addr  $FCB_DELETE        
					             ; 19     13 
    1727 018F  0000 E                 1  DW OFFSET DOSGROUP:$FCB_DELETE
    1728                                        short_addr  $FCB_SEQ_READ      
					             ; 20     14 
    1729 0191  0000 E                 1  DW OFFSET DOSGROUP:$FCB_SEQ_READ
    1730                                        short_addr  $FCB_SEQ_WRITE     
					             ; 21     15 
    1731 0193  0000 E                 1  DW OFFSET DOSGROUP:$FCB_SEQ_WRITE
    1732                                        short_addr  $FCB_CREATE        
					             ; 22     16 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-70
System call entry points and dispatcher                     

    1733 0195  0000 E                 1  DW OFFSET DOSGROUP:$FCB_CREATE
    1734                                        short_addr  $FCB_RENAME        
					             ; 23     17 
    1735 0197  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RENAME
    1736                                        short_addr  CPMFUNC            
					             ; 24     18 
    1737 0199  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
    1738                                        short_addr  $GET_DEFAULT_DRIVE 
					             ; 25     19 
    1739 019B  0000 E                 1  DW OFFSET DOSGROUP:$GET_DEFAULT_DRIVE
    1740                                        short_addr  $SET_DMA           
					             ; 26     1A 
    1741 019D  0000 E                 1  DW OFFSET DOSGROUP:$SET_DMA
    1742                                 
    1743                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1744                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1745                                ;                                      
					                                    ; 
    1746                                        short_addr  $SLEAZEFUNC        
					             ; 27     1B 
    1747 019F  0000 E                 1  DW OFFSET DOSGROUP:$SLEAZEFUNC
    1748                                        short_addr  $SLEAZEFUNCDL      
					             ; 28     1C 
    1749 01A1  0000 E                 1  DW OFFSET DOSGROUP:$SLEAZEFUNCDL
    1750                                ;                                      
					                                    ; 
    1751                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1752                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1753                                 
    1754                                        short_addr  CPMFUNC            
					             ; 29     1D 
    1755 01A3  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
    1756                                        short_addr  CPMFUNC            
					             ; 30     1E 
    1757 01A5  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
    1758                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1759                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1760                                ;                                      
					                                    ; 
    1761                                        short_addr  $GET_DEFAULT_DPB   
					             ; 31     1F 
    1762 01A7  0000 E                 1  DW OFFSET DOSGROUP:$GET_DEFAULT_DPB
    1763                                ;                                      
					                                    ; 
    1764                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1765                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-71
System call entry points and dispatcher                     

    1766                                        short_addr  CPMFUNC            
					             ; 32     20 
    1767 01A9  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
    1768                                        short_addr  $FCB_RANDOM_READ   
					             ; 33     21 
    1769 01AB  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_READ
    1770                                        short_addr  $FCB_RANDOM_WRITE  
					             ; 34     22 
    1771 01AD  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_WRITE
    1772                                        short_addr  $GET_FCB_FILE_LENGT
					H            ; 35     23 
    1773 01AF  0000 E                 1  DW OFFSET DOSGROUP:$GET_FCB_FILE_LENGT
					H
    1774                                        short_addr  $GET_FCB_POSITION  
					             ; 36     24 
    1775 01B1  0000 E                 1  DW OFFSET DOSGROUP:$GET_FCB_POSITION
    1776 = 0024                         MAXCALL =       ($-DISPATCH)/2 - 1 
    1777                                 
    1778                                ; Extended Functions 
    1779                                        short_addr  $SET_INTERRUPT_VECT
					OR           ; 37     25 
    1780 01B3  0000 E                 1  DW OFFSET DOSGROUP:$SET_INTERRUPT_VECT
					OR
    1781                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1782                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1783                                ;                                      
					                                    ; 
    1784                                        short_addr  $CREATE_PROCESS_DAT
					A_BLOCK      ; 38     26 
    1785 01B5  0000 E                 1  DW OFFSET DOSGROUP:$CREATE_PROCESS_DAT
					A_BLOCK
    1786                                ;                                      
					                                    ; 
    1787                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1788                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1789                                        short_addr  $FCB_RANDOM_READ_BL
					OCK          ; 39     27 
    1790 01B7  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_READ_BL
					OCK
    1791                                        short_addr  $FCB_RANDOM_WRITE_B
					LOCK         ; 40     28 
    1792 01B9  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_WRITE_B
					LOCK
    1793                                        short_addr  $PARSE_FILE_DESCRIP
					TOR          ; 41     29 
    1794 01BB  0000 E                 1  DW OFFSET DOSGROUP:$PARSE_FILE_DESCRIP
					TOR
    1795                                        short_addr  $GET_DATE          
					             ; 42     2A 
    1796 01BD  0000 E                 1  DW OFFSET DOSGROUP:$GET_DATE
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-72
System call entry points and dispatcher                     

    1797                                        short_addr  $SET_DATE          
					             ; 43     2B 
    1798 01BF  0000 E                 1  DW OFFSET DOSGROUP:$SET_DATE
    1799                                        short_addr  $GET_TIME          
					             ; 44     2C 
    1800 01C1  0000 E                 1  DW OFFSET DOSGROUP:$GET_TIME
    1801                                        short_addr  $SET_TIME          
					             ; 45     2D 
    1802 01C3  0000 E                 1  DW OFFSET DOSGROUP:$SET_TIME
    1803                                        short_addr  $SET_VERIFY_ON_WRIT
					E            ; 46     2E 
    1804 01C5  0000 E                 1  DW OFFSET DOSGROUP:$SET_VERIFY_ON_WRIT
					E
    1805                                 
    1806                                ; Extended functionality group 
    1807                                        short_addr  $GET_DMA           
					             ; 47     2F 
    1808 01C7  0000 E                 1  DW OFFSET DOSGROUP:$GET_DMA
    1809                                        short_addr  $GET_VERSION       
					             ; 48     30 
    1810 01C9  0000 E                 1  DW OFFSET DOSGROUP:$GET_VERSION
    1811                                        short_addr  $Keep_Process      
					             ; 49     31 
    1812 01CB  0000 E                 1  DW OFFSET DOSGROUP:$Keep_Process
    1813                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1814                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1815                                ;                                      
					                                    ; 
    1816                                        short_addr  $GET_DPB           
					             ; 50     32 
    1817 01CD  0000 E                 1  DW OFFSET DOSGROUP:$GET_DPB
    1818                                ;                                      
					                                    ; 
    1819                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1820                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1821                                        short_addr  $SET_CTRL_C_TRAPPIN
					G            ; 51     33 
    1822 01CF  0000 E                 1  DW OFFSET DOSGROUP:$SET_CTRL_C_TRAPPIN
					G
    1823                                        short_addr  $GET_INDOS_FLAG    
					             ; 52     34 
    1824 01D1  0000 E                 1  DW OFFSET DOSGROUP:$GET_INDOS_FLAG
    1825                                        short_addr  $GET_INTERRUPT_VECT
					OR           ; 53     35 
    1826 01D3  0000 E                 1  DW OFFSET DOSGROUP:$GET_INTERRUPT_VECT
					OR
    1827                                        short_addr  $GET_DRIVE_FREESPAC
					E            ; 54     36 
    1828 01D5  0000 E                 1  DW OFFSET DOSGROUP:$GET_DRIVE_FREESPAC
					E
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-73
System call entry points and dispatcher                     

    1829                                        short_addr  $CHAR_OPER         
					             ; 55     37 
    1830 01D7  0000 E                 1  DW OFFSET DOSGROUP:$CHAR_OPER
    1831                                        short_addr  $INTERNATIONAL     
					             ; 56     38 
    1832 01D9  0000 E                 1  DW OFFSET DOSGROUP:$INTERNATIONAL
    1833                                ; XENIX CALLS 
    1834                                ;   Directory Group 
    1835                                        short_addr  $MKDIR             
					             ; 57     39 
    1836 01DB  0000 E                 1  DW OFFSET DOSGROUP:$MKDIR
    1837                                        short_addr  $RMDIR             
					             ; 58     3A 
    1838 01DD  0000 E                 1  DW OFFSET DOSGROUP:$RMDIR
    1839                                        short_addr  $CHDIR             
					             ; 59     3B 
    1840 01DF  0000 E                 1  DW OFFSET DOSGROUP:$CHDIR
    1841                                ;   File Group 
    1842                                        short_addr  $CREAT             
					             ; 60     3C 
    1843 01E1  0000 E                 1  DW OFFSET DOSGROUP:$CREAT
    1844                                        short_addr  $OPEN              
					             ; 61     3D 
    1845 01E3  0000 E                 1  DW OFFSET DOSGROUP:$OPEN
    1846                                        short_addr  $CLOSE             
					             ; 62     3E 
    1847 01E5  0000 E                 1  DW OFFSET DOSGROUP:$CLOSE
    1848                                        short_addr  $READ              
					             ; 63     3F 
    1849 01E7  0000 E                 1  DW OFFSET DOSGROUP:$READ
    1850                                        short_addr  $WRITE             
					             ; 64     40 
    1851 01E9  0000 E                 1  DW OFFSET DOSGROUP:$WRITE
    1852                                        short_addr  $UNLINK            
					             ; 65     41 
    1853 01EB  0000 E                 1  DW OFFSET DOSGROUP:$UNLINK
    1854                                        short_addr  $LSEEK             
					             ; 66     42 
    1855 01ED  0000 E                 1  DW OFFSET DOSGROUP:$LSEEK
    1856                                        short_addr  $CHMOD             
					             ; 67     43 
    1857 01EF  0000 E                 1  DW OFFSET DOSGROUP:$CHMOD
    1858                                        short_addr  $IOCTL             
					             ; 68     44 
    1859 01F1  0000 E                 1  DW OFFSET DOSGROUP:$IOCTL
    1860                                        short_addr  $DUP               
					             ; 69     45 
    1861 01F3  0000 E                 1  DW OFFSET DOSGROUP:$DUP
    1862                                        short_addr  $DUP2              
					             ; 70     46 
    1863 01F5  0000 E                 1  DW OFFSET DOSGROUP:$DUP2
    1864                                        short_addr  $CURRENT_DIR       
					             ; 71     47 
    1865 01F7  0000 E                 1  DW OFFSET DOSGROUP:$CURRENT_DIR
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-74
System call entry points and dispatcher                     

    1866                                ;    Memory Group 
    1867                                        short_addr  $ALLOC             
					             ; 72     48 
    1868 01F9  0000 E                 1  DW OFFSET DOSGROUP:$ALLOC
    1869                                        short_addr  $DEALLOC           
					             ; 73     49 
    1870 01FB  0000 E                 1  DW OFFSET DOSGROUP:$DEALLOC
    1871                                        short_addr  $SETBLOCK          
					             ; 74     4A 
    1872 01FD  0000 E                 1  DW OFFSET DOSGROUP:$SETBLOCK
    1873                                ;    Process Group 
    1874                                        short_addr  $EXEC              
					             ; 75     4B 
    1875 01FF  0000 E                 1  DW OFFSET DOSGROUP:$EXEC
    1876                                        short_addr  $EXIT              
					             ; 76     4C 
    1877 0201  0000 E                 1  DW OFFSET DOSGROUP:$EXIT
    1878                                        short_addr  $WAIT              
					             ; 77     4D 
    1879 0203  0000 E                 1  DW OFFSET DOSGROUP:$WAIT
    1880                                        short_addr  $FIND_FIRST        
					             ; 78     4E 
    1881 0205  0000 E                 1  DW OFFSET DOSGROUP:$FIND_FIRST
    1882                                ;   Special Group 
    1883                                        short_addr  $FIND_NEXT         
					             ; 79     4F 
    1884 0207  0000 E                 1  DW OFFSET DOSGROUP:$FIND_NEXT
    1885                                ; SPECIAL SYSTEM GROUP 
    1886                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1887                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1888                                ;                                      
					                                    ; 
    1889                                        short_addr  $SET_CURRENT_PDB   
					             ; 80     50 
    1890 0209  023B R                 1  DW OFFSET DOSGROUP:$SET_CURRENT_PDB
    1891                                        short_addr  $GET_CURRENT_PDB   
					             ; 81     51 
    1892 020B  0241 R                 1  DW OFFSET DOSGROUP:$GET_CURRENT_PDB
    1893                                        short_addr  $GET_IN_VARS       
					             ; 82     52 
    1894 020D  0000 E                 1  DW OFFSET DOSGROUP:$GET_IN_VARS
    1895                                        short_addr  $SETDPB            
					             ; 83     53 
    1896 020F  0000 E                 1  DW OFFSET DOSGROUP:$SETDPB
    1897                                ;                                      
					                                    ; 
    1898                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1899                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1900                                        short_addr  $GET_VERIFY_ON_WRIT
					E            ; 84     54 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-75
System call entry points and dispatcher                     

    1901 0211  0000 E                 1  DW OFFSET DOSGROUP:$GET_VERIFY_ON_WRIT
					E
    1902                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1903                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1904                                ;                                      
					                                    ; 
    1905                                        short_addr  $DUP_PDB           
					             ; 85     55 
    1906 0213  0000 E                 1  DW OFFSET DOSGROUP:$DUP_PDB
    1907                                ;                                      
					                                    ; 
    1908                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1909                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1910                                        short_addr  $RENAME            
					             ; 86     56 
    1911 0215  0000 E                 1  DW OFFSET DOSGROUP:$RENAME
    1912                                        short_addr  $FILE_TIMES        
					             ; 87     57 
    1913 0217  0000 E                 1  DW OFFSET DOSGROUP:$FILE_TIMES
    1914                                        short_addr  $AllocOper         
					             ; 88     58 
    1915 0219  0000 E                 1  DW OFFSET DOSGROUP:$AllocOper
    1916                                 
    1917 = 0058                         MAXCOM  =       ($-DISPATCH)/2 - 1 
    1918                                 
    1919 021B                           CPMFUNC: 
    1920 021B  32 C0                            XOR     AL,AL 
    1921                                        return 
    1922 021D                         1 ??0003:
    1923 021D  C3                     1  RET
    1924                                 
    1925                                        IF      NOT IBM 
    1926                                BREAK <Set_OEM_Handler -- Set OEM sys c
					all address and handle OEM Calls> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-76
Set_OEM_Handler -- Set OEM sys call address and handle OEM C

    1927                                 
    1928 021E                           $SET_OEM_HANDLER: 
    1929                                ASSUME  DS:NOTHING,ES:NOTHING 
    1930                                 
    1931                                ; Inputs: 
    1932                                ;       User registers, User Stack, INT
					S disabled 
    1933                                ;       If CALL F8, DS:DX is new handle
					r address 
    1934                                ; Function: 
    1935                                ;       Process OEM INT 21 extensions 
    1936                                ; Outputs: 
    1937                                ;       Jumps to OEM_HANDLER if appropr
					iate 
    1938                                 
    1939 021E  75 0B                            JNE     DO_OEM_FUNC            
					 ; If above F8 try to jump to handler 
    1940 0220  2E: 89 16 0000 E                 MOV     WORD PTR [OEM_HANDLER],
					DX       ; Set Handler 
    1941 0225  2E: 8C 1E 0002 E                 MOV     WORD PTR [OEM_HANDLER+2
					],DS 
    1942 022A  CF                               IRET                           
					 ; Quick return, Have altered no regist
					ers 
    1943                                 
    1944 022B                           DO_OEM_FUNC: 
    1945 022B  2E: 83 3E 0000 E FF              CMP     WORD PTR [OEM_HANDLER],
					-1 
    1946 0231  75 03                            JNZ     OEM_JMP 
    1947 0233  E9 005A R                        JMP     BADCALL                
					 ; Handler not initialized 
    1948                                 
    1949 0236                           OEM_JMP: 
    1950 0236  2E: FF 2E 0000 E                 JMP     [OEM_HANDLER] 
    1951                                 
    1952                                        ENDIF 
    1953                                 
    1954                                 
    1955                                ASSUME  SS:DOSGROUP 
    1956                                 
    1957                                ; 
    1958                                ; $Set_current_PDB takes BX and sets it
					 to be the current process 
    1959                                ;   *** THIS FUNCTION CALL IS SUBJECT T
					O CHANGE!!! *** 
    1960                                ; 
    1961                                        procedure   $SET_CURRENT_PDB,NE
					AR 
    1962 023B                         1 $SET_CURRENT_PDB PROC NEAR
    1963                                        ASSUME  DS:NOTHING,SS:NOTHING 
    1964 023B  2E: 89 1E 0000 E                 MOV     [CurrentPDB],BX 
    1965                                        return 
    1966 0240                         1 ??0004:
    1967 0240  C3                     1  RET
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-77
Set_OEM_Handler -- Set OEM sys call address and handle OEM C

    1968                                $SET_CURRENT_PDB    ENDP 
    1969                                 
    1970                                ; 
    1971                                ; $get_current_PDB returns in BX the cu
					rrent process 
    1972                                ;   *** THIS FUNCTION CALL IS SUBJECT T
					O CHANGE!!! *** 
    1973                                ; 
    1974                                        procedure   $GET_CURRENT_PDB,NE
					AR 
    1975 0241                         1 $GET_CURRENT_PDB PROC NEAR
    1976                                        ASSUME  DS:NOTHING,SS:NOTHING 
    1977                                        invoke  get_user_stack 
    1978 0241  E8 0163 R              1  CALL get_user_stack
    1979 0244  2E: FF 36 0000 E                 PUSH    [CurrentPDB] 
    1980 0249  8F 44 02                         POP     [SI.user_BX] 
    1981                                        return 
    1982 024C                         1 ??0005:
    1983 024C  C3                     1  RET
    1984                                $GET_CURRENT_PDB    ENDP 
    1985                                ;                                      
					                                    ; 
    1986                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1987                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1988                                 
    1989                                BREAK <NullDev -- Driver for null devic
					e> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-78
NullDev -- Driver for null device                           

    1990                                        procedure   SNULDEV,FAR 
    1991 024D                         1 SNULDEV PROC FAR
    1992                                ASSUME DS:NOTHING,ES:NOTHING,SS:NOTHING
					 
    1993 024D  2E: 89 1E 0000 E                 MOV     WORD PTR [NULLDEVPT],BX
					 
    1994 0252  2E: 8C 06 0002 E                 MOV     WORD PTR [NULLDEVPT+2],
					ES 
    1995                                        return 
    1996 0257                         1 ??0006:
    1997 0257  CB                     1  RET
    1998                                SNULDEV ENDP 
    1999                                 
    2000                                        procedure   INULDEV,FAR 
    2001 0258                         1 INULDEV PROC FAR
    2002 0258  06                               PUSH    ES 
    2003 0259  53                               PUSH    BX 
    2004 025A  2E: C4 1E 0000 E                 LES     BX,[NULLDEVPT] 
    2005 025F  26: 81 4F 03 0100                OR      ES:[BX.REQSTAT],STDON  
					         ; Set done bit 
    2006 0265  5B                               POP     BX 
    2007 0266  07                               POP     ES 
    2008                                        return 
    2009 0267                         1 ??0007:
    2010 0267  CB                     1  RET
    2011                                 
    2012                                INULDEV ENDP 
    2013                                 
    2014                                 
    2015                                BREAK <AbsDRD, AbsDWRT -- INT int_disk_
					read, int_disk_write handlers> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-79
AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handler

    2016                                 
    2017                                 
    2018                                        ENDIF 
    2019                                 
    2020                                        procedure   ABSDRD,FAR 
    2021 0268                         1 ABSDRD PROC FAR
    2022                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
    2023                                 
    2024 0268  FA                               CLI 
    2025 0269  2E: 8C 16 0000 E                 MOV     [user_SS],SS 
    2026 026E  2E: 89 26 0000 E                 MOV     [user_SP],SP 
    2027 0273  0E                               PUSH    CS 
    2028 0274  17                               POP     SS 
    2029                                ASSUME  SS:DOSGROUP 
    2030 0275  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:DSKS
					TACK 
    2031 0278  36: FE 06 0000 E                 INC     BYTE PTR [INDOS] 
    2032 027D  FB                               STI 
    2033 027E  FC                               CLD 
    2034 027F  06                               PUSH    ES 
    2035 0280  1E                               PUSH    DS 
    2036 0281  16                               PUSH    SS 
    2037 0282  1F                               POP     DS 
    2038                                ASSUME  DS:DOSGROUP 
    2039                                        invoke  GETBP 
    2040 0283  E8 0000 E              1  CALL GETBP
    2041 0286  1F                               POP     DS 
    2042                                ASSUME  DS:NOTHING 
    2043 0287  72 06                            JC      ILEAVE 
    2044                                        invoke  DSKREAD 
    2045 0289  E8 0000 E              1  CALL DSKREAD
    2046 028C                           TLEAVE: 
    2047 028C  74 01                            JZ      ILEAVE 
    2048                                 
    2049                                        ENDIF 
    2050                                 
    2051 028E  F9                               STC 
    2052 028F                           ILEAVE: 
    2053 028F  07                               POP     ES 
    2054 0290  FA                               CLI 
    2055 0291  36: FE 0E 0000 E                 DEC     BYTE PTR [INDOS] 
    2056 0296  36: 8B 26 0000 E                 MOV     SP,[user_SP] 
    2057 029B  36: 8E 16 0000 E                 MOV     SS,[user_SS] 
    2058                                ASSUME  SS:NOTHING 
    2059 02A0  FB                               STI 
    2060                                        return 
    2061 02A1                         1 ??0008:
    2062 02A1  CB                     1  RET
    2063                                ABSDRD  ENDP 
    2064                                 
    2065                                        procedure   ABSDWRT,FAR 
    2066 02A2                         1 ABSDWRT PROC FAR
    2067                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-80
AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handler

					G 
    2068                                 
    2069 02A2  FA                               CLI 
    2070 02A3  2E: 8C 16 0000 E                 MOV     [user_SS],SS 
    2071 02A8  2E: 89 26 0000 E                 MOV     [user_SP],SP 
    2072 02AD  0E                               PUSH    CS 
    2073 02AE  17                               POP     SS 
    2074                                ASSUME  SS:DOSGROUP 
    2075 02AF  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:DSKS
					TACK 
    2076 02B2  36: FE 06 0000 E                 INC     BYTE PTR [INDOS] 
    2077 02B7  FB                               STI 
    2078 02B8  FC                               CLD 
    2079 02B9  06                               PUSH    ES 
    2080 02BA  1E                               PUSH    DS 
    2081 02BB  16                               PUSH    SS 
    2082 02BC  1F                               POP     DS 
    2083                                ASSUME  DS:DOSGROUP 
    2084                                        invoke  GETBP 
    2085 02BD  E8 0000 E              1  CALL GETBP
    2086 02C0  1F                               POP     DS 
    2087                                ASSUME  DS:NOTHING 
    2088 02C1  72 CC                            JC      ILEAVE 
    2089                                        invoke  DSKWRITE 
    2090 02C3  E8 0000 E              1  CALL DSKWRITE
    2091 02C6  EB C4                            JMP     TLEAVE 
    2092                                ABSDWRT ENDP 
    2093                                 
    2094                                 
    2095                                 
    2096                                        procedure   SYS_RETURN,NEAR 
    2097 02C8                         1 SYS_RETURN PROC NEAR
    2098                                        ASSUME  DS:NOTHING,ES:NOTHING 
    2099                                        entry   SYS_RET_OK 
    2100 02C8                         1 SYS_RET_OK:
    2101 02C8  E8 0163 R                        call    get_user_stack 
    2102 02CB  FF 74 16                         PUSH    [SI.user_F] 
    2103 02CE  9D                               POPF 
    2104 02CF  F8                               CLC 
    2105 02D0  EB 0A                            JMP     SHORT DO_RET 
    2106                                 
    2107                                        entry   SYS_RET_ERR 
    2108 02D2                         1 SYS_RET_ERR:
    2109 02D2  32 E4                            XOR     AH,AH                  
					 ; hack to allow for smaller error rets
					 
    2110 02D4  E8 0163 R                        call    get_user_stack 
    2111 02D7  FF 74 16                         PUSH    [SI.user_F] 
    2112 02DA  9D                               POPF 
    2113 02DB  F9                               STC 
    2114 02DC                           DO_RET: 
    2115 02DC  89 04                            MOV     [SI.user_AX],AX        
					 ; Really only sets AH 
    2116 02DE  9C                               PUSHF 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Page     1-81
AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handler

    2117 02DF  8F 44 16                         POP     [SI.user_F]            
					 ; dump on his flags 
    2118                                        return 
    2119 02E2                         1 ??0009:
    2120 02E2  C3                     1  RET
    2121                                SYS_RETURN  ENDP 
    2122                                 
    2123                                do_ext 
    2124                                 
    2125 02E3                           CODE    ENDS 
    2126                                        END 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DOSGROUP . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	02E3	BYTE	PUBLIC	'CODE'
  CONSTANTS  . . . . . . . . . .  	0000	BYTE	PUBLIC	'CONST'
  DATA . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-5
                                                             

  LAST . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'LAST'

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ABSDRD . . . . . . . . . . . . .  	F PROC	0268	CODE	Global	Length = 003A
ABSDWRT  . . . . . . . . . . . .  	F PROC	02A2	CODE	Global	Length = 0026
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Alias	 FALSE		
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	
AUXSTACK . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

BADCALL  . . . . . . . . . . . .  	L NEAR	005A	CODE
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CALL_ENTRY . . . . . . . . . . .  	L NEAR	005D	CODE	Global
CANCEL . . . . . . . . . . . . .  	Number	0018	
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-6
                                                             

CNTCFLAG . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CODSTRT  . . . . . . . . . . . .  	NEAR 	0000	CODE
COMMAND  . . . . . . . . . . . .  	L NEAR	004C	CODE	Global
CONSWAP  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CPMFUNC  . . . . . . . . . . . .  	L NEAR	021B	CODE
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENTPDB . . . . . . . . . . .  	V WORD 	0000	DATA	External
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DBPBHL . . . . . . . . . . . . .  	Number	0016	
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-7
                                                             

DEVOFL . . . . . . . . . . . . .  	Number	000B	
DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DISPATCH . . . . . . . . . . . .  	L WORD 	0169	CODE
DISPCALL . . . . . . . . . . . .  	L NEAR	0102	CODE
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DO_OEM_FUNC  . . . . . . . . . .  	L NEAR	022B	CODE
DO_RET . . . . . . . . . . . . .  	L NEAR	02DC	CODE
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DSKREAD  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSKROUT  . . . . . . . . . . . .  	L NEAR	00E9	CODE
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSKSTACK . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DSKSTATCHK . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSKWRITE . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ERRORMODE  . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-8
                                                             

ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
ESCCH  . . . . . . . . . . . . .  	Number	001B	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETBP  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-9
                                                             

GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_USER_STACK . . . . . . . . .  	N PROC	0163	CODE	Global	Length = 0006
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	

HEADER . . . . . . . . . . . . .  	L BYTE 	0000	CODE	Global
HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		

IBM  . . . . . . . . . . . . . .  	Alias	 FALSE		
IDLEINT  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ILEAVE . . . . . . . . . . . . .  	L NEAR	028F	CODE
INDOS  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
INULDEV  . . . . . . . . . . . .  	F PROC	0258	CODE	Global	Length = 0010
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IOROUT . . . . . . . . . . . . .  	L NEAR	00DD	CODE
IOSTACK  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
IRET . . . . . . . . . . . . . .  	L NEAR	005C	CODE	Global
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Number	0000	
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LEAVE  . . . . . . . . . . . . .  	L NEAR	0114	CODE	Global
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-10
                                                             

LEAVEADDR  . . . . . . . . . . .  	V WORD 	0000	DATA	External
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAXCALL  . . . . . . . . . . . .  	Number	0024	
MAXCOM . . . . . . . . . . . . .  	Number	0058	
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MSVER  . . . . . . . . . . . . .  	Alias	 TRUE		

NOSETDIR . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
NOTOEM . . . . . . . . . . . . .  	L NEAR	0054	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NSP  . . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
NSS  . . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
NULLDEVPT  . . . . . . . . . . .  	V DWORD	0000	DATA	External

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OEM_HANDLER  . . . . . . . . . .  	V DWORD	0000	DATA	External
OEM_JMP  . . . . . . . . . . . .  	L NEAR	0236	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	

QUIT . . . . . . . . . . . . . .  	L NEAR	0048	CODE	Global

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REDISP . . . . . . . . . . . . .  	L NEAR	00AF	CODE	Global
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-11
                                                             

RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RESTORE_TMP  . . . . . . . . . .  	L WORD 	013D	CODE
RESTORE_WORLD  . . . . . . . . .  	N PROC	013F	CODE	Global	Length = 0014
RET_L  . . . . . . . . . . . . .  	NEAR 	02E2	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SAVEBX . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
SAVEDS . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
SAVE_WORLD . . . . . . . . . . .  	N PROC	0153	CODE	Global	Length = 0010
SAVREGS  . . . . . . . . . . . .  	L NEAR	0074	CODE
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SNULDEV  . . . . . . . . . . . .  	F PROC	024D	CODE	Global	Length = 000B
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
SYSTEM_CALL  . . . . . . . . . .  	N PROC	0048	CODE	Global	Length = 00F5
SYS_RETURN . . . . . . . . . . .  	N PROC	02C8	CODE	Global	Length = 001B
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:34

                                                            Symbols-12
                                                             

SYS_RET_ERR  . . . . . . . . . .  	L NEAR	02D2	CODE	Global
SYS_RET_OK . . . . . . . . . . .  	L NEAR	02C8	CODE	Global

TLEAVE . . . . . . . . . . . . .  	L NEAR	028C	CODE
TOGLINS  . . . . . . . . . . . .  	Alias	 WANG		
TOGLPRN  . . . . . . . . . . . .  	Alias	 FALSE		
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USER_SP  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
USER_SS  . . . . . . . . . . . .  	V WORD 	0000	DATA	External

WAIT . . . . . . . . . . . . . .  	Number	004D	
WANG . . . . . . . . . . . . . .  	Alias	 FALSE		
WORLD_RET  . . . . . . . . . . .  	L NEAR	014D	CODE
WPERR  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZEROEXT  . . . . . . . . . . . .  	Alias	 TRUE		

$GET_CURRENT_PDB . . . . . . . .  	N PROC	0241	CODE	Global	Length = 000C
$SET_CURRENT_PDB . . . . . . . .  	N PROC	023B	CODE	Global	Length = 0006
$SET_OEM_HANDLER . . . . . . . .  	L NEAR	021E	CODE
??0000 . . . . . . . . . . . . .  	L NEAR	0113	CODE
??0001 . . . . . . . . . . . . .  	L NEAR	0152	CODE
??0002 . . . . . . . . . . . . .  	L NEAR	0168	CODE
??0003 . . . . . . . . . . . . .  	L NEAR	021D	CODE
??0004 . . . . . . . . . . . . .  	L NEAR	0240	CODE
??0005 . . . . . . . . . . . . .  	L NEAR	024C	CODE
??0006 . . . . . . . . . . . . .  	L NEAR	0257	CODE
??0007 . . . . . . . . . . . . .  	L NEAR	0267	CODE
??0008 . . . . . . . . . . . . .  	L NEAR	02A1	CODE
??0009 . . . . . . . . . . . . .  	L NEAR	02E2	CODE


   1959 Source  Lines
   3458 Total   Lines
    699 Symbols

  15586 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
