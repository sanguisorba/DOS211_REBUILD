Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-1
                                                            

       1                                TITLE   Standard MSDOS 
       2                                NAME    MSDOS_2 
       3                                 
       4                                ; Number of disk I/O buffers 
       5                                 
       6                             C          INCLUDE STDSW.ASM 
       7 = FFFF                      C  TRUE    EQU     0FFFFH 
       8 = 0000                      C  FALSE   EQU     NOT TRUE 
       9                             C   
      10                             C  ; Use the switches below to produce the
					 standard Microsoft version or the IBM 
      11                             C  ; version of the operating system 
      12 =                           C  MSVER   EQU     true 
      13 =                           C  IBM     EQU     false 
      14 =                           C  WANG    EQU     FALSE 
      15 =                           C  ALTVECT EQU     FALSE 
      16                             C   
      17                             C  ; Set this switch to cause DOS to move 
					itself to the end of memory 
      18 =                           C  HIGHMEM EQU     FALSE 
      19                             C   
      20                             C          ELSE 
      21                             C          ELSE 
      22 = 001B                      C  ESCCH   EQU     1BH 
      23                             C          ENDIF 
      24 = 0018                      C  CANCEL  EQU     "X"-"@"                
					 ;Cancel with Ctrl-X 
      25 =                           C  TOGLINS EQU     WANG                   
					 ;Separate keys for insert mode on 
      26                             C                                         
					 ;and off if not WANG 
      27 =                           C  TOGLPRN EQU     FALSE                  
					 ;Separate keys for printer echo on 
      28                             C                                         
					 ;and off 
      29 =                           C  ZEROEXT EQU     TRUE 
      30                             C          ENDIF 
      31                             C   
      32                                 
      33                             C          INCLUDE MSHEAD.ASM 
      34                             C  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITI
					ONS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-2
                                                            

      35                             C  PAGE 
      36                             C  ; MS-DOS  High-performance operating sy
					stem for the 8086  version 1.28 
      37                             C  ;       by Microsoft MSDOS development 
					group: 
      38                             C  ;           Tim Paterson (Ret.) 
      39                             C  ;           Aaron Reynolds 
      40                             C  ;           Nancy Panners (Parenting) 
      41                             C  ;           Mark Zbikowski 
      42                             C  ;           Chris Peters (BIOS) (ret.) 
      43                             C   
      44                             C  ; ****************** Revision History *
					************************ 
      45                             C  ;          >> EVERY change must noted b
					elow!! << 
      46                             C  ; 
      47                             C  ; 0.34 12/29/80 General release, updati
					ng all past customers 
      48                             C  ; 0.42 02/25/81 32-byte directory entri
					es added 
      49                             C  ; 0.56 03/23/81 Variable record and sec
					tor sizes 
      50                             C  ; 0.60 03/27/81 Ctrl-C exit changes, in
					cluding register save on user stack 
      51                             C  ; 0.74 04/15/81 Recognize I/O devices w
					ith file names 
      52                             C  ; 0.75 04/17/81 Improve and correct buf
					fer handling 
      53                             C  ; 0.76 04/23/81 Correct directory size 
					when not 2^N entries 
      54                             C  ; 0.80 04/27/81 Add console input witho
					ut echo, Functions 7 & 8 
      55                             C  ; 1.00 04/28/81 Renumber for general re
					lease 
      56                             C  ; 1.01 05/12/81 Fix bug in `STORE' 
      57                             C  ; 1.10 07/21/81 Fatal error trapping, N
					UL device, hidden files, date & time, 
      58                             C  ;               RENAME fix, general cle
					anup 
      59                             C  ; 1.11 09/03/81 Don't set CURRENT BLOCK
					 to 0 on open; fix SET FILE SIZE 
      60                             C  ; 1.12 10/09/81 Zero high half of CURRE
					NT BLOCK after all (CP/M programs don't
					) 
      61                             C  ; 1.13 10/29/81 Fix classic "no write-t
					hrough" error in buffer handling 
      62                             C  ; 1.20 12/31/81 Add time to FCB; separa
					te FAT from DPT; Kill SMALLDIR; Add 
      63                             C  ;               FLUSH and MAPDEV calls;
					 allow disk mapping in DSKCHG; Lots 
      64                             C  ;               of smaller improvements
					 
      65                             C  ; 1.21 01/06/82 HIGHMEM switch to run D
					OS in high memory 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-3
                                                            

      66                             C  ; 1.22 01/12/82 Add VERIFY system call 
					to enable/disable verify after write 
      67                             C  ; 1.23 02/11/82 Add defaulting to parse
					r; use variable escape character Don't 
      68                             C  ;               zero extent field in IB
					M version (back to 1.01!) 
      69                             C  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 
					level; add fcn. 28 
      70                             C  ; 1.25 03/03/82 Put marker (00) at end 
					of directory to speed searches 
      71                             C  ; 1.26 03/03/82 Directory buffers searc
					hed as a circular queue, current buffer
					 
      72                             C  ;               is searched first when 
					possible to minimize I/O 
      73                             C  ;      03/03/82 STORE routine optimized
					 to tack on partial sector tail as 
      74                             C  ;               full sector write when 
					file is growing 
      75                             C  ;      03/09/82 Multiple I/O buffers 
      76                             C  ;      03/29/82 Two bugs:  Delete all c
					ase resets search to start at beginning
					 
      77                             C  ;               of directory (infinite 
					loop possible otherwise), DSKRESET 
      78                             C  ;               must invalidate all buf
					fers (disk and directory). 
      79                             C  ; 1.27 03/31/82 Installable device driv
					ers 
      80                             C  ;                 Function call 47 - Ge
					t pointer to device table list 
      81                             C  ;                 Function call 48 - As
					sign CON AUX LIST 
      82                             C  ;      04/01/82 Spooler interrupt (INT 
					28) added. 
      83                             C  ; 1.28 04/15/82 DOS retructured to use 
					ASSUMEs and PROC labels around system 
      84                             C  ;               call entries.  Most CS 
					relative references changed to SS 
      85                             C  ;               relative with an eye to
					ward putting a portion of the DOS in 
      86                             C  ;               ROM.  DOS source also b
					roken into header, data and code pieces
					 
      87                             C  ;      04/15/82 GETDMA and GETVECT call
					s added as 24 and 32.  These calls 
      88                             C  ;               return the current valu
					es. 
      89                             C  ;      04/15/82 INDOS flag implemented 
					for interrupt processing along with 
      90                             C  ;               call to return flag loc
					ation (call 29) 
      91                             C  ;      04/15/82 Volume ID attribute add
					ed 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-4
                                                            

      92                             C  ;      04/17/82 Changed ABORT return to
					 user to a long ret from a long jump to
					 
      93                             C  ;               avoid a CS relative ref
					erence. 
      94                             C  ;      04/17/82 Put call to STATCHK in 
					dispatcher to catch ^C more often 
      95                             C  ;      04/20/82 Added INT int_upooler i
					nto loop ^S wait 
      96                             C  ;      04/22/82 Dynamic disk I/O buffer
					 allocation and call to manage them 
      97                             C  ;               call 49. 
      98                             C  ;      04/23/82 Added GETDSKPTDL as cal
					l 50, similar to GETFATPT(DL), returns 
      99                             C  ;               address of DPB 
     100                             C  ;      04/29/82 Mod to WRTDEV to look f
					or ^C or ^S at console input when 
     101                             C  ;               writting to console dev
					ice via file I/O.  Added a console 
     102                             C  ;               output attribute to dev
					ices. 
     103                             C  ;      04/30/82 Call to en/dis able ^C 
					check in dispatcher Call 51 
     104                             C  ;      04/30/82 Code to allow assignmen
					t of func 1-12 to disk files as well 
     105                             C  ;               as devices....  pipes, 
					redirection now possible 
     106                             C  ;      04/30/82 Expanded GETLIST call t
					o 2.0 standard 
     107                             C  ;      05/04/82 Change to INT int_fatal
					_abort callout int HARDERR.  DOS SS 
     108                             C  ;               (data segment) stashed 
					in ES, INT int_fatal_abort routines mus
					t 
     109                             C  ;               preserve ES.  This mod 
					so HARDERR can be ROMed. 
     110                             C  ; 1.29 06/01/82 Installable block and c
					haracter devices as per 2.0 spec 
     111                             C  ;      06/04/82 Fixed Bug in CLOSE rega
					rding call to CHKFATWRT.  It got left 
     112                             C  ;               out back about 1.27 or 
					so (oops).  ARR 
     113                             C  ; 1.30 06/07/82 Directory sector buffer
					ing added to main DOS buffer queue 
     114                             C  ; 1.40 06/15/82 Tree structured directo
					ries.  XENIX Path Parser MKDIR CHDIR 
     115                             C  ;               RMDIR Xenix calls 
     116                             C  ; 1.41 06/13/82 Made GETBUFFR call PLAC
					EBUF 
     117                             C  ; 1.50 06/17/82 FATs cached in buffer p
					ool, get FAT pointer calls disappear 
     118                             C  ;               Frees up lots of memory
					. 
     119                             C  ; 1.51 06/24/82 BREAKDOWN modified to d
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-5
                                                            

					o EXACT one sector read/write through 
     120                             C  ;               system buffers 
     121                             C  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRIT
					E, DUP, DUP2, LSEEK implemented 
     122                             C  ; 1.53 07/01/82 OPEN CLOSE mod for Xeni
					x calls, saves and gets remote dir 
     123                             C  ; 1.54 07/11/82 Function calls 1-12 mak
					e use of new 2.0 PDB. Init code 
     124                             C  ;               changed to set file han
					dle environment. 
     125                             C  ; 2.00 08/01/82 Number for IBM release 
     126                             C  ;      01/19/83 No environ bug in EXEC 
     127                             C  ;      01/19/83 MS-DOS OEM INT 21 exten
					sions (SET_OEM_HANDLER) 
     128                             C  ;      01/19/83 Performance bug fix in 
					cooked write to NUL 
     129                             C  ;      01/27/83 Growcnt fixed for 32-bi
					ts 
     130                             C  ;      01/27/83 Find-first problem afte
					r create 
     131                             C  ; 2.01 02/17/83 International DOS 
     132                             C  ; 2.11 08/12/83 Dos split into several 
					more modules for assembly on 
     133                             C  ;               an IBM PC 
     134                             C  ; 
     135                             C  ; *************************************
					************************ 
     136                             C   
     137                             C   
     138                             C  SUBTTL        EQUATES 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-6
EQUATES                                                     

     139                             C  PAGE 
     140                             C  ; Interrupt Entry Points: 
     141                             C   
     142                             C  ; INTBASE:      ABORT 
     143                             C  ; INTBASE+4:    COMMAND 
     144                             C  ; INTBASE+8:    BASE EXIT ADDRESS 
     145                             C  ; INTBASE+C:    CONTROL-C ABORT 
     146                             C  ; INTBASE+10H:  FATAL ERROR ABORT 
     147                             C  ; INTBASE+14H:  BIOS DISK READ 
     148                             C  ; INTBASE+18H:  BIOS DISK WRITE 
     149                             C  ; INTBASE+1CH:  END BUT STAY RESIDENT (
					NOT SET BY DOS) 
     150                             C  ; INTBASE+20H:  SPOOLER INTERRUPT 
     151                             C  ; INTBASE+40H:  Long jump to CALL entry
					 point 
     152                             C   
     153 = 000C                      C  ENTRYPOINTSEG   EQU     0CH 
     154 = 0FFF                      C  MAXDIF          EQU     0FFFH 
     155 = 000A                      C  SAVEXIT         EQU     10 
     156                             C   
     157                             C          INCLUDE DOSSYM.ASM 
     158                             C  include DOSMAC.ASM 
     159                             C  ; 
     160                             C  ; Macro file for MSDOS. 
     161                             C  ; 
     162                             C   
     163                             C  SUBTTL BREAK a listing into pages and g
					ive new subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-7
BREAK a listing into pages and give new subtitles           

     164                             C  PAGE 
     165                             C  BREAK MACRO subtitle 
     166                             C   SUBTTL subtitle 
     167                             C   PAGE 
     168                             C  ENDM 
     169                             C   
     170                             C  BREAK <I_NEED: declare a variable exter
					nal, if necessary, and allocate a size>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

     171                             C   
     172                             C  ; 
     173                             C  ; declare a variable external and alloc
					ate a size 
     174                             C  ; 
     175                             C  I_NEED MACRO sym,len 
     176                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
     177                             C   IFIDN <len>,<WORD> 
     178                             C   EXTRN &sym:WORD 
     179                             C   ELSE 
     180                             C   IFIDN <len>,<DWORD> 
     181                             C   EXTRN &sym:DWORD 
     182                             C   ELSE 
     183                             C   EXTRN &sym:BYTE 
     184                             C   ENDIF 
     185                             C   ENDIF 
     186                             C   DATA ENDS 
     187                             C  ENDM 
     188                             C   
     189                             C  ; 
     190                             C  ; call a procedure that may be external
					. The call will be short. 
     191                             C  ; 
     192                             C  invoke MACRO name 
     193                             C  .xcref 
     194                             C   IF2 
     195                             C   IFNDEF name 
     196                             C   EXTRN name:NEAR 
     197                             C   ENDIF 
     198                             C   ENDIF 
     199                             C  .cref 
     200                             C   CALL name 
     201                             C  ENDM 
     202                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

     203                             C  PAGE 
     204                             C  ; 
     205                             C  ; jump to a label that may be external.
					 The jump will be near. 
     206                             C  ; 
     207                             C  transfer MACRO name 
     208                             C  .xcref 
     209                             C   IF2 
     210                             C   IFNDEF name 
     211                             C   EXTRN name:NEAR 
     212                             C   ENDIF 
     213                             C   ENDIF 
     214                             C  .cref 
     215                             C   JUMP name 
     216                             C  ENDM 
     217                             C   
     218                             C  ; 
     219                             C  ; get a short address in a word 
     220                             C  ; 
     221                             C  short_addr MACRO name 
     222                             C   IFDIF <name>,<?> 
     223                             C  .xcref 
     224                             C   IF2 
     225                             C   IFNDEF name 
     226                             C   EXTRN name:NEAR 
     227                             C   ENDIF 
     228                             C   ENDIF 
     229                             C  .cref 
     230                             C   DW OFFSET DOSGROUP:name 
     231                             C   ELSE 
     232                             C   DW ? 
     233                             C   ENDIF 
     234                             C  ENDM 
     235                             C   
     236                             C  ; 
     237                             C  ; get a long address in a dword 
     238                             C  ; 
     239                             C  long_addr MACRO name 
     240                             C  .xcref 
     241                             C   IF2 
     242                             C   IFNDEF name 
     243                             C   EXTRN name:NEAR 
     244                             C   ENDIF 
     245                             C  .cref 
     246                             C   DD name 
     247                             C  ENDM 
     248                             C   
     249                             C  ; 
     250                             C  ; declare a PROC near or far but PUBLIC
					 nonetheless 
     251                             C  ; 
     252                             C  procedure MACRO name,distance 
     253                             C   PUBLIC name 
     254                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-10
I_NEED: declare a variable external, if necessary, and alloc

     255                             C  ENDM 
     256                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-11
I_NEED: declare a variable external, if necessary, and alloc

     257                             C  PAGE 
     258                             C  ; 
     259                             C  ; define a data item to be public and o
					f an appropriate size/type 
     260                             C  ; 
     261                             C  I_AM MACRO name,size 
     262                             C   PUBLIC name 
     263                             C   
     264                             C   IFIDN <size>,<WORD> 
     265                             C  name DW ? 
     266                             C   ELSE 
     267                             C   IFIDN <size>,<DWORD> 
     268                             C  name DD ? 
     269                             C   ELSE 
     270                             C   IFIDN <size>,<BYTE> 
     271                             C  name DB ? 
     272                             C   ELSE 
     273                             C  name DB size DUP (?) 
     274                             C   ENDIF 
     275                             C   ENDIF 
     276                             C   ENDIF 
     277                             C  ENDM 
     278                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-12
I_NEED: declare a variable external, if necessary, and alloc

     279                             C  PAGE 
     280                             C  ; 
     281                             C  ; call the macro chain 
     282                             C  ; 
     283                             C  do_ext macro 
     284                             C  endm 
     285                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-13
I_NEED: declare a variable external, if necessary, and alloc

     286                             C  PAGE 
     287                             C   
     288                             C  ; 
     289                             C  ; define an entry in a procedure 
     290                             C  ; 
     291                             C  entry macro name 
     292                             C   PUBLIC name 
     293                             C  name: 
     294                             C  endm 
     295                             C   
     296                             C  BREAK <ERROR - print a message and then
					 jump to a label> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-14
ERROR - print a message and then jump to a label            

     297                             C   
     298                             C  error macro code 
     299                             C   local a 
     300                             C  .xcref 
     301                             C   MOV AL,code 
     302                             C   transfer SYS_RET_ERR 
     303                             C  .cref 
     304                             C  ENDM 
     305                             C   
     306                             C  BREAK <JUMP - real jump that links up s
					hortwise> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-15
JUMP - real jump that links up shortwise                    

     307                             C  ; 
     308                             C  ; given a label <lbl> either 2 byte jum
					p to another label <lbl>_J 
     309                             C  ; if it is near enough or 3 byte jump t
					o <lbl> 
     310                             C  ; 
     311                             C   
     312                             C  jump macro lbl 
     313                             C   local a 
     314                             C  .xcref 
     315                             C   a: 
     316                             C   ifndef lbl&_J ;; is this the first inv
					ocation 
     317                             C   JMP lbl 
     318                             C   ELSE 
     319                             C   IF lbl&_J GE $ 
     320                             C   JMP lbl 
     321                             C   ELSE 
     322                             C   IF ($-lbl&_J) GT 126 ;; is the jump to
					o far away? 
     323                             C   JMP lbl 
     324                             C   ELSE ;; do the short one... 
     325                             C   JMP lbl&_J 
     326                             C   ENDIF 
     327                             C   ENDIF 
     328                             C   ENDIF 
     329                             C   lbl&_j = a 
     330                             C  .cref 
     331                             C  endm 
     332                             C   
     333                             C  BREAK <RETURN - return from a function>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-16
RETURN - return from a function                             

     334                             C   
     335                             C  return macro 
     336                             C   local a 
     337                             C  .xcref 
     338                             C  a: 
     339                             C   RET 
     340                             C  ret_l = a 
     341                             C  .cref 
     342                             C  endm 
     343                             C   
     344                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-17
CONDRET - conditional return                                

     345                             C   
     346                             C  makelab macro l,cc,ncc 
     347                             C   local a 
     348                             C   j&ncc a ;; j<NCC> a: 
     349                             C   return ;; return 
     350                             C   a: ;; a: 
     351                             C   ret_&cc = ret_l ;; define ret_<CC> to 
					be ret_l 
     352                             C  endm 
     353                             C   
     354                             C  condret macro cc,ncc 
     355                             C   local a,b 
     356                             C   ifdef ret_l ;; if ret_l is defined 
     357                             C   if (($ - ret_l) le 126) and ($ gt ret_
					l) 
     358                             C   ;; if ret_l is near enough then 
     359                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
     360                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     361                             C   else 
     362                             C   makelab a,cc,ncc 
     363                             C   endif 
     364                             C   else 
     365                             C   ifdef ret_&cc ;; if ret_<CC> defined 
     366                             C   if (($ - ret_&cc) le 126) and ($ gt re
					t_&cc) 
     367                             C   ;; if ret_<CC> is near enough 
     368                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC
					> 
     369                             C   ret_&cc = a ;; define ret_<CC> to be a
					: 
     370                             C   else 
     371                             C   makelab a,cc,ncc 
     372                             C   endif 
     373                             C   else 
     374                             C   makelab a,cc,ncc 
     375                             C   endif 
     376                             C   endif 
     377                             C  endm 
     378                             C  ;condret macro cc,ncc 
     379                             C  ; local a,b 
     380                             C  ; ifdef ret_l ; if ret_l is defined 
     381                             C  ; if (($ - ret_l) le 126) and ($ gt ret
					_l) 
     382                             C  ; ; if ret_l is near enough then 
     383                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
     384                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     385                             C  ; exitm 
     386                             C  ; endif 
     387                             C  ; endif 
     388                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
     389                             C  ; if (($ - ret_&cc) le 126) and ($ gt r
					et_&cc) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-18
CONDRET - conditional return                                

     390                             C  ; ; if ret_<CC> is near enough 
     391                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC
					> 
     392                             C  ; ret_&cc = a ; define ret_<CC> to be a
					: 
     393                             C  ; exitm 
     394                             C  ; endif 
     395                             C  ; endif 
     396                             C  ; j&ncc a ; j<NCC> a: 
     397                             C  ; return ; return 
     398                             C  ; a: ; a: 
     399                             C  ; ret_&cc = ret_l ; define ret_<CC> to 
					be ret_l 
     400                             C  ;endm 
     401                             C  ; 
     402                             C  BREAK <RETZ - return if zero, links up 
					shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-19
RETZ - return if zero, links up shortwise if necessary      

     403                             C   
     404                             C  retz macro 
     405                             C   condret z,nz 
     406                             C  endm 
     407                             C   
     408                             C  BREAK <RETNZ - return if not zero, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-20
RETNZ - return if not zero, links up shortwise if necessary 

     409                             C   
     410                             C  retnz macro 
     411                             C   condret nz,z 
     412                             C  endm 
     413                             C   
     414                             C  BREAK <RETC - return if carry set, link
					s up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-21
RETC - return if carry set, links up shortwise if necessary 

     415                             C   
     416                             C  retc macro 
     417                             C   condret c,nc 
     418                             C  endm 
     419                             C   
     420                             C  BREAK <RETNC - return if not carry, lin
					ks up shortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-22
RETNC - return if not carry, links up shortwise if necessary

     421                             C   
     422                             C  retnc macro 
     423                             C   condret nc,c 
     424                             C  endm 
     425                             C   
     426                             C  BREAK <CONTEXT - set the DOS context to
					 a particular register> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-23
CONTEXT - set the DOS context to a particular register      

     427                             C   
     428                             C  context macro r 
     429                             C   PUSH SS 
     430                             C   POP r 
     431                             C   ASSUME r:DOSGROUP 
     432                             C  endm 
     433                             C   
     434                             C  IF2 
     435                             C      %OUT    DOSSYM in Pass 2 
     436                             C  ENDIF 
     437                             C   
     438                             C  ENDIF 
     439                             C   
     440 = 0002                      C  DOS_MAJOR_VERSION   EQU      2 
     441 = 000B                      C  DOS_MINOR_VERSION   EQU     11 
     442                             C   
     443                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-24
Control character definitions                               

     444                             C   
     445 = 007F                      C  c_DEL       EQU     7Fh         ;    AS
					CII rubout or delete previous char 
     446 = 0008                      C  c_BS        EQU     08h         ; ^H AS
					CII backspace 
     447 = 000D                      C  c_CR        EQU     0Dh         ; ^M AS
					CII carriage return 
     448 = 000A                      C  c_LF        EQU     0Ah         ; ^J AS
					CII linefeed 
     449 = 0017                      C  c_ETB       EQU     17h         ; ^W AS
					CII end of transmission 
     450 = 0015                      C  c_NAK       EQU     15h         ; ^U AS
					CII negative acknowledge 
     451 = 0003                      C  c_ETX       EQU     03h         ; ^C AS
					CII end of text 
     452 = 0009                      C  c_HT        EQU     09h         ; ^I AS
					CII tab 
     453                             C   
     454                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-25
BPB Definition                                              

     455                             C   
     456                             C   
     457                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     458                             C  ;                                      
					                                    ; 
     459                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     460                             C  ;                                      
					                                    ; 
     461                             C  ; Certain structures, constants and sys
					tem  calls  below  are  private  to ; 
     462                             C  ; the DOS  and  are  extremely  version
					-dependent.  They may change at any ; 
     463                             C  ; time at  the  implementors'  whim.   
					As  a  result,  they  must  not  be ; 
     464                             C  ; documented to  the  general  public. 
					  If  an  extreme case arises, they ; 
     465                             C  ; must be documented with this warning.
					                                    ; 
     466                             C  ;                                      
					                                    ; 
     467                             C  ; Those structures and constants that a
					re subject to  the  above  will  be ; 
     468                             C  ; marked and bracketed with the flag:  
					                                    ; 
     469                             C  ;                                      
					                                    ; 
     470                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     471                             C  ;                                      
					                                    ; 
     472                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     473                             C   
     474                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-26
Bios Parameter Block                                        

     475                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     476                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     477                             C  ;                                      
					                                    ; 
     478                             C   
     479                             C  ; Bios Parameter Block definition 
     480                             C  ; This structure is used to build a ful
					l DPB 
     481                             C   
     482                             C  BPBLOCK STRUC 
     483 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes
					 of physical sector 
     484 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc
					 unit 
     485 0003  ????                  C  BPRES   DW      ?       ; Number of res
					erved sectors 
     486 0005  ??                    C  BPFTCNT DB      ?       ; Number of FAT
					s 
     487 0006  ????                  C  BPDRCNT DW      ?       ; Number of dir
					ectory entries 
     488 0008  ????                  C  BPSCCNT DW      ?       ; Total number 
					of sectors 
     489 000A  ??                    C  BPMEDIA DB      ?       ; Media descrip
					tor byte 
     490 000B  ????                  C  BPFTSEC DW      ?       ; Number of sec
					tors taken up by one FAT 
     491 000D                        C  BPBLOCK ENDS 
     492                             C  ;                                      
					                                    ; 
     493                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     494                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     495                             C   
     496                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-27
Disk I/O Buffer Header                                      

     497                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     498                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     499                             C  ;                                      
					                                    ; 
     500                             C   
     501                             C  ; Field definition for I/O buffer infor
					mation 
     502                             C   
     503                             C  BUFFINFO        STRUC 
     504 0000  ????????              C  NEXTBUF         DD      ?       ; Point
					er to next buffer in list 
     505                             C  ; The next two items are often refed as
					 a word 
     506 0004  ??                    C  BUFDRV          DB      ?       ; Logic
					al drive # assoc with buffer FF = free 
     507 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty
					 flag 
     508 0006  ??                    C  BUFPRI          DB      ?       ; Buffe
					r selection priority (see EQUs below) 
     509 0007  ??                    C  VISIT           DB      ?       ; Visit
					 flag for buffer pool scans 
     510 0008  ????                  C  BUFSECNO        DW      ?       ; Secto
					r number of buffer 
     511                             C  ; The next two items are often refed as
					 a word 
     512 000A  ??                    C  BUFWRTCNT       DB      ?       ; For F
					AT sectors, # times sector written out 
     513 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "
					     "   , # sectors between each write
					 
     514 000C  ????????              C  BUFDRVDP        DD      ?       ; Point
					er to drive parameters 
     515 0010                        C  BUFFINFO        ENDS 
     516                             C   
     517 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
     518                             C                                  ; Size 
					of structure in bytes 
     519                             C   
     520 = 0000                      C  FREEPRI EQU     0 
     521 = 0002                      C  LBRPRI  EQU     2               ; Last 
					byte of buffer read 
     522 = 0004                      C  LBWPRI  EQU     4               ; Last 
					byte written 
     523 = 0006                      C  RPRI    EQU     6               ; Read 
					but not last byte 
     524 = 0008                      C  WPRI    EQU     8               ; Writt
					en but not last byte 
     525 = 000F                      C  DIRPRI  EQU     15              ; Direc
					tory Sector 
     526 = 001E                      C  FATPRI  EQU     30              ; FAT s
					ector 
     527                             C  ;                                      
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-28
Disk I/O Buffer Header                                      

					                                    ; 
     528                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     529                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     530                             C   
     531                             C  BREAK <User stack inside of system call
					> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-29
User stack inside of system call                            

     532                             C  ; Location of user registers relative u
					ser stack pointer 
     533                             C   
     534                             C  user_environ    STRUC 
     535 0000  ????                  C  user_AX     DW      ? 
     536 0002  ????                  C  user_BX     DW      ? 
     537 0004  ????                  C  user_CX     DW      ? 
     538 0006  ????                  C  user_DX     DW      ? 
     539 0008  ????                  C  user_SI     DW      ? 
     540 000A  ????                  C  user_DI     DW      ? 
     541 000C  ????                  C  user_BP     DW      ? 
     542 000E  ????                  C  user_DS     DW      ? 
     543 0010  ????                  C  user_ES     DW      ? 
     544 0012  ????                  C  user_IP     DW      ? 
     545 0014  ????                  C  user_CS     DW      ? 
     546 0016  ????                  C  user_F      DW      ? 
     547 0018                        C  user_environ    ENDS 
     548                             C   
     549                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-30
interrupt definitions                                       

     550                             C   
     551 = 0020                      C  INTTAB          EQU     20H 
     552 = 0080                      C  INTBASE         EQU     4 * inttab 
     553 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
     554                             C   
     555                             C          ENDIF 
     556                             C   
     557                             C  ; 
     558                             C  ; interrupt assignments 
     559                             C  ; 
     560                             C          IF      NOT ALTVECT 
     561 =                           C  int_abort           EQU     INTTAB     
					     ; abort process 
     562 = 0021                      C  int_command         EQU     int_abort+1
					     ; call MSDOS 
     563 = 0022                      C  int_terminate       EQU     int_abort+2
					     ; int to terminate address 
     564 = 0023                      C  int_ctrl_c          EQU     int_abort+3
					     ; ^c trapper 
     565 = 0024                      C  int_fatal_abort     EQU     int_abort+4
					     ; hard disk error 
     566 = 0025                      C  int_disk_read       EQU     int_abort+5
					     ; logical sector disk read 
     567 = 0026                      C  int_disk_write      EQU     int_abort+6
					     ; logical sector disk write 
     568 = 0027                      C  int_keep_process    EQU     int_abort+7
					     ; terminate program and stay 
     569                             C                                         
					     ; resident 
     570                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     571                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     572                             C  ;                                      
					                                    ; 
     573 = 0028                      C  int_spooler         EQU     int_abort+8
					     ; spooler call 
     574 = 0029                      C  int_fastcon         EQU     int_abort+9
					     ; fast CON interrupt 
     575                             C  ;                                      
					                                    ; 
     576                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     577                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     578                             C          ENDIF 
     579                             C   
     580 = 0080                      C  addr_int_abort          EQU    4 * int_
					abort 
     581 = 0084                      C  addr_int_command        EQU    4 * int_
					command 
     582 = 0088                      C  addr_int_terminate      EQU    4 * int_
					terminate 
     583 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-31
interrupt definitions                                       

					ctrl_c 
     584 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_
					fatal_abort 
     585 = 0094                      C  addr_int_disk_read      EQU    4 * int_
					disk_read 
     586 = 0098                      C  addr_int_disk_write     EQU    4 * int_
					disk_write 
     587 = 009C                      C  addr_int_keep_process   EQU    4 * int_
					keep_process 
     588                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     589                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     590                             C  ;                                      
					                                    ; 
     591 = 00A0                      C  addr_int_spooler        EQU    4 * int_
					spooler 
     592 = 00A4                      C  addr_int_fastcon        EQU    4 * int_
					fastcon 
     593                             C  ;                                      
					                                    ; 
     594                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     595                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     596                             C   
     597                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-32
Disk map                                                    

     598                             C  ;  MSDOS partitions the disk into 4 sec
					tions: 
     599                             C  ; 
     600                             C  ;  phys sector 0:   +------------------
					-+ 
     601                             C  ;       |           | boot/reserved    
					 | 
     602                             C  ;       |           +------------------
					-+ 
     603                             C  ;       |           |  File allocation 
					 | 
     604                             C  ;       v           |      table(s)    
					 | 
     605                             C  ;                   |  (multiple copies
					 | 
     606                             C  ;                   |     are kept)    
					 | 
     607                             C  ;                   +------------------
					-+ 
     608                             C  ;                   |     Directory    
					 | 
     609                             C  ;                   +------------------
					-+ 
     610                             C  ;                   |     File space   
					 | 
     611                             C  ;                   +------------------
					-+ 
     612                             C  ;                   |   Unaddressable  
					 | 
     613                             C  ;                   |  (to end of disk)
					 | 
     614                             C  ;                   +------------------
					-+ 
     615                             C  ; 
     616                             C  ; All partition boundaries are sector b
					oundaries.  The size of the FAT is 
     617                             C  ; adjusted to maximize the file space a
					ddressable. 
     618                             C   
     619                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-33
Directory entry                                             

     620                             C   
     621                             C  ; 
     622                             C  ;       +---------------------------+ 
     623                             C  ;       |  (12 BYTE) filename/ext   |  
					     0       0 
     624                             C  ;       +---------------------------+ 
     625                             C  ;       |     (BYTE) attributes     |  
					     11      B 
     626                             C  ;       +---------------------------+ 
     627                             C  ;       |    (10 BYTE) reserved     |  
					     12      C 
     628                             C  ;       +---------------------------+ 
     629                             C  ;       | (WORD) time of last write |  
					     22      16 
     630                             C  ;       +---------------------------+ 
     631                             C  ;       | (WORD) date of last write |  
					     24      18 
     632                             C  ;       +---------------------------+ 
     633                             C  ;       |   (WORD) First cluster    |  
					     26      1A 
     634                             C  ;       +---------------------------+ 
     635                             C  ;       |     (DWORD) file size     |  
					     28      1C 
     636                             C  ;       +---------------------------+ 
     637                             C  ; 
     638                             C  ;   First byte of filename  = E5 -> fre
					e directory entry 
     639                             C  ;                           = 00 -> end
					 of allocated directory 
     640                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-
					10=minute, 11-15=hour 
     641                             C  ;   Date:   Bits 0-4=day, bits 5-8=mont
					h, bits 9-15=year-1980 
     642                             C  ; 
     643                             C  dir_entry   STRUC 
     644 0000  000B[                 C  dir_name    DB      11 DUP (?)         
					 ; file name 
     645            ??               C  
     646                         ]   C  
     647                             C  
     648 000B  ??                    C  dir_attr    DB      ?                  
					 ; attribute bits 
     649 000C  000A[                 C  dir_pad     DB      10 DUP (?)         
					 ; reserved for expansion 
     650            ??               C  
     651                         ]   C  
     652                             C  
     653 0016  ????                  C  dir_time    DW      ?                  
					 ; time of last write 
     654 0018  ????                  C  dir_date    DW      ?                  
					 ; date of last write 
     655 001A  ????                  C  dir_first   DW      ?                  
					 ; first allocation unit of file 
     656 001C  ????                  C  dir_size_l  DW      ?                  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-34
Directory entry                                             

					 ; low 16 bits of file size 
     657 001E  ????                  C  dir_size_h  DW      ?                  
					 ; high 16 bits of file size 
     658 0020                        C  dir_entry   ENDS 
     659                             C   
     660 = 0001                      C  attr_read_only      EQU      1h 
     661 = 0002                      C  attr_hidden         EQU      2h 
     662 = 0004                      C  attr_system         EQU      4h 
     663 = 0008                      C  attr_volume_id      EQU      8h 
     664 = 0010                      C  attr_directory      EQU     10h 
     665 = 0020                      C  attr_archive        EQU     20h 
     666                             C   
     667 = 0016                      C  attr_all            EQU     attr_hidden
					+attr_system+attr_directory 
     668                             C                                         
					 ; OR of hard attributes for FINDENTRY 
     669                             C   
     670 = 0021                      C  attr_ignore         EQU     attr_read_o
					nly+attr_archive 
     671                             C                                         
					 ; ignore this(ese) attribute(s) during
					 
     672                             C                                         
					 ; search first/next 
     673                             C   
     674 = 0027                      C  attr_changeable     EQU     attr_read_o
					nly+attr_hidden+attr_system+attr_archiv
					e 
     675                             C                                         
					 ; changeable via CHMOD 
     676                             C   
     677                             C  BREAK <File allocation Table informatio
					n> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-35
File allocation Table information                           

     678                             C  ; 
     679                             C  ; The File Allocation Table uses a 12-b
					it entry for each allocation unit on 
     680                             C  ; the disk.  These entries are packed, 
					two for every three bytes.  The content
					s 
     681                             C  ; of entry number N is found by 1) mult
					iplying N by 1.5; 2) adding the result 
     682                             C  ; to the base address of the Allocation
					 Table; 3) fetching the 16-bit word 
     683                             C  ; at this address; 4) If N was odd (so 
					that N*1.5 was not an integer), shift 
     684                             C  ; the word right four bits; 5) mask to 
					12 bits (AND with 0FFF hex).  Entry 
     685                             C  ; number zero is used as an end-of-file
					 trap in the OS and is passed to the 
     686                             C  ; BIOS to help determine disk format.  
					Entry 1 is reserved for future use. 
     687                             C  ; The first available allocation unit i
					s assigned entry number two, and even 
     688                             C  ; though it is the first, is called clu
					ster 2.  Entries greater than 0FF8H 
     689                             C  ; are end of file marks; entries of zer
					o are unallocated.  Otherwise, the 
     690                             C  ; contents of a FAT entry is the number
					 of the next cluster in the file. 
     691                             C  ; 
     692                             C  ; Clusters with bad sectors are tagged 
					with FF7H.  Any non-zero number would 
     693                             C  ; do because these clusters show as all
					ocated, but are not part of any 
     694                             C  ; allocation chain and thus will never 
					be allocated to a file.  A particular 
     695                             C  ; number is selected so that disk check
					ing programs know what to do (ie.  a 
     696                             C  ; cluster with entry FF7H which is not 
					in a chain is not an error). 
     697                             C   
     698                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-36
DPB structure                                               

     699                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     700                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     701                             C  ;                                      
					                                    ; 
     702                             C   
     703 = 0040                      C  DIRSTRLEN       EQU     64      ; Max l
					ength in bytes of directory strings 
     704                             C   
     705                             C  dpb     STRUC 
     706 0000  ??                    C  dpb_drive           DB      ?   ; Logic
					al drive # assoc with DPB (A=0,B=1,...)
					 
     707 0001  ??                    C  dpb_UNIT            DB      ?   ; Drive
					r unit number of DPB 
     708 0002  ????                  C  dpb_sector_size     DW      ?   ; Size 
					of physical sector in bytes 
     709 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Secto
					rs/cluster - 1 
     710 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 
					of sectors/cluster 
     711 0006  ????                  C  dpb_first_FAT       DW      ?   ; Start
					ing record of FATs 
     712 0008  ??                    C  dpb_FAT_count       DB      ?   ; Numbe
					r of FATs for this drive 
     713 0009  ????                  C  dpb_root_entries    DW      ?   ; Numbe
					r of directory entries 
     714 000B  ????                  C  dpb_first_sector    DW      ?   ; First
					 sector of first cluster 
     715 000D  ????                  C  dpb_max_cluster     DW      ?   ; Numbe
					r of clusters on drive + 1 
     716 000F  ??                    C  dpb_FAT_size        DB      ?   ; Numbe
					r of records occupied by FAT 
     717 0010  ????                  C  dpb_dir_sector      DW      ?   ; Start
					ing record of directory 
     718 0012  ????????              C  dpb_driver_addr     DD      ?   ; Point
					er to driver 
     719 0016  ??                    C  dpb_media           DB      ?   ; Media
					 byte 
     720 0017  ??                    C  dpb_first_access    DB      ?   ; This 
					is initialized to -1 to force a media 
     721                             C                                  ; check
					 the first time this DPB is used 
     722 0018  ????????              C  dpb_next_dpb        DD      ?   ; Point
					er to next Drive parameter block 
     723 001C  ????                  C  dpb_current_dir     DW      ?   ; Clust
					er number of start of current directory
					 
     724                             C                                  ; 0 ind
					icates root, -1 indicates invalid (disk
					 
     725                             C                                  ; ?  ch
					anged) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-37
DPB structure                                               

     726 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN D
					UP(?) 
     727            ??               C  
     728                         ]   C  
     729                             C  
     730                             C                                  ; ASCIZ
					 string of current directory 
     731 005E                        C  dpb     ENDS 
     732                             C   
     733 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size 
					of the structure in bytes 
     734                             C   
     735 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size 
					of disk (temp used during init only) 
     736                             C  ;                                      
					                                    ; 
     737                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     738                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     739                             C   
     740                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-38
File Control Block definition                               

     741                             C  ; 
     742                             C  ; Field definition for FCBs 
     743                             C  ; The FCB has the following structure: 
     744                             C  ; 
     745                             C  ;       +---------------------------+ 
     746                             C  ;       |   Drive indicator(byte)   | 
     747                             C  ;       +---------------------------+ 
     748                             C  ;       |    Filename (8 chars)     | 
     749                             C  ;       +---------------------------+ 
     750                             C  ;       |    Extension (3 chars)    | 
     751                             C  ;       +---------------------------+ 
     752                             C  ;       |   Current Extent(word)    | 
     753                             C  ;       +---------------------------+ 
     754                             C  ;       |    Record size (word)     | 
     755                             C  ;       +---------------------------+ 
     756                             C  ;       |    File Size (2 words)    | 
     757                             C  ;       +---------------------------+ 
     758                             C  ;       |       Date of write       | 
     759                             C  ;       +---------------------------+ 
     760                             C  ;       |       Time of write       | 
     761                             C  ;       +---------------------------+ 
     762                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     763                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     764                             C  ;                                      
					                                    ; 
     765                             C  ;       | Flags:                    | 
     766                             C  ;       |  bit 7=0 file/1 device    | 
     767                             C  ;       |  bit 6=0 if dirty         | 
     768                             C  ;       |  bits 0-5 deviceid        | 
     769                             C  ;       +---------------------------+ 
     770                             C  ;       |   first cluster in file   | 
     771                             C  ;       +---------------------------+ 
     772                             C  ;       | position of last cluster  | 
     773                             C  ;       +---------------------------+ 
     774                             C  ;       |   last cluster accessed   |  
					 12 bit-+--- packed in 3 bytes 
     775                             C  ;       +---------------------------+  
					        | 
     776                             C  ;       |     parent directory      |  
					 <------+ 
     777                             C  ;       +---------------------------+ 
     778                             C  ;                                      
					                                    ; 
     779                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     780                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     781                             C  ;       |    next record number     | 
     782                             C  ;       +---------------------------+ 
     783                             C  ;       |   random record number    | 
     784                             C  ;       +---------------------------+ 
     785                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-39
File Control Block definition                               

     786                             C   
     787                             C  sys_fcb     STRUC 
     788 0000  ??                    C  fcb_drive   DB      ? 
     789 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
     790            ??               C  
     791                         ]   C  
     792                             C  
     793 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
     794            ??               C  
     795                         ]   C  
     796                             C  
     797 000C  ????                  C  fcb_EXTENT  DW      ? 
     798 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of r
					ecord (user settable) 
     799 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of f
					ile in bytes; used with the following 
     800                             C                              ; word 
     801 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SE
					ARCH FIRST and SEARCH NEXT 
     802 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of l
					ast writing 
     803 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of l
					ast writing 
     804                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     805                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     806                             C  ;                                      
					                                    ; 
     807 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID
					 number, bits 0-5 if file. 
     808                             C                              ; bit 7=0 f
					or file, bit 7=1 for I/O device 
     809                             C                              ; If file, 
					bit 6=0 if dirty 
     810                             C                              ; If I/O de
					vice, bit 6=0 if EOF (input) 
     811                             C                              ;          
					     Bit 5=1 if Raw mode 
     812                             C                              ;          
					     Bit 0=1 if console input device 
     813                             C                              ;          
					     Bit 1=1 if console output device 
     814                             C                              ;          
					     Bit 2=1 if null device 
     815                             C                              ;          
					     Bit 3=1 if clock device 
     816 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First clu
					ster of file 
     817 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position 
					of last cluster accessed 
     818 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last clus
					ter accessed and directory pack 2 12 
     819 001F  ??                    C              DB      ?       ; bit numbe
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-40
File Control Block definition                               

					rs into 24 bits... 
     820                             C  ;                                      
					                                    ; 
     821                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     822                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     823 0020  ??                    C  fcb_NR      DB      ?       ; Next reco
					rd 
     824 0021  0004[                 C  fcb_RR      DB      4 DUP (?)          
					     ; Random record 
     825            ??               C  
     826                         ]   C  
     827                             C  
     828 0025                        C  sys_fcb     ENDS 
     829                             C   
     830 = 0010                      C  FILDIRENT       = fcb_FILSIZ           
					 ; Used only by SEARCH FIRST and SEARCH
					 
     831                             C                                         
					 ; NEXT 
     832                             C   
     833                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     834                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     835                             C  ;                                      
					                                    ; 
     836 = 0040                      C  devid_file_clean        EQU     40h    
					 ; true if file and not written 
     837 = 003F                      C  devid_file_mask_drive   EQU     3Fh    
					 ; mask for drive number 
     838                             C   
     839 = 0080                      C  devid_device            EQU     80h    
					 ; true if a device 
     840 = 0040                      C  devid_device_EOF        EQU     40h    
					 ; true if end of file reached 
     841 = 0020                      C  devid_device_raw        EQU     20h    
					 ; true if in raw mode 
     842 = 0010                      C  devid_device_special    EQU     10h    
					 ; true if special device 
     843 = 0008                      C  devid_device_clock      EQU     08h    
					 ; true if clock device 
     844 = 0004                      C  devid_device_null       EQU     04h    
					 ; true if null device 
     845 = 0002                      C  devid_device_con_out    EQU     02h    
					 ; true if console output 
     846 = 0001                      C  devid_device_con_in     EQU     01h    
					 ; true if consle input 
     847                             C   
     848                             C  ; 
     849                             C  ; structure of devid field as returned 
					by IOCTL is: 
     850                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-41
File Control Block definition                               

     851                             C  ;       BIT     7   6   5   4   3   2  
					 1   0 
     852                             C  ;             |---|---|---|---|---|---|
					---|---| 
     853                             C  ;             | I | E | R | S | I | I |
					 I | I | 
     854                             C  ;             | S | O | A | P | S | S |
					 S | S | 
     855                             C  ;             | D | F | W | E | C | N |
					 C | C | 
     856                             C  ;             | E |   |   | C | L | U |
					 O | I | 
     857                             C  ;             | V |   |   | L | K | L |
					 T | N | 
     858                             C  ;             |---|---|---|---|---|---|
					---|---| 
     859                             C  ;       ISDEV = 1 if this channel is a 
					device 
     860                             C  ;             = 0 if this channel is a 
					disk file 
     861                             C  ; 
     862                             C  ;       If ISDEV = 1 
     863                             C  ; 
     864                             C  ;             EOF = 0 if End Of File on
					 input 
     865                             C  ;             RAW = 1 if this device is
					 in Raw mode 
     866                             C  ;                 = 0 if this device is
					 cooked 
     867                             C  ;             ISCLK = 1 if this device 
					is the clock device 
     868                             C  ;             ISNUL = 1 if this device 
					is the null device 
     869                             C  ;             ISCOT = 1 if this device 
					is the console output 
     870                             C  ;             ISCIN = 1 if this device 
					is the console input 
     871                             C  ; 
     872                             C  ;       If ISDEV = 0 
     873                             C  ;             EOF = 0 if channel has be
					en written 
     874                             C  ;             Bits 0-5  are  the  block
					  device  number  for 
     875                             C  ;                 the channel (0 = A, 1
					 = B, ...) 
     876                             C  ; 
     877 = 0080                      C  devid_ISDEV     EQU     80h 
     878 = 0040                      C  devid_EOF       EQU     40h 
     879 = 0020                      C  devid_RAW       EQU     20h 
     880 = 0010                      C  devid_SPECIAL   EQU     10H 
     881 = 0008                      C  devid_ISCLK     EQU     08h 
     882 = 0004                      C  devid_ISNUL     EQU     04h 
     883 = 0002                      C  devid_ISCOT     EQU     02h 
     884 = 0001                      C  devid_ISCIN     EQU     01h 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-42
File Control Block definition                               

     885                             C   
     886 = 001F                      C  devid_block_dev EQU     1Fh            
					 ; mask for block device number 
     887                             C   
     888                             C  ; 
     889                             C  ; find first/next buffer 
     890                             C  ; 
     891                             C  find_buf    STRUC 
     892 0000  ??                    C  find_buf_sattr      DB  ?           ; a
					ttribute of search 
     893 0001  ??                    C  find_buf_drive      DB  ?           ; d
					rive of search 
     894 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; f
					ormatted name 
     895            ??               C  
     896                         ]   C  
     897                             C  
     898 000D  ????                  C  find_buf_LastEnt    DW  ?           ; L
					astEnt 
     899 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; T
					his DPB 
     900 0013  ????                  C  find_buf_DirStart   DW  ?           ; D
					irStart 
     901                             C  ;                                      
					                                    ; 
     902                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     903                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     904                             C   
     905 0015  ??                    C  find_buf_attr       DB  ?           ; a
					ttribute found 
     906 0016  ????                  C  find_buf_time       DW  ?           ; t
					ime 
     907 0018  ????                  C  find_buf_date       DW  ?           ; d
					ate 
     908 001A  ????                  C  find_buf_size_l     DW  ?           ; l
					ow(size) 
     909 001C  ????                  C  find_buf_size_h     DW  ?           ; h
					igh(size) 
     910 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; p
					acked name 
     911            ??               C  
     912                         ]   C  
     913                             C  
     914 002B                        C  find_buf    ENDS 
     915                             C   
     916                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-43
Process data block                                          

     917                             C  ; 
     918                             C  ; Process data block (otherwise known a
					s program header) 
     919                             C  ; 
     920                             C   
     921 = 0014                      C  FilPerProc          EQU     20 
     922                             C   
     923                             C  Process_data_block  STRUC 
     924 0000  ????                  C  PDB_Exit_Call       DW      ?          
					 ; INT int_abort system terminate 
     925 0002  ????                  C  PDB_block_len       DW      ?          
					 ; size of execution block 
     926 0004  ??                    C                      DB      ? 
     927 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)      
					 ; ancient call to system 
     928            ??               C  
     929                         ]   C  
     930                             C  
     931 000A  ????????              C  PDB_Exit            DD      ?          
					 ; pointer to exit routine 
     932 000E  ????????              C  PDB_Ctrl_C          DD      ?          
					 ; pointer to ^C routine 
     933 0012  ????????              C  PDB_Fatal_abort     DD      ?          
					 ; pointer to fatal error 
     934                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     935                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     936                             C  ;                                      
					                                    ; 
     937 0016  ????                  C  PDB_Parent_PID      DW      ?          
					 ; PID of parent (terminate PID) 
     938 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP 
					(?) 
     939            ??               C  
     940                         ]   C  
     941                             C  
     942                             C                                         
					 ; indices into system table 
     943                             C  ;                                      
					                                    ; 
     944                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     945                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     946 002C  ????                  C  PDB_environ         DW      ?          
					 ; seg addr of environment 
     947                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     948                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     949                             C  ;                                      
					                                    ; 
     950 002E  ????????              C  PDB_User_stack      DD      ?          
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-44
Process data block                                          

					 ; stack of self during system calls 
     951 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?)
					 
     952            ??               C  
     953                         ]   C  
     954                             C  
     955                             C  ;                                      
					                                    ; 
     956                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     957                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     958 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)  
					 ; portable method of system call 
     959            ??               C  
     960                         ]   C  
     961                             C  
     962                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     963                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     964                             C  ;                                      
					                                    ; 
     965 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?) 
					 ; 
     966            ??               C  
     967                         ]   C  
     968                             C  
     969                             C  ;                                      
					                                    ; 
     970                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     971                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     972 005B                        C  Process_data_block  ENDS 
     973                             C   
     974                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-45
EXEC and EXE file structures                                

     975                             C  ; 
     976                             C  ; EXEC arg block - load/go program 
     977                             C  ; 
     978                             C   
     979                             C  ; 
     980                             C  ; The following get used as arguments t
					o the EXEC system call.  They indicate 
     981                             C  ; whether or not the program is execute
					d or whether or not a program header 
     982                             C  ; gets created. 
     983                             C  ; 
     984 = 0001                      C  exec_func_no_execute    EQU 1          
					 ; no execute bit 
     985 = 0002                      C  exec_func_overlay       EQU 2          
					 ; overlay bit 
     986                             C   
     987                             C  Exec0           STRUC 
     988 0000  ????                  C  Exec0_environ   DW      ?              
					 ; seg addr of environment 
     989 0002  ????????              C  Exec0_com_line  DD      ?              
					 ; pointer to asciz command line 
     990 0006  ????????              C  Exec0_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     991 000A  ????????              C  Exec0_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     992 000E                        C  Exec0           ENDS 
     993                             C   
     994                             C  Exec1           STRUC 
     995 0000  ????                  C  Exec1_environ   DW      ?              
					 ; seg addr of environment 
     996 0002  ????????              C  Exec1_com_line  DD      ?              
					 ; pointer to asciz command line 
     997 0006  ????????              C  Exec1_5C_FCB    DD      ?              
					 ; default fcb at 5C 
     998 000A  ????????              C  Exec1_6C_FCB    DD      ?              
					 ; default fcb at 6C 
     999 000E  ????                  C  Exec1_SP        DW      ?              
					 ; stack pointer of program 
    1000 0010  ????                  C  Exec1_SS        DW      ?              
					 ; stack seg register of program 
    1001 0012  ????                  C  Exec1_IP        DW      ?              
					 ; entry point IP 
    1002 0014  ????                  C  Exec1_CS        DW      ?              
					 ; entry point CS 
    1003 0016                        C  Exec1           ENDS 
    1004                             C   
    1005                             C  Exec3           STRUC 
    1006 0000  ????                  C  Exec3_load_addr DW      ?              
					 ; seg address of load point 
    1007 0002  ????                  C  Exec3_reloc_fac DW      ?              
					 ; relocation factor 
    1008 0004                        C  Exec3           ENDS 
    1009                             C   
    1010                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-46
EXEC and EXE file structures                                

    1011                             C  ; Exit codes in upper byte 
    1012                             C  ; 
    1013 = 0000                      C  Exit_terminate      EQU     0 
    1014 = 0000                      C  Exit_abort          EQU     0 
    1015 = 0001                      C  Exit_Ctrl_C         EQU     1 
    1016 = 0002                      C  Exit_Hard_Error     EQU     2 
    1017 = 0003                      C  Exit_Keep_process   EQU     3 
    1018                             C   
    1019                             C  ; 
    1020                             C  ; EXE file header 
    1021                             C  ; 
    1022                             C   
    1023                             C  EXE_file    STRUC 
    1024 0000  ????                  C  exe_signature   DW  ?                  
					 ; must contain 4D5A  (yay zibo!) 
    1025 0002  ????                  C  exe_len_mod_512 DW  ?                  
					 ; low 9 bits of length 
    1026 0004  ????                  C  exe_pages       DW  ?                  
					 ; number of 512b pages in file 
    1027 0006  ????                  C  exe_rle_count   DW  ?                  
					 ; count of reloc entries 
    1028 0008  ????                  C  exe_par_dir     DW  ?                  
					 ; number of paragraphs before image 
    1029 000A  ????                  C  exe_min_BSS     DW  ?                  
					 ; minimum number of para of BSS 
    1030 000C  ????                  C  exe_max_BSS     DW  ?                  
					 ; max number of para of BSS 
    1031 000E  ????                  C  exe_SS          DW  ?                  
					 ; stack of image 
    1032 0010  ????                  C  exe_SP          DW  ?                  
					 ; SP of image 
    1033 0012  ????                  C  exe_chksum      DW  ?                  
					 ; checksum  of file (ignored) 
    1034 0014  ????                  C  exe_IP          DW  ?                  
					 ; IP of entry 
    1035 0016  ????                  C  exe_CS          DW  ?                  
					 ; CS of entry 
    1036 0018  ????                  C  exe_rle_table   DW  ?                  
					 ; byte offset of reloc table 
    1037 001A  ????                  C  exe_iov         DW  ?                  
					 ; overlay number (0 for root) 
    1038 001C  ????????              C  exe_sym_tab     DD  ?                  
					 ; offset of symbol table in file 
    1039 0020                        C  EXE_file    ENDS 
    1040                             C   
    1041 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
    1042 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
    1043                             C   
    1044                             C  symbol_entry    STRUC 
    1045 0000  ????????              C  sym_value       DD  ? 
    1046 0004  ????                  C  sym_type        DW  ? 
    1047 0006  ??                    C  sym_len         DB  ? 
    1048 0007  00FF[                 C  sym_name        DB  255 dup (?) 
    1049            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-47
EXEC and EXE file structures                                

    1050                         ]   C  
    1051                             C  
    1052 0106                        C  symbol_entry    ENDS 
    1053                             C   
    1054                             C  BREAK <Internal system file table forma
					t> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-48
Internal system file table format                           

    1055                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1056                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1057                             C  ;                                      
					                                    ; 
    1058                             C  ; 
    1059                             C  ; system file table 
    1060                             C  ; 
    1061                             C   
    1062                             C  sft             STRUC 
    1063 0000  ????????              C  sft_link        DD      ? 
    1064 0004  ????                  C  sft_count       DW      ?              
					 ; number of entries 
    1065 0006  ????                  C  sft_table       DW      ?              
					 ; beginning of array of the following 
    1066 0008                        C  sft             ENDS 
    1067                             C   
    1068                             C  ; 
    1069                             C  ; system file table entry 
    1070                             C  ; 
    1071                             C   
    1072                             C  sf_entry        STRUC 
    1073 0000  ??                    C  sf_ref_count    DB      ?              
					 ; number of processes sharing fcb 
    1074 0001  ??                    C  sf_mode         DB      ?              
					 ; mode of access 
    1075 0002  ??                    C  sf_attr         DB      ?              
					 ; attribute of file 
    1076 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) 
					DUP (?) 
    1077            ??               C  
    1078                         ]   C  
    1079                             C  
    1080                             C                                         
					 ; actual FCB 
    1081 0028                        C  sf_entry        ENDS 
    1082                             C   
    1083 = 0005                      C  sf_default_number   EQU     5h 
    1084                             C  ;                                      
					                                    ; 
    1085                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1086                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1087                             C   
    1088                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-49
Memory arena structure                                      

    1089                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1090                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1091                             C  ;                                      
					                                    ; 
    1092                             C  ; 
    1093                             C  ; arena item 
    1094                             C  ; 
    1095                             C  arena   STRUC 
    1096 0000  ??                    C  arena_signature     DB  ?              
					 ; 4D for valid item, 5A for last item 
    1097 0001  ????                  C  arena_owner         DW  ?              
					 ; owner of arena item 
    1098 0003  ????                  C  arena_size          DW  ?              
					 ; size in paragraphs of item 
    1099 0005                        C  arena   ENDS 
    1100                             C   
    1101                             C  ; 
    1102                             C  ; Current structure of the data returne
					d by the international call 
    1103                             C  ; 
    1104                             C   
    1105                             C  internat_block STRUC 
    1106 0000  ????                  C  Date_tim_format DW      ?           ; 0
					-USA, 1-EUR, 2-JAP 
    1107 0002  ??                    C  Currency_sym    DB      ?           ; C
					urrency Symbol 5 bytes 
    1108 0003  ??                    C                  DB      ? 
    1109 0004  ??                    C                  DB      ? 
    1110 0005  ??                    C                  DB      ? 
    1111 0006  ??                    C                  DB      ? 
    1112 0007  ??                    C  Thous_sep       DB      ?           ; T
					housands separator 2 bytes 
    1113 0008  ??                    C                  DB      ? 
    1114 0009  ??                    C  Decimal_sep     DB      ?           ; D
					ecimal separator 2 bytes 
    1115 000A  ??                    C                  DB      ? 
    1116 000B  ??                    C  Date_sep        DB      ?           ; D
					ate separator 2 bytes 
    1117 000C  ??                    C                  DB      ? 
    1118 000D  ??                    C  Time_sep        DB      ?           ; D
					ecimal separator 2 bytes 
    1119 000E  ??                    C                  DB      ? 
    1120 000F  ??                    C  Bit_feild       DB      ?           ; B
					it values 
    1121                             C                                      ;  
					 Bit 0 = 0 if currency symbol first 
    1122                             C                                      ;  
					       = 1 if currency symbol last 
    1123                             C                                      ;  
					 Bit 1 = 0 if No space after currency s
					ymbol 
    1124                             C                                      ;  
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-50
Memory arena structure                                      

					       = 1 if space after currency symb
					ol 
    1125 0010  ??                    C  Currency_cents  DB      ?           ; N
					umber of places after currency dec poin
					t 
    1126 0011  ??                    C  Time_24         DB      ?           ; 1
					 if 24 hour time, 0 if 12 hour time 
    1127 0012  ????                  C  Map_call        DW      ?           ; A
					ddress of case mapping call (DWORD) 
    1128 0014  ????                  C                  DW      ?           ; T
					HIS IS TWO WORDS SO IT CAN BE INITIALIZ
					ED 
    1129                             C                                      ;  
					in pieces. 
    1130 0016  ??                    C  Data_sep        DB      ?           ; D
					ata list separator character 
    1131 0017  ??                    C                  DB      ? 
    1132 0018                        C  internat_block ENDS 
    1133                             C   
    1134                             C  ; 
    1135                             C  ; Max size of the block returned by the
					 INTERNATIONAL call 
    1136                             C  ; 
    1137 = 0020                      C  internat_block_max      EQU     32 
    1138                             C   
    1139                             C  ; 
    1140                             C  ; CAUTION: The routines in ALLOC.ASM re
					ly on the fact that arena_signature 
    1141                             C  ; and arena_owner_system are all equal 
					to zero and are contained in DI.  Chang
					e 
    1142                             C  ; them and change ALLOC.ASM. 
    1143                             C   
    1144 = 0000                      C  arena_owner_system  EQU 0              
					 ; free block indication 
    1145                             C   
    1146 = 004D                      C  arena_signature_normal  EQU 4Dh        
					 ; valid signature, not end of arena 
    1147 = 005A                      C  arena_signature_end     EQU 5Ah        
					 ; valid signature, last block in arena
					 
    1148                             C  ;                                      
					                                    ; 
    1149                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1150                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1151                             C   
    1152                             C  BREAK <Machine instruction definitions>
					 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-51
Machine instruction definitions                             

    1153                             C   
    1154 = 00CD                      C  mi_INT          EQU     0CDh 
    1155 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
    1156 = 009A                      C  mi_Long_CALL    EQU     09Ah 
    1157 = 00CB                      C  mi_Long_RET     EQU     0CBh 
    1158                             C   
    1159                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-52
Standard I/O assignments                                    

    1160                             C   
    1161 = 0000                      C  stdin       EQU     0 
    1162 = 0001                      C  stdout      EQU     1 
    1163 = 0002                      C  stderr      EQU     2 
    1164 = 0003                      C  stdaux      EQU     3 
    1165 = 0004                      C  stdprn      EQU     4 
    1166                             C   
    1167                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-53
Xenix subfunction assignments                               

    1168                             C   
    1169 = 0000                      C  open_for_read   EQU 0 
    1170 = 0001                      C  open_for_write  EQU 1 
    1171 = 0002                      C  open_for_both   EQU 2 
    1172                             C   
    1173                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-54
Xenix error codes                                           

    1174                             C   
    1175                             C  ; 
    1176                             C  ; XENIX calls all return error codes th
					rough AX.  If an error occurred then 
    1177                             C  ; the carry bit will be set and the err
					or code is in AX.  If no error occurred
					 
    1178                             C  ; then the carry bit is reset and AX co
					ntains returned info. 
    1179                             C  ; 
    1180                             C   
    1181 =                           C  no_error_occurred               EQU    
					 0                                     
					                         ? 
    1182                             C   
    1183 = 0001                      C  error_invalid_function          EQU    
					 1 
    1184 = 0002                      C  error_file_not_found            EQU    
					 2 
    1185 = 0003                      C  error_path_not_found            EQU    
					 3 
    1186 = 0004                      C  error_too_many_open_files       EQU    
					 4 
    1187 = 0005                      C  error_access_denied             EQU    
					 5 
    1188 = 0006                      C  error_invalid_handle            EQU    
					 6 
    1189 = 0007                      C  error_arena_trashed             EQU    
					 7 
    1190 = 0008                      C  error_not_enough_memory         EQU    
					 8 
    1191 = 0009                      C  error_invalid_block             EQU    
					 9 
    1192 = 000A                      C  error_bad_environment           EQU    
					 10 
    1193 = 000B                      C  error_bad_format                EQU    
					 11 
    1194 = 000C                      C  error_invalid_access            EQU    
					 12 
    1195 = 000D                      C  error_invalid_data              EQU    
					 13 
    1196                             C  ;**** unused                    EQU    
					 14 
    1197 = 000F                      C  error_invalid_drive             EQU    
					 15 
    1198 = 0010                      C  error_current_directory         EQU    
					 16 
    1199 = 0011                      C  error_not_same_device           EQU    
					 17 
    1200 = 0012                      C  error_no_more_files             EQU    
					 18 
    1201                             C   
    1202 =                           C  country_not_found               EQU    
					 error_file_not_found 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-55
Xenix error codes                                           

    1203 =                           C  alloc_not_enough_memory         EQU    
					 error_not_enough_memory 
    1204 =                           C  alloc_arena_trashed             EQU    
					 error_arena_trashed 
    1205                             C   
    1206 =                           C  close_invalid_handle            EQU    
					 error_invalid_handle 
    1207 =                           C  close_invalid_function          EQU    
					 error_invalid_function 
    1208                             C   
    1209 =                           C  chdir_path_not_found            EQU    
					 error_path_not_found 
    1210                             C   
    1211 =                           C  chmod_path_not_found            EQU    
					 error_path_not_found 
    1212 =                           C  chmod_access_denied             EQU    
					 error_access_denied 
    1213 =                           C  chmod_invalid_function          EQU    
					 error_invalid_function 
    1214                             C   
    1215 =                           C  creat_access_denied             EQU    
					 error_access_denied 
    1216 =                           C  creat_path_not_found            EQU    
					 error_path_not_found 
    1217 =                           C  creat_too_many_open_files       EQU    
					 error_too_many_open_files 
    1218                             C   
    1219 =                           C  curdir_invalid_drive            EQU    
					 error_invalid_drive 
    1220                             C   
    1221 =                           C  dealloc_invalid_block           EQU    
					 error_invalid_block 
    1222 =                           C  dealloc_arena_trashed           EQU    
					 error_arena_trashed 
    1223                             C   
    1224 =                           C  dup_invalid_handle              EQU    
					 error_invalid_handle 
    1225 =                           C  dup_too_many_open_files         EQU    
					 error_too_many_open_files 
    1226                             C   
    1227 =                           C  dup2_invalid_handle             EQU    
					 error_invalid_handle 
    1228                             C   
    1229 =                           C  exec_invalid_function           EQU    
					 error_invalid_function 
    1230 =                           C  exec_bad_environment            EQU    
					 error_bad_environment 
    1231 =                           C  exec_bad_format                 EQU    
					 error_bad_format 
    1232 =                           C  exec_not_enough_memory          EQU    
					 error_not_enough_memory 
    1233 =                           C  exec_file_not_found             EQU    
					 error_file_not_found 
    1234                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-56
Xenix error codes                                           

    1235 =                           C  filetimes_invalid_function      EQU    
					 error_invalid_function 
    1236 =                           C  filetimes_invalid_handle        EQU    
					 error_invalid_handle 
    1237                             C   
    1238 =                           C  findfirst_file_not_found        EQU    
					 error_file_not_found 
    1239 =                           C  findfirst_no_more_files         EQU    
					 error_no_more_files 
    1240 =                           C  findnext_no_more_files          EQU    
					 error_no_more_files 
    1241                             C   
    1242 =                           C  international_invalid_function  EQU    
					 error_invalid_function 
    1243                             C   
    1244 =                           C  ioctl_invalid_handle            EQU    
					 error_invalid_handle 
    1245 =                           C  ioctl_invalid_function          EQU    
					 error_invalid_function 
    1246 =                           C  ioctl_invalid_data              EQU    
					 error_invalid_data 
    1247                             C   
    1248 =                           C  lseek_invalid_handle            EQU    
					 error_invalid_handle 
    1249 =                           C  lseek_invalid_function          EQU    
					 error_invalid_function 
    1250                             C   
    1251 =                           C  mkdir_path_not_found            EQU    
					 error_path_not_found 
    1252 =                           C  mkdir_access_denied             EQU    
					 error_access_denied 
    1253                             C   
    1254 =                           C  open_invalid_access             EQU    
					 error_invalid_access 
    1255 =                           C  open_file_not_found             EQU    
					 error_file_not_found 
    1256 =                           C  open_access_denied              EQU    
					 error_access_denied 
    1257 =                           C  open_too_many_open_files        EQU    
					 error_too_many_open_files 
    1258                             C   
    1259 =                           C  read_invalid_handle             EQU    
					 error_invalid_handle 
    1260 =                           C  read_access_denied              EQU    
					 error_access_denied 
    1261                             C   
    1262 =                           C  rename_file_not_found           EQU    
					 error_file_not_found 
    1263 =                           C  rename_not_same_device          EQU    
					 error_not_same_device 
    1264 =                           C  rename_access_denied            EQU    
					 error_access_denied 
    1265                             C   
    1266 =                           C  rmdir_path_not_found            EQU    
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-57
Xenix error codes                                           

					 error_path_not_found 
    1267 =                           C  rmdir_access_denied             EQU    
					 error_access_denied 
    1268 =                           C  rmdir_current_directory         EQU    
					 error_current_directory 
    1269                             C   
    1270 =                           C  setblock_invalid_block          EQU    
					 error_invalid_block 
    1271 =                           C  setblock_arena_trashed          EQU    
					 error_arena_trashed 
    1272 =                           C  setblock_not_enough_memory      EQU    
					 error_not_enough_memory 
    1273 =                           C  setblock_invalid_function       EQU    
					 error_invalid_function 
    1274                             C   
    1275 =                           C  unlink_file_not_found           EQU    
					 error_file_not_found 
    1276 =                           C  unlink_access_denied            EQU    
					 error_access_denied 
    1277                             C   
    1278 =                           C  write_invalid_handle            EQU    
					 error_invalid_handle 
    1279 =                           C  write_access_denied             EQU    
					 error_access_denied 
    1280                             C   
    1281                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-58
system call definitions                                     

    1282                             C   
    1283 = 0000                      C  Abort                           EQU 0  
					 ;  0      0 
    1284 = 0001                      C  Std_Con_Input                   EQU 1  
					 ;  1      1 
    1285 = 0002                      C  Std_Con_Output                  EQU 2  
					 ;  2      2 
    1286 = 0003                      C  Std_Aux_Input                   EQU 3  
					 ;  3      3 
    1287 = 0004                      C  Std_Aux_Output                  EQU 4  
					 ;  4      4 
    1288 = 0005                      C  Std_Printer_Output              EQU 5  
					 ;  5      5 
    1289 = 0006                      C  Raw_Con_IO                      EQU 6  
					 ;  6      6 
    1290 = 0007                      C  Raw_Con_Input                   EQU 7  
					 ;  7      7 
    1291 = 0008                      C  Std_Con_Input_No_Echo           EQU 8  
					 ;  8      8 
    1292 = 0009                      C  Std_Con_String_Output           EQU 9  
					 ;  9      9 
    1293 = 000A                      C  Std_Con_String_Input            EQU 10 
					 ; 10      A 
    1294 = 000B                      C  Std_Con_Input_Status            EQU 11 
					 ; 11      B 
    1295 = 000C                      C  Std_Con_Input_Flush             EQU 12 
					 ; 12      C 
    1296 = 000D                      C  Disk_Reset                      EQU 13 
					 ; 13      D 
    1297 = 000E                      C  Set_Default_Drive               EQU 14 
					 ; 14      E 
    1298 = 000F                      C  FCB_Open                        EQU 15 
					 ; 15      F 
    1299 = 0010                      C  FCB_Close                       EQU 16 
					 ; 16     10 
    1300 = 0011                      C  Dir_Search_First                EQU 17 
					 ; 17     11 
    1301 = 0012                      C  Dir_Search_Next                 EQU 18 
					 ; 18     12 
    1302 = 0013                      C  FCB_Delete                      EQU 19 
					 ; 19     13 
    1303 = 0014                      C  FCB_Seq_Read                    EQU 20 
					 ; 20     14 
    1304 = 0015                      C  FCB_Seq_Write                   EQU 21 
					 ; 21     15 
    1305 = 0016                      C  FCB_Create                      EQU 22 
					 ; 22     16 
    1306 = 0017                      C  FCB_Rename                      EQU 23 
					 ; 23     17 
    1307 = 0019                      C  Get_Default_Drive               EQU 25 
					 ; 25     19 
    1308 = 001A                      C  Set_DMA                         EQU 26 
					 ; 26     1A 
    1309                             C  ;----+----+----+----+----+----+----+---
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-59
system call definitions                                     

					-+----+----+----+----+----+----+----; 
    1310                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1311                             C  ;                                      
					                                    ; 
    1312 = 001F                      C  Get_Default_DPB                 EQU 31 
					 ; 31     1F 
    1313                             C  ;                                      
					                                    ; 
    1314                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1315                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1316 = 0021                      C  FCB_Random_Read                 EQU 33 
					 ; 33     21 
    1317 = 0022                      C  FCB_Random_Write                EQU 34 
					 ; 34     22 
    1318 = 0023                      C  Get_FCB_File_Length             EQU 35 
					 ; 35     23 
    1319 = 0024                      C  Get_FCB_Position                EQU 36 
					 ; 36     24 
    1320 = 0025                      C  Set_Interrupt_Vector            EQU 37 
					 ; 37     25 
    1321 = 0026                      C  Create_Process_Data_Block       EQU 38 
					 ; 38     26 
    1322 = 0027                      C  FCB_Random_Read_Block           EQU 39 
					 ; 39     27 
    1323 = 0028                      C  FCB_Random_Write_Block          EQU 40 
					 ; 40     28 
    1324 = 0029                      C  Parse_File_Descriptor           EQU 41 
					 ; 41     29 
    1325 = 002A                      C  Get_Date                        EQU 42 
					 ; 42     2A 
    1326 = 002B                      C  Set_Date                        EQU 43 
					 ; 43     2B 
    1327 = 002C                      C  Get_Time                        EQU 44 
					 ; 44     2C 
    1328 = 002D                      C  Set_Time                        EQU 45 
					 ; 45     2D 
    1329 = 002E                      C  Set_Verify_On_Write             EQU 46 
					 ; 46     2E 
    1330                             C  ; Extended functionality group 
    1331 = 002F                      C  Get_DMA                         EQU 47 
					 ; 47     2F 
    1332 = 0030                      C  Get_Version                     EQU 48 
					 ; 48     30 
    1333 = 0031                      C  Keep_Process                    EQU 49 
					 ; 49     31 
    1334                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1335                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1336                             C  ;                                      
					                                    ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-60
system call definitions                                     

    1337 = 0032                      C  Get_DPB                         EQU 50 
					 ; 50     32 
    1338                             C  ;                                      
					                                    ; 
    1339                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1340                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1341 = 0033                      C  Set_CTRL_C_Trapping             EQU 51 
					 ; 51     33 
    1342 = 0034                      C  Get_InDOS_Flag                  EQU 52 
					 ; 52     34 
    1343 = 0035                      C  Get_Interrupt_Vector            EQU 53 
					 ; 53     35 
    1344 = 0036                      C  Get_Drive_Freespace             EQU 54 
					 ; 54     36 
    1345 = 0037                      C  Char_Oper                       EQU 55 
					 ; 55     37 
    1346 = 0038                      C  International                   EQU 56 
					 ; 56     38 
    1347                             C  ;   Directory Group 
    1348 = 0039                      C  MKDir                           EQU 57 
					 ; 57     39 
    1349 = 003A                      C  RMDir                           EQU 58 
					 ; 58     3A 
    1350 = 003B                      C  CHDir                           EQU 59 
					 ; 59     3B 
    1351                             C  ;   File Group 
    1352 = 003C                      C  Creat                           EQU 60 
					 ; 60     3C 
    1353 = 003D                      C  Open                            EQU 61 
					 ; 61     3D 
    1354 = 003E                      C  Close                           EQU 62 
					 ; 62     3E 
    1355 = 003F                      C  Read                            EQU 63 
					 ; 63     3F 
    1356 = 0040                      C  Write                           EQU 64 
					 ; 64     40 
    1357 = 0041                      C  Unlink                          EQU 65 
					 ; 65     41 
    1358 = 0042                      C  LSeek                           EQU 66 
					 ; 66     42 
    1359 = 0043                      C  CHMod                           EQU 67 
					 ; 67     43 
    1360 = 0044                      C  IOCtl                           EQU 68 
					 ; 68     44 
    1361 = 0045                      C  XDup                            EQU 69 
					 ; 69     45 
    1362 = 0046                      C  XDup2                           EQU 70 
					 ; 70     46 
    1363 = 0047                      C  Current_Dir                     EQU 71 
					 ; 71     47 
    1364                             C  ;    Memory Group 
    1365 = 0048                      C  Alloc                           EQU 72 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-61
system call definitions                                     

					 ; 72     48 
    1366 = 0049                      C  Dealloc                         EQU 73 
					 ; 73     49 
    1367 = 004A                      C  Setblock                        EQU 74 
					 ; 74     4A 
    1368                             C  ;    Process Group 
    1369 = 004B                      C  Exec                            EQU 75 
					 ; 75     4B 
    1370 = 004C                      C  Exit                            EQU 76 
					 ; 76     4C 
    1371 = 004D                      C  Wait                            EQU 77 
					 ; 77     4D 
    1372 = 004E                      C  Find_First                      EQU 78 
					 ; 78     4E 
    1373                             C  ;   Special Group 
    1374 = 004F                      C  Find_Next                       EQU 79 
					 ; 79     4F 
    1375                             C  ; SPECIAL SYSTEM GROUP 
    1376                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1377                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1378                             C  ;                                      
					                                    ; 
    1379 = 0050                      C  Set_Current_PDB                 EQU 80 
					 ; 80     50 
    1380 = 0051                      C  Get_Current_PDB                 EQU 81 
					 ; 81     51 
    1381 = 0052                      C  Get_In_Vars                     EQU 82 
					 ; 82     52 
    1382 = 0053                      C  SetDPB                          EQU 83 
					 ; 83     53 
    1383                             C  ;                                      
					                                    ; 
    1384                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1385                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1386 = 0054                      C  Get_Verify_On_Write             EQU 84 
					 ; 84     54 
    1387                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
    1388                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1389                             C  ;                                      
					                                    ; 
    1390 = 0055                      C  Dup_PDB                         EQU 85 
					 ; 85     55 
    1391                             C  ;                                      
					                                    ; 
    1392                             C  ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
    1393                             C  ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-62
system call definitions                                     

    1394 = 0056                      C  Rename                          EQU 86 
					 ; 86     56 
    1395 = 0057                      C  File_Times                      EQU 87 
					 ; 87     57 
    1396 = 0058                      C  AllocOper                       EQU 88 
					 ; 88     58 
    1397                             C  ; Network extention system calls 
    1398 = 0059                      C  GetExtendedError                EQU 89 
					 ; 89     59 
    1399 = 005A                      C  CreateTempFile                  EQU 90 
					 ; 90     5A 
    1400 = 005B                      C  CreateNewFile                   EQU 91 
					 ; 91     5B 
    1401 = 005C                      C  LockOper                        EQU 92 
					 ; 92     5C Lock and Unlock 
    1402 = 005D                      C  ServerCall                      EQU 93 
					 ; 93     5D CommitAll, ServerDOSCall, 
    1403                             C                                         
					 ;           CloseByName, CloseUser, 
    1404                             C                                         
					 ;           CloseUserProcess, 
    1405                             C                                         
					 ;           GetOpenFileList 
    1406 = 005E                      C  UserIDOper                      EQU 94 
					 ; 94     5E Get and Set 
    1407 = 005F                      C  AssignOper                      EQU 95 
					 ; 95     5F On, Off, Get, Set, Cancel 
    1408                             C   
    1409 = 00F8                      C  Set_Oem_Handler                 EQU 248
					 ; 248    F8 
    1410 = 00F9                      C  OEM_C1                          EQU 249
					 ; 249    F9 
    1411 = 00FA                      C  OEM_C2                          EQU 250
					 ; 250    FA 
    1412 = 00FB                      C  OEM_C3                          EQU 251
					 ; 251    FB 
    1413 = 00FC                      C  OEM_C4                          EQU 252
					 ; 252    FC 
    1414 = 00FD                      C  OEM_C5                          EQU 253
					 ; 253    FD 
    1415 = 00FE                      C  OEM_C6                          EQU 254
					 ; 254    FE 
    1416 = 00FF                      C  OEM_C7                          EQU 255
					 ; 255    FF 
    1417                             C  SUBTTL 
    1418                             C   
    1419                             C          INCLUDE DEVSYM.ASM 
    1420                             C  SUBTTL DEVICE TABLE AND SRH DEFINITION 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-63
DEVICE TABLE AND SRH DEFINITION                             

    1421                             C  PAGE 
    1422                             C  ; The device table list has the form: 
    1423                             C  SYSDEV  STRUC 
    1424 0000  ????????              C  SDEVNEXT        DD      ?       ;Pointe
					r to next device header 
    1425 0004  ????                  C  SDEVATT         DW      ?       ;Attrib
					utes of the device 
    1426 0006  ????                  C  SDEVSTRAT       DW      ?       ;Strate
					gy entry point 
    1427 0008  ????                  C  SDEVINT         DW      ?       ;Interr
					upt entry point 
    1428 000A  0008[                 C  SDEVNAME        DB      8 DUP (?) ;Name
					 of device (only first byte used for bl
					ock) 
    1429            ??               C  
    1430                         ]   C  
    1431                             C  
    1432 0012                        C  SYSDEV  ENDS 
    1433                             C   
    1434                             C  ;Attribute bit masks 
    1435 = 8000                      C  DEVTYP  EQU     8000H           ;Bit 15
					 - 1  if Char, 0 if block 
    1436 = 4000                      C  DEVIOCTL EQU    4000H           ;Bit 14
					 - CONTROL mode bit 
    1437 = 2000                      C  ISFATBYDEV EQU  2000H           ;Bit 13
					 - Device uses FAT ID bytes, comp media
					. 
    1438 = 0001                      C  ISCIN   EQU     0001H           ;Bit 0 
					- This device is the console input. 
    1439 = 0002                      C  ISCOUT  EQU     0002H           ;Bit 1 
					- This device is the console output. 
    1440 = 0004                      C  ISNULL  EQU     0004H           ;Bit 2 
					- This device is the null device. 
    1441 = 0008                      C  ISCLOCK EQU     0008H           ;Bit 3 
					- This device is the clock device. 
    1442 = 0010                      C  ISIBM   EQU     0010H           ;Bit 4 
					- This device is special 
    1443                             C   
    1444                             C  ;Static Reguest Header 
    1445                             C  SRHEAD  STRUC 
    1446 0000  ??                    C  REQLEN  DB      ?               ;Length
					 in bytes of request block 
    1447 0001  ??                    C  REQUNIT DB      ?               ;Device
					 unit number 
    1448 0002  ??                    C  REQFUNC DB      ?               ;Type o
					f request 
    1449 0003  ????                  C  REQSTAT DW      ?               ;Status
					 Word 
    1450 0005  0008[                 C          DB      8 DUP(?)        ;Reserv
					ed for queue links 
    1451            ??               C  
    1452                         ]   C  
    1453                             C  
    1454 000D                        C  SRHEAD  ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-64
DEVICE TABLE AND SRH DEFINITION                             

    1455                             C   
    1456                             C  ;Status word masks 
    1457 = 8000                      C  STERR   EQU     8000H           ;Bit 15
					 - Error 
    1458 = 0200                      C  STBUI   EQU     0200H           ;Bit 9 
					- Buisy 
    1459 = 0100                      C  STDON   EQU     0100H           ;Bit 8 
					- Done 
    1460 = 00FF                      C  STECODE EQU     00FFH           ;Error 
					code 
    1461 = 0000                      C  WRECODE EQU     0 
    1462                             C   
    1463                             C  ;Function codes 
    1464 = 0000                      C  DEVINIT EQU     0               ;Initia
					lization 
    1465 = 001A                      C  DINITHL EQU     26              ;Size o
					f init header 
    1466 = 0001                      C  DEVMDCH EQU     1               ;Media 
					check 
    1467 = 000F                      C  DMEDHL  EQU     15              ;Size o
					f media check header 
    1468 = 0002                      C  DEVBPB  EQU     2               ;Get BP
					B 
    1469 = 0003                      C  DEVRDIOCTL EQU  3               ;IOCTL 
					read 
    1470 = 0016                      C  DBPBHL  EQU     22              ;Size o
					f Get BPB header 
    1471 = 0004                      C  DEVRD   EQU     4               ;Read 
    1472 = 0016                      C  DRDWRHL EQU     22              ;Size o
					f RD/WR header 
    1473 = 0005                      C  DEVRDND EQU     5               ;Non de
					structive read no wait (character devs)
					 
    1474 = 000E                      C  DRDNDHL EQU     14              ;Size o
					f non destructive read header 
    1475 = 0006                      C  DEVIST  EQU     6               ;Input 
					status 
    1476 = 000D                      C  DSTATHL EQU     13              ;Size o
					f status header 
    1477 = 0007                      C  DEVIFL  EQU     7               ;Input 
					flush 
    1478 = 000F                      C  DFLSHL  EQU     15              ;Size o
					f flush header 
    1479 = 0008                      C  DEVWRT  EQU     8               ;Write 
    1480 = 0009                      C  DEVWRTV EQU     9               ;Write 
					with verify 
    1481 = 000A                      C  DEVOST  EQU     10              ;Output
					 status 
    1482 = 000B                      C  DEVOFL  EQU     11              ;Output
					 flush 
    1483 = 000C                      C  DEVWRIOCTL EQU  12              ;IOCTL 
					write 
    1484                             C  
					write 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-65
DEVICE TABLE AND SRH DEFINITION                             

    1485                             C   
    1486                             C  SUBTTL ^C, terminate/abort/exit and Har
					d error actions 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-66
^C, terminate/abort/exit and Hard error actions             

    1487                             C  PAGE 
    1488                             C  ; 
    1489                             C  ; There are three kinds of context rese
					ts that can occur during normal DOS 
    1490                             C  ; functioning:  ^C trap, terminate/abor
					t/exit, and Hard-disk error.  These mus
					t 
    1491                             C  ; be handles in a clean fashion that al
					lows nested executions along with the 
    1492                             C  ; ability to trap one's own errors. 
    1493                             C  ; 
    1494                             C  ; ^C trap - A process may elect to catc
					h his own ^Cs.  This is achieved by 
    1495                             C  ;           using the $GET_INTERRUPT_VE
					CTOR and $SET_INTERRUPT_VECTOR as 
    1496                             C  ;           follows: 
    1497                             C  ; 
    1498                             C  ;           $GET_INTERRUPT_VECTOR for I
					NT int_ctrl_c 
    1499                             C  ;           Save it in static memory. 
    1500                             C  ;           $SET_INTERRUPT_VECTOR for I
					NT int_ctrl_c 
    1501                             C  ; 
    1502                             C  ;           The interrupt service routi
					ne must preserve all registers and 
    1503                             C  ;           return carry set iff the op
					eration is to be aborted (via abort 
    1504                             C  ;           system call), otherwise, ca
					rry is reset and the operation is 
    1505                             C  ;           restarted.  ANY DEVIATION F
					ROM THIS WILL LEAD TO UNRELIABLE 
    1506                             C  ;           RESULTS. 
    1507                             C  ; 
    1508                             C  ;           To restore original ^C proc
					essing (done on terminate/abort/exit), 
    1509                             C  ;           restore INT int_ctrl_c from
					 the saved vector. 
    1510                             C  ; 
    1511                             C  ; Hard-disk error -- The interrupt serv
					ice routine for INT int_fatal_abort mus
					t 
    1512                             C  ;           also preserve registers and
					 return one of three values in AL: 0 an
					d 
    1513                             C  ;           1 imply retry and ignore (?
					??)  and 2 indicates an abort.  The use
					r 
    1514                             C  ;           himself is not to issue the
					 abort, rather, the dos will do it for 
    1515                             C  ;           him by simulating a normal 
					abort/exit system call.  ANY DEVIATION 
    1516                             C  ;           FROM THIS WILL LEAD TO UNRE
					LIABLE RESULTS. 
    1517                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-67
^C, terminate/abort/exit and Hard error actions             

    1518                             C  ; terminate/abort/exit -- The user may 
					not, under any circumstances trap an 
    1519                             C  ;           abort call.  This is reserv
					ed for knowledgeable system programs. 
    1520                             C  ;           ANY DEVIATION FROM THIS WIL
					L LEAD TO UNRELIABLE RESULTS. 
    1521                             C   
    1522                             C  SUBTTL SEGMENT DECLARATIONS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-68
SEGMENT DECLARATIONS                                        

    1523                             C  PAGE 
    1524                             C   
    1525                             C  ; The following are all of the segments
					 used.  They are declared in the order 
    1526                             C  ; that they should be placed in the exe
					cutable 
    1527                             C   
    1528                             C  ; 
    1529                             C  ; segment ordering for MSDOS 
    1530                             C  ; 
    1531                             C   
    1532 0000                        C  START           SEGMENT BYTE PUBLIC 'ST
					ART' 
    1533 0000                        C  START           ENDS 
    1534                             C   
    1535 0000                        C  CONSTANTS       SEGMENT BYTE PUBLIC 'CO
					NST' 
    1536 0000                        C  CONSTANTS       ENDS 
    1537                             C   
    1538 0000                        C  DATA            SEGMENT WORD PUBLIC 'DA
					TA' 
    1539 0000                        C  DATA            ENDS 
    1540                             C   
    1541 0000                        C  CODE            SEGMENT BYTE PUBLIC 'CO
					DE' 
    1542 0000                        C  CODE            ENDS 
    1543                             C   
    1544 0000                        C  LAST            SEGMENT BYTE PUBLIC 'LA
					ST' 
    1545 0000                        C  LAST            ENDS 
    1546                             C   
    1547                             C  DOSGROUP    GROUP   CODE,CONSTANTS,DATA
					,LAST 
    1548                             C   
    1549                             C  ; The following segment is defined such
					 that the data/const classes appear 
    1550                             C  ; before the code class for ROMificatio
					n 
    1551                             C   
    1552 0000                        C  START           SEGMENT BYTE PUBLIC 'ST
					ART' 
    1553                             C                  ASSUME  CS:DOSGROUP,DS:
					NOTHING,ES:NOTHING,SS:NOTHING 
    1554 0000  E9 0000 R             C          JMP     DOSINIT 
    1555 0003                        C  START           ENDS 
    1556                             C   
    1557                                 
    1558                             C          INCLUDE MSDATA.ASM 
    1559                             C  SUBTTL Initialized data and data used a
					t DOS initialization 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-69
Initialized data and data used at DOS initialization        

    1560                             C  PAGE 
    1561                             C  ; DATA AREA for MS-DOS 
    1562                             C   
    1563                             C  ENDIF 
    1564                             C   
    1565 0000                        C  CONSTANTS       SEGMENT BYTE PUBLIC 'CO
					NST' 
    1566                             C          EXTRN   international_table:BYT
					E 
    1567                             C          EXTRN   Current_Country:WORD 
    1568                             C   
    1569                             C   
    1570 0000                        C          ORG     0 
    1571 = 0000                      C  CONSTRT EQU     $               ; Start
					 of constants segment 
    1572                             C   
    1573                             C          PUBLIC  DevStrLen 
    1574 0000  03                    C  DEVSTRLEN DB    3              ; Size o
					f below 
    1575                             C          PUBLIC  DevString 
    1576 0001  44 45 56              C  DEVSTRING DB    "DEV"          ; Dummy 
					device directory 
    1577                             C   
    1578                             C  ; 
    1579                             C  ; Table of routines for assignable devi
					ces 
    1580                             C  ; 
    1581                             C  ; MSDOS allows assignment if the follow
					ing standard devices: 
    1582                             C  ;   stdin  (usually CON input) 
    1583                             C  ;   stdout (usually CON output) 
    1584                             C  ;   auxin  (usually AUX input) 
    1585                             C  ;   auxout (usually AUX output) 
    1586                             C  ;   stdlpt (usually PRN output) 
    1587                             C  ; 
    1588                             C  ; SPECIAL NOTE: 
    1589                             C  ;   Status of a file is a strange idea.
					  We choose to handle it in this manner
					: 
    1590                             C  ;   If we're not at end-of-file, then w
					e always say that we have a character. 
    1591                             C  ;   Otherwise, we return ^Z as the char
					acter and set the ZERO flag.  In this 
    1592                             C  ;   manner we can support program writt
					en under the old DOS (they use ^Z as EO
					F 
    1593                             C  ;   on devices) and programs written un
					der the new DOS (they use the ZERO flag
					 
    1594                             C  ;   as EOF). 
    1595                             C   
    1596                             C  ; Default FCBs for boot up 
    1597                             C   
    1598 0004                        C  sftabl      LABEL   DWORD              
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-70
Initialized data and data used at DOS initialization        

					       ; file table 
    1599 0004  FFFF                  C              DW      -1 
    1600 0006  FFFF                  C              DW      -1 
    1601 0008  0005                  C              DW      sf_default_number  
					; Number of entries in table 
    1602 000A  0005[                 C              DB      sf_default_number D
					UP ( (SIZE sf_entry) DUP (0)) 
    1603        0028[                C  
    1604             00              C  
    1605                        ]    C  
    1606                         ]   C  
    1607                             C  
    1608                             C   
    1609                             C          I_AM    NoSetDir,BYTE          
					 ; true -> do not set directory 
    1610 00D2  ??                    C1 NoSetDir DB ?
    1611                             C          I_am    DidCTRLC,BYTE          
					 ; true -> we did a ^C exit 
    1612 00D3  ??                    C1 DidCTRLC DB ?
    1613                             C          I_am    SpaceFlag,BYTE         
					 ; true -> embedded spaces are allowed 
    1614 00D4  ??                    C1 SpaceFlag DB ?
    1615                             C                                         
					 ; in FCB 
    1616                             C  ; the next two variables relate to the 
					position of the logical stdout/stdin 
    1617                             C  ; cursor.  They are only meaningful whe
					n stdin/stdout are assigned to the 
    1618                             C  ; console. 
    1619                             C   
    1620                             C          i_am    CARPOS,BYTE            
					 ; cursor position in stdin 
    1621 00D5  ??                    C1 CARPOS DB ?
    1622                             C          i_am    STARTPOS,BYTE          
					 ; position of cursor at beginning 
    1623 00D6  ??                    C1 STARTPOS DB ?
    1624                             C                                         
					 ; of buffered input call 
    1625                             C          I_AM    PFLAG,BYTE 
    1626 00D7  ??                    C1 PFLAG DB ?
    1627                             C          I_AM    VERFLG,BYTE            
					 ; Initialize with verify off 
    1628 00D8  ??                    C1 VERFLG DB ?
    1629                             C          I_AM    CONTPOS,WORD 
    1630 00D9  ????                  C1 CONTPOS DW ?
    1631                             C          PUBLIC  CHARCO 
    1632 00DB  03                    C  CHARCO      DB      00000011B          
					 ; Allows statchks every 4 chars... 
    1633                             C   
    1634                             C          I_AM    DMAADD,DWORD           
					 ; User's disk transfer address 
    1635 00DC  ????????              C1 DMAADD DD ?
    1636                             C                                         
					 ; (disp/seg) 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-71
Initialized data and data used at DOS initialization        

    1637 00DC                        C              ORG     $-CONSTRT-4 
    1638 00DC  0080                  C              DW      80H 
    1639 00DE  ????                  C              DW      ? 
    1640                             C   
    1641 00E0  ????                  C  ENDMEM      DW      ? 
    1642                             C   
    1643                             C              PUBLIC  switch_character 
    1644 00E2  2F                    C  switch_character    DB  '/' 
    1645                             C   
    1646                             C              PUBLIC  device_availability
					 
    1647 00E3  FF                    C  device_availability DB  0FFH 
    1648                             C   
    1649                             C              I_AM    FirstArena,WORD    
					     ; first free block found 
    1650 00E4  ????                  C1 FirstArena DW ?
    1651                             C              I_AM    BestArena,WORD     
					     ; best free block found 
    1652 00E6  ????                  C1 BestArena DW ?
    1653                             C              I_AM    LastArena,WORD     
					     ; last free block found 
    1654 00E8  ????                  C1 LastArena DW ?
    1655                             C              I_AM    AllocMethod,BYTE   
					     ; how to alloc first(best)last 
    1656 00EA  ??                    C1 AllocMethod DB ?
    1657                             C              I_AM    arena_head,WORD 
    1658 00EB  ????                  C1 arena_head DW ?
    1659                             C   
    1660                             C  ; The following block of data is used b
					y SYSINIT.  Do not change the order or 
    1661                             C  ; size of this block 
    1662                             C   
    1663                             C              PUBLIC  SYSINITVAR 
    1664 00ED                        C  SYSINITVAR  LABEL   WORD 
    1665                             C          I_AM    DPBHEAD,DWORD          
					 ; Pointer to head of DPB-FAT list 
    1666 00ED  ????????              C1 DPBHEAD DD ?
    1667                             C          I_AM    sft_addr,DWORD         
					 ; Pointer to first FCB table 
    1668 00F1  ????????              C1 sft_addr DD ?
    1669 00F1                        C              ORG     $-CONSTRT-4 
    1670                             C              short_addr  sftabl 
    1671 00F1  0004 R                C1  DW OFFSET DOSGROUP:sftabl
    1672 00F3  ????                  C              DW      ?                  
					 ; DOS segment set at INIT 
    1673                             C   
    1674                             C  ; The following address points to the C
					LOCK device 
    1675                             C          i_am    BCLOCK,DWORD 
    1676 00F5  ????????              C1 BCLOCK DD ?
    1677                             C  ; The following address is used by DISK
					STATCHK it is always points to the 
    1678                             C  ; console input device header 
    1679                             C          I_AM    BCON,DWORD             
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-72
Initialized data and data used at DOS initialization        

					 ; Console device entry points 
    1680 00F9  ????????              C1 BCON DD ?
    1681                             C          i_am    NUMIO,BYTE             
					 ; Number of disk tables 
    1682 00FD  ??                    C1 NUMIO DB ?
    1683 00FE  0000                  C  MAXSEC      DW      0                  
					 ; Maximum allowed sector size 
    1684                             C          I_AM    BUFFHEAD,DWORD         
					 ; Pointer to head of buffer queue 
    1685 0100  ????????              C1 BUFFHEAD DD ?
    1686 0104                        C  DEVHEAD LABEL   DWORD 
    1687                             C          I_AM    NULDEV,DWORD           
					 ; Set to list start passed by  
    1688 0104  ????????              C1 NULDEV DD ?
    1689                             C  					; BIOS at DOS Init 
    1690                             C   
    1691 0108  8004                  C          DW      DEVTYP OR ISNULL 
    1692                             C          short_addr  SNULDEV 
    1693 010A  0000 E                C1  DW OFFSET DOSGROUP:SNULDEV
    1694                             C          short_addr  INULDEV 
    1695 010C  0000 E                C1  DW OFFSET DOSGROUP:INULDEV
    1696 010E  4E 55 4C 20 20 20 20  C          DB      "NUL     " 
    1697       20                    C  
    1698                             C   
    1699                             C   
    1700                             C          i_am    DAY,BYTE 
    1701 0116  ??                    C1 DAY DB ?
    1702                             C          i_am    MONTH,BYTE 
    1703 0117  ??                    C1 MONTH DB ?
    1704                             C          i_am    YEAR,WORD 
    1705 0118  ????                  C1 YEAR DW ?
    1706                             C          i_am    DAYCNT,WORD 
    1707 011A  ????                  C1 DAYCNT DW ?
    1708                             C          i_am    WEEKDAY,BYTE 
    1709 011C  ??                    C1 WEEKDAY DB ?
    1710 0116                        C          ORG     $-CONSTRT-7 
    1711 0116  00 00                 C          DB      0,0 
    1712 0118  0000 FFFF             C          DW      0,-1 
    1713 011C  00                    C          DB      0 
    1714                             C   
    1715                             C          I_AM    CURDRV,BYTE            
					 ; Default to drive A 
    1716 011D  ??                    C1 CURDRV DB ?
    1717                             C          I_AM    LASTENT,WORD 
    1718 011E  ????                  C1 LASTENT DW ?
    1719                             C          i_am    INDOS,BYTE             
					 ; DOS status for interrupt processing 
    1720 0120  ??                    C1 INDOS DB ?
    1721 0120                        C              ORG     $-CONSTRT-1 
    1722 0120  00                    C              DB      0 
    1723                             C          I_AM    ErrorMode,BYTE         
					 ; Flag for INT 24 processing 
    1724 0121  ??                    C1 ErrorMode DB ?
    1725                             C          PUBLIC  WPErr 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-73
Initialized data and data used at DOS initialization        

    1726 0122  FF                    C  WPERR       DB      -1                 
					 ; Write protect error flag 
    1727                             C          I_AM    CONSWAP,BYTE 
    1728 0123  ??                    C1 CONSWAP DB ?
    1729                             C          PUBLIC  IDLEINT 
    1730 0124  01                    C  IDLEINT     DB      1 
    1731                             C          PUBLIC  CNTCFLAG 
    1732 0125  00                    C  CNTCFLAG    DB      0                  
					 ; ^C check in dispatch disabled 
    1733                             C   
    1734                             C          PUBLIC  LastBuffer 
    1735 0126                        C  LASTBUFFER  LABEL   DWORD              
					 ; Buffer queue recency pointer 
    1736 0126  FFFF                  C              DW      -1 
    1737 0128  FFFF                  C              DW      -1 
    1738                             C   
    1739                             C  ; Combination of all device call parame
					ters 
    1740                             C   
    1741                             C          PUBLIC  DEVCALL 
    1742 012A  ??                    C  DEVCALL SRHEAD  <> 
    1743 012B  ??                    C  
    1744 012C  ??                    C  
    1745 012D  ????                  C  
    1746 012F  0008[                 C  
    1747            ??               C  
    1748                         ]   C  
    1749                             C  
    1750 0137                        C  CALLUNIT    LABEL   BYTE 
    1751 0137                        C  CALLFLSH    LABEL   WORD 
    1752                             C          I_AM    CALLMED,BYTE 
    1753 0137  ??                    C1 CALLMED DB ?
    1754 0138                        C  CALLBR      LABEL   DWORD 
    1755                             C          PUBLIC  CALLXAD 
    1756 0138                        C  CALLXAD     LABEL   DWORD 
    1757                             C          I_AM    CALLRBYT,BYTE 
    1758 0138  ??                    C1 CALLRBYT DB ?
    1759 0139  0003[                 C          DB      3 DUP(?) 
    1760            ??               C  
    1761                         ]   C  
    1762                             C  
    1763                             C          PUBLIC CallBPB 
    1764 013C                        C  CALLBPB     LABEL   DWORD 
    1765                             C          I_AM    CALLSCNT,WORD 
    1766 013C  ????                  C1 CALLSCNT DW ?
    1767 013E  ????                  C  CALLSSEC    DW      ? 
    1768                             C   
    1769                             C          I_AM    CALLDEVAD,DWORD        
					     ; stash for device entry point 
    1770 0140  ????????              C1 CALLDEVAD DD ?
    1771                             C   
    1772                             C  ; Same as above for I/O calls 
    1773                             C   
    1774                             C          PUBLIC  IOCall 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-74
Initialized data and data used at DOS initialization        

    1775 0144  ??                    C  IOCALL  SRHEAD  <> 
    1776 0145  ??                    C  
    1777 0146  ??                    C  
    1778 0147  ????                  C  
    1779 0149  0008[                 C  
    1780            ??               C  
    1781                         ]   C  
    1782                             C  
    1783 0151                        C  IOFLSH  LABEL   WORD 
    1784                             C          PUBLIC  IORCHR 
    1785 0151                        C  IORCHR  LABEL   BYTE 
    1786                             C          I_AM    IOMED,BYTE 
    1787 0151  ??                    C1 IOMED DB ?
    1788                             C          I_AM    IOXAD,DWORD 
    1789 0152  ????????              C1 IOXAD DD ?
    1790                             C          I_AM    IOSCNT,WORD 
    1791 0156  ????                  C1 IOSCNT DW ?
    1792                             C          I_AM    IOSSEC,WORD 
    1793 0158  ????                  C1 IOSSEC DW ?
    1794                             C   
    1795                             C  ; Call struct for DSKSTATCHK 
    1796                             C          PUBLIC  DSKSTCALL 
    1797 015A  0E                    C  DSKSTCALL       DB      DRDNDHL 
    1798 015B  00                    C                  DB      0 
    1799                             C          PUBLIC  DSKSTCOM 
    1800 015C  05                    C  DSKSTCOM        DB      DEVRDND 
    1801                             C          I_AM    DSKSTST,WORD 
    1802 015D  ????                  C1 DSKSTST DW ?
    1803 015F  0008[                 C                  DB      8 DUP (0) 
    1804            00               C  
    1805                         ]   C  
    1806                             C  
    1807                             C          I_AM    DSKCHRET,BYTE 
    1808 0167  ??                    C1 DSKCHRET DB ?
    1809                             C                  short_addr  DEVIOBUF 
    1810 0168  0109 R                C1  DW OFFSET DOSGROUP:DEVIOBUF
    1811 016A  ????                  C                  DW      ?              
					 ; DOS segment set at Init 
    1812                             C          PUBLIC  DSKSTCNT 
    1813 016C  0001                  C  DSKSTCNT        DW      1 
    1814 016E  0000                  C                  DW      0 
    1815                             C   
    1816                             C  ; Days in year 
    1817                             C          i_am    YRTAB,8 
    1818 0170  0008[                 C1 YRTAB DB 8 DUP (?)
    1819 0170                        C          ORG     $-CONSTRT-8 
    1820 0170  C8 A6                 C          DB      200,166                
					 ; Leap year 
    1821 0172  C8 A5                 C          DB      200,165 
    1822 0174  C8 A5                 C          DB      200,165 
    1823 0176  C8 A5                 C          DB      200,165 
    1824                             C   
    1825                             C  ; Days of each month 
    1826                             C          i_am    MONTAB,12 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-75
Initialized data and data used at DOS initialization        

    1827 0178  000C[                 C1 MONTAB DB 12 DUP (?)
    1828 0178                        C          ORG     $-CONSTRT-12 
    1829 0178  1F                    C          DB      31                     
					 ; January 
    1830 0179  1C                    C          DB      28                     
					 ; February--reset each  
    1831                             C  					; time year changes 
    1832 017A  1F                    C          DB      31                     
					 ; March 
    1833 017B  1E                    C          DB      30                     
					 ; April 
    1834 017C  1F                    C          DB      31                     
					 ; May 
    1835 017D  1E                    C          DB      30                     
					 ; June 
    1836 017E  1F                    C          DB      31                     
					 ; July 
    1837 017F  1F                    C          DB      31                     
					 ; August 
    1838 0180  1E                    C          DB      30                     
					 ; September 
    1839 0181  1F                    C          DB      31                     
					 ; October 
    1840 0182  1E                    C          DB      30                     
					 ; November 
    1841 0183  1F                    C          DB      31                     
					 ; December 
    1842                             C   
    1843                             C          IF      NOT IBM 
    1844                             C          PUBLIC  OEM_HANDLER 
    1845 0184  FF FF FF FF           C  OEM_HANDLER     DD      -1 
    1846                             C          ENDIF 
    1847                             C   
    1848                             C  ;WARNING For HIGHMEM version, these two
					 vars must be at the end of the 
    1849                             C  ; Constants segment to prevent them get
					ting overwritten. 
    1850                             C          I_AM    CurrentPDB,WORD 
    1851 0188  ????                  C1 CurrentPDB DW ?
    1852                             C          i_am    CreatePDB,BYTE         
					 ; flag for creating a process 
    1853 018A  ??                    C1 CreatePDB DB ?
    1854                             C   
    1855                             C          PUBLIC  LEAVEADDR 
    1856 018B                        C  LEAVEADDR LABEL WORD 
    1857                             C          short_addr    LEAVE 
    1858 018B  0000 E                C1  DW OFFSET DOSGROUP:LEAVE
    1859                             C   
    1860 018D                        C  CONSTANTS       ENDS 
    1861                             C   
    1862                             C  SUBTTL Uninitialized data overlayed by 
					initialization code 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-76
Uninitialized data overlayed by initialization code         

    1863                             C  PAGE 
    1864 0000                        C  DATA    SEGMENT WORD PUBLIC 'DATA' 
    1865                             C  ; Init code overlaps with data area bel
					ow 
    1866                             C   
    1867 0000                        C          ORG     0 
    1868                             C          i_am    INBUF,128 
    1869 0000  0080[                 C1 INBUF DB 128 DUP (?)
    1870                             C          I_AM    CONBUF,131             
					 ; The rest of INBUF and console buffer
					 
    1871 0080  0083[                 C1 CONBUF DB 131 DUP (?)
    1872                             C          i_am    TIMEBUF,6 
    1873 0103  0006[                 C1 TIMEBUF DB 6 DUP (?)
    1874                             C          I_AM    DEVIOBUF,2             
					 ; Buffer for I/O under file assignment
					 
    1875 0109  0002[                 C1 DEVIOBUF DB 2 DUP (?)
    1876                             C          I_AM    EXITHOLD,DWORD 
    1877 010B  ????????              C1 EXITHOLD DD ?
    1878                             C   
    1879                             C          PUBLIC  DevFCB 
    1880 010F                        C  DEVFCB  LABEL   BYTE                ; U
					ses NAME1, NAME2, NAME3 combined 
    1881                             C  ; WARNING..  do not alter size or relat
					ive location of the following 4 items 
    1882                             C  ; without first examining FCB_RENAME 
    1883                             C          I_AM    NAME1,12               
					 ; File name buffer 
    1884 010F  000C[                 C1 NAME1 DB 12 DUP (?)
    1885                             C          I_AM    ATTRIB,BYTE 
    1886 011B  ??                    C1 ATTRIB DB ?
    1887                             C          I_AM    NAME2,13 
    1888 011C  000D[                 C1 NAME2 DB 13 DUP (?)
    1889                             C          I_AM    NAME3,14 
    1890 0129  000E[                 C1 NAME3 DB 14 DUP (?)
    1891                             C   
    1892                             C          I_AM    EXTFCB,BYTE 
    1893 0137  ??                    C1 EXTFCB DB ?
    1894                             C   
    1895                             C  ; WARNING - the following two items are
					 accessed as a word 
    1896                             C          I_AM    CREATING,BYTE 
    1897 0138  ??                    C1 CREATING DB ?
    1898                             C          I_AM    DELALL,BYTE 
    1899 0139  ??                    C1 DELALL DB ?
    1900                             C   
    1901                             C          I_AM    FoundDel,BYTE 
    1902 013A  ??                    C1 FoundDel DB ?
    1903                             C   
    1904                             C          I_AM    user_SP,WORD 
    1905 013B  ????                  C1 user_SP DW ?
    1906                             C          I_AM    user_SS,WORD 
    1907 013D  ????                  C1 user_SS DW ?
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-77
Uninitialized data overlayed by initialization code         

    1908                             C          I_AM    CONTSTK,WORD 
    1909 013F  ????                  C1 CONTSTK DW ?
    1910                             C          I_AM    SECCLUSPOS,BYTE        
					 ; Position of first sector  
    1911 0141  ??                    C1 SECCLUSPOS DB ?
    1912                             C  					; within cluster 
    1913                             C          I_AM    DSKERR,BYTE 
    1914 0142  ??                    C1 DSKERR DB ?
    1915                             C          I_AM    TRANS,BYTE 
    1916 0143  ??                    C1 TRANS DB ?
    1917                             C          I_AM    READOP,BYTE 
    1918 0144  ??                    C1 READOP DB ?
    1919                             C          I_AM    THISDRV,BYTE 
    1920 0145  ??                    C1 THISDRV DB ?
    1921                             C          I_AM    THISDPB,DWORD 
    1922 0146  ????????              C1 THISDPB DD ?
    1923                             C          I_AM    CLUSFAC,BYTE 
    1924 014A  ??                    C1 CLUSFAC DB ?
    1925                             C   
    1926                             C  ; WARNING - the following two items are
					 accessed as a word 
    1927                             C          I_AM    DRIVESPEC,BYTE 
    1928 014B  ??                    C1 DRIVESPEC DB ?
    1929                             C          I_AM    ROOTSTART,BYTE 
    1930 014C  ??                    C1 ROOTSTART DB ?
    1931                             C   
    1932                             C          I_AM    CLUSSPLIT,BYTE 
    1933 014D  ??                    C1 CLUSSPLIT DB ?
    1934                             C          i_am    INSMODE,BYTE 
    1935 014E  ??                    C1 INSMODE DB ?
    1936                             C          I_AM    CLUSSAVE,WORD 
    1937 014F  ????                  C1 CLUSSAVE DW ?
    1938                             C          I_AM    CLUSSEC,WORD 
    1939 0151  ????                  C1 CLUSSEC DW ?
    1940                             C          I_AM    PREREAD,WORD           
					 ; 0 means preread; 1 means optional 
    1941 0153  ????                  C1 PREREAD DW ?
    1942                             C          I_AM    FATBYT,WORD 
    1943 0155  ????                  C1 FATBYT DW ?
    1944                             C          I_AM    DEVPT,DWORD 
    1945 0157  ????????              C1 DEVPT DD ?
    1946                             C          I_AM    THISFCB,DWORD          
					 ; Address of user FCB 
    1947 015B  ????????              C1 THISFCB DD ?
    1948                             C   
    1949                             C          I_AM    NEXTADD,WORD 
    1950 015F  ????                  C1 NEXTADD DW ?
    1951                             C          I_AM    RECPOS,4 
    1952 0161  0004[                 C1 RECPOS DB 4 DUP (?)
    1953                             C          I_AM    RECCNT,WORD 
    1954 0165  ????                  C1 RECCNT DW ?
    1955                             C          I_AM    LASTPOS,WORD 
    1956 0167  ????                  C1 LASTPOS DW ?
    1957                             C          I_AM    CLUSNUM,WORD 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-78
Uninitialized data overlayed by initialization code         

    1958 0169  ????                  C1 CLUSNUM DW ?
    1959                             C          I_AM    DIRSEC,WORD 
    1960 016B  ????                  C1 DIRSEC DW ?
    1961                             C          I_AM    DIRSTART,WORD 
    1962 016D  ????                  C1 DIRSTART DW ?
    1963                             C          I_AM    SECPOS,WORD            
					 ; Position of first sector accessed 
    1964 016F  ????                  C1 SECPOS DW ?
    1965                             C          I_AM    VALSEC,WORD            
					 ; Number of valid (previously written)
					 
    1966 0171  ????                  C1 VALSEC DW ?
    1967                             C  					; sectors 
    1968                             C          I_AM    BYTSECPOS,WORD         
					 ; Position of first byte within sector
					 
    1969 0173  ????                  C1 BYTSECPOS DW ?
    1970                             C          I_AM    BYTPOS,4               
					 ; Byte position in file of access 
    1971 0175  0004[                 C1 BYTPOS DB 4 DUP (?)
    1972                             C          I_AM    BYTCNT1,WORD           
					 ; No. of bytes in first sector 
    1973 0179  ????                  C1 BYTCNT1 DW ?
    1974                             C          I_AM    BYTCNT2,WORD           
					 ; No. of bytes in last sector 
    1975 017B  ????                  C1 BYTCNT2 DW ?
    1976                             C          I_AM    SECCNT,WORD            
					 ; No. of whole sectors 
    1977 017D  ????                  C1 SECCNT DW ?
    1978                             C          I_AM    ENTFREE,WORD 
    1979 017F  ????                  C1 ENTFREE DW ?
    1980                             C          I_AM    ENTLAST,WORD 
    1981 0181  ????                  C1 ENTLAST DW ?
    1982                             C          I_AM    NXTCLUSNUM,WORD 
    1983 0183  ????                  C1 NXTCLUSNUM DW ?
    1984                             C          I_AM    GROWCNT,DWORD 
    1985 0185  ????????              C1 GROWCNT DD ?
    1986                             C          I_AM    CURBUF,DWORD 
    1987 0189  ????????              C1 CURBUF DD ?
    1988                             C          I_AM    VOLID,BYTE 
    1989 018D  ??                    C1 VOLID DB ?
    1990                             C          I_AM    NULLDEVPT,DWORD 
    1991 018E  ????????              C1 NULLDEVPT DD ?
    1992                             C          I_AM    CINSAV,DWORD 
    1993 0192  ????????              C1 CINSAV DD ?
    1994                             C          I_AM    CINDSAV,BYTE 
    1995 0196  ??                    C1 CINDSAV DB ?
    1996                             C          I_AM    COUTDSAV,BYTE 
    1997 0197  ??                    C1 COUTDSAV DB ?
    1998                             C          I_AM    COUTSAV,DWORD 
    1999 0198  ????????              C1 COUTSAV DD ?
    2000                             C          PUBLIC  SaveBX 
    2001 019C  ????                  C  SaveBX  DW      ? 
    2002                             C          PUBLIC  SaveDS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-79
Uninitialized data overlayed by initialization code         

    2003 019E  ????                  C  SaveDS  DW      ? 
    2004                             C          I_AM    ConC_spsave,WORD 
    2005 01A0  ????                  C1 ConC_spsave DW ?
    2006                             C   
    2007                             C          I_AM    exit_code,WORD         
					     ; exit code of last proc. 
    2008 01A2  ????                  C1 exit_code DW ?
    2009                             C          I_am    exit_type,BYTE         
					     ; type of exit... 
    2010 01A4  ??                    C1 exit_type DB ?
    2011                             C   
    2012                             C          ENDIF 
    2013                             C   
    2014                             C  ; make those pushes fast!!! 
    2015 01A5  90                    C  EVEN 
    2016 01A6  00A0[                 C          DB      0A0H DUP (?) 
    2017            ??               C  
    2018                         ]   C  
    2019                             C  
    2020                             C          I_am    AuxStack,0A0h 
    2021 0246  00A0[                 C1 AuxStack DB 0A0h DUP (?)
    2022                             C          I_AM    DSKSTACK,0A0h        ; 
					Stack space 
    2023 02E6  00A0[                 C1 DSKSTACK DB 0A0h DUP (?)
    2024                             C          PUBLIC  IOSTACK 
    2025 0386                        C  IOSTACK LABEL   BYTE 
    2026                             C   
    2027                             C          PUBLIC  NSS 
    2028 0386  ????                  C  NSS         DW      ? 
    2029                             C          PUBLIC  NSP 
    2030 0388  ????                  C  NSP         DW      ? 
    2031                             C   
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-80
Uninitialized data overlayed by initialization code         

    2032                             C  PAGE 
    2033                             C          INCLUDE MSINIT.ASM 
    2034                             C  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZA
					TION CODE 
    2035                             C   
    2036 0000                        C          ORG     0                      
					 ; reset to beginning of data segment 
    2037                             C  ; Init code below overlaps with data ar
					ea 
    2038                             C   
    2039 0000  0110[                 C  INITBLOCK DB    110H DUP(0)     ; Allow
					 for segment round up 
    2040            00               C  
    2041                         ]   C  
    2042                             C  
    2043                             C   
    2044 0110  ????                  C  INITSP  DW      ? 
    2045 0112  ????                  C  INITSS  DW      ? 
    2046 0114  ????                  C  BUFFSTRT DW     ? 
    2047                             C   
    2048                             C  ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSG
					ROUP,SS:NOTHING 
    2049                             C   
    2050                             C          EXTRN   QUIT:NEAR,IRET:NEAR,ABS
					DRD:FAR,ABSDWRT:FAR 
    2051                             C          EXTRN   COMMAND:NEAR,CALL_ENTRY
					:NEAR 
    2052                             C          IF      NOT IBM 
    2053                             C          EXTRN   HEADER:BYTE 
    2054                             C          ENDIF 
    2055                             C   
    2056 0116                        C  MOVDPB: 
    2057                             C  ; This section of code is safe from bei
					ng overwritten by block move 
    2058 0116  2E: 8B 26 0110 R      C          MOV     SP,CS:[INITSP] 
    2059 011B  2E: 8E 16 0112 R      C          MOV     SS,CS:[INITSS] 
    2060 0120  F3/ A4                C          REP     MOVS    BYTE PTR [DI],[
					SI] 
    2061 0122  FC                    C          CLD 
    2062 0123  26: 89 16 00DE R      C          MOV     WORD PTR ES:[DMAADD+2],
					DX 
    2063 0128  8B 36 00ED R          C          MOV     SI,WORD PTR [DPBHEAD]  
					 ; Address of first DPB 
    2064 012C  26: 8C 06 00EF R      C          MOV     WORD PTR ES:[DPBHEAD+2]
					,ES 
    2065 0131  26: 8C 06 00F3 R      C          MOV     WORD PTR ES:[sft_addr+2
					],ES 
    2066 0136  8A 0E 00FD R          C          MOV     CL,[NUMIO]      ; Numbe
					r of DPBs 
    2067 013A  32 ED                 C          XOR     CH,CH 
    2068 013C                        C  SETFINDPB: 
    2069 013C  26: 8C 44 1A          C          MOV     WORD PTR ES:[SI.dpb_nex
					t_dpb+2],ES 
    2070 0140  26: C6 44 17 FF       C          MOV     ES:[SI.dpb_first_access
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-81
Uninitialized data overlayed by initialization code         

					],-1      ; Never accessed before 
    2071 0145  83 C6 5E              C          ADD     SI,DPBSIZ       ; Point
					 to next DPB 
    2072 0148  E2 F2                 C          LOOP    SETFINDPB 
    2073 014A  83 EE 5E              C          SUB     SI,DPBSIZ 
    2074 014D  26: C7 44 1A FFFF     C          MOV     WORD PTR ES:[SI.dpb_nex
					t_dpb+2],-1 
    2075 0153  8B 3E 0114 R          C          MOV     DI,[BUFFSTRT]          
					         ; Set up one default buffer 
    2076 0157  26: 8C 06 0102 R      C          MOV     WORD PTR ES:[BUFFHEAD+2
					],ES 
    2077 015C  26: 89 3E 0100 R      C          MOV     WORD PTR ES:[BUFFHEAD],
					DI 
    2078 0161  26: C7 45 04 00FF     C          MOV     WORD PTR ES:[DI.BUFDRV]
					,00FFH 
    2079 0167  26: C6 45 06 00       C          MOV     ES:[DI.BUFPRI],FREEPRI 
    2080 016C  26: C7 05 FFFF        C          MOV     WORD PTR ES:[DI.NEXTBUF
					],-1 
    2081 0171  26: C7 45 02 FFFF     C          MOV     WORD PTR ES:[DI.NEXTBUF
					+2],-1 
    2082 0177  06                    C          PUSH    ES 
    2083 0178  42                    C          INC     DX                     
					     ; Leave enough room for the ARENA 
    2084 0179  C6 06 018A R FF       C          MOV     BYTE PTR [CreatePDB],0F
					Fh   ; create jfns and set CurrentPDB 
    2085                             C          invoke  $CREATE_PROCESS_DATA_BL
					OCK     ; Set up segment 
    2086 017E  E8 0000 E             C1  CALL $CREATE_PROCESS_DATA_BLOCK
    2087                             C  ASSUME  DS:NOTHING,ES:NOTHING 
    2088 0181  07                    C          POP     ES 
    2089                             C  ASSUME  ES:DOSGROUP 
    2090                             C   
    2091                             C  ; 
    2092                             C  ; set up memory arena 
    2093                             C  ;SPECIAL NOTE FOR HIGHMEM VERSION 
    2094                             C  ; At this point a process header has be
					en built where the start of the  
    2095                             C  ; CONSTANTS segment as refed by CS is. 
					From this point until the return  
    2096                             C  ; below be careful about references off
					 of CS. 
    2097                             C  ; 
    2098 0182  50                    C          PUSH    AX 
    2099 0183  26: A1 0188 R         C          MOV     AX,[CurrentPDB] 
    2100 0187  26: A3 0188 R         C          MOV     ES:[CurrentPDB],AX     
					    ; Put it in the REAL location 
    2101 018B  26: C6 06 018A R 00   C          MOV     BYTE PTR ES:[CreatePDB]
					,0h ; reset flag in REAL location 
    2102 0191  48                    C          DEC     AX 
    2103 0192  26: A3 00EB R         C          MOV     ES:[arena_head],AX 
    2104 0196  1E                    C          PUSH    DS 
    2105 0197  8E D8                 C          MOV     DS,AX 
    2106 0199  C6 06 0000 5A         C          MOV     DS:[arena_signature],ar
					ena_signature_end 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-82
Uninitialized data overlayed by initialization code         

    2107 019E  C7 06 0001 0000       C          MOV     DS:[arena_owner],arena_
					owner_system 
    2108 01A4  26: 2B 06 00E0 R      C          SUB     AX,ES:[ENDMEM] 
    2109 01A9  F7 D8                 C          NEG     AX 
    2110 01AB  48                    C          DEC     AX 
    2111 01AC  A3 0003               C          MOV     DS:[arena_size],AX 
    2112 01AF  1F                    C          POP     DS 
    2113 01B0  58                    C          POP     AX 
    2114                             C   
    2115 01B1  BF 000A R             C          MOV     DI,OFFSET DOSGROUP:sfta
					bl + sft_table   ; Point to sft 0 
    2116 01B4  B0 03                 C          MOV     AL,3 
    2117 01B6  AA                    C          STOSB           ; Adjust Refcou
					nt 
    2118 01B7  BF 00ED R             C          MOV     DI,OFFSET DOSGROUP:SYSI
					NITVAR 
    2119                             C   
    2120 01BA                        C  XXX     PROC FAR 
    2121 01BA  CB                    C          RET 
    2122                             C  XXX     ENDP 
    2123 01BB                        C  DATA    ENDS 
    2124                             C   
    2125                             C  ; the next segment defines a new class 
					that MUST appear last in the link map. 
    2126                             C  ; This defines several important locati
					ons for the initialization process that
					 
    2127                             C  ; must be the first available locations
					 of free memory. 
    2128                             C   
    2129 0000                        C  LAST    SEGMENT BYTE PUBLIC 'LAST' 
    2130                             C          PUBLIC  SYSBUF 
    2131                             C          PUBLIC  MEMSTRT 
    2132                             C   
    2133 0000                        C  SYSBUF  LABEL   WORD 
    2134                             C  ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHI
					NG,SS:NOTHING 
    2135                             C   
    2136 0000                        C  DOSINIT: 
    2137 0000  FA                    C          CLI 
    2138 0001  FC                    C          CLD 
    2139 0002  2E: 89 16 00E0 R      C          MOV     [ENDMEM],DX 
    2140 0007  2E: 89 26 0110 R      C          MOV     [INITSP],SP 
    2141 000C  2E: 8C 16 0112 R      C          MOV     [INITSS],SS 
    2142 0011  BC 02B5 R             C          MOV     SP,OFFSET DOSGROUP:INIT
					STACK 
    2143 0014  8C C8                 C          MOV     AX,CS 
    2144 0016  8E D0                 C          MOV     SS,AX 
    2145                             C  ASSUME  SS:DOSGROUP 
    2146 0018  36: 8C 1E 0106 R      C          MOV     WORD PTR [DEVHEAD+2],DS
					 
    2147 001D  36: 89 36 0104 R      C          MOV     WORD PTR [DEVHEAD],SI  
					 ; DS:SI Points to CONSOLE Device 
    2148 0022  E8 020D R             C          CALL    CHARINIT 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-83
Uninitialized data overlayed by initialization code         

    2149 0025  56                    C          PUSH    SI 
    2150 0026  83 C6 0A              C          ADD     SI,SDEVNAME            
					 ; Point to name 
    2151 0029  0E                    C          PUSH    CS 
    2152 002A  07                    C          POP     ES 
    2153                             C  ASSUME  ES:DOSGROUP 
    2154 002B  BF 000A R             C          MOV     DI,OFFSET DOSGROUP:sfta
					bl + sft_table   ; Point to sft 0 
    2155 002E  B0 03                 C          MOV     AL,3 
    2156 0030  AA                    C          STOSB           ; Refcount 
    2157 0031  FE C8                 C          DEC     AL 
    2158 0033  AA                    C          STOSB           ; Access rd/wr 
    2159 0034  32 C0                 C          XOR     AL,AL 
    2160 0036  AA                    C          STOSB           ; Drive byte 
    2161 0037  AA                    C          STOSB           ; attribute 
    2162 0038  B9 0004               C          MOV     CX,4 
    2163 003B  F3/ A5                C          REP     MOVSW   ; Name 
    2164 003D  B1 03                 C          MOV     CL,3 
    2165 003F  B0 20                 C          MOV     AL," " 
    2166 0041  F3/ AA                C          REP     STOSB   ; Extension 
    2167 0043  83 C7 0C              C          ADD     DI,12   ; Skip 
    2168 0046  B0 C3                 C          MOV     AL,0C0H OR ISCIN OR ISC
					OUT 
    2169 0048  AA                    C          STOSB 
    2170 0049  5E                    C          POP     SI 
    2171 004A  8B C6                 C          MOV     AX,SI 
    2172 004C  AB                    C          STOSW                   ; Devic
					e pointer in FIRCLUS 
    2173 004D  8C D8                 C          MOV     AX,DS 
    2174 004F  AB                    C          STOSW 
    2175 0050  80 4C 04 03           C          OR      BYTE PTR [SI.SDEVATT],I
					SCIN OR ISCOUT 
    2176 0054  36: 89 36 00F9 R      C          MOV     WORD PTR [BCON],SI 
    2177 0059  36: 8C 1E 00FB R      C          MOV     WORD PTR [BCON+2],DS 
    2178 005E                        C  CHAR_INIT_LOOP: 
    2179 005E  C5 34                 C          LDS     SI,DWORD PTR [SI]      
					         ; AUX device 
    2180 0060  E8 020D R             C          CALL    CHARINIT 
    2181 0063  F6 44 04 08           C          TEST    BYTE PTR [SI.SDEVATT],I
					SCLOCK 
    2182 0067  74 F5                 C          JZ      CHAR_INIT_LOOP 
    2183 0069  36: 89 36 00F5 R      C          MOV     WORD PTR [BCLOCK],SI 
    2184 006E  36: 8C 1E 00F7 R      C          MOV     WORD PTR [BCLOCK+2],DS 
    2185 0073  BD 02B7 R             C          MOV     BP,OFFSET DOSGROUP:MEMS
					TRT      ; ES:BP points to DPB 
    2186 0076                        C  PERDRV: 
    2187 0076  C5 34                 C          LDS     SI,DWORD PTR [SI]      
					         ; Next device 
    2188 0078  83 FE FF              C          CMP     SI,-1 
    2189 007B  74 68                 C          JZ      CONTINIT 
    2190 007D  E8 020D R             C          CALL    CHARINIT 
    2191 0080  F7 44 04 8000         C          TEST    [SI.SDEVATT],DEVTYP 
    2192 0085  75 EF                 C          JNZ     PERDRV                 
					         ; Skip any other character dev
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-84
Uninitialized data overlayed by initialization code         

					s 
    2193 0087  36: 8A 0E 0137 R      C          MOV     CL,[CALLUNIT] 
    2194 008C  32 ED                 C          XOR     CH,CH 
    2195 008E  88 4C 0A              C          MOV     [SI.SDEVNAME],CL       
					         ; Number of units in name fiel
					d 
    2196 0091  36: 8A 16 00FD R      C          MOV     DL,[NUMIO] 
    2197 0096  32 F6                 C          XOR     DH,DH 
    2198 0098  36: 00 0E 00FD R      C          ADD     [NUMIO],CL 
    2199 009D  1E                    C          PUSH    DS 
    2200 009E  56                    C          PUSH    SI 
    2201 009F  36: C5 1E 013C R      C          LDS     BX,[CALLBPB] 
    2202 00A4                        C  PERUNIT: 
    2203 00A4  8B 37                 C          MOV     SI,[BX]                
					 ; DS:SI Points to BPB 
    2204 00A6  43                    C          INC     BX 
    2205 00A7  43                    C          INC     BX                     
					 ; On to next BPB 
    2206 00A8  26: 88 56 00          C          MOV     ES:[BP.dpb_drive],DL 
    2207 00AC  26: 88 76 01          C          MOV     ES:[BP.dpb_UNIT],DH 
    2208 00B0  53                    C          PUSH    BX 
    2209 00B1  51                    C          PUSH    CX 
    2210 00B2  52                    C          PUSH    DX 
    2211                             C          invoke  $SETDPB 
    2212 00B3  E8 0000 E             C1  CALL $SETDPB
    2213 00B6  26: 8B 46 02          C          MOV     AX,ES:[BP.dpb_sector_si
					ze] 
    2214 00BA  36: 3B 06 00FE R      C          CMP     AX,[MAXSEC] 
    2215 00BF  76 04                 C          JBE     NOTMAX 
    2216 00C1  36: A3 00FE R         C          MOV     [MAXSEC],AX 
    2217 00C5                        C  NOTMAX: 
    2218 00C5  5A                    C          POP     DX 
    2219 00C6  59                    C          POP     CX 
    2220 00C7  5B                    C          POP     BX 
    2221 00C8  8C D8                 C          MOV     AX,DS                  
					 ; Save DS 
    2222 00CA  5E                    C          POP     SI 
    2223 00CB  1F                    C          POP     DS 
    2224 00CC  26: 89 76 12          C          MOV     WORD PTR ES:[BP.dpb_dri
					ver_addr],SI 
    2225 00D0  26: 8C 5E 14          C          MOV     WORD PTR ES:[BP.dpb_dri
					ver_addr+2],DS 
    2226 00D4  1E                    C          PUSH    DS 
    2227 00D5  56                    C          PUSH    SI 
    2228 00D6  FE C6                 C          INC     DH 
    2229 00D8  FE C2                 C          INC     DL 
    2230 00DA  8E D8                 C          MOV     DS,AX 
    2231 00DC  83 C5 5E              C          ADD     BP,DPBSIZ 
    2232 00DF  E2 C3                 C          LOOP    PERUNIT 
    2233 00E1  5E                    C          POP     SI 
    2234 00E2  1F                    C          POP     DS 
    2235 00E3  EB 91                 C          JMP     PERDRV 
    2236                             C   
    2237 00E5                        C  CONTINIT: 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-85
Uninitialized data overlayed by initialization code         

    2238 00E5  0E                    C          PUSH    CS 
    2239 00E6  1F                    C          POP     DS 
    2240                             C  ASSUME  DS:DOSGROUP 
    2241                             C  ; Calculate true address of buffers, FA
					Ts, free space 
    2242 00E7  8B FD                 C          MOV     DI,BP           ; First
					 byte after current DPBs 
    2243 00E9  8B 2E 00FE R          C          MOV     BP,[MAXSEC] 
    2244 00ED  B8 0000 R             C          MOV     AX,OFFSET DOSGROUP:SYSB
					UF 
    2245 00F0  A3 0114 R             C          MOV     [BUFFSTRT],AX 
    2246 00F3  03 C5                 C          ADD     AX,BP           ; One I
					/O buffer 
    2247 00F5  05 0010               C          ADD     AX,BUFINSIZ 
    2248 00F8  A3 00ED R             C          MOV     WORD PTR [DPBHEAD],AX  
					    ; True start of DPBs 
    2249 00FB  8B D0                 C          MOV     DX,AX 
    2250 00FD  81 EA 0000 R          C          SUB     DX,OFFSET DOSGROUP:SYSB
					UF 
    2251 0101  8B EA                 C          MOV     BP,DX 
    2252 0103  03 EF                 C          ADD     BP,DI           ; Alloc
					ate buffer space 
    2253 0105  81 ED 02B7            C          SUB     BP,ADJFAC       ; True 
					address of free memory 
    2254 0109  55                    C          PUSH    BP 
    2255 010A  BF 02B7 R             C          MOV     DI,OFFSET DOSGROUP:MEMS
					TRT    ; Current start of DPBs 
    2256 010D  83 C7 18              C          ADD     DI,dpb_next_dpb      ; 
					Point at dpb_next_dpb field 
    2257 0110  8A 0E 00FD R          C          MOV     CL,[NUMIO] 
    2258 0114  32 ED                 C          XOR     CH,CH 
    2259 0116                        C  TRUEDPBAD: 
    2260 0116  05 005E               C          ADD     AX,DPBSIZ       ; Compu
					te address of next DPB 
    2261 0119  AB                    C          STOSW                   ; Set t
					he link to next DPB 
    2262 011A  83 C7 5C              C          ADD     DI,DPBSIZ-2     ; Point
					 at next address 
    2263 011D  E2 F7                 C          LOOP    TRUEDPBAD 
    2264 011F  83 EF 5E              C          SUB     DI,DPBSIZ       ; Point
					 at last dpb_next_dpb field 
    2265 0122  B8 FFFF               C          MOV     AX,-1 
    2266 0125  AB                    C          STOSW                   ; End o
					f list 
    2267 0126  83 C5 0F              C          ADD     BP,15           ;True s
					tart of free space (round up to segment
					) 
    2268 0129  B1 04                 C          MOV     CL,4 
    2269 012B  D3 ED                 C          SHR     BP,CL           ; Numbe
					r of segments for DOS resources 
    2270 012D  8C CA                 C          MOV     DX,CS 
    2271 012F  03 D5                 C          ADD     DX,BP           ; First
					 free segment 
    2272 0131  BB 000F               C          MOV     BX,0FH 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-86
Uninitialized data overlayed by initialization code         

    2273 0134  8B 0E 00E0 R          C          MOV     CX,[ENDMEM] 
    2274                             C   
    2275                             C          ENDIF 
    2276                             C   
    2277                             C          IF      NOT HIGHMEM 
    2278 0138  8C CD                 C          MOV     BP,CS 
    2279                             C          ENDIF 
    2280                             C   
    2281                             C  ; BP has segment of DOS (whether to loa
					d high or run in place) 
    2282                             C  ; DX has program segment (whether after
					 DOS or overlaying DOS) 
    2283                             C  ; CX has size of memory in paragraphs (
					reduced by DOS size if HIGHMEM) 
    2284 013A  89 0E 00E0 R          C          MOV     [ENDMEM],CX 
    2285 013E  8E C5                 C          MOV     ES,BP 
    2286                             C  ASSUME  ES:DOSGROUP 
    2287                             C   
    2288                             C          ENDIF 
    2289                             C   
    2290 0140  26: 8C 06 016A R      C          MOV     WORD PTR ES:[DSKCHRET+3
					],ES 
    2291 0145  33 C0                 C          XOR     AX,AX 
    2292 0147  8E D8                 C          MOV     DS,AX 
    2293 0149  8E C0                 C          MOV     ES,AX 
    2294                             C  ASSUME  DS:NOTHING,ES:NOTHING 
    2295 014B  BF 0082               C          MOV     DI,INTBASE+2 
    2296 014E  8B C5                 C          MOV     AX,BP 
    2297 0150  C6 06 00C0 EA         C          MOV     BYTE PTR DS:[ENTRYPOINT
					],mi_Long_JMP 
    2298 0155  C7 06 00C1 0000 E     C          MOV     WORD PTR DS:[ENTRYPOINT
					+1],OFFSET DOSGROUP:CALL_ENTRY 
    2299 015B  A3 00C3               C          MOV     WORD PTR DS:[ENTRYPOINT
					+3],AX 
    2300                             C          EXTRN   DIVOV:near 
    2301 015E  C7 06 0000 0000 E     C          MOV     WORD PTR DS:[0],OFFSET 
					DOSGROUP:DIVOV   ; Set default divide  
    2302                             C  							; trap address 
    2303 0164  A3 0002               C          MOV     DS:[2],AX 
    2304 0167  B9 0011               C          MOV     CX,17 
    2305 016A  F3/ AB                C          REP STOSW               ; Set 9
					 segments (skip 2 between each) 
    2306                             C   
    2307                             C          ENDIF 
    2308                             C   
    2309 016C  C7 06 0080 0000 E     C          MOV     WORD PTR DS:[addr_int_a
					bort],OFFSET DOSGROUP:QUIT 
    2310 0172  C7 06 0084 0000 E     C          MOV     WORD PTR DS:[addr_int_c
					ommand],OFFSET DOSGROUP:COMMAND 
    2311 0178  C7 06 0088 0100       C          MOV     WORD PTR DS:[addr_int_t
					erminate],100H 
    2312 017E  89 16 008A            C          MOV     WORD PTR DS:[addr_int_t
					erminate+2],DX 
    2313 0182  C7 06 008C 0000 E     C          MOV     WORD PTR DS:[addr_int_c
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-87
Uninitialized data overlayed by initialization code         

					trl_c],OFFSET DOSGROUP:IRET    
    2314                             C  							; Ctrl-C exit 
    2315 0188  C7 06 0090 0000 E     C          MOV     WORD PTR DS:[addr_int_f
					atal_abort],OFFSET DOSGROUP:IRET 
    2316                             C  							; Fatal error exit 
    2317 018E  C7 06 0094 0000 E     C          MOV     WORD PTR DS:[addr_int_d
					isk_read],OFFSET DOSGROUP:ABSDRD 
    2318                             C  							; INT 25 
    2319 0194  C7 06 0098 0000 E     C          MOV     WORD PTR DS:[addr_int_d
					isk_write],OFFSET DOSGROUP:ABSDWRT 
    2320                             C  							; INT 26 
    2321                             C          EXTRN   Stay_resident:NEAR 
    2322 019A  C7 06 009C 0000 E     C          MOV     WORD PTR DS:[addr_int_k
					eep_process],OFFSET DOSGROUP:Stay_resid
					ent 
    2323 01A0  C7 06 00A0 0000 E     C          MOV     WORD PTR DS:[addr_int_s
					pooler],OFFSET DOSGROUP:IRET  ; Spooler
					 
    2324                             C   
    2325                             C          IF      NOT ALTVECT 
    2326 01A6  B9 000C               C          MOV     CX,12 
    2327 01A9  33 C0                 C          XOR     AX,AX 
    2328 01AB  BF 00A8               C          MOV     DI,2AH*4 
    2329 01AE  F3/ AB                C          REP     STOSW           ;Zero i
					nterrupt locs for ints 2AH-2FH 
    2330                             C          ENDIF 
    2331                             C   
    2332 01B0  0E                    C          PUSH    CS 
    2333 01B1  1F                    C          POP     DS 
    2334 01B2  0E                    C          PUSH    CS 
    2335 01B3  07                    C          POP     ES 
    2336                             C  ASSUME  DS:DOSGROUP,ES:DOSGROUP 
    2337 01B4  B8 0000 R             C          MOV     AX,OFFSET DOSGROUP:INIT
					BLOCK 
    2338 01B7  05 000F               C          ADD     AX,0Fh                 
					 ; round to a paragraph 
    2339 01BA  B1 04                 C          MOV     CL,4 
    2340 01BC  D3 E8                 C          SHR     AX,CL 
    2341 01BE  8C DF                 C          MOV     DI,DS 
    2342 01C0  03 F8                 C          ADD     DI,AX 
    2343 01C2  47                    C          INC     DI 
    2344 01C3  89 3E 0188 R          C          MOV     [CurrentPDB],DI 
    2345 01C7  55                    C          PUSH    BP 
    2346 01C8  52                    C          PUSH    DX              ; Save 
					COMMAND address 
    2347 01C9  A1 00E0 R             C          MOV     AX,[ENDMEM] 
    2348 01CC  8B D7                 C          MOV     DX,DI 
    2349                             C   
    2350                             C          invoke    SETMEM          ; Bas
					ic Header 
    2351 01CE  E8 0000 E             C1  CALL SETMEM
    2352                             C  ASSUME  DS:NOTHING,ES:NOTHING 
    2353 01D1  0E                    C          PUSH    CS 
    2354 01D2  1F                    C          POP     DS 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-88
Uninitialized data overlayed by initialization code         

    2355                             C  ASSUME  DS:DOSGROUP 
    2356 01D3  BF 0018               C          MOV     DI,PDB_JFN_Table 
    2357 01D6  33 C0                 C          XOR     AX,AX 
    2358 01D8  AB                    C          STOSW 
    2359 01D9  AA                    C          STOSB                   ; 0,1 a
					nd 2 are CON device 
    2360 01DA  B0 FF                 C          MOV     AL,0FFH 
    2361 01DC  B9 0011               C          MOV     CX,FilPerProc - 3 
    2362 01DF  F3/ AA                C          REP     STOSB           ; Rest 
					are unused 
    2363 01E1  0E                    C          PUSH    CS 
    2364 01E2  07                    C          POP     ES 
    2365                             C  ASSUME  ES:DOSGROUP 
    2366 01E3  8C 1E 00F3 R          C          MOV     WORD PTR [sft_addr+2],D
					S     ; Must be set to print messages 
    2367                             C   
    2368                             C  ; After this points the char device fun
					ctions for CON will work for 
    2369                             C  ; printing messages 
    2370                             C   
    2371                             C          IF      NOT IBM 
    2372                             C          IF      NOT ALTVECT 
    2373 01E7  BE 0000 E             C          MOV     SI,OFFSET DOSGROUP:HEAD
					ER 
    2374                             C          invoke  OUTMES 
    2375 01EA  E8 0000 E             C1  CALL OUTMES
    2376 01ED  0E                    C          PUSH    CS                     
					 ; Outmes stomps on segments 
    2377 01EE  1F                    C          POP     DS 
    2378 01EF  0E                    C          PUSH    CS 
    2379 01F0  07                    C          POP     ES 
    2380                             C          ENDIF 
    2381                             C          ENDIF 
    2382                             C   
    2383                             C  ; Move the FATs into position 
    2384 01F1  5A                    C          POP     DX                     
					 ; Restore COMMAND address 
    2385 01F2  5D                    C          POP     BP 
    2386 01F3  59                    C          POP     CX                     
					 ; True address of free memory 
    2387 01F4  BE 02B7 R             C          MOV     SI,OFFSET DOSGROUP:MEMS
					TRT      ; Place to move DPBs from 
    2388 01F7  8B 3E 00ED R          C          MOV     DI,WORD PTR [DPBHEAD]  
					 ; Place to move DPBs to 
    2389 01FB  2B CF                 C          SUB     CX,DI                  
					 ; Total length of DPBs 
    2390 01FD  3B FE                 C          CMP     DI,SI 
    2391 01FF  76 07                 C          JBE     MOVJMP                 
					 ; Are we moving to higher or  
    2392                             C  					; lower memory? 
    2393 0201  49                    C          DEC     CX                     
					 ; Move backwards to higher memory 
    2394 0202  03 F9                 C          ADD     DI,CX 
    2395 0204  03 F1                 C          ADD     SI,CX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Page     1-89
Uninitialized data overlayed by initialization code         

    2396 0206  41                    C          INC     CX 
    2397 0207  FD                    C          STD 
    2398 0208                        C  MOVJMP: 
    2399 0208  8E C5                 C          MOV     ES,BP 
    2400                             C  ASSUME  ES:DOSGROUP 
    2401 020A  E9 0116 R             C          JMP     MOVDPB 
    2402                             C   
    2403 020D                        C  CHARINIT: 
    2404                             C  ASSUME  DS:NOTHING,ES:NOTHING 
    2405                             C  ; DS:SI Points to device header 
    2406 020D  36: C6 06 012A R 1A   C          MOV     [DEVCALL.REQLEN],DINITH
					L 
    2407 0213  36: C6 06 012B R 00   C          MOV     [DEVCALL.REQUNIT],0 
    2408 0219  36: C6 06 012C R 00   C          MOV     [DEVCALL.REQFUNC],DEVIN
					IT 
    2409 021F  36: C7 06 012D R 0000 C          MOV     [DEVCALL.REQSTAT],0 
    2410 0226  06                    C          PUSH    ES 
    2411 0227  53                    C          PUSH    BX 
    2412 0228  50                    C          PUSH    AX 
    2413 0229  BB 012A R             C          MOV     BX,OFFSET DOSGROUP:DEVC
					ALL 
    2414 022C  0E                    C          PUSH    CS 
    2415 022D  07                    C          POP     ES 
    2416                             C          invoke  DEVIOCALL2 
    2417 022E  E8 0000 E             C1  CALL DEVIOCALL2
    2418 0231  58                    C          POP     AX 
    2419 0232  5B                    C          POP     BX 
    2420 0233  07                    C          POP     ES 
    2421 0234  C3                    C          RET 
    2422                             C   
    2423 0235  0080[                 C          DB      80H DUP(?) 
    2424            ??               C  
    2425                         ]   C  
    2426                             C  
    2427 02B5                        C  INITSTACK LABEL BYTE 
    2428 02B5  ????                  C          DW      ? 
    2429                             C   
    2430 02B7                        C  MEMSTRT LABEL   WORD 
    2431 = 02B7                      C  ADJFAC  EQU     MEMSTRT-SYSBUF 
    2432                             C   
    2433                             C          do_ext 
    2434 02B7                        C  LAST    ENDS 
    2435                             C   
    2436                             C   
    2437                                 
    2438                                 
    2439                                        END 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DOSGROUP . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'CODE'
  CONSTANTS  . . . . . . . . . .  	018D	BYTE	PUBLIC	'CONST'
  DATA . . . . . . . . . . . . .  	038A	WORD	PUBLIC	'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-5
                                                             

  LAST . . . . . . . . . . . . .  	02B7	BYTE	PUBLIC	'LAST'
START  . . . . . . . . . . . . .  	0003	BYTE	PUBLIC	'START'

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ABSDRD . . . . . . . . . . . . .  	L FAR 	0000	DATA	External
ABSDWRT  . . . . . . . . . . . .  	L FAR 	0000	DATA	External
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ADJFAC . . . . . . . . . . . . .  	Number	02B7	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCMETHOD  . . . . . . . . . .  	L BYTE 	00EA	CONSTANTS	Global
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Alias	 FALSE		
ARENA_HEAD . . . . . . . . . . .  	L WORD 	00EB	CONSTANTS	Global
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTRIB . . . . . . . . . . . . .  	L BYTE 	011B	DATA	Global
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	
AUXSTACK . . . . . . . . . . . .  	L BYTE 	0246	DATA	Global	Length = 00A0

BCLOCK . . . . . . . . . . . . .  	L DWORD	00F5	CONSTANTS	Global
BCON . . . . . . . . . . . . . .  	L DWORD	00F9	CONSTANTS	Global
BESTARENA  . . . . . . . . . . .  	L WORD 	00E6	CONSTANTS	Global
BUFFHEAD . . . . . . . . . . . .  	L DWORD	0100	CONSTANTS	Global
BUFFSTRT . . . . . . . . . . . .  	L WORD 	0114	DATA
BUFINSIZ . . . . . . . . . . . .  	Number	0010	
BYTCNT1  . . . . . . . . . . . .  	L WORD 	0179	DATA	Global
BYTCNT2  . . . . . . . . . . . .  	L WORD 	017B	DATA	Global
BYTPOS . . . . . . . . . . . . .  	L BYTE 	0175	DATA	Global	Length = 0004
BYTSECPOS  . . . . . . . . . . .  	L WORD 	0173	DATA	Global
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-6
                                                             


CALLBPB  . . . . . . . . . . . .  	L DWORD	013C	CONSTANTS	Global
CALLBR . . . . . . . . . . . . .  	L DWORD	0138	CONSTANTS
CALLDEVAD  . . . . . . . . . . .  	L DWORD	0140	CONSTANTS	Global
CALLFLSH . . . . . . . . . . . .  	L WORD 	0137	CONSTANTS
CALLMED  . . . . . . . . . . . .  	L BYTE 	0137	CONSTANTS	Global
CALLRBYT . . . . . . . . . . . .  	L BYTE 	0138	CONSTANTS	Global
CALLSCNT . . . . . . . . . . . .  	L WORD 	013C	CONSTANTS	Global
CALLSSEC . . . . . . . . . . . .  	L WORD 	013E	CONSTANTS
CALLUNIT . . . . . . . . . . . .  	L BYTE 	0137	CONSTANTS
CALLXAD  . . . . . . . . . . . .  	L DWORD	0138	CONSTANTS	Global
CALL_ENTRY . . . . . . . . . . .  	L NEAR	0000	DATA	External
CANCEL . . . . . . . . . . . . .  	Number	0018	
CARPOS . . . . . . . . . . . . .  	L BYTE 	00D5	CONSTANTS	Global
CHARCO . . . . . . . . . . . . .  	L BYTE 	00DB	CONSTANTS	Global
CHARINIT . . . . . . . . . . . .  	L NEAR	020D	LAST
CHAR_INIT_LOOP . . . . . . . . .  	L NEAR	005E	LAST
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CINDSAV  . . . . . . . . . . . .  	L BYTE 	0196	DATA	Global
CINSAV . . . . . . . . . . . . .  	L DWORD	0192	DATA	Global
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CLUSFAC  . . . . . . . . . . . .  	L BYTE 	014A	DATA	Global
CLUSNUM  . . . . . . . . . . . .  	L WORD 	0169	DATA	Global
CLUSSAVE . . . . . . . . . . . .  	L WORD 	014F	DATA	Global
CLUSSEC  . . . . . . . . . . . .  	L WORD 	0151	DATA	Global
CLUSSPLIT  . . . . . . . . . . .  	L BYTE 	014D	DATA	Global
CNTCFLAG . . . . . . . . . . . .  	L BYTE 	0125	CONSTANTS	Global
COMMAND  . . . . . . . . . . . .  	L NEAR	0000	DATA	External
CONBUF . . . . . . . . . . . . .  	L BYTE 	0080	DATA	Global	Length = 0083
CONC_SPSAVE  . . . . . . . . . .  	L WORD 	01A0	DATA	Global
CONSTRT  . . . . . . . . . . . .  	NEAR 	0000	CONSTANTS
CONSWAP  . . . . . . . . . . . .  	L BYTE 	0123	CONSTANTS	Global
CONTINIT . . . . . . . . . . . .  	L NEAR	00E5	LAST
CONTPOS  . . . . . . . . . . . .  	L WORD 	00D9	CONSTANTS	Global
CONTSTK  . . . . . . . . . . . .  	L WORD 	013F	DATA	Global
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
COUTDSAV . . . . . . . . . . . .  	L BYTE 	0197	DATA	Global
COUTSAV  . . . . . . . . . . . .  	L DWORD	0198	DATA	Global
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATEPDB  . . . . . . . . . . .  	L BYTE 	018A	CONSTANTS	Global
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREATING . . . . . . . . . . . .  	L BYTE 	0138	DATA	Global
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-7
                                                             

CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURBUF . . . . . . . . . . . . .  	L DWORD	0189	DATA	Global
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURDRV . . . . . . . . . . . . .  	L BYTE 	011D	CONSTANTS	Global
CURRENTPDB . . . . . . . . . . .  	L WORD 	0188	CONSTANTS	Global
CURRENT_COUNTRY  . . . . . . . .  	V WORD 	0000	CONSTANTS	External
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DAY  . . . . . . . . . . . . . .  	L BYTE 	0116	CONSTANTS	Global
DAYCNT . . . . . . . . . . . . .  	L WORD 	011A	CONSTANTS	Global
DBPBHL . . . . . . . . . . . . .  	Number	0016	
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DELALL . . . . . . . . . . . . .  	L BYTE 	0139	DATA	Global
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVCALL  . . . . . . . . . . . .  	L 000D	012A	CONSTANTS	Global
DEVFCB . . . . . . . . . . . . .  	L BYTE 	010F	DATA	Global
DEVHEAD  . . . . . . . . . . . .  	L DWORD	0104	CONSTANTS
DEVICE_AVAILABILITY  . . . . . .  	L BYTE 	00E3	CONSTANTS	Global
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOBUF . . . . . . . . . . . .  	L BYTE 	0109	DATA	Global	Length = 0002
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
DEVOFL . . . . . . . . . . . . .  	Number	000B	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-8
                                                             

DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVPT  . . . . . . . . . . . . .  	L DWORD	0157	DATA	Global
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVSTRING  . . . . . . . . . . .  	L BYTE 	0001	CONSTANTS	Global
DEVSTRLEN  . . . . . . . . . . .  	L BYTE 	0000	CONSTANTS	Global
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DIDCTRLC . . . . . . . . . . . .  	L BYTE 	00D3	CONSTANTS	Global
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSEC . . . . . . . . . . . . .  	L WORD 	016B	DATA	Global
DIRSTART . . . . . . . . . . . .  	L WORD 	016D	DATA	Global
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DIVOV  . . . . . . . . . . . . .  	L NEAR	0000	LAST	External
DMAADD . . . . . . . . . . . . .  	L DWORD	00DC	CONSTANTS	Global
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DOSINIT  . . . . . . . . . . . .  	L NEAR	0000	LAST
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBHEAD  . . . . . . . . . . . .  	L DWORD	00ED	CONSTANTS	Global
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DRIVESPEC  . . . . . . . . . . .  	L BYTE 	014B	DATA	Global
DSKCHRET . . . . . . . . . . . .  	L BYTE 	0167	CONSTANTS	Global
DSKERR . . . . . . . . . . . . .  	L BYTE 	0142	DATA	Global
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSKSTACK . . . . . . . . . . . .  	L BYTE 	02E6	DATA	Global	Length = 00A0
DSKSTCALL  . . . . . . . . . . .  	L BYTE 	015A	CONSTANTS	Global
DSKSTCNT . . . . . . . . . . . .  	L WORD 	016C	CONSTANTS	Global
DSKSTCOM . . . . . . . . . . . .  	L BYTE 	015C	CONSTANTS	Global
DSKSTST  . . . . . . . . . . . .  	L WORD 	015D	CONSTANTS	Global
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ENDMEM . . . . . . . . . . . . .  	L WORD 	00E0	CONSTANTS
ENTFREE  . . . . . . . . . . . .  	L WORD 	017F	DATA	Global
ENTLAST  . . . . . . . . . . . .  	L WORD 	0181	DATA	Global
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENTRYPOINTSEG  . . . . . . . . .  	Number	000C	
ERRORMODE  . . . . . . . . . . .  	L BYTE 	0121	CONSTANTS	Global
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-9
                                                             

ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
ESCCH  . . . . . . . . . . . . .  	Number	001B	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXITHOLD . . . . . . . . . . . .  	L DWORD	010B	DATA	Global
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CODE  . . . . . . . . . . .  	L WORD 	01A2	DATA	Global
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	
EXIT_TYPE  . . . . . . . . . . .  	L BYTE 	01A4	DATA	Global
EXTFCB . . . . . . . . . . . . .  	L BYTE 	0137	DATA	Global

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATBYT . . . . . . . . . . . . .  	L WORD 	0155	DATA	Global
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-10
                                                             

FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FIRSTARENA . . . . . . . . . . .  	L WORD 	00E4	CONSTANTS	Global
FOUNDDEL . . . . . . . . . . . .  	L BYTE 	013A	DATA	Global
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GROWCNT  . . . . . . . . . . . .  	L DWORD	0185	DATA	Global

HEADER . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		

IBM  . . . . . . . . . . . . . .  	Alias	 FALSE		
IDLEINT  . . . . . . . . . . . .  	L BYTE 	0124	CONSTANTS	Global
INBUF  . . . . . . . . . . . . .  	L BYTE 	0000	DATA	Global	Length = 0080
INDOS  . . . . . . . . . . . . .  	L BYTE 	0120	CONSTANTS	Global
INITBLOCK  . . . . . . . . . . .  	L BYTE 	0000	DATA	Length = 0110
INITSP . . . . . . . . . . . . .  	L WORD 	0110	DATA
INITSS . . . . . . . . . . . . .  	L WORD 	0112	DATA
INITSTACK  . . . . . . . . . . .  	L BYTE 	02B5	LAST
INSMODE  . . . . . . . . . . . .  	L BYTE 	014E	DATA	Global
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNATIONAL_TABLE  . . . . . .  	V BYTE 	0000	CONSTANTS	External
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-11
                                                             

INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCALL . . . . . . . . . . . . .  	L 000D	0144	CONSTANTS	Global
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IOFLSH . . . . . . . . . . . . .  	L WORD 	0151	CONSTANTS
IOMED  . . . . . . . . . . . . .  	L BYTE 	0151	CONSTANTS	Global
IORCHR . . . . . . . . . . . . .  	L BYTE 	0151	CONSTANTS	Global
IOSCNT . . . . . . . . . . . . .  	L WORD 	0156	CONSTANTS	Global
IOSSEC . . . . . . . . . . . . .  	L WORD 	0158	CONSTANTS	Global
IOSTACK  . . . . . . . . . . . .  	L BYTE 	0386	DATA	Global
IOXAD  . . . . . . . . . . . . .  	L DWORD	0152	CONSTANTS	Global
IRET . . . . . . . . . . . . . .  	L NEAR	0000	DATA	External
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Number	0000	
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LASTARENA  . . . . . . . . . . .  	L WORD 	00E8	CONSTANTS	Global
LASTBUFFER . . . . . . . . . . .  	L DWORD	0126	CONSTANTS	Global
LASTENT  . . . . . . . . . . . .  	L WORD 	011E	CONSTANTS	Global
LASTPOS  . . . . . . . . . . . .  	L WORD 	0167	DATA	Global
LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LEAVEADDR  . . . . . . . . . . .  	L WORD 	018B	CONSTANTS	Global
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAXDIF . . . . . . . . . . . . .  	Number	0FFF	
MAXSEC . . . . . . . . . . . . .  	L WORD 	00FE	CONSTANTS
MEMSTRT  . . . . . . . . . . . .  	L WORD 	02B7	LAST	Global
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MONTAB . . . . . . . . . . . . .  	L BYTE 	0178	CONSTANTS	Global	Length = 000C
MONTH  . . . . . . . . . . . . .  	L BYTE 	0117	CONSTANTS	Global
MOVDPB . . . . . . . . . . . . .  	L NEAR	0116	DATA
MOVJMP . . . . . . . . . . . . .  	L NEAR	0208	LAST
MSVER  . . . . . . . . . . . . .  	Alias	 TRUE		

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-12
                                                             

NAME1  . . . . . . . . . . . . .  	L BYTE 	010F	DATA	Global	Length = 000C
NAME2  . . . . . . . . . . . . .  	L BYTE 	011C	DATA	Global	Length = 000D
NAME3  . . . . . . . . . . . . .  	L BYTE 	0129	DATA	Global	Length = 000E
NEXTADD  . . . . . . . . . . . .  	L WORD 	015F	DATA	Global
NOSETDIR . . . . . . . . . . . .  	L BYTE 	00D2	CONSTANTS	Global
NOTMAX . . . . . . . . . . . . .  	L NEAR	00C5	LAST
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NSP  . . . . . . . . . . . . . .  	L WORD 	0388	DATA	Global
NSS  . . . . . . . . . . . . . .  	L WORD 	0386	DATA	Global
NULDEV . . . . . . . . . . . . .  	L DWORD	0104	CONSTANTS	Global
NULLDEVPT  . . . . . . . . . . .  	L DWORD	018E	DATA	Global
NUMIO  . . . . . . . . . . . . .  	L BYTE 	00FD	CONSTANTS	Global
NXTCLUSNUM . . . . . . . . . . .  	L WORD 	0183	DATA	Global

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OEM_HANDLER  . . . . . . . . . .  	L DWORD	0184	CONSTANTS	Global
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PERDRV . . . . . . . . . . . . .  	L NEAR	0076	LAST
PERUNIT  . . . . . . . . . . . .  	L NEAR	00A4	LAST
PFLAG  . . . . . . . . . . . . .  	L BYTE 	00D7	CONSTANTS	Global
PREREAD  . . . . . . . . . . . .  	L WORD 	0153	DATA	Global

QUIT . . . . . . . . . . . . . .  	L NEAR	0000	DATA	External

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READOP . . . . . . . . . . . . .  	L BYTE 	0144	DATA	Global
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RECCNT . . . . . . . . . . . . .  	L WORD 	0165	DATA	Global
RECPOS . . . . . . . . . . . . .  	L BYTE 	0161	DATA	Global	Length = 0004
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-13
                                                             

RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
ROOTSTART  . . . . . . . . . . .  	L BYTE 	014C	DATA	Global
RPRI . . . . . . . . . . . . . .  	Number	0006	

SAVEBX . . . . . . . . . . . . .  	L WORD 	019C	DATA	Global
SAVEDS . . . . . . . . . . . . .  	L WORD 	019E	DATA	Global
SAVEXIT  . . . . . . . . . . . .  	Number	000A	
SECCLUSPOS . . . . . . . . . . .  	L BYTE 	0141	DATA	Global
SECCNT . . . . . . . . . . . . .  	L WORD 	017D	DATA	Global
SECPOS . . . . . . . . . . . . .  	L WORD 	016F	DATA	Global
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETFINDPB  . . . . . . . . . . .  	L NEAR	013C	DATA
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SFTABL . . . . . . . . . . . . .  	L DWORD	0004	CONSTANTS
SFT_ADDR . . . . . . . . . . . .  	L DWORD	00F1	CONSTANTS	Global
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SPACEFLAG  . . . . . . . . . . .  	L BYTE 	00D4	CONSTANTS	Global
STARTPOS . . . . . . . . . . . .  	L BYTE 	00D6	CONSTANTS	Global
STAY_RESIDENT  . . . . . . . . .  	L NEAR	0000	LAST	External
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
SWITCH_CHARACTER . . . . . . . .  	L BYTE 	00E2	CONSTANTS	Global
SYSBUF . . . . . . . . . . . . .  	L WORD 	0000	LAST	Global
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:32

Standard MSDOS                                              Symbols-14
                                                             

SYSINITVAR . . . . . . . . . . .  	L WORD 	00ED	CONSTANTS	Global

THISDPB  . . . . . . . . . . . .  	L DWORD	0146	DATA	Global
THISDRV  . . . . . . . . . . . .  	L BYTE 	0145	DATA	Global
THISFCB  . . . . . . . . . . . .  	L DWORD	015B	DATA	Global
TIMEBUF  . . . . . . . . . . . .  	L BYTE 	0103	DATA	Global	Length = 0006
TOGLINS  . . . . . . . . . . . .  	Alias	 WANG		
TOGLPRN  . . . . . . . . . . . .  	Alias	 FALSE		
TRANS  . . . . . . . . . . . . .  	L BYTE 	0143	DATA	Global
TRUE . . . . . . . . . . . . . .  	Number	FFFF	
TRUEDPBAD  . . . . . . . . . . .  	L NEAR	0116	LAST

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USER_SP  . . . . . . . . . . . .  	L WORD 	013B	DATA	Global
USER_SS  . . . . . . . . . . . .  	L WORD 	013D	DATA	Global

VALSEC . . . . . . . . . . . . .  	L WORD 	0171	DATA	Global
VERFLG . . . . . . . . . . . . .  	L BYTE 	00D8	CONSTANTS	Global
VOLID  . . . . . . . . . . . . .  	L BYTE 	018D	DATA	Global

WAIT . . . . . . . . . . . . . .  	Number	004D	
WANG . . . . . . . . . . . . . .  	Alias	 FALSE		
WEEKDAY  . . . . . . . . . . . .  	L BYTE 	011C	CONSTANTS	Global
WPERR  . . . . . . . . . . . . .  	L BYTE 	0122	CONSTANTS	Global
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	
XXX  . . . . . . . . . . . . . .  	F PROC	01BA	DATA	Length = 0001

YEAR . . . . . . . . . . . . . .  	L WORD 	0118	CONSTANTS	Global
YRTAB  . . . . . . . . . . . . .  	L BYTE 	0170	CONSTANTS	Global	Length = 0008

ZEROEXT  . . . . . . . . . . . .  	Alias	 TRUE		


   2283 Source  Lines
   3962 Total   Lines
    729 Symbols

  13302 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
