Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-1
                                                            

       1                                TITLE MISC - Miscellanious routines for
					 MS-DOS 
       2                                NAME  MISC 
       3                                ; 
       4                                ; Miscellaneous system calls most of wh
					ich are CAVEAT 
       5                                ; 
       6                                ; $SLEAZEFUNC 
       7                                ; $SLEAZEFUNCDL 
       8                                ; $GET_INDOS_FLAG 
       9                                ; $GET_IN_VARS 
      10                                ; $GET_DEFAULT_DPB 
      11                                ; $GET_DPB 
      12                                ; $DISK_RESET 
      13                                ; $SETDPB 
      14                                ; $Dup_PDB 
      15                                ; $CREATE_PROCESS_DATA_BLOCK 
      16                                ; SETMEM 
      17                                ; 
      18                                .list 
      19                                 
      20                                 
      21                                endif 
      22                                 
      23 = 000C                         ENTRYPOINTSEG   EQU     0CH 
      24 = 0FFF                         MAXDIF          EQU     0FFFH 
      25 = 000A                         SAVEXIT         EQU     10 
      26                                 
      27                                        i_need  LASTBUFFER,DWORD 
      28 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      29 0000                         1  DATA ENDS
      30                                        i_need  INDOS,BYTE 
      31 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      32 0000                         1  DATA ENDS
      33                                        i_need  SYSINITVAR,BYTE 
      34 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      35 0000                         1  DATA ENDS
      36                                        i_need  CurrentPDB,WORD 
      37 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      38 0000                         1  DATA ENDS
      39                                        i_need  CreatePDB,BYTE 
      40 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      41 0000                         1  DATA ENDS
      42                                        i_need  EXIT_TYPE,BYTE 
      43 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      44 0000                         1  DATA ENDS
      45                                        i_need  EXIT_CODE,WORD 
      46 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      47 0000                         1  DATA ENDS
      48                                        i_need  LASTENT,WORD 
      49 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      50 0000                         1  DATA ENDS
      51                                        i_need  THISDPB,DWORD 
      52 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-2
DEVICE TABLE AND SRH DEFINITION                             

      53 0000                         1  DATA ENDS
      54                                        i_need  ATTRIB,BYTE 
      55 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      56 0000                         1  DATA ENDS
      57                                        i_need  EXTFCB,BYTE 
      58 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      59 0000                         1  DATA ENDS
      60                                        i_need  DMAADD,DWORD 
      61 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      62 0000                         1  DATA ENDS
      63                                        i_need  DIRSTART,WORD 
      64 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      65 0000                         1  DATA ENDS
      66                                        i_need  CURBUF,DWORD 
      67 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      68 0000                         1  DATA ENDS
      69                                        i_need  USER_SP,WORD 
      70 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      71 0000                         1  DATA ENDS
      72                                        i_need  ENTLAST,WORD 
      73 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      74 0000                         1  DATA ENDS
      75                                        i_need  THISDRV,BYTE 
      76 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
      77 0000                         1  DATA ENDS
      78                                 
      79                                ASSUME  SS:DOSGROUP 
      80                                 
      81                                BREAK <SleazeFunc -- get a pointer to m
					edia byte> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-3
SleazeFunc -- get a pointer to media byte                   

      82                                 
      83                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
      84                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
      85                                ;                                      
					                                    ; 
      86                                        procedure   $SLEAZEFUNC,NEAR 
      87 0000                         1 $SLEAZEFUNC PROC NEAR
      88                                ASSUME  DS:NOTHING,ES:NOTHING 
      89                                 
      90                                ; Inputs: 
      91                                ;       None 
      92                                ; Function: 
      93                                ;       Return Stuff sort of like old g
					et fat call 
      94                                ; Outputs: 
      95                                ;       DS:BX = Points to FAT ID byte (
					IBM only) 
      96                                ;               GOD help anyone who tri
					es to do ANYTHING except 
      97                                ;               READ this ONE byte. 
      98                                ;       DX = Total Number of allocation
					 units on disk 
      99                                ;       CX = Sector size 
     100                                ;       AL = Sectors per allocation uni
					t 
     101                                ;          = -1 if bad drive specified 
     102                                 
     103 0000  B2 00                            MOV     DL,0 
     104                                    entry   $SLEAZEFUNCDL 
     105 0002                         1 $SLEAZEFUNCDL:
     106 0002  16                               PUSH    SS 
     107 0003  1F                               POP     DS 
     108                                ASSUME  DS:DOSGROUP 
     109 0004  8A C2                            MOV     AL,DL 
     110                                        invoke  GETTHISDRV 
     111 0006  E8 0000 E              1  CALL GETTHISDRV
     112 0009  B0 FF                            MOV     AL,-1 
     113 000B  72 15                            JC      BADSLDRIVE 
     114                                        invoke  FATREAD 
     115 000D  E8 0000 E              1  CALL FATREAD
     116 0010  26: 8B 56 0D                     MOV     DX,ES:[BP.dpb_max_clust
					er] 
     117 0014  4A                               DEC     DX 
     118 0015  26: 8A 46 04                     MOV     AL,ES:[BP.dpb_cluster_m
					ask] 
     119 0019  FE C0                            INC     AL 
     120 001B  26: 8B 4E 02                     MOV     CX,ES:[BP.dpb_sector_si
					ze] 
     121 001F  83 C5 16                         ADD     BP,dpb_media 
     122 0022                           BADSLDRIVE: 
     123                                        invoke  get_user_stack 
     124 0022  E8 0000 E              1  CALL get_user_stack
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-4
SleazeFunc -- get a pointer to media byte                   

     125                                ASSUME  DS:NOTHING 
     126 0025  89 4C 04                         MOV     [SI.user_CX],CX 
     127 0028  89 54 06                         MOV     [SI.user_DX],DX 
     128 002B  89 6C 02                         MOV     [SI.user_BX],BP 
     129 002E  8C 44 0E                         MOV     [SI.user_DS],ES 
     130                                        return 
     131 0031                         1 ??0000:
     132 0031  C3                     1  RET
     133                                $SLEAZEFUNC    ENDP 
     134                                ;                                      
					                                    ; 
     135                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     136                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     137                                 
     138                                 
     139                                 
     140                                BREAK <$ABORT -- Terminate a process> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-5
$ABORT -- Terminate a process                               

     141                                        procedure   $ABORT,NEAR 
     142 0032                         1 $ABORT PROC NEAR
     143                                ASSUME  DS:NOTHING,ES:NOTHING 
     144                                 
     145                                ; Inputs: 
     146                                ;       CS:00 must point to valid progr
					am header block 
     147                                ; Function: 
     148                                ;       Restore terminate and Cntrl-C a
					ddresses, flush buffers 
     149                                ;       and transfer to the terminate a
					ddress 
     150                                ; Returns: 
     151                                ;       TO THE TERMINATE ADDRESS 
     152                                 
     153 0032  32 C0                            XOR     AL,AL 
     154 0034  36: C6 06 0000 E 00              MOV     [exit_type],exit_abort 
     155                                 
     156                                ; 
     157                                ; abort_inner must have AL set as the e
					xit code! 
     158                                ; 
     159                                        entry   abort_inner 
     160 003A                         1 abort_inner:
     161 003A  36: 8A 26 0000 E                 MOV     AH,[exit_type] 
     162 003F  36: A3 0000 E                    MOV     [exit_code],AX 
     163                                        invoke  Get_user_stack 
     164 0043  E8 0000 E              1  CALL Get_user_stack
     165 0046  8E 5C 14                         MOV     DS,[SI.user_CS]        
					 ; set up old interrupts 
     166 0049  33 C0                            XOR     AX,AX 
     167 004B  8E C0                            MOV     ES,AX 
     168 004D  BE 000A                          MOV     SI,SAVEXIT 
     169 0050  BF 0088                          MOV     DI,addr_int_terminate 
     170 0053  A5                               MOVSW 
     171 0054  A5                               MOVSW 
     172 0055  A5                               MOVSW 
     173 0056  A5                               MOVSW 
     174 0057  A5                               MOVSW 
     175 0058  A5                               MOVSW 
     176                                        transfer    reset_environment 
     177 0059                         2  ??0001:
     178 0059  E9 0000 E              2  JMP reset_environment
     179                                $ABORT   ENDP 
     180                                 
     181                                BREAK <$Dir_Search_First -- Start a dir
					ectory search> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-6
$Dir_Search_First -- Start a directory search               

     182                                        procedure   $DIR_SEARCH_FIRST,N
					EAR 
     183 005C                         1 $DIR_SEARCH_FIRST PROC NEAR
     184                                ASSUME  DS:NOTHING,ES:NOTHING 
     185                                 
     186                                ; Inputs: 
     187                                ;       DS:DX Points to unopenned FCB 
     188                                ; Function: 
     189                                ;       Directory is searched for first
					 matching entry and the directory 
     190                                ;       entry is loaded at the disk tra
					nsfer address 
     191                                ; Returns: 
     192                                ;       AL = -1 if no entries matched, 
					otherwise 0 
     193                                 
     194                                        invoke  GETFILE 
     195 005C  E8 0000 E              1  CALL GETFILE
     196                                ASSUME  DS:DOSGROUP 
     197 005F                           SAVPLCE: 
     198                                ; Search-for-next enters here to save p
					lace and report 
     199                                ; findings. 
     200 005F  B2 00                            MOV     DL,0            ; Do no
					t XOR!!! 
     201 0061  72 52                            JC      KILLSRCH 
     202 0063  0A E4                            OR      AH,AH           ; Is it
					 I/O device? 
     203 0065  78 05                            JS      KILLIT          ; If so
					, sign bit will end search 
     204 0067  A1 0000 E                        MOV     AX,[LASTENT] 
     205 006A  FE C2                            INC     DL 
     206 006C                           KILLIT: 
     207 006C  26: 89 45 10                     MOV     ES:[DI.FILDIRENT],AX 
     208 0070  A1 0000 E                        MOV     AX,WORD PTR [THISDPB] 
     209 0073  26: 89 45 12                     MOV     ES:[DI.fcb_DRVBP],AX 
     210 0077  A1 0002 E                        MOV     AX,WORD PTR [THISDPB+2]
					 
     211 007A  26: 89 45 14                     MOV     ES:[DI.fcb_DRVBP+2],AX 
     212 007E  A1 0000 E                        MOV     AX,[DIRSTART] 
     213 0081  26: 89 45 16                     MOV     ES:[DI.fcb_DRVBP+4],AX 
     214                                ; Information in directory entry must b
					e copied into the first 
     215                                ; 33 bytes starting at the disk transfe
					r address. 
     216 0085  8B F3                            MOV     SI,BX 
     217 0087  C4 3E 0000 E                     LES     DI,[DMAADD] 
     218 008B  B8 00FF                          MOV     AX,00FFH 
     219 008E  3A 06 0000 E                     CMP     AL,[EXTFCB] 
     220 0092  75 09                            JNZ     NORMFCB 
     221 0094  AB                               STOSW 
     222 0095  FE C0                            INC     AL 
     223 0097  AB                               STOSW 
     224 0098  AB                               STOSW 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-7
$Dir_Search_First -- Start a directory search               

     225 0099  A0 0000 E                        MOV     AL,[ATTRIB] 
     226 009C  AA                               STOSB 
     227 009D                           NORMFCB: 
     228 009D  A0 0000 E                        MOV     AL,[THISDRV] 
     229 00A0  FE C0                            INC     AL 
     230 00A2  AA                               STOSB   ; Set drive number 
     231 00A3  0A D2                            OR      DL,DL 
     232 00A5  74 04                            JZ      DOSRELATIVE 
     233 00A7  8E 1E 0002 E                     MOV     DS,WORD PTR [CURBUF+2] 
     234                                ASSUME  DS:NOTHING 
     235 00AB                           DOSRELATIVE: 
     236                                 
     237                                        ELSE 
     238 00AB  B9 0010                          MOV     CX,16 
     239                                        ENDIF 
     240                                 
     241 00AE  F3/ A5                           REP     MOVSW   ; Copy 32 bytes
					 of directory entry 
     242 00B0  32 C0                            XOR     AL,AL 
     243                                        return 
     244 00B2                         1 ??0002:
     245 00B2  C3                     1  RET
     246                                 
     247                                ASSUME  DS:NOTHING 
     248 00B3                           KILLSRCH1: 
     249 00B3  1E                               PUSH    DS 
     250 00B4  07                               POP     ES      ; Make ES:DI po
					int to the FCB 
     251 00B5                           KILLSRCH: 
     252 00B5  B8 FFFF                          MOV     AX,-1 
     253 00B8  26: 89 45 10                     MOV     WORD PTR ES:[DI.FILDIRE
					NT],AX 
     254                                        return 
     255 00BC                         1 ??0003:
     256 00BC  C3                     1  RET
     257                                $DIR_SEARCH_FIRST ENDP 
     258                                 
     259                                BREAK <$Dir_Search_Next -- Find next ma
					tching directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-8
$Dir_Search_Next -- Find next matching directory entry      

     260                                        procedure   $DIR_SEARCH_NEXT,NE
					AR 
     261 00BD                         1 $DIR_SEARCH_NEXT PROC NEAR
     262                                ASSUME  DS:NOTHING,ES:NOTHING 
     263                                 
     264                                ; Inputs: 
     265                                ;       DS:DX points to unopenned FCB r
					eturned by $DIR_SEARCH_FIRST 
     266                                ; Function: 
     267                                ;       Directory is searched for the n
					ext matching entry and the directory 
     268                                ;       entry is loaded at the disk tra
					nsfer address 
     269                                ; Returns: 
     270                                ;       AL = -1 if no entries matched, 
					otherwise 0 
     271                                 
     272                                        invoke  MOVNAMENOSET 
     273 00BD  E8 0000 E              1  CALL MOVNAMENOSET
     274                                ASSUME  ES:DOSGROUP 
     275 00C0  8B FA                            MOV     DI,DX 
     276 00C2  72 EF                            JC      NEAR PTR KILLSRCH1 
     277 00C4  8B 45 10                         MOV     AX,[DI.FILDIRENT] 
     278 00C7  C4 6D 12                         LES     BP,DWORD PTR [DI.fcb_DR
					VBP] 
     279 00CA  0B C0                            OR      AX,AX 
     280 00CC  78 E5                            JS      NEAR PTR KILLSRCH1 
     281 00CE  8B 5D 16                         MOV     BX,[DI.fcb_DRVBP+4] 
     282 00D1  52                               PUSH    DX 
     283 00D2  1E                               PUSH    DS 
     284 00D3  50                               PUSH    AX 
     285 00D4  36: 89 2E 0000 E                 MOV     WORD PTR [THISDPB],BP 
     286 00D9  36: 8C 06 0002 E                 MOV     WORD PTR [THISDPB+2],ES
					 
     287                                        invoke  SetDirSrch 
     288 00DE  E8 0000 E              1  CALL SetDirSrch
     289                                        ASSUME  DS:DOSGROUP 
     290 00E1  58                               POP     AX 
     291 00E2  C7 06 0000 E FFFF                MOV     [ENTLAST],-1 
     292                                        invoke  GetEnt 
     293 00E8  E8 0000 E              1  CALL GetEnt
     294                                        invoke  NextEnt 
     295 00EB  E8 0000 E              1  CALL NextEnt
     296 00EE  07                               POP     ES 
     297                                        ASSUME  ES:NOTHING 
     298 00EF  5F                               POP     DI 
     299 00F0  E9 005F R                        JMP     SAVPLCE 
     300                                $DIR_SEARCH_NEXT ENDP 
     301                                 
     302                                BREAK <$Get_FCB_File_Length -- Return s
					ize of file in current records> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-9
$Get_FCB_File_Length -- Return size of file in current recor

     303                                        procedure   $GET_FCB_FILE_LENGT
					H,NEAR 
     304 00F3                         1 $GET_FCB_FILE_LENGTH PROC NEAR
     305                                ASSUME  DS:NOTHING,ES:NOTHING 
     306                                 
     307                                ; Inputs: 
     308                                ;       DS:DX points to unopenned FCB 
     309                                ; Function: 
     310                                ;       Set random record field to size
					 of file 
     311                                ; Returns: 
     312                                ;       AL = -1 if no entries matched, 
					otherwise 0 
     313                                 
     314                                        invoke  GETFILE 
     315 00F3  E8 0000 E              1  CALL GETFILE
     316                                ASSUME  DS:DOSGROUP 
     317 00F6  B0 FF                            MOV     AL,-1 
     318                                        retc 
     319 00F8  72 C2                  2  ??0004: jc ret_l
     320 00FA  83 C7 21                         ADD     DI,fcb_RR       ; Write
					 size in RR field 
     321 00FD  26: 8B 4D ED                     MOV     CX,WORD PTR ES:[DI.fcb_
					RECSIZ-fcb_RR] 
     322 0101  0B C9                            OR      CX,CX 
     323 0103  75 03                            JNZ     RECOK 
     324 0105  B9 0080                          MOV     CX,128 
     325 0108                           RECOK: 
     326 0108  33 D2                            XOR     DX,DX           ; Intia
					lize size to zero 
     327 010A  46                               INC     SI 
     328 010B  46                               INC     SI              ; Point
					 to length field 
     329 010C  8E 1E 0002 E                     MOV     DS,WORD PTR [CURBUF+2] 
     330                                ASSUME  DS:NOTHING 
     331 0110  8B 44 02                         MOV     AX,[SI+2]       ; Get h
					igh word of size 
     332 0113  F7 F1                            DIV     CX 
     333 0115  50                               PUSH    AX              ; Save 
					high part of result 
     334 0116  AD                               LODSW           ; Get low word 
					of size 
     335 0117  F7 F1                            DIV     CX 
     336 0119  0B D2                            OR      DX,DX           ; Check
					 for zero remainder 
     337 011B  5A                               POP     DX 
     338 011C  74 04                            JZ      DEVSIZ 
     339 011E  40                               INC     AX              ; Round
					 up for partial record 
     340 011F  75 01                            JNZ     DEVSIZ          ; Propa
					gate carry? 
     341 0121  42                               INC     DX 
     342 0122                           DEVSIZ: 
     343 0122  AB                               STOSW 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-10
$Get_FCB_File_Length -- Return size of file in current recor

     344 0123  8B C2                            MOV     AX,DX 
     345 0125  AA                               STOSB 
     346 0126  B0 00                            MOV     AL,0 
     347 0128  83 F9 40                         CMP     CX,64 
     348 012B  73 03                            JAE     RET14           ; Only 
					3-byte field if fcb_RECSIZ >= 64 
     349 012D  26: 88 25                        MOV     ES:[DI],AH 
     350 0130                           RET14:  return 
     351 0130                         1 ??0006:
     352 0130  C3                     1  RET
     353                                $GET_FCB_FILE_LENGTH ENDP 
     354                                 
     355                                BREAK <$Get_Fcb_Position -- Set random 
					record field to current position> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-11
$Get_Fcb_Position -- Set random record field to current posi

     356                                        procedure   $GET_FCB_POSITION,N
					EAR 
     357 0131                         1 $GET_FCB_POSITION PROC NEAR
     358                                ASSUME  DS:NOTHING,ES:NOTHING 
     359                                 
     360                                ; Inputs: 
     361                                ;       DS:DX points to openned FCB 
     362                                ; Function: 
     363                                ;       Sets random record field to be 
					same as current record fields 
     364                                ; Returns: 
     365                                ;       None 
     366                                 
     367                                        invoke  GETREC 
     368 0131  E8 0000 E              1  CALL GETREC
     369 0134  89 45 21                         MOV     WORD PTR [DI+fcb_RR],AX
					 
     370 0137  88 55 23                         MOV     [DI+fcb_RR+2],DL 
     371 013A  83 7D 0E 40                      CMP     [DI.fcb_RECSIZ],64 
     372 013E  73 03                            JAE     RET16 
     373 0140  88 75 24                         MOV     [DI+fcb_RR+2+1],DH     
					 ; Set 4th byte only if record size < 6
					4 
     374 0143                           RET16:  return 
     375 0143                         1 ??0007:
     376 0143  C3                     1  RET
     377                                $GET_FCB_POSITION ENDP 
     378                                 
     379                                BREAK <$Disk_Reset -- Flush out all dir
					ty buffers> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-12
$Disk_Reset -- Flush out all dirty buffers                  

     380                                        procedure   $DISK_RESET,NEAR 
     381 0144                         1 $DISK_RESET PROC NEAR
     382                                ASSUME  DS:NOTHING,ES:NOTHING 
     383                                 
     384                                ; Inputs: 
     385                                ;       None 
     386                                ; Function: 
     387                                ;       Flush and invalidate all buffer
					s 
     388                                ; Returns: 
     389                                ;       Nothing 
     390                                 
     391 0144  16                               PUSH    SS 
     392 0145  1F                               POP     DS 
     393                                ASSUME  DS:DOSGROUP 
     394 0146  B0 FF                            MOV     AL,-1 
     395                                        invoke  FLUSHBUF 
     396 0148  E8 0000 E              1  CALL FLUSHBUF
     397 014B  C7 06 0002 E FFFF                MOV     WORD PTR [LASTBUFFER+2]
					,-1 
     398 0151  C7 06 0000 E FFFF                MOV     WORD PTR [LASTBUFFER],-
					1 
     399                                        invoke  SETVISIT 
     400 0157  E8 0000 E              1  CALL SETVISIT
     401                                ASSUME  DS:NOTHING 
     402 015A                           NBFFR:                                 
					 ; Free ALL buffers 
     403 015A  C6 45 07 01                      MOV     [DI.VISIT],1           
					 ; Mark as visited 
     404 015E  80 7D 04 FF                      CMP     BYTE PTR [DI.BUFDRV],-1
					 
     405 0162  74 08                            JZ      SKPBF                  
					 ; Save a call to PLACEBUF 
     406 0164  C7 45 04 00FF                    MOV     WORD PTR [DI.BUFDRV],00
					FFH 
     407                                        invoke  SCANPLACE 
     408 0169  E8 0000 E              1  CALL SCANPLACE
     409 016C                           SKPBF: 
     410                                        invoke  SKIPVISIT 
     411 016C  E8 0000 E              1  CALL SKIPVISIT
     412 016F  75 E9                            JNZ     NBFFR 
     413                                        return 
     414 0171                         1 ??0008:
     415 0171  C3                     1  RET
     416                                $DISK_RESET ENDP 
     417                                 
     418                                        procedure   $RAW_CON_IO,NEAR   
					; System call 6 
     419 0172                         1 $RAW_CON_IO PROC NEAR
     420                                ASSUME  DS:NOTHING,ES:NOTHING 
     421                                 
     422                                ; Inputs: 
     423                                ;       DL = -1 if input 
     424                                ;       else DL is output character 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-13
$Disk_Reset -- Flush out all dirty buffers                  

     425                                ; Function: 
     426                                ;       Input or output raw character f
					rom console, no echo 
     427                                ; Returns: 
     428                                ;       AL = character 
     429                                 
     430 0172  8A C2                            MOV     AL,DL 
     431 0174  3C FF                            CMP     AL,-1 
     432 0176  75 3A                            JNZ     RAWOUT 
     433 0178  36: C4 3E 0000 E                 LES     DI,DWORD PTR [user_SP] 
					               ; Get pointer to registe
					r save area 
     434 017D  33 DB                            XOR     BX,BX 
     435                                        invoke  GET_IO_FCB 
     436 017F  E8 0000 E              1  CALL GET_IO_FCB
     437                                        retc 
     438 0182  72 ED                  2  ??0009: jc ret_l
     439 0184  B4 01                            MOV     AH,1 
     440                                        invoke  IOFUNC 
     441 0186  E8 0000 E              1  CALL IOFUNC
     442 0189  75 0B                            JNZ     RESFLG 
     443                                        invoke  SPOOLINT 
     444 018B  E8 0000 E              1  CALL SPOOLINT
     445 018E  26: 80 4D 16 40                  OR      BYTE PTR ES:[DI.user_F]
					,40H ; Set user's zero flag 
     446 0193  32 C0                            XOR     AL,AL 
     447                                        return 
     448 0195                         1 ??000B:
     449 0195  C3                     1  RET
     450                                 
     451 0196                           RESFLG: 
     452 0196  26: 80 65 16 BF                  AND     BYTE PTR ES:[DI.user_F]
					,0FFH-40H    ; Reset user's zero flag 
     453                                 
     454 019B                           RILP: 
     455                                        invoke  SPOOLINT 
     456 019B  E8 0000 E              1  CALL SPOOLINT
     457                                    entry   $RAW_CON_INPUT        ; Sys
					tem call 7 
     458 019E                         1 $RAW_CON_INPUT:
     459                                 
     460                                ; Inputs: 
     461                                ;       None 
     462                                ; Function: 
     463                                ;       Input raw character from consol
					e, no echo 
     464                                ; Returns: 
     465                                ;       AL = character 
     466                                 
     467 019E  33 DB                            XOR     BX,BX 
     468                                        invoke  GET_IO_FCB 
     469 01A0  E8 0000 E              1  CALL GET_IO_FCB
     470                                        retc 
     471 01A3  72 F0                  2  ??000C: jc ret_l
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-14
$Disk_Reset -- Flush out all dirty buffers                  

     472 01A5  B4 01                            MOV     AH,1 
     473                                        invoke  IOFUNC 
     474 01A7  E8 0000 E              1  CALL IOFUNC
     475 01AA  74 EF                            JZ      RILP 
     476 01AC  32 E4                            XOR     AH,AH 
     477                                        invoke  IOFUNC 
     478 01AE  E8 0000 E              1  CALL IOFUNC
     479                                        return 
     480 01B1                         1 ??000E:
     481 01B1  C3                     1  RET
     482                                ; 
     483                                ;       Output the character in AL to s
					tdout 
     484                                ; 
     485                                entry   RAWOUT 
     486 01B2                         1 RAWOUT:
     487                                 
     488 01B2  53                               PUSH    BX 
     489 01B3  BB 0001                          MOV     BX,1 
     490                                 
     491                                        invoke  GET_IO_FCB 
     492 01B6  E8 0000 E              1  CALL GET_IO_FCB
     493 01B9  72 1B                            JC      RAWRET1 
     494                                 
     495 01BB  F6 44 18 80                      TEST    [SI.fcb_DEVID],080H    
					         ; output to file? 
     496 01BF  74 11                            JZ      RAWNORM                
					         ; if so, do normally 
     497 01C1  1E                               PUSH    DS 
     498 01C2  56                               PUSH    SI 
     499 01C3  C5 74 19                         LDS     SI,DWORD PTR [SI.fcb_FI
					RCLUS]   ; output to special? 
     500 01C6  F6 44 04 10                      TEST    BYTE PTR [SI+SDEVATT],d
					evid_SPECIAL 
     501 01CA  5E                               POP     SI 
     502 01CB  1F                               POP     DS 
     503 01CC  74 04                            JZ      RAWNORM                
					         ; if not, do normally 
     504 01CE  CD 29                            INT     int_fastcon            
					         ; quickly output the char 
     505 01D0  EB 03                            JMP     SHORT RAWRET 
     506 01D2                           RAWNORM: 
     507                                 
     508 01D2  E8 01DD R                        CALL    RAWOUT3 
     509 01D5  F8                       RAWRET: CLC 
     510 01D6                           RAWRET1: 
     511 01D6  5B                               POP     BX 
     512                                        return 
     513 01D7                         1 ??000F:
     514 01D7  C3                     1  RET
     515                                 
     516                                ; 
     517                                ;       Output the character in AL to h
					andle in BX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-15
$Disk_Reset -- Flush out all dirty buffers                  

     518                                ; 
     519                                entry   RAWOUT2 
     520 01D8                         1 RAWOUT2:
     521                                 
     522                                        invoke  GET_IO_FCB 
     523 01D8  E8 0000 E              1  CALL GET_IO_FCB
     524                                        retc 
     525 01DB  72 FA                  2  ??0010: jc ret_l
     526 01DD                           RAWOUT3: 
     527 01DD  50                               PUSH    AX 
     528 01DE  EB 03                            JMP     SHORT RAWOSTRT 
     529 01E0                           ROLP: 
     530                                        invoke  SPOOLINT 
     531 01E0  E8 0000 E              1  CALL SPOOLINT
     532 01E3                           RAWOSTRT: 
     533 01E3  B4 03                            MOV     AH,3 
     534 01E5  E8 0000 E                        CALL    IOFUNC 
     535 01E8  74 F6                            JZ      ROLP 
     536 01EA  58                               POP     AX 
     537 01EB  B4 02                            MOV     AH,2 
     538 01ED  E8 0000 E                        CALL    IOFUNC 
     539 01F0  F8                               CLC                     ; Clear
					 carry indicating successful 
     540                                        return 
     541 01F1                         1 ??0012:
     542 01F1  C3                     1  RET
     543                                $RAW_CON_IO   ENDP 
     544                                 
     545                                ASSUME  DS:NOTHING,ES:NOTHING 
     546                                ; This routine is called at DOS init 
     547                                 
     548                                        procedure   OUTMES,NEAR ; Strin
					g output for internal messages 
     549 01F2                         1 OUTMES PROC NEAR
     550 01F2  2E: AC                           LODS    CS:BYTE PTR [SI] 
     551 01F4  3C 24                            CMP     AL,"$" 
     552                                        retz 
     553 01F6  74 F9                  2  ??0013: jz ret_l
     554                                        invoke  OUT 
     555 01F8  E8 0000 E              1  CALL OUT
     556 01FB  EB F5                            JMP     SHORT OUTMES 
     557                                        return 
     558 01FD                         1 ??0015:
     559 01FD  C3                     1  RET
     560                                OutMes  ENDP 
     561                                        ASSUME  SS:DOSGROUP 
     562                                 
     563                                BREAK <$Parse_File_Descriptor -- Parse 
					an arbitrary string into an FCB> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-16
$Parse_File_Descriptor -- Parse an arbitrary string into an 

     564                                        procedure   $PARSE_FILE_DESCRIP
					TOR,NEAR 
     565 01FE                         1 $PARSE_FILE_DESCRIPTOR PROC NEAR
     566                                ASSUME  DS:NOTHING,ES:NOTHING 
     567                                 
     568                                ; Inputs: 
     569                                ;       DS:SI Points to a command line 
     570                                ;       ES:DI Points to an empty FCB 
     571                                ;       Bit 0 of AL = 1 At most one lea
					ding separator scanned off 
     572                                ;                   = 0 Parse stops if 
					separator encountered 
     573                                ;       Bit 1 of AL = 1 If drive field 
					blank in command line - leave FCB 
     574                                ;                   = 0  "    "    "   
					  "         "      "  - put 0 in FCB 
     575                                ;       Bit 2 of AL = 1 If filename fie
					ld blank - leave FCB 
     576                                ;                   = 0  "       "     
					 "       - put blanks in FCB 
     577                                ;       Bit 3 of AL = 1 If extension fi
					eld blank - leave FCB 
     578                                ;                   = 0  "       "     
					 "        - put blanks in FCB 
     579                                ; Function: 
     580                                ;       Parse command line into FCB 
     581                                ; Returns: 
     582                                ;       AL = 1 if '*' or '?' in filenam
					e or extension, 0 otherwise 
     583                                ;       DS:SI points to first character
					 after filename 
     584                                 
     585                                        invoke  MAKEFCB 
     586 01FE  E8 0000 E              1  CALL MAKEFCB
     587 0201  56                               PUSH    SI 
     588                                        invoke  get_user_stack 
     589 0202  E8 0000 E              1  CALL get_user_stack
     590 0205  8F 44 08                         POP     [SI.user_SI] 
     591                                        return 
     592 0208                         1 ??0016:
     593 0208  C3                     1  RET
     594                                $PARSE_FILE_DESCRIPTOR ENDP 
     595                                 
     596                                BREAK <$Create_Process_Data_Block,SetMe
					m -- Set up process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-17
$Create_Process_Data_Block,SetMem -- Set up process data blo

     597                                ;----+----+----+----+----+----+----+---
					-+----+----+----+----+----+----+----; 
     598                                ;            C  A  V  E  A  T     P  R 
					 O  G  R  A  M  M  E  R             ; 
     599                                ;                                      
					                                    ; 
     600                                        procedure   $Dup_PDB,NEAR 
     601 0209                         1 $Dup_PDB PROC NEAR
     602                                ASSUME  DS:NOTHING,ES:NOTHING 
     603 0209  36: C6 06 0000 E FF              MOV     BYTE PTR [CreatePDB], 0
					FFH  ; indicate a new process 
     604                                $Dup_PDB    ENDP 
     605                                 
     606                                 
     607                                        procedure   $CREATE_PROCESS_DAT
					A_BLOCK,NEAR 
     608 020F                         1 $CREATE_PROCESS_DATA_BLOCK PROC NEAR
     609                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
     610                                 
     611                                ; Inputs: 
     612                                ;       DX = Segment number of new base
					 
     613                                ; Function: 
     614                                ;       Set up program base and copy te
					rm and ^C from int area 
     615                                ; Returns: 
     616                                ;       None 
     617                                ; Called at DOS init 
     618                                 
     619 020F  8E C2                            MOV     ES,DX 
     620 0211  2E: F6 06 0000 E FF              TEST    BYTE PTR [CreatePDB],0F
					Fh 
     621 0217  74 07                            JZ      create_PDB_old 
     622 0219  2E: 8E 1E 0000 E                 MOV     DS,[CurrentPDB] 
     623 021E  EB 06                            JMP     SHORT Create_copy 
     624                                 
     625 0220                           Create_PDB_old: 
     626                                        invoke  get_user_stack 
     627 0220  E8 0000 E              1  CALL get_user_stack
     628 0223  8E 5C 14                         MOV     DS,[SI.user_CS] 
     629                                 
     630 0226                           Create_copy: 
     631 0226  33 F6                            XOR     SI,SI                  
					 ; copy all 80h bytes 
     632 0228  8B FE                            MOV     DI,SI 
     633 022A  B9 0080                          MOV     CX,80H 
     634 022D  F3/ A5                           REP     MOVSW 
     635                                 
     636 022F  2E: F6 06 0000 E FF              TEST    BYTE PTR [CreatePDB],0F
					Fh   ; Shall we create a process? 
     637 0235  74 36                            JZ      Create_PDB_cont        
					 ; nope, old style call 
     638                                ; 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-18
$Create_Process_Data_Block,SetMem -- Set up process data blo

     639                                ; Here we set up for a new process... 
     640                                ; 
     641                                 
     642 0237  0E                               PUSH    CS 
     643 0238  1F                               POP     DS 
     644                                        ASSUME  DS:DOSGROUP 
     645 0239  33 DB                            XOR     BX,BX                  
					 ; dup all jfns 
     646 023B  B9 0014                          MOV     CX,FilPerProc 
     647                                 
     648 023E                           Create_dup_jfn: 
     649 023E  06                               PUSH    ES                     
					 ; save new PDB 
     650                                        invoke  get_jfn_pointer        
					 ; ES:DI is jfn 
     651 023F  E8 0000 E              1  CALL get_jfn_pointer
     652 0242  72 14                            JC      create_skip            
					 ; not a valid jfn 
     653 0244  06                               PUSH    ES                     
					 ; save him 
     654 0245  57                               PUSH    DI 
     655                                        invoke  get_sf_from_jfn        
					 ; get sf pointer 
     656 0246  E8 0000 E              1  CALL get_sf_from_jfn
     657 0249  72 03                            JC      create_no_inc 
     658 024B  26: FE 05                        INC     ES:[DI].sf_ref_count   
					 ; new fh 
     659                                 
     660 024E                           create_no_inc: 
     661 024E  5F                               POP     DI 
     662 024F  07                               POP     ES                     
					 ; get old jfn 
     663 0250  26: 8A 05                        MOV     AL,ES:[DI]             
					 ; get sfn 
     664 0253  07                               POP     ES 
     665 0254  06                               PUSH    ES 
     666 0255  26: 8A 07                        MOV     AL,ES:[BX]             
					 ; copy into new place! 
     667                                 
     668 0258                           create_skip: 
     669 0258  07                               POP     ES 
     670 0259  43                               INC     BX                     
					 ; next jfn... 
     671 025A  E2 E2                            LOOP    create_dup_jfn 
     672                                 
     673 025C  FF 36 0000 E                     PUSH    [CurrentPDB]           
					 ; get current process 
     674 0260  5B                               POP     BX 
     675 0261  53                               PUSH    BX 
     676 0262  26: 8F 06 0016                   POP     ES:[PDB_Parent_PID]    
					 ; stash in child 
     677 0267  8C 06 0000 E                     MOV     [CurrentPDB],ES 
     678                                        ASSUME  DS:NOTHING 
     679 026B  8E DB                            MOV     DS,BX 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-19
$Create_Process_Data_Block,SetMem -- Set up process data blo

     680                                ; 
     681                                ; end of new process create 
     682                                ; 
     683 026D                           Create_PDB_cont: 
     684 026D  2E: C6 06 0000 E 00              MOV     BYTE PTR [CreatePDB],0h
					 ; reset flag 
     685 0273  A1 0002                          MOV     AX,DS:[2]              
					 ; set up size for fall through 
     686                                 
     687                                entry SETMEM 
     688 0276                         1 SETMEM:
     689                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHIN
					G 
     690                                 
     691                                ; Inputs: 
     692                                ;       AX = Size of memory in paragrap
					hs 
     693                                ;       DX = Segment 
     694                                ; Function: 
     695                                ;       Completely prepares a program b
					ase at the 
     696                                ;       specified segment. 
     697                                ; Called at DOS init 
     698                                ; Outputs: 
     699                                ;       DS = DX 
     700                                ;       ES = DX 
     701                                ;       [0] has INT int_abort 
     702                                ;       [2] = First unavailable segment
					 ([ENDMEM]) 
     703                                ;       [5] to [9] form a long call to 
					the entry point 
     704                                ;       [10] to [13] have exit address 
					(from int_terminate) 
     705                                ;       [14] to [17] have ctrl-C exit a
					ddress (from int_ctrl_c) 
     706                                ;       [18] to [21] have fatal error a
					ddress (from int_fatal_abort) 
     707                                ; DX,BP unchanged. All other registers 
					destroyed. 
     708                                 
     709 0276  33 C9                            XOR     CX,CX 
     710 0278  8E D9                            MOV     DS,CX 
     711 027A  8E C2                            MOV     ES,DX 
     712 027C  BE 0088                          MOV     SI,addr_int_terminate 
     713 027F  BF 000A                          MOV     DI,SAVEXIT 
     714 0282  B9 0006                          MOV     CX,6 
     715 0285  F3/ A5                           REP     MOVSW 
     716 0287  26: A3 0002                      MOV     ES:[2],AX 
     717 028B  2B C2                            SUB     AX,DX 
     718 028D  3D 0FFF                          CMP     AX,MAXDIF 
     719 0290  76 03                            JBE     HAVDIF 
     720 0292  B8 0FFF                          MOV     AX,MAXDIF 
     721 0295                           HAVDIF: 
     722 0295  BB 000C                          MOV     BX,ENTRYPOINTSEG 
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Page     1-20
$Create_Process_Data_Block,SetMem -- Set up process data blo

     723 0298  2B D8                            SUB     BX,AX 
     724 029A  B1 04                            MOV     CL,4 
     725 029C  D3 E0                            SHL     AX,CL 
     726 029E  8E DA                            MOV     DS,DX 
     727 02A0  A3 0006                          MOV     WORD PTR DS:[PDB_CPM_Ca
					ll+1],AX 
     728 02A3  89 1E 0008                       MOV     WORD PTR DS:[PDB_CPM_Ca
					ll+3],BX 
     729 02A7  C7 06 0000 20CD                  MOV     DS:[PDB_Exit_Call],(int
					_abort SHL 8) + mi_INT 
     730 02AD  C6 06 0005 9A                    MOV     BYTE PTR DS:[PDB_CPM_Ca
					ll],mi_Long_CALL 
     731 02B2  C7 06 0050 21CD                  MOV     WORD PTR DS:[PDB_Call_S
					ystem],(int_command SHL 8) + mi_INT 
     732 02B8  C6 06 0052 CB                    MOV     BYTE PTR DS:[PDB_Call_S
					ystem+2],mi_Long_RET 
     733                                        return 
     734 02BD                         1 ??0017:
     735 02BD  C3                     1  RET
     736                                 
     737                                $CREATE_PROCESS_DATA_BLOCK ENDP 
     738                                        do_ext 
     739                                 
     740 02BE                            CODE   ENDS 
     741                                        END 

Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DOSGROUP . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	02BE	BYTE	PUBLIC	'CODE'
  CONSTANTS  . . . . . . . . . .  	0000	BYTE	PUBLIC	'CONST'
  DATA . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-5
                                                             

  LAST . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'LAST'

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ABORT_INNER  . . . . . . . . . .  	L NEAR	003A	CODE	Global
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTRIB . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BADSLDRIVE . . . . . . . . . . .  	L NEAR	0022	CODE
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-6
                                                             

CREATEPDB  . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_COPY  . . . . . . . . . .  	L NEAR	0226	CODE
CREATE_DUP_JFN . . . . . . . . .  	L NEAR	023E	CODE
CREATE_NO_INC  . . . . . . . . .  	L NEAR	024E	CODE
CREATE_PDB_CONT  . . . . . . . .  	L NEAR	026D	CODE
CREATE_PDB_OLD . . . . . . . . .  	L NEAR	0220	CODE
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREATE_SKIP  . . . . . . . . . .  	L NEAR	0258	CODE
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURBUF . . . . . . . . . . . . .  	V DWORD	0000	DATA	External
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENTPDB . . . . . . . . . . .  	V WORD 	0000	DATA	External
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DBPBHL . . . . . . . . . . . . .  	Number	0016	
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-7
                                                             

DEVOFL . . . . . . . . . . . . .  	Number	000B	
DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVSIZ . . . . . . . . . . . . .  	L NEAR	0122	CODE
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTART . . . . . . . . . . . .  	V WORD 	0000	DATA	External
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DMAADD . . . . . . . . . . . . .  	V DWORD	0000	DATA	External
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DOSRELATIVE  . . . . . . . . . .  	L NEAR	00AB	CODE
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ENTLAST  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENTRYPOINTSEG  . . . . . . . . .  	Number	000C	
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEC . . . . . . . . . . . . . .  	Number	004B	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-8
                                                             

EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CODE  . . . . . . . . . . .  	V WORD 	0000	DATA	External
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	
EXIT_TYPE  . . . . . . . . . . .  	V BYTE 	0000	DATA	External
EXTFCB . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-9
                                                             

GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	

HAVDIF . . . . . . . . . . . . .  	L NEAR	0295	CODE

INDOS  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Number	0000	
KEEP_PROCESS . . . . . . . . . .  	Number	0031	
KILLIT . . . . . . . . . . . . .  	L NEAR	006C	CODE
KILLSRCH . . . . . . . . . . . .  	L NEAR	00B5	CODE
KILLSRCH1  . . . . . . . . . . .  	L NEAR	00B3	CODE

LASTBUFFER . . . . . . . . . . .  	V DWORD	0000	DATA	External
LASTENT  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAXDIF . . . . . . . . . . . . .  	Number	0FFF	
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-10
                                                             

MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		

NBFFR  . . . . . . . . . . . . .  	L NEAR	015A	CODE
NORMFCB  . . . . . . . . . . . .  	L NEAR	009D	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		

OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
OUTMES . . . . . . . . . . . . .  	N PROC	01F2	CODE	Global	Length = 000C

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	

RAWNORM  . . . . . . . . . . . .  	L NEAR	01D2	CODE
RAWOSTRT . . . . . . . . . . . .  	L NEAR	01E3	CODE
RAWOUT . . . . . . . . . . . . .  	L NEAR	01B2	CODE	Global
RAWOUT2  . . . . . . . . . . . .  	L NEAR	01D8	CODE	Global
RAWOUT3  . . . . . . . . . . . .  	L NEAR	01DD	CODE
RAWRET . . . . . . . . . . . . .  	L NEAR	01D5	CODE
RAWRET1  . . . . . . . . . . . .  	L NEAR	01D6	CODE
RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RECOK  . . . . . . . . . . . . .  	L NEAR	0108	CODE
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RESET_ENVIRONMENT_J  . . . . . .  	NEAR 	0059	CODE
RESFLG . . . . . . . . . . . . .  	L NEAR	0196	CODE
RET14  . . . . . . . . . . . . .  	L NEAR	0130	CODE
RET16  . . . . . . . . . . . . .  	L NEAR	0143	CODE
RET_C  . . . . . . . . . . . . .  	NEAR 	01DB	CODE
RET_L  . . . . . . . . . . . . .  	NEAR 	02BD	CODE
RET_Z  . . . . . . . . . . . . .  	NEAR 	01F6	CODE
RILP . . . . . . . . . . . . . .  	L NEAR	019B	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-11
                                                             

RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
ROLP . . . . . . . . . . . . . .  	L NEAR	01E0	CODE
RPRI . . . . . . . . . . . . . .  	Number	0006	

SAVEXIT  . . . . . . . . . . . .  	Number	000A	
SAVPLCE  . . . . . . . . . . . .  	L NEAR	005F	CODE
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETMEM . . . . . . . . . . . . .  	L NEAR	0276	CODE	Global
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SKPBF  . . . . . . . . . . . . .  	L NEAR	016C	CODE
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
SYSINITVAR . . . . . . . . . . .  	V BYTE 	0000	DATA	External

THISDPB  . . . . . . . . . . . .  	V DWORD	0000	DATA	External
THISDRV  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
Microsoft (R) Macro Assembler  Version 4.00                 3/27/20 09:23:36

MISC - Miscellanious routines for MS-DOS                    Symbols-12
                                                             

USERIDOPER . . . . . . . . . . .  	Number	005E	
USER_SP  . . . . . . . . . . . .  	V WORD 	0000	DATA	External

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

$ABORT . . . . . . . . . . . . .  	N PROC	0032	CODE	Global	Length = 002A
$CREATE_PROCESS_DATA_BLOCK . . .  	N PROC	020F	CODE	Global	Length = 00AF
$DIR_SEARCH_FIRST  . . . . . . .  	N PROC	005C	CODE	Global	Length = 0061
$DIR_SEARCH_NEXT . . . . . . . .  	N PROC	00BD	CODE	Global	Length = 0036
$DISK_RESET  . . . . . . . . . .  	N PROC	0144	CODE	Global	Length = 002E
$DUP_PDB . . . . . . . . . . . .  	N PROC	0209	CODE	Global	Length = 0006
$GET_FCB_FILE_LENGTH . . . . . .  	N PROC	00F3	CODE	Global	Length = 003E
$GET_FCB_POSITION  . . . . . . .  	N PROC	0131	CODE	Global	Length = 0013
$PARSE_FILE_DESCRIPTOR . . . . .  	N PROC	01FE	CODE	Global	Length = 000B
$RAW_CON_INPUT . . . . . . . . .  	L NEAR	019E	CODE	Global
$RAW_CON_IO  . . . . . . . . . .  	N PROC	0172	CODE	Global	Length = 0080
$SLEAZEFUNC  . . . . . . . . . .  	N PROC	0000	CODE	Global	Length = 0032
$SLEAZEFUNCDL  . . . . . . . . .  	L NEAR	0002	CODE	Global
??0000 . . . . . . . . . . . . .  	L NEAR	0031	CODE
??0001 . . . . . . . . . . . . .  	L NEAR	0059	CODE
??0002 . . . . . . . . . . . . .  	L NEAR	00B2	CODE
??0003 . . . . . . . . . . . . .  	L NEAR	00BC	CODE
??0004 . . . . . . . . . . . . .  	L NEAR	00F8	CODE
??0006 . . . . . . . . . . . . .  	L NEAR	0130	CODE
??0007 . . . . . . . . . . . . .  	L NEAR	0143	CODE
??0008 . . . . . . . . . . . . .  	L NEAR	0171	CODE
??0009 . . . . . . . . . . . . .  	L NEAR	0182	CODE
??000B . . . . . . . . . . . . .  	L NEAR	0195	CODE
??000C . . . . . . . . . . . . .  	L NEAR	01A3	CODE
??000E . . . . . . . . . . . . .  	L NEAR	01B1	CODE
??000F . . . . . . . . . . . . .  	L NEAR	01D7	CODE
??0010 . . . . . . . . . . . . .  	L NEAR	01DB	CODE
??0012 . . . . . . . . . . . . .  	L NEAR	01F1	CODE
??0013 . . . . . . . . . . . . .  	L NEAR	01F6	CODE
??0015 . . . . . . . . . . . . .  	L NEAR	01FD	CODE
??0016 . . . . . . . . . . . . .  	L NEAR	0208	CODE
??0017 . . . . . . . . . . . . .  	L NEAR	02BD	CODE


   1959 Source  Lines
   2702 Total   Lines
    641 Symbols

  17578 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
