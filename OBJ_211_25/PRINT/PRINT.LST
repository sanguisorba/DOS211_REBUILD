 The Microsoft MACRO Assembler , Version 1.25          	Page	1-1
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	;MS-DOS PRINT program for background printing o
	 	 	 	f text files to the list
 	 	 	 	;        device.  INT 28H is a software interru
	 	 	 	pt generated by the  DOS
 	 	 	 	;        in  its  I/O  wait  loops.   This spoo
	 	 	 	ler can be assembled for
 	 	 	 	;        operation using only this interrupt  w
	 	 	 	hich  is  portable  from
 	 	 	 	;        system to  system.  It may also be ass
	 	 	 	embled to use a hardware
 	 	 	 	;        timer interrupt in addition to  the  s
	 	 	 	oftware  INT  28H.   The
 	 	 	 	;        purpose  of  using hardware interrupts
	 	 	 	 is to allow printing to
 	 	 	 	;        continue during programs which do not 
	 	 	 	 enter  the  system  and
 	 	 	 	;        therefore causes the INT 28H to go awa
	 	 	 	y.  A timer interrupt is
 	 	 	 	;        chosen in preference to a  "printer  b
	 	 	 	uffer  empty"  interrupt
 	 	 	 	;        because  PRINT  in the timer form is g
	 	 	 	eneric.  It can be given
 	 	 	 	;        the name of any currently installed ch
	 	 	 	aracter  device  as  the
 	 	 	 	;        "printer",  this  makes  it  portable 
	 	 	 	 to  devices  which  are
 	 	 	 	;        installed by the user even in the hard
	 	 	 	ware case.  It could  be
 	 	 	 	;        modified to use a buffer empty interru
	 	 	 	pt (no code is given for
 	 	 	 	;        this case), if this is done the PROMPT
	 	 	 	 and BADMES messages and
 	 	 	 	;        their associated  code should be remov
	 	 	 	ed as PRINT will then be
 	 	 	 	;        device specific.
 	 	 	 	;
 	 	 	 	;  VERSION      1.00    07/03/82
 	 	 	 	
 	 	 	 	
 = 0000	 	 	 	FALSE   EQU     0
 =-0001	 	 	 	TRUE    EQU     NOT FALSE
 	 	 	 	
 =	 	 	 	IBM     EQU     FALSE
 =	 	 	 	IBMVER  EQU     IBM
 =	 	 	 	MSVER   EQU     TRUE
 	 	 	 	
 	 	 	 	        IF      MSVER
 =	 	 	 	HARDINT EQU     FALSE           ;No hardware in
	 	 	 	ts
 =	 	 	 	AINT    EQU     FALSE           ;No need to do 
	 	 	 	interrupt acknowledge
 	 	 	 	        ENDIF
 	 	 	 	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-2
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	        ENDIF
 	 	 	 	
 	 	 	 	;The following values have to do with the ERRCN
	 	 	 	T variable and the
 	 	 	 	;  CNTMES message. The values define levels at 
	 	 	 	wich it is assumed
 	 	 	 	;  an off-line error exists. ERRCNT1 defines th
	 	 	 	e value of ERRCNT above
 	 	 	 	;  which the CNTMES message is printed by the t
	 	 	 	ransient. ERRCNT2
 	 	 	 	;  defines the value of ERRCNT above which the 
	 	 	 	resident will give up
 	 	 	 	;  trying to print messages on the printer, it 
	 	 	 	is much greater than
 	 	 	 	;  ERRCNT1 because a much tighter loop is invol
	 	 	 	ved. The bounding event
 	 	 	 	;  which determines the correct value is the ti
	 	 	 	me required to do a
 	 	 	 	;  form feed.
 	 	 	 	
 	 	 	 	        ELSE
 = 03E8	 	 	 	ERRCNT1 EQU     1000
 = 4E20	 	 	 	ERRCNT2 EQU     20000
 	 	 	 	        ENDIF
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 	 	 	 	
 	 	 	 	;WARNING DANGER WARNING:
 	 	 	 	;   PRINT is a systems utility. It is clearly u
	 	 	 	nderstood that it may have
 	 	 	 	;   to be entirely re-written for future versio
	 	 	 	ns of MS-DOS. The following
 	 	 	 	;   TWO vectors are version specific, they may 
	 	 	 	not exist at all in future
 	 	 	 	;   versions. If they do exist, they may functi
	 	 	 	on differently.
 	 	 	 	; ANY PROGRAM WHICH IMITATES PRINTS USE OF THES
	 	 	 	E VECTORS IS ALSO A SYSTEMS
 	 	 	 	; UTILITY AND IS THEREFORE NOT VERSION PORTABLE
	 	 	 	 IN ANY WAY SHAPE OR FORM.
 	 	 	 	; YOU HAVE BEEN WARNED, "I DID IT THE SAME WAY 
	 	 	 	PRINT DID" IS NOT AN REASON
 	 	 	 	; TO EXPECT A PROGRAM TO WORK ON FUTURE VERSION
	 	 	 	S OF MS-DOS.
 = 0028	 	 	 	SOFTINT EQU     28H             ;Software inter
	 	 	 	rupt generated by DOS
 = 002F	 	 	 	COMINT  EQU     2FH             ;Communications
	 	 	 	 interrupt used by PRINT
 	 	 	 	                                ;  This vector 
	 	 	 	number is DOS reserved. It
 	 	 	 	                                ;  is not gener
	 	 	 	ally available to programs
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-3
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	                                ;  other than P
	 	 	 	RINT.
 	 	 	 	
 = 0200	 	 	 	BLKSIZ  EQU     512             ;Size of the PR
	 	 	 	INT I/O block in bytes
 = 0028	 	 	 	FCBSIZ  EQU     40              ;Size of an FCB
 	 	 	 	
                             C	        INCLUDE DOSSYM.ASM
                             C	include DOSMAC.ASM
                             C	;
                             C	; Macro file for MSDOS.
                             C	;
                             C	
                             C	SUBTTL BREAK a listing into pages and give new 
	 	 	 	subtitles
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-4
	 	 	 	 	 	 	12-10-<1    
	 	 	 	BREAK a listing into pages and give new subtitl
	 	 	 	es

                             C	PAGE
                             C	BREAK MACRO subtitle
                             C	 SUBTTL subtitle
                             C	 PAGE
                             C	ENDM
                             C	
                             C	BREAK <I_NEED: declare a variable external, if 
	 	 	 	necessary, and allocate a size>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-5
	 	 	 	 	 	 	12-10-<1    
	 	 	 	I_NEED: declare a variable external, if necessa
	 	 	 	ry, and alloc

                             C	
                             C	;
                             C	; declare a variable external and allocate a si
	 	 	 	ze
                             C	;
                             C	I_NEED MACRO sym,len
                             C	 DATA SEGMENT BYTE PUBLIC 'DATA'
                             C	 IFIDN <len>,<WORD>
                             C	 EXTRN &sym:WORD
                             C	 ELSE
                             C	 IFIDN <len>,<DWORD>
                             C	 EXTRN &sym:DWORD
                             C	 ELSE
                             C	 EXTRN &sym:BYTE
                             C	 ENDIF
                             C	 ENDIF
                             C	 DATA ENDS
                             C	ENDM
                             C	
                             C	;
                             C	; call a procedure that may be external. The ca
	 	 	 	ll will be short.
                             C	;
                             C	invoke MACRO name
                             C	.xcref
                             C	 IF2
                             C	 IFNDEF name
                             C	 EXTRN name:NEAR
                             C	 ENDIF
                             C	 ENDIF
                             C	.cref
                             C	 CALL name
                             C	ENDM
                             C	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-6
	 	 	 	 	 	 	12-10-<1    
	 	 	 	I_NEED: declare a variable external, if necessa
	 	 	 	ry, and alloc

                             C	PAGE
                             C	;
                             C	; jump to a label that may be external. The jum
	 	 	 	p will be near.
                             C	;
                             C	transfer MACRO name
                             C	.xcref
                             C	 IF2
                             C	 IFNDEF name
                             C	 EXTRN name:NEAR
                             C	 ENDIF
                             C	 ENDIF
                             C	.cref
                             C	 JUMP name
                             C	ENDM
                             C	
                             C	;
                             C	; get a short address in a word
                             C	;
                             C	short_addr MACRO name
                             C	 IFDIF <name>,<?>
                             C	.xcref
                             C	 IF2
                             C	 IFNDEF name
                             C	 EXTRN name:NEAR
                             C	 ENDIF
                             C	 ENDIF
                             C	.cref
                             C	 DW OFFSET DOSGROUP:name
                             C	 ELSE
                             C	 DW ?
                             C	 ENDIF
                             C	ENDM
                             C	
                             C	;
                             C	; get a long address in a dword
                             C	;
                             C	long_addr MACRO name
                             C	.xcref
                             C	 IF2
                             C	 IFNDEF name
                             C	 EXTRN name:NEAR
                             C	 ENDIF
                             C	.cref
                             C	 DD name
                             C	ENDM
                             C	
                             C	;
                             C	; declare a PROC near or far but PUBLIC nonethe
	 	 	 	less
                             C	;
                             C	procedure MACRO name,distance
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-7
	 	 	 	 	 	 	12-10-<1    
	 	 	 	I_NEED: declare a variable external, if necessa
	 	 	 	ry, and alloc

                             C	 PUBLIC name
                             C	name PROC distance
                             C	ENDM
                             C	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-8
	 	 	 	 	 	 	12-10-<1    
	 	 	 	I_NEED: declare a variable external, if necessa
	 	 	 	ry, and alloc

                             C	PAGE
                             C	;
                             C	; define a data item to be public and of an app
	 	 	 	ropriate size/type
                             C	;
                             C	I_AM MACRO name,size
                             C	 PUBLIC name
                             C	
                             C	 IFIDN <size>,<WORD>
                             C	name DW ?
                             C	 ELSE
                             C	 IFIDN <size>,<DWORD>
                             C	name DD ?
                             C	 ELSE
                             C	 IFIDN <size>,<BYTE>
                             C	name DB ?
                             C	 ELSE
                             C	name DB size DUP (?)
                             C	 ENDIF
                             C	 ENDIF
                             C	 ENDIF
                             C	ENDM
                             C	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-9
	 	 	 	 	 	 	12-10-<1    
	 	 	 	I_NEED: declare a variable external, if necessa
	 	 	 	ry, and alloc

                             C	PAGE
                             C	;
                             C	; call the macro chain
                             C	;
                             C	do_ext macro
                             C	endm
                             C	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-10
	 	 	 	 	 	 	12-10-<1    
	 	 	 	I_NEED: declare a variable external, if necessa
	 	 	 	ry, and alloc

                             C	PAGE
                             C	
                             C	;
                             C	; define an entry in a procedure
                             C	;
                             C	entry macro name
                             C	 PUBLIC name
                             C	name:
                             C	endm
                             C	
                             C	BREAK <ERROR - print a message and then jump to
	 	 	 	 a label>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-11
	 	 	 	 	 	 	12-10-<1    
	 	 	 	ERROR - print a message and then jump to a labe
	 	 	 	l

                             C	
                             C	error macro code
                             C	 local a
                             C	.xcref
                             C	 MOV AL,code
                             C	 transfer SYS_RET_ERR
                             C	.cref
                             C	ENDM
                             C	
                             C	BREAK <JUMP - real jump that links up shortwise
	 	 	 	>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-12
	 	 	 	 	 	 	12-10-<1    
	 	 	 	JUMP - real jump that links up shortwise

                             C	;
                             C	; given a label <lbl> either 2 byte jump to ano
	 	 	 	ther label <lbl>_J
                             C	; if it is near enough or 3 byte jump to <lbl>
                             C	;
                             C	
                             C	jump macro lbl
                             C	 local a
                             C	.xcref
                             C	 a:
                             C	 ifndef lbl&_J ;; is this the first invocation
                             C	 JMP lbl
                             C	 ELSE
                             C	 IF lbl&_J GE $
                             C	 JMP lbl
                             C	 ELSE
                             C	 IF ($-lbl&_J) GT 126 ;; is the jump too far aw
	 	 	 	ay?
                             C	 JMP lbl
                             C	 ELSE ;; do the short one...
                             C	 JMP lbl&_J
                             C	 ENDIF
                             C	 ENDIF
                             C	 ENDIF
                             C	 lbl&_j = a
                             C	.cref
                             C	endm
                             C	
                             C	BREAK <RETURN - return from a function>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-13
	 	 	 	 	 	 	12-10-<1    
	 	 	 	RETURN - return from a function

                             C	
                             C	return macro
                             C	 local a
                             C	.xcref
                             C	a:
                             C	 RET
                             C	ret_l = a
                             C	.cref
                             C	endm
                             C	
                             C	BREAK <CONDRET - conditional return>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-14
	 	 	 	 	 	 	12-10-<1    
	 	 	 	CONDRET - conditional return

                             C	
                             C	makelab macro l,cc,ncc
                             C	 local a
                             C	 j&ncc a ;; j<NCC> a:
                             C	 return ;; return
                             C	 a: ;; a:
                             C	 ret_&cc = ret_l ;; define ret_<CC> to be ret_l
                             C	endm
                             C	
                             C	condret macro cc,ncc
                             C	 local a,b
                             C	 ifdef ret_l ;; if ret_l is defined
                             C	 if (($ - ret_l) le 126) and ($ gt ret_l)
                             C	 ;; if ret_l is near enough then
                             C	 a: j&cc ret_l ;; a: j<CC> to ret_l
                             C	 ret_&cc = a ;; define ret_<CC> to be a:
                             C	 else
                             C	 makelab a,cc,ncc
                             C	 endif
                             C	 else
                             C	 ifdef ret_&cc ;; if ret_<CC> defined
                             C	 if (($ - ret_&cc) le 126) and ($ gt ret_&cc)
                             C	 ;; if ret_<CC> is near enough
                             C	 a: j&cc ret_&cc ;; a: j<CC> to ret_<CC>
                             C	 ret_&cc = a ;; define ret_<CC> to be a:
                             C	 else
                             C	 makelab a,cc,ncc
                             C	 endif
                             C	 else
                             C	 makelab a,cc,ncc
                             C	 endif
                             C	 endif
                             C	endm
                             C	;condret macro cc,ncc
                             C	; local a,b
                             C	; ifdef ret_l ; if ret_l is defined
                             C	; if (($ - ret_l) le 126) and ($ gt ret_l)
                             C	; ; if ret_l is near enough then
                             C	; a: j&cc ret_l ; a: j<CC> to ret_l
                             C	; ret_&cc = a ; define ret_<CC> to be a:
                             C	; exitm
                             C	; endif
                             C	; endif
                             C	; ifdef ret_&cc ; if ret_<CC> defined
                             C	; if (($ - ret_&cc) le 126) and ($ gt ret_&cc)
                             C	; ; if ret_<CC> is near enough
                             C	; a: j&cc ret_&cc ; a: j<CC> to ret_<CC>
                             C	; ret_&cc = a ; define ret_<CC> to be a:
                             C	; exitm
                             C	; endif
                             C	; endif
                             C	; j&ncc a ; j<NCC> a:
                             C	; return ; return
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-15
	 	 	 	 	 	 	12-10-<1    
	 	 	 	CONDRET - conditional return

                             C	; a: ; a:
                             C	; ret_&cc = ret_l ; define ret_<CC> to be ret_l
                             C	;endm
                             C	;
                             C	BREAK <RETZ - return if zero, links up shortwis
	 	 	 	e if necessary>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-16
	 	 	 	 	 	 	12-10-<1    
	 	 	 	RETZ - return if zero, links up shortwise if ne
	 	 	 	cessary

                             C	
                             C	retz macro
                             C	 condret z,nz
                             C	endm
                             C	
                             C	BREAK <RETNZ - return if not zero, links up sho
	 	 	 	rtwise if necessary>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-17
	 	 	 	 	 	 	12-10-<1    
	 	 	 	RETNZ - return if not zero, links up shortwise 
	 	 	 	if necessary

                             C	
                             C	retnz macro
                             C	 condret nz,z
                             C	endm
                             C	
                             C	BREAK <RETC - return if carry set, links up sho
	 	 	 	rtwise if necessary>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-18
	 	 	 	 	 	 	12-10-<1    
	 	 	 	RETC - return if carry set, links up shortwise 
	 	 	 	if necessary

                             C	
                             C	retc macro
                             C	 condret c,nc
                             C	endm
                             C	
                             C	BREAK <RETNC - return if not carry, links up sh
	 	 	 	ortwise if necessary>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-19
	 	 	 	 	 	 	12-10-<1    
	 	 	 	RETNC - return if not carry, links up shortwise
	 	 	 	 if necessary

                             C	
                             C	retnc macro
                             C	 condret nc,c
                             C	endm
                             C	
                             C	BREAK <CONTEXT - set the DOS context to a parti
	 	 	 	cular register>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-20
	 	 	 	 	 	 	12-10-<1    
	 	 	 	CONTEXT - set the DOS context to a particular r
	 	 	 	egister

                             C	
                             C	context macro r
                             C	 PUSH SS
                             C	 POP r
                             C	 ASSUME r:DOSGROUP
                             C	endm
                             C	IF2
                             C	    %OUT    DOSSYM in Pass 2
                             C	ENDIF
                             C	
                             C	ENDIF
                             C	
 = 0002                      C	DOS_MAJOR_VERSION   EQU      2
 = 000B                      C	DOS_MINOR_VERSION   EQU     11
                             C	
                             C	BREAK <Control character definitions>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-21
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Control character definitions

                             C	
 = 007F                      C	c_DEL       EQU     7Fh         ;    ASCII rubo
	 	 	 	ut or delete previous char
 = 0008                      C	c_BS        EQU     08h         ; ^H ASCII back
	 	 	 	space
 = 000D                      C	c_CR        EQU     0Dh         ; ^M ASCII carr
	 	 	 	iage return
 = 000A                      C	c_LF        EQU     0Ah         ; ^J ASCII line
	 	 	 	feed
 = 0017                      C	c_ETB       EQU     17h         ; ^W ASCII end 
	 	 	 	of transmission
 = 0015                      C	c_NAK       EQU     15h         ; ^U ASCII nega
	 	 	 	tive acknowledge
 = 0003                      C	c_ETX       EQU     03h         ; ^C ASCII end 
	 	 	 	of text
 = 0009                      C	c_HT        EQU     09h         ; ^I ASCII tab
                             C	
                             C	BREAK <BPB Definition>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-22
	 	 	 	 	 	 	12-10-<1    
	 	 	 	BPB Definition

                             C	
                             C	
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	; Certain structures, constants and system  cal
	 	 	 	ls  below  are  private  to ;
                             C	; the DOS  and  are  extremely  version-depende
	 	 	 	nt.  They may change at any ;
                             C	; time at  the  implementors'  whim.   As  a  r
	 	 	 	esult,  they  must  not  be ;
                             C	; documented to  the  general  public.   If  an
	 	 	 	  extreme case arises, they ;
                             C	; must be documented with this warning.        
	 	 	 	                            ;
                             C	;                                              
	 	 	 	                            ;
                             C	; Those structures and constants that are subje
	 	 	 	ct to  the  above  will  be ;
                             C	; marked and bracketed with the flag:          
	 	 	 	                            ;
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	
                             C	BREAK  <Bios Parameter Block>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-23
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Bios Parameter Block

                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	
                             C	; Bios Parameter Block definition
                             C	; This structure is used to build a full DPB
                             C	
                             C	BPBLOCK STRUC
 0000  ????                  C	BPSECSZ DW      ?       ; Size in bytes of phys
	 	 	 	ical sector
 0002  ??                    C	BPCLUS  DB      ?       ; Sectors/Alloc unit
 0003  ????                  C	BPRES   DW      ?       ; Number of reserved se
	 	 	 	ctors
 0005  ??                    C	BPFTCNT DB      ?       ; Number of FATs
 0006  ????                  C	BPDRCNT DW      ?       ; Number of directory e
	 	 	 	ntries
 0008  ????                  C	BPSCCNT DW      ?       ; Total number of secto
	 	 	 	rs
 000A  ??                    C	BPMEDIA DB      ?       ; Media descriptor byte
 000B  ????                  C	BPFTSEC DW      ?       ; Number of sectors tak
	 	 	 	en up by one FAT
 000D                        C	BPBLOCK ENDS
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	
                             C	BREAK <Disk I/O Buffer Header>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-24
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Disk I/O Buffer Header

                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	
                             C	; Field definition for I/O buffer information
                             C	
                             C	BUFFINFO        STRUC
 0000  ????????              C	NEXTBUF         DD      ?       ; Pointer to ne
	 	 	 	xt buffer in list
                             C	; The next two items are often refed as a word
 0004  ??                    C	BUFDRV          DB      ?       ; Logical drive
	 	 	 	 # assoc with buffer FF = free
 0005  ??                    C	BUFDIRTY        DB      ?       ; Dirty flag
 0006  ??                    C	BUFPRI          DB      ?       ; Buffer select
	 	 	 	ion priority (see EQUs below)
 0007  ??                    C	VISIT           DB      ?       ; Visit flag fo
	 	 	 	r buffer pool scans
 0008  ????                  C	BUFSECNO        DW      ?       ; Sector number
	 	 	 	 of buffer
                             C	; The next two items are often refed as a word
 000A  ??                    C	BUFWRTCNT       DB      ?       ; For FAT secto
	 	 	 	rs, # times sector written out
 000B  ??                    C	BUFWRTINC       DB      ?       ; "   "     "  
	 	 	 	 , # sectors between each write
 000C  ????????              C	BUFDRVDP        DD      ?       ; Pointer to dr
	 	 	 	ive parameters
 0010                        C	BUFFINFO        ENDS
                             C	
 = 0010                      C	BUFINSIZ        EQU     SIZE BUFFINFO
                             C	                                ; Size of struc
	 	 	 	ture in bytes
                             C	
 = 0000                      C	FREEPRI EQU     0
 = 0002                      C	LBRPRI  EQU     2               ; Last byte of 
	 	 	 	buffer read
 = 0004                      C	LBWPRI  EQU     4               ; Last byte wri
	 	 	 	tten
 = 0006                      C	RPRI    EQU     6               ; Read but not 
	 	 	 	last byte
 = 0008                      C	WPRI    EQU     8               ; Written but n
	 	 	 	ot last byte
 = 000F                      C	DIRPRI  EQU     15              ; Directory Sec
	 	 	 	tor
 = 001E                      C	FATPRI  EQU     30              ; FAT sector
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-25
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Disk I/O Buffer Header

                             C	
                             C	BREAK <User stack inside of system call>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-26
	 	 	 	 	 	 	12-10-<1    
	 	 	 	User stack inside of system call

                             C	; Location of user registers relative user stac
	 	 	 	k pointer
                             C	
                             C	user_environ    STRUC
 0000  ????                  C	user_AX     DW      ?
 0002  ????                  C	user_BX     DW      ?
 0004  ????                  C	user_CX     DW      ?
 0006  ????                  C	user_DX     DW      ?
 0008  ????                  C	user_SI     DW      ?
 000A  ????                  C	user_DI     DW      ?
 000C  ????                  C	user_BP     DW      ?
 000E  ????                  C	user_DS     DW      ?
 0010  ????                  C	user_ES     DW      ?
 0012  ????                  C	user_IP     DW      ?
 0014  ????                  C	user_CS     DW      ?
 0016  ????                  C	user_F      DW      ?
 0018                        C	user_environ    ENDS
                             C	
                             C	BREAK <interrupt definitions>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-27
	 	 	 	 	 	 	12-10-<1    
	 	 	 	interrupt definitions

                             C	
 = 0020                      C	INTTAB          EQU     20H
 = 0080                      C	INTBASE         EQU     4 * inttab
 = 00C0                      C	ENTRYPOINT      EQU     INTBASE+40H
                             C	
                             C	        ENDIF
                             C	
                             C	;
                             C	; interrupt assignments
                             C	;
                             C	        IF      NOT ALTVECT
 =                           C	int_abort           EQU     INTTAB          ; a
	 	 	 	bort process
 = 0021                      C	int_command         EQU     int_abort+1     ; c
	 	 	 	all MSDOS
 = 0022                      C	int_terminate       EQU     int_abort+2     ; i
	 	 	 	nt to terminate address
 = 0023                      C	int_ctrl_c          EQU     int_abort+3     ; ^
	 	 	 	c trapper
 = 0024                      C	int_fatal_abort     EQU     int_abort+4     ; h
	 	 	 	ard disk error
 = 0025                      C	int_disk_read       EQU     int_abort+5     ; l
	 	 	 	ogical sector disk read
 = 0026                      C	int_disk_write      EQU     int_abort+6     ; l
	 	 	 	ogical sector disk write
 = 0027                      C	int_keep_process    EQU     int_abort+7     ; t
	 	 	 	erminate program and stay
                             C	                                            ; r
	 	 	 	esident
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 = 0028                      C	int_spooler         EQU     int_abort+8     ; s
	 	 	 	pooler call
 = 0029                      C	int_fastcon         EQU     int_abort+9     ; f
	 	 	 	ast CON interrupt
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	        ENDIF
                             C	
 = 0080                      C	addr_int_abort          EQU    4 * int_abort
 = 0084                      C	addr_int_command        EQU    4 * int_command
 = 0088                      C	addr_int_terminate      EQU    4 * int_terminat
	 	 	 	e
 = 008C                      C	addr_int_ctrl_c         EQU    4 * int_ctrl_c
 = 0090                      C	addr_int_fatal_abort    EQU    4 * int_fatal_ab
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-28
	 	 	 	 	 	 	12-10-<1    
	 	 	 	interrupt definitions

	 	 	 	ort
 = 0094                      C	addr_int_disk_read      EQU    4 * int_disk_rea
	 	 	 	d
 = 0098                      C	addr_int_disk_write     EQU    4 * int_disk_wri
	 	 	 	te
 = 009C                      C	addr_int_keep_process   EQU    4 * int_keep_pro
	 	 	 	cess
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 = 00A0                      C	addr_int_spooler        EQU    4 * int_spooler
 = 00A4                      C	addr_int_fastcon        EQU    4 * int_fastcon
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	
                             C	BREAK <Disk map>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-29
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Disk map

                             C	;  MSDOS partitions the disk into 4 sections:
                             C	;
                             C	;  phys sector 0:   +-------------------+
                             C	;       |           | boot/reserved     |
                             C	;       |           +-------------------+
                             C	;       |           |  File allocation  |
                             C	;       v           |      table(s)     |
                             C	;                   |  (multiple copies |
                             C	;                   |     are kept)     |
                             C	;                   +-------------------+
                             C	;                   |     Directory     |
                             C	;                   +-------------------+
                             C	;                   |     File space    |
                             C	;                   +-------------------+
                             C	;                   |   Unaddressable   |
                             C	;                   |  (to end of disk) |
                             C	;                   +-------------------+
                             C	;
                             C	; All partition boundaries are sector boundarie
	 	 	 	s.  The size of the FAT is
                             C	; adjusted to maximize the file space addressab
	 	 	 	le.
                             C	
                             C	BREAK <Directory entry>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-30
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Directory entry

                             C	
                             C	;
                             C	;       +---------------------------+
                             C	;       |  (12 BYTE) filename/ext   |       0  
	 	 	 	     0
                             C	;       +---------------------------+
                             C	;       |     (BYTE) attributes     |       11 
	 	 	 	     B
                             C	;       +---------------------------+
                             C	;       |    (10 BYTE) reserved     |       12 
	 	 	 	     C
                             C	;       +---------------------------+
                             C	;       | (WORD) time of last write |       22 
	 	 	 	     16
                             C	;       +---------------------------+
                             C	;       | (WORD) date of last write |       24 
	 	 	 	     18
                             C	;       +---------------------------+
                             C	;       |   (WORD) First cluster    |       26 
	 	 	 	     1A
                             C	;       +---------------------------+
                             C	;       |     (DWORD) file size     |       28 
	 	 	 	     1C
                             C	;       +---------------------------+
                             C	;
                             C	;   First byte of filename  = E5 -> free direct
	 	 	 	ory entry
                             C	;                           = 00 -> end of allo
	 	 	 	cated directory
                             C	;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
	 	 	 	e, 11-15=hour
                             C	;   Date:   Bits 0-4=day, bits 5-8=month, bits 
	 	 	 	9-15=year-1980
                             C	;
                             C	dir_entry   STRUC
 0000     0B [               C	dir_name    DB      11 DUP (?)          ; file 
	 	 	 	name
                ??           C	
                    ]        C	
                             C	
 000B  ??                    C	dir_attr    DB      ?                   ; attri
	 	 	 	bute bits
 000C     0A [               C	dir_pad     DB      10 DUP (?)          ; reser
	 	 	 	ved for expansion
                ??           C	
                    ]        C	
                             C	
 0016  ????                  C	dir_time    DW      ?                   ; time 
	 	 	 	of last write
 0018  ????                  C	dir_date    DW      ?                   ; date 
	 	 	 	of last write
 001A  ????                  C	dir_first   DW      ?                   ; first
	 	 	 	 allocation unit of file
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-31
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Directory entry

 001C  ????                  C	dir_size_l  DW      ?                   ; low 1
	 	 	 	6 bits of file size
 001E  ????                  C	dir_size_h  DW      ?                   ; high 
	 	 	 	16 bits of file size
 0020                        C	dir_entry   ENDS
                             C	
 = 0001                      C	attr_read_only      EQU      1h
 = 0002                      C	attr_hidden         EQU      2h
 = 0004                      C	attr_system         EQU      4h
 = 0008                      C	attr_volume_id      EQU      8h
 = 0010                      C	attr_directory      EQU     10h
 = 0020                      C	attr_archive        EQU     20h
                             C	
 = 0016                      C	attr_all            EQU     attr_hidden+attr_sy
	 	 	 	stem+attr_directory
                             C	                                        ; OR of
	 	 	 	 hard attributes for FINDENTRY
                             C	
 = 0021                      C	attr_ignore         EQU     attr_read_only+attr
	 	 	 	_archive
                             C	                                        ; ignor
	 	 	 	e this(ese) attribute(s) during
                             C	                                        ; searc
	 	 	 	h first/next
                             C	
 = 0027                      C	attr_changeable     EQU     attr_read_only+attr
	 	 	 	_hidden+attr_system+attr_archive
                             C	                                        ; chang
	 	 	 	eable via CHMOD
                             C	
                             C	BREAK <File allocation Table information>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-32
	 	 	 	 	 	 	12-10-<1    
	 	 	 	File allocation Table information

                             C	;
                             C	; The File Allocation Table uses a 12-bit entry
	 	 	 	 for each allocation unit on
                             C	; the disk.  These entries are packed, two for 
	 	 	 	every three bytes.  The contents
                             C	; of entry number N is found by 1) multiplying 
	 	 	 	N by 1.5; 2) adding the result
                             C	; to the base address of the Allocation Table; 
	 	 	 	3) fetching the 16-bit word
                             C	; at this address; 4) If N was odd (so that N*1
	 	 	 	.5 was not an integer), shift
                             C	; the word right four bits; 5) mask to 12 bits 
	 	 	 	(AND with 0FFF hex).  Entry
                             C	; number zero is used as an end-of-file trap in
	 	 	 	 the OS and is passed to the
                             C	; BIOS to help determine disk format.  Entry 1 
	 	 	 	is reserved for future use.
                             C	; The first available allocation unit is assign
	 	 	 	ed entry number two, and even
                             C	; though it is the first, is called cluster 2. 
	 	 	 	 Entries greater than 0FF8H
                             C	; are end of file marks; entries of zero are un
	 	 	 	allocated.  Otherwise, the
                             C	; contents of a FAT entry is the number of the 
	 	 	 	next cluster in the file.
                             C	;
                             C	; Clusters with bad sectors are tagged with FF7
	 	 	 	H.  Any non-zero number would
                             C	; do because these clusters show as allocated, 
	 	 	 	but are not part of any
                             C	; allocation chain and thus will never be alloc
	 	 	 	ated to a file.  A particular
                             C	; number is selected so that disk checking prog
	 	 	 	rams know what to do (ie.  a
                             C	; cluster with entry FF7H which is not in a cha
	 	 	 	in is not an error).
                             C	
                             C	BREAK <DPB structure>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-33
	 	 	 	 	 	 	12-10-<1    
	 	 	 	DPB structure

                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	
 = 0040                      C	DIRSTRLEN       EQU     64      ; Max length in
	 	 	 	 bytes of directory strings
                             C	
                             C	dpb     STRUC
 0000  ??                    C	dpb_drive           DB      ?   ; Logical drive
	 	 	 	 # assoc with DPB (A=0,B=1,...)
 0001  ??                    C	dpb_UNIT            DB      ?   ; Driver unit n
	 	 	 	umber of DPB
 0002  ????                  C	dpb_sector_size     DW      ?   ; Size of physi
	 	 	 	cal sector in bytes
 0004  ??                    C	dpb_cluster_mask    DB      ?   ; Sectors/clust
	 	 	 	er - 1
 0005  ??                    C	dpb_cluster_shift   DB      ?   ; Log2 of secto
	 	 	 	rs/cluster
 0006  ????                  C	dpb_first_FAT       DW      ?   ; Starting reco
	 	 	 	rd of FATs
 0008  ??                    C	dpb_FAT_count       DB      ?   ; Number of FAT
	 	 	 	s for this drive
 0009  ????                  C	dpb_root_entries    DW      ?   ; Number of dir
	 	 	 	ectory entries
 000B  ????                  C	dpb_first_sector    DW      ?   ; First sector 
	 	 	 	of first cluster
 000D  ????                  C	dpb_max_cluster     DW      ?   ; Number of clu
	 	 	 	sters on drive + 1
 000F  ??                    C	dpb_FAT_size        DB      ?   ; Number of rec
	 	 	 	ords occupied by FAT
 0010  ????                  C	dpb_dir_sector      DW      ?   ; Starting reco
	 	 	 	rd of directory
 0012  ????????              C	dpb_driver_addr     DD      ?   ; Pointer to dr
	 	 	 	iver
 0016  ??                    C	dpb_media           DB      ?   ; Media byte
 0017  ??                    C	dpb_first_access    DB      ?   ; This is initi
	 	 	 	alized to -1 to force a media
                             C	                                ; check the fir
	 	 	 	st time this DPB is used
 0018  ????????              C	dpb_next_dpb        DD      ?   ; Pointer to ne
	 	 	 	xt Drive parameter block
 001C  ????                  C	dpb_current_dir     DW      ?   ; Cluster numbe
	 	 	 	r of start of current directory
                             C	                                ; 0 indicates r
	 	 	 	oot, -1 indicates invalid (disk
                             C	                                ; ?  changed)
 001E     40 [               C	dpb_dir_text        DB      DIRSTRLEN DUP(?)
                ??           C	
                    ]        C	
                             C	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-34
	 	 	 	 	 	 	12-10-<1    
	 	 	 	DPB structure

                             C	                                ; ASCIZ string 
	 	 	 	of current directory
 005E                        C	dpb     ENDS
                             C	
 = 005E                      C	DPBSIZ  EQU     SIZE dpb        ; Size of the s
	 	 	 	tructure in bytes
                             C	
 = 000D                      C	DSKSIZ  =       dpb_max_cluster ; Size of disk 
	 	 	 	(temp used during init only)
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	
                             C	BREAK <File Control Block definition>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-35
	 	 	 	 	 	 	12-10-<1    
	 	 	 	File Control Block definition

                             C	;
                             C	; Field definition for FCBs
                             C	; The FCB has the following structure:
                             C	;
                             C	;       +---------------------------+
                             C	;       |   Drive indicator(byte)   |
                             C	;       +---------------------------+
                             C	;       |    Filename (8 chars)     |
                             C	;       +---------------------------+
                             C	;       |    Extension (3 chars)    |
                             C	;       +---------------------------+
                             C	;       |   Current Extent(word)    |
                             C	;       +---------------------------+
                             C	;       |    Record size (word)     |
                             C	;       +---------------------------+
                             C	;       |    File Size (2 words)    |
                             C	;       +---------------------------+
                             C	;       |       Date of write       |
                             C	;       +---------------------------+
                             C	;       |       Time of write       |
                             C	;       +---------------------------+
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	;       | Flags:                    |
                             C	;       |  bit 7=0 file/1 device    |
                             C	;       |  bit 6=0 if dirty         |
                             C	;       |  bits 0-5 deviceid        |
                             C	;       +---------------------------+
                             C	;       |   first cluster in file   |
                             C	;       +---------------------------+
                             C	;       | position of last cluster  |
                             C	;       +---------------------------+
                             C	;       |   last cluster accessed   |   12 bit-
	 	 	 	+--- packed in 3 bytes
                             C	;       +---------------------------+          
	 	 	 	|
                             C	;       |     parent directory      |   <------
	 	 	 	+
                             C	;       +---------------------------+
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;       |    next record number     |
                             C	;       +---------------------------+
                             C	;       |   random record number    |
                             C	;       +---------------------------+
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-36
	 	 	 	 	 	 	12-10-<1    
	 	 	 	File Control Block definition

                             C	;
                             C	
                             C	sys_fcb     STRUC
 0000  ??                    C	fcb_drive   DB      ?
 0001     08 [               C	fcb_name    DB      8 DUP (?)
                ??           C	
                    ]        C	
                             C	
 0009     03 [               C	fcb_ext     DB      3 DUP (?)
                ??           C	
                    ]        C	
                             C	
 000C  ????                  C	fcb_EXTENT  DW      ?
 000E  ????                  C	fcb_RECSIZ  DW      ?       ; Size of record (u
	 	 	 	ser settable)
 0010  ????                  C	fcb_FILSIZ  DW      ?       ; Size of file in b
	 	 	 	ytes; used with the following
                             C	                            ; word
 0012  ????                  C	fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
	 	 	 	ST and SEARCH NEXT
 0014  ????                  C	fcb_FDATE   DW      ?       ; Date of last writ
	 	 	 	ing
 0016  ????                  C	fcb_FTIME   DW      ?       ; Time of last writ
	 	 	 	ing
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 0018  ??                    C	fcb_DEVID   DB      ?       ; Device ID number,
	 	 	 	 bits 0-5 if file.
                             C	                            ; bit 7=0 for file,
	 	 	 	 bit 7=1 for I/O device
                             C	                            ; If file, bit 6=0 
	 	 	 	if dirty
                             C	                            ; If I/O device, bi
	 	 	 	t 6=0 if EOF (input)
                             C	                            ;               Bit
	 	 	 	 5=1 if Raw mode
                             C	                            ;               Bit
	 	 	 	 0=1 if console input device
                             C	                            ;               Bit
	 	 	 	 1=1 if console output device
                             C	                            ;               Bit
	 	 	 	 2=1 if null device
                             C	                            ;               Bit
	 	 	 	 3=1 if clock device
 0019  ????                  C	fcb_FIRCLUS DW      ?       ; First cluster of 
	 	 	 	file
 001B  ????                  C	fcb_CLUSPOS DW      ?       ; Position of last 
	 	 	 	cluster accessed
 001D  ????                  C	fcb_LSTCLUS DW      ?       ; Last cluster acce
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-37
	 	 	 	 	 	 	12-10-<1    
	 	 	 	File Control Block definition

	 	 	 	ssed and directory pack 2 12
 001F  ??                    C	            DB      ?       ; bit numbers into 
	 	 	 	24 bits...
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 0020  ??                    C	fcb_NR      DB      ?       ; Next record
 0021     04 [               C	fcb_RR      DB      4 DUP (?)               ; R
	 	 	 	andom record
                ??           C	
                    ]        C	
                             C	
 0025                        C	sys_fcb     ENDS
                             C	
 = 0010                      C	FILDIRENT       = fcb_FILSIZ            ; Used 
	 	 	 	only by SEARCH FIRST and SEARCH
                             C	                                        ; NEXT
                             C	
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 = 0040                      C	devid_file_clean        EQU     40h     ; true 
	 	 	 	if file and not written
 = 003F                      C	devid_file_mask_drive   EQU     3Fh     ; mask 
	 	 	 	for drive number
                             C	
 = 0080                      C	devid_device            EQU     80h     ; true 
	 	 	 	if a device
 = 0040                      C	devid_device_EOF        EQU     40h     ; true 
	 	 	 	if end of file reached
 = 0020                      C	devid_device_raw        EQU     20h     ; true 
	 	 	 	if in raw mode
 = 0010                      C	devid_device_special    EQU     10h     ; true 
	 	 	 	if special device
 = 0008                      C	devid_device_clock      EQU     08h     ; true 
	 	 	 	if clock device
 = 0004                      C	devid_device_null       EQU     04h     ; true 
	 	 	 	if null device
 = 0002                      C	devid_device_con_out    EQU     02h     ; true 
	 	 	 	if console output
 = 0001                      C	devid_device_con_in     EQU     01h     ; true 
	 	 	 	if consle input
                             C	
                             C	;
                             C	; structure of devid field as returned by IOCTL
	 	 	 	 is:
                             C	;
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-38
	 	 	 	 	 	 	12-10-<1    
	 	 	 	File Control Block definition

                             C	;       BIT     7   6   5   4   3   2   1   0
                             C	;             |---|---|---|---|---|---|---|---|
                             C	;             | I | E | R | S | I | I | I | I |
                             C	;             | S | O | A | P | S | S | S | S |
                             C	;             | D | F | W | E | C | N | C | C |
                             C	;             | E |   |   | C | L | U | O | I |
                             C	;             | V |   |   | L | K | L | T | N |
                             C	;             |---|---|---|---|---|---|---|---|
                             C	;       ISDEV = 1 if this channel is a device
                             C	;             = 0 if this channel is a disk fil
	 	 	 	e
                             C	;
                             C	;       If ISDEV = 1
                             C	;
                             C	;             EOF = 0 if End Of File on input
                             C	;             RAW = 1 if this device is in Raw 
	 	 	 	mode
                             C	;                 = 0 if this device is cooked
                             C	;             ISCLK = 1 if this device is the c
	 	 	 	lock device
                             C	;             ISNUL = 1 if this device is the n
	 	 	 	ull device
                             C	;             ISCOT = 1 if this device is the c
	 	 	 	onsole output
                             C	;             ISCIN = 1 if this device is the c
	 	 	 	onsole input
                             C	;
                             C	;       If ISDEV = 0
                             C	;             EOF = 0 if channel has been writt
	 	 	 	en
                             C	;             Bits 0-5  are  the  block  device
	 	 	 	  number  for
                             C	;                 the channel (0 = A, 1 = B, ..
	 	 	 	.)
                             C	;
 = 0080                      C	devid_ISDEV     EQU     80h
 = 0040                      C	devid_EOF       EQU     40h
 = 0020                      C	devid_RAW       EQU     20h
 = 0010                      C	devid_SPECIAL   EQU     10H
 = 0008                      C	devid_ISCLK     EQU     08h
 = 0004                      C	devid_ISNUL     EQU     04h
 = 0002                      C	devid_ISCOT     EQU     02h
 = 0001                      C	devid_ISCIN     EQU     01h
                             C	
 = 001F                      C	devid_block_dev EQU     1Fh             ; mask 
	 	 	 	for block device number
                             C	
                             C	;
                             C	; find first/next buffer
                             C	;
                             C	find_buf    STRUC
 0000  ??                    C	find_buf_sattr      DB  ?           ; attribute
	 	 	 	 of search
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-39
	 	 	 	 	 	 	12-10-<1    
	 	 	 	File Control Block definition

 0001  ??                    C	find_buf_drive      DB  ?           ; drive of 
	 	 	 	search
 0002     0B [               C	find_buf_name       DB  11 DUP (?)  ; formatted
	 	 	 	 name
                ??           C	
                    ]        C	
                             C	
 000D  ????                  C	find_buf_LastEnt    DW  ?           ; LastEnt
 000F  ????????              C	find_buf_ThisDPB    DD  ?           ; This DPB
 0013  ????                  C	find_buf_DirStart   DW  ?           ; DirStart
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	
 0015  ??                    C	find_buf_attr       DB  ?           ; attribute
	 	 	 	 found
 0016  ????                  C	find_buf_time       DW  ?           ; time
 0018  ????                  C	find_buf_date       DW  ?           ; date
 001A  ????                  C	find_buf_size_l     DW  ?           ; low(size)
 001C  ????                  C	find_buf_size_h     DW  ?           ; high(size
	 	 	 	)
 001E     0D [               C	find_buf_pname      DB  13 DUP (?)  ; packed na
	 	 	 	me
                ??           C	
                    ]        C	
                             C	
 002B                        C	find_buf    ENDS
                             C	
                             C	BREAK <Process data block>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-40
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Process data block

                             C	;
                             C	; Process data block (otherwise known as progra
	 	 	 	m header)
                             C	;
                             C	
 = 0014                      C	FilPerProc          EQU     20
                             C	
                             C	Process_data_block  STRUC
 0000  ????                  C	PDB_Exit_Call       DW      ?           ; INT i
	 	 	 	nt_abort system terminate
 0002  ????                  C	PDB_block_len       DW      ?           ; size 
	 	 	 	of execution block
 0004  ??                    C	                    DB      ?
 0005     05 [               C	PDB_CPM_Call        DB  5 DUP (?)       ; ancie
	 	 	 	nt call to system
                ??           C	
                    ]        C	
                             C	
 000A  ????????              C	PDB_Exit            DD      ?           ; point
	 	 	 	er to exit routine
 000E  ????????              C	PDB_Ctrl_C          DD      ?           ; point
	 	 	 	er to ^C routine
 0012  ????????              C	PDB_Fatal_abort     DD      ?           ; point
	 	 	 	er to fatal error
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 0016  ????                  C	PDB_Parent_PID      DW      ?           ; PID o
	 	 	 	f parent (terminate PID)
 0018     14 [               C	PDB_JFN_Table       DB  FilPerProc DUP (?)
                ??           C	
                    ]        C	
                             C	
                             C	                                        ; indic
	 	 	 	es into system table
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 002C  ????                  C	PDB_environ         DW      ?           ; seg a
	 	 	 	ddr of environment
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 002E  ????????              C	PDB_User_stack      DD      ?           ; stack
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-41
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Process data block

	 	 	 	 of self during system calls
 0032     1E [               C	PDB_PAD1            DB      1Eh DUP (?)
                ??           C	
                    ]        C	
                             C	
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 0050     05 [               C	PDB_Call_system     DB      5 DUP (?)   ; porta
	 	 	 	ble method of system call
                ??           C	
                    ]        C	
                             C	
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 0055     06 [               C	PDB_PAD2            DB      6h DUP (?)  ;
                ??           C	
                    ]        C	
                             C	
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 005B                        C	Process_data_block  ENDS
                             C	
                             C	BREAK <EXEC and EXE file structures>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-42
	 	 	 	 	 	 	12-10-<1    
	 	 	 	EXEC and EXE file structures

                             C	;
                             C	; EXEC arg block - load/go program
                             C	;
                             C	
                             C	;
                             C	; The following get used as arguments to the EX
	 	 	 	EC system call.  They indicate
                             C	; whether or not the program is executed or whe
	 	 	 	ther or not a program header
                             C	; gets created.
                             C	;
 = 0001                      C	exec_func_no_execute    EQU 1           ; no ex
	 	 	 	ecute bit
 = 0002                      C	exec_func_overlay       EQU 2           ; overl
	 	 	 	ay bit
                             C	
                             C	Exec0           STRUC
 0000  ????                  C	Exec0_environ   DW      ?               ; seg a
	 	 	 	ddr of environment
 0002  ????????              C	Exec0_com_line  DD      ?               ; point
	 	 	 	er to asciz command line
 0006  ????????              C	Exec0_5C_FCB    DD      ?               ; defau
	 	 	 	lt fcb at 5C
 000A  ????????              C	Exec0_6C_FCB    DD      ?               ; defau
	 	 	 	lt fcb at 6C
 000E                        C	Exec0           ENDS
                             C	
                             C	Exec1           STRUC
 0000  ????                  C	Exec1_environ   DW      ?               ; seg a
	 	 	 	ddr of environment
 0002  ????????              C	Exec1_com_line  DD      ?               ; point
	 	 	 	er to asciz command line
 0006  ????????              C	Exec1_5C_FCB    DD      ?               ; defau
	 	 	 	lt fcb at 5C
 000A  ????????              C	Exec1_6C_FCB    DD      ?               ; defau
	 	 	 	lt fcb at 6C
 000E  ????                  C	Exec1_SP        DW      ?               ; stack
	 	 	 	 pointer of program
 0010  ????                  C	Exec1_SS        DW      ?               ; stack
	 	 	 	 seg register of program
 0012  ????                  C	Exec1_IP        DW      ?               ; entry
	 	 	 	 point IP
 0014  ????                  C	Exec1_CS        DW      ?               ; entry
	 	 	 	 point CS
 0016                        C	Exec1           ENDS
                             C	
                             C	Exec3           STRUC
 0000  ????                  C	Exec3_load_addr DW      ?               ; seg a
	 	 	 	ddress of load point
 0002  ????                  C	Exec3_reloc_fac DW      ?               ; reloc
	 	 	 	ation factor
 0004                        C	Exec3           ENDS
                             C	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-43
	 	 	 	 	 	 	12-10-<1    
	 	 	 	EXEC and EXE file structures

                             C	;
                             C	; Exit codes in upper byte
                             C	;
 = 0000                      C	Exit_terminate      EQU     0
 = 0000                      C	Exit_abort          EQU     0
 = 0001                      C	Exit_Ctrl_C         EQU     1
 = 0002                      C	Exit_Hard_Error     EQU     2
 = 0003                      C	Exit_Keep_process   EQU     3
                             C	
                             C	;
                             C	; EXE file header
                             C	;
                             C	
                             C	EXE_file    STRUC
 0000  ????                  C	exe_signature   DW  ?                   ; must 
	 	 	 	contain 4D5A  (yay zibo!)
 0002  ????                  C	exe_len_mod_512 DW  ?                   ; low 9
	 	 	 	 bits of length
 0004  ????                  C	exe_pages       DW  ?                   ; numbe
	 	 	 	r of 512b pages in file
 0006  ????                  C	exe_rle_count   DW  ?                   ; count
	 	 	 	 of reloc entries
 0008  ????                  C	exe_par_dir     DW  ?                   ; numbe
	 	 	 	r of paragraphs before image
 000A  ????                  C	exe_min_BSS     DW  ?                   ; minim
	 	 	 	um number of para of BSS
 000C  ????                  C	exe_max_BSS     DW  ?                   ; max n
	 	 	 	umber of para of BSS
 000E  ????                  C	exe_SS          DW  ?                   ; stack
	 	 	 	 of image
 0010  ????                  C	exe_SP          DW  ?                   ; SP of
	 	 	 	 image
 0012  ????                  C	exe_chksum      DW  ?                   ; check
	 	 	 	sum  of file (ignored)
 0014  ????                  C	exe_IP          DW  ?                   ; IP of
	 	 	 	 entry
 0016  ????                  C	exe_CS          DW  ?                   ; CS of
	 	 	 	 entry
 0018  ????                  C	exe_rle_table   DW  ?                   ; byte 
	 	 	 	offset of reloc table
 001A  ????                  C	exe_iov         DW  ?                   ; overl
	 	 	 	ay number (0 for root)
 001C  ????????              C	exe_sym_tab     DD  ?                   ; offse
	 	 	 	t of symbol table in file
 0020                        C	EXE_file    ENDS
                             C	
 = 5A4D                      C	exe_valid_signature     EQU 5A4Dh
 = 4D5A                      C	exe_valid_old_signature EQU 4D5Ah
                             C	
                             C	symbol_entry    STRUC
 0000  ????????              C	sym_value       DD  ?
 0004  ????                  C	sym_type        DW  ?
 0006  ??                    C	sym_len         DB  ?
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-44
	 	 	 	 	 	 	12-10-<1    
	 	 	 	EXEC and EXE file structures

 0007     FF [               C	sym_name        DB  255 dup (?)
                ??           C	
                    ]        C	
                             C	
 0106                        C	symbol_entry    ENDS
                             C	
                             C	BREAK <Internal system file table format>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-45
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Internal system file table format

                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	;
                             C	; system file table
                             C	;
                             C	
                             C	sft             STRUC
 0000  ????????              C	sft_link        DD      ?
 0004  ????                  C	sft_count       DW      ?               ; numbe
	 	 	 	r of entries
 0006  ????                  C	sft_table       DW      ?               ; begin
	 	 	 	ning of array of the following
 0008                        C	sft             ENDS
                             C	
                             C	;
                             C	; system file table entry
                             C	;
                             C	
                             C	sf_entry        STRUC
 0000  ??                    C	sf_ref_count    DB      ?               ; numbe
	 	 	 	r of processes sharing fcb
 0001  ??                    C	sf_mode         DB      ?               ; mode 
	 	 	 	of access
 0002  ??                    C	sf_attr         DB      ?               ; attri
	 	 	 	bute of file
 0003     25 [               C	sf_fcb          DB      (SIZE sys_fcb) DUP (?)
                ??           C	
                    ]        C	
                             C	
                             C	                                        ; actua
	 	 	 	l FCB
 0028                        C	sf_entry        ENDS
                             C	
 = 0005                      C	sf_default_number   EQU     5h
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	
                             C	BREAK <Memory arena structure>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-46
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Memory arena structure

                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
                             C	;
                             C	; arena item
                             C	;
                             C	arena   STRUC
 0000  ??                    C	arena_signature     DB  ?               ; 4D fo
	 	 	 	r valid item, 5A for last item
 0001  ????                  C	arena_owner         DW  ?               ; owner
	 	 	 	 of arena item
 0003  ????                  C	arena_size          DW  ?               ; size 
	 	 	 	in paragraphs of item
 0005                        C	arena   ENDS
                             C	
                             C	;
                             C	; Current structure of the data returned by the
	 	 	 	 international call
                             C	;
                             C	
                             C	internat_block STRUC
 0000  ????                  C	Date_tim_format DW      ?           ; 0-USA, 1-
	 	 	 	EUR, 2-JAP
 0002  ??                    C	Currency_sym    DB      ?           ; Currency 
	 	 	 	Symbol 5 bytes
 0003  ??                    C	                DB      ?
 0004  ??                    C	                DB      ?
 0005  ??                    C	                DB      ?
 0006  ??                    C	                DB      ?
 0007  ??                    C	Thous_sep       DB      ?           ; Thousands
	 	 	 	 separator 2 bytes
 0008  ??                    C	                DB      ?
 0009  ??                    C	Decimal_sep     DB      ?           ; Decimal s
	 	 	 	eparator 2 bytes
 000A  ??                    C	                DB      ?
 000B  ??                    C	Date_sep        DB      ?           ; Date sepa
	 	 	 	rator 2 bytes
 000C  ??                    C	                DB      ?
 000D  ??                    C	Time_sep        DB      ?           ; Decimal s
	 	 	 	eparator 2 bytes
 000E  ??                    C	                DB      ?
 000F  ??                    C	Bit_feild       DB      ?           ; Bit value
	 	 	 	s
                             C	                                    ;   Bit 0 =
	 	 	 	 0 if currency symbol first
                             C	                                    ;         =
	 	 	 	 1 if currency symbol last
                             C	                                    ;   Bit 1 =
	 	 	 	 0 if No space after currency symbol
                             C	                                    ;         =
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-47
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Memory arena structure

	 	 	 	 1 if space after currency symbol
 0010  ??                    C	Currency_cents  DB      ?           ; Number of
	 	 	 	 places after currency dec point
 0011  ??                    C	Time_24         DB      ?           ; 1 if 24 h
	 	 	 	our time, 0 if 12 hour time
 0012  ????                  C	Map_call        DW      ?           ; Address o
	 	 	 	f case mapping call (DWORD)
 0014  ????                  C	                DW      ?           ; THIS IS T
	 	 	 	WO WORDS SO IT CAN BE INITIALIZED
                             C	                                    ;  in piece
	 	 	 	s.
 0016  ??                    C	Data_sep        DB      ?           ; Data list
	 	 	 	 separator character
 0017  ??                    C	                DB      ?
 0018                        C	internat_block ENDS
                             C	
                             C	;
                             C	; Max size of the block returned by the INTERNA
	 	 	 	TIONAL call
                             C	;
 = 0020                      C	internat_block_max      EQU     32
                             C	
                             C	;
                             C	; CAUTION: The routines in ALLOC.ASM rely on th
	 	 	 	e fact that arena_signature
                             C	; and arena_owner_system are all equal to zero 
	 	 	 	and are contained in DI.  Change
                             C	; them and change ALLOC.ASM.
                             C	
 = 0000                      C	arena_owner_system  EQU 0               ; free 
	 	 	 	block indication
                             C	
 = 004D                      C	arena_signature_normal  EQU 4Dh         ; valid
	 	 	 	 signature, not end of arena
 = 005A                      C	arena_signature_end     EQU 5Ah         ; valid
	 	 	 	 signature, last block in arena
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	
                             C	BREAK <Machine instruction definitions>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-48
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Machine instruction definitions

                             C	
 = 00CD                      C	mi_INT          EQU     0CDh
 = 00EA                      C	mi_Long_JMP     EQU     0EAh
 = 009A                      C	mi_Long_CALL    EQU     09Ah
 = 00CB                      C	mi_Long_RET     EQU     0CBh
                             C	
                             C	BREAK <Standard I/O assignments>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-49
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Standard I/O assignments

                             C	
 = 0000                      C	stdin       EQU     0
 = 0001                      C	stdout      EQU     1
 = 0002                      C	stderr      EQU     2
 = 0003                      C	stdaux      EQU     3
 = 0004                      C	stdprn      EQU     4
                             C	
                             C	BREAK <Xenix subfunction assignments>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-50
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Xenix subfunction assignments

                             C	
 = 0000                      C	open_for_read   EQU 0
 = 0001                      C	open_for_write  EQU 1
 = 0002                      C	open_for_both   EQU 2
                             C	
                             C	BREAK <Xenix error codes>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-51
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Xenix error codes

                             C	
                             C	;
                             C	; XENIX calls all return error codes through AX
	 	 	 	.  If an error occurred then
                             C	; the carry bit will be set and the error code 
	 	 	 	is in AX.  If no error occurred
                             C	; then the carry bit is reset and AX contains r
	 	 	 	eturned info.
                             C	;
                             C	
 =                           C	no_error_occurred               EQU     0      
	 	 	 	                                               
	 	 	 	         ?
                             C	
 = 0001                      C	error_invalid_function          EQU     1
 = 0002                      C	error_file_not_found            EQU     2
 = 0003                      C	error_path_not_found            EQU     3
 = 0004                      C	error_too_many_open_files       EQU     4
 = 0005                      C	error_access_denied             EQU     5
 = 0006                      C	error_invalid_handle            EQU     6
 = 0007                      C	error_arena_trashed             EQU     7
 = 0008                      C	error_not_enough_memory         EQU     8
 = 0009                      C	error_invalid_block             EQU     9
 = 000A                      C	error_bad_environment           EQU     10
 = 000B                      C	error_bad_format                EQU     11
 = 000C                      C	error_invalid_access            EQU     12
 = 000D                      C	error_invalid_data              EQU     13
                             C	;**** unused                    EQU     14
 = 000F                      C	error_invalid_drive             EQU     15
 = 0010                      C	error_current_directory         EQU     16
 = 0011                      C	error_not_same_device           EQU     17
 = 0012                      C	error_no_more_files             EQU     18
                             C	
 =                           C	country_not_found               EQU     error_f
	 	 	 	ile_not_found
 =                           C	alloc_not_enough_memory         EQU     error_n
	 	 	 	ot_enough_memory
 =                           C	alloc_arena_trashed             EQU     error_a
	 	 	 	rena_trashed
                             C	
 =                           C	close_invalid_handle            EQU     error_i
	 	 	 	nvalid_handle
 =                           C	close_invalid_function          EQU     error_i
	 	 	 	nvalid_function
                             C	
 =                           C	chdir_path_not_found            EQU     error_p
	 	 	 	ath_not_found
                             C	
 =                           C	chmod_path_not_found            EQU     error_p
	 	 	 	ath_not_found
 =                           C	chmod_access_denied             EQU     error_a
	 	 	 	ccess_denied
 =                           C	chmod_invalid_function          EQU     error_i
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-52
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Xenix error codes

	 	 	 	nvalid_function
                             C	
 =                           C	creat_access_denied             EQU     error_a
	 	 	 	ccess_denied
 =                           C	creat_path_not_found            EQU     error_p
	 	 	 	ath_not_found
 =                           C	creat_too_many_open_files       EQU     error_t
	 	 	 	oo_many_open_files
                             C	
 =                           C	curdir_invalid_drive            EQU     error_i
	 	 	 	nvalid_drive
                             C	
 =                           C	dealloc_invalid_block           EQU     error_i
	 	 	 	nvalid_block
 =                           C	dealloc_arena_trashed           EQU     error_a
	 	 	 	rena_trashed
                             C	
 =                           C	dup_invalid_handle              EQU     error_i
	 	 	 	nvalid_handle
 =                           C	dup_too_many_open_files         EQU     error_t
	 	 	 	oo_many_open_files
                             C	
 =                           C	dup2_invalid_handle             EQU     error_i
	 	 	 	nvalid_handle
                             C	
 =                           C	exec_invalid_function           EQU     error_i
	 	 	 	nvalid_function
 =                           C	exec_bad_environment            EQU     error_b
	 	 	 	ad_environment
 =                           C	exec_bad_format                 EQU     error_b
	 	 	 	ad_format
 =                           C	exec_not_enough_memory          EQU     error_n
	 	 	 	ot_enough_memory
 =                           C	exec_file_not_found             EQU     error_f
	 	 	 	ile_not_found
                             C	
 =                           C	filetimes_invalid_function      EQU     error_i
	 	 	 	nvalid_function
 =                           C	filetimes_invalid_handle        EQU     error_i
	 	 	 	nvalid_handle
                             C	
 =                           C	findfirst_file_not_found        EQU     error_f
	 	 	 	ile_not_found
 =                           C	findfirst_no_more_files         EQU     error_n
	 	 	 	o_more_files
 =                           C	findnext_no_more_files          EQU     error_n
	 	 	 	o_more_files
                             C	
 =                           C	international_invalid_function  EQU     error_i
	 	 	 	nvalid_function
                             C	
 =                           C	ioctl_invalid_handle            EQU     error_i
	 	 	 	nvalid_handle
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-53
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Xenix error codes

 =                           C	ioctl_invalid_function          EQU     error_i
	 	 	 	nvalid_function
 =                           C	ioctl_invalid_data              EQU     error_i
	 	 	 	nvalid_data
                             C	
 =                           C	lseek_invalid_handle            EQU     error_i
	 	 	 	nvalid_handle
 =                           C	lseek_invalid_function          EQU     error_i
	 	 	 	nvalid_function
                             C	
 =                           C	mkdir_path_not_found            EQU     error_p
	 	 	 	ath_not_found
 =                           C	mkdir_access_denied             EQU     error_a
	 	 	 	ccess_denied
                             C	
 =                           C	open_invalid_access             EQU     error_i
	 	 	 	nvalid_access
 =                           C	open_file_not_found             EQU     error_f
	 	 	 	ile_not_found
 =                           C	open_access_denied              EQU     error_a
	 	 	 	ccess_denied
 =                           C	open_too_many_open_files        EQU     error_t
	 	 	 	oo_many_open_files
                             C	
 =                           C	read_invalid_handle             EQU     error_i
	 	 	 	nvalid_handle
 =                           C	read_access_denied              EQU     error_a
	 	 	 	ccess_denied
                             C	
 =                           C	rename_file_not_found           EQU     error_f
	 	 	 	ile_not_found
 =                           C	rename_not_same_device          EQU     error_n
	 	 	 	ot_same_device
 =                           C	rename_access_denied            EQU     error_a
	 	 	 	ccess_denied
                             C	
 =                           C	rmdir_path_not_found            EQU     error_p
	 	 	 	ath_not_found
 =                           C	rmdir_access_denied             EQU     error_a
	 	 	 	ccess_denied
 =                           C	rmdir_current_directory         EQU     error_c
	 	 	 	urrent_directory
                             C	
 =                           C	setblock_invalid_block          EQU     error_i
	 	 	 	nvalid_block
 =                           C	setblock_arena_trashed          EQU     error_a
	 	 	 	rena_trashed
 =                           C	setblock_not_enough_memory      EQU     error_n
	 	 	 	ot_enough_memory
 =                           C	setblock_invalid_function       EQU     error_i
	 	 	 	nvalid_function
                             C	
 =                           C	unlink_file_not_found           EQU     error_f
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-54
	 	 	 	 	 	 	12-10-<1    
	 	 	 	Xenix error codes

	 	 	 	ile_not_found
 =                           C	unlink_access_denied            EQU     error_a
	 	 	 	ccess_denied
                             C	
 =                           C	write_invalid_handle            EQU     error_i
	 	 	 	nvalid_handle
 =                           C	write_access_denied             EQU     error_a
	 	 	 	ccess_denied
                             C	
                             C	BREAK <system call definitions>
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-55
	 	 	 	 	 	 	12-10-<1    
	 	 	 	system call definitions

                             C	
 = 0000                      C	Abort                           EQU 0   ;  0   
	 	 	 	   0
 = 0001                      C	Std_Con_Input                   EQU 1   ;  1   
	 	 	 	   1
 = 0002                      C	Std_Con_Output                  EQU 2   ;  2   
	 	 	 	   2
 = 0003                      C	Std_Aux_Input                   EQU 3   ;  3   
	 	 	 	   3
 = 0004                      C	Std_Aux_Output                  EQU 4   ;  4   
	 	 	 	   4
 = 0005                      C	Std_Printer_Output              EQU 5   ;  5   
	 	 	 	   5
 = 0006                      C	Raw_Con_IO                      EQU 6   ;  6   
	 	 	 	   6
 = 0007                      C	Raw_Con_Input                   EQU 7   ;  7   
	 	 	 	   7
 = 0008                      C	Std_Con_Input_No_Echo           EQU 8   ;  8   
	 	 	 	   8
 = 0009                      C	Std_Con_String_Output           EQU 9   ;  9   
	 	 	 	   9
 = 000A                      C	Std_Con_String_Input            EQU 10  ; 10   
	 	 	 	   A
 = 000B                      C	Std_Con_Input_Status            EQU 11  ; 11   
	 	 	 	   B
 = 000C                      C	Std_Con_Input_Flush             EQU 12  ; 12   
	 	 	 	   C
 = 000D                      C	Disk_Reset                      EQU 13  ; 13   
	 	 	 	   D
 = 000E                      C	Set_Default_Drive               EQU 14  ; 14   
	 	 	 	   E
 = 000F                      C	FCB_Open                        EQU 15  ; 15   
	 	 	 	   F
 = 0010                      C	FCB_Close                       EQU 16  ; 16   
	 	 	 	  10
 = 0011                      C	Dir_Search_First                EQU 17  ; 17   
	 	 	 	  11
 = 0012                      C	Dir_Search_Next                 EQU 18  ; 18   
	 	 	 	  12
 = 0013                      C	FCB_Delete                      EQU 19  ; 19   
	 	 	 	  13
 = 0014                      C	FCB_Seq_Read                    EQU 20  ; 20   
	 	 	 	  14
 = 0015                      C	FCB_Seq_Write                   EQU 21  ; 21   
	 	 	 	  15
 = 0016                      C	FCB_Create                      EQU 22  ; 22   
	 	 	 	  16
 = 0017                      C	FCB_Rename                      EQU 23  ; 23   
	 	 	 	  17
 = 0019                      C	Get_Default_Drive               EQU 25  ; 25   
	 	 	 	  19
 = 001A                      C	Set_DMA                         EQU 26  ; 26   
	 	 	 	  1A
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-56
	 	 	 	 	 	 	12-10-<1    
	 	 	 	system call definitions

                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 = 001F                      C	Get_Default_DPB                 EQU 31  ; 31   
	 	 	 	  1F
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 = 0021                      C	FCB_Random_Read                 EQU 33  ; 33   
	 	 	 	  21
 = 0022                      C	FCB_Random_Write                EQU 34  ; 34   
	 	 	 	  22
 = 0023                      C	Get_FCB_File_Length             EQU 35  ; 35   
	 	 	 	  23
 = 0024                      C	Get_FCB_Position                EQU 36  ; 36   
	 	 	 	  24
 = 0025                      C	Set_Interrupt_Vector            EQU 37  ; 37   
	 	 	 	  25
 = 0026                      C	Create_Process_Data_Block       EQU 38  ; 38   
	 	 	 	  26
 = 0027                      C	FCB_Random_Read_Block           EQU 39  ; 39   
	 	 	 	  27
 = 0028                      C	FCB_Random_Write_Block          EQU 40  ; 40   
	 	 	 	  28
 = 0029                      C	Parse_File_Descriptor           EQU 41  ; 41   
	 	 	 	  29
 = 002A                      C	Get_Date                        EQU 42  ; 42   
	 	 	 	  2A
 = 002B                      C	Set_Date                        EQU 43  ; 43   
	 	 	 	  2B
 = 002C                      C	Get_Time                        EQU 44  ; 44   
	 	 	 	  2C
 = 002D                      C	Set_Time                        EQU 45  ; 45   
	 	 	 	  2D
 = 002E                      C	Set_Verify_On_Write             EQU 46  ; 46   
	 	 	 	  2E
                             C	; Extended functionality group
 = 002F                      C	Get_DMA                         EQU 47  ; 47   
	 	 	 	  2F
 = 0030                      C	Get_Version                     EQU 48  ; 48   
	 	 	 	  30
 = 0031                      C	Keep_Process                    EQU 49  ; 49   
	 	 	 	  31
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-57
	 	 	 	 	 	 	12-10-<1    
	 	 	 	system call definitions

                             C	;                                              
	 	 	 	                            ;
 = 0032                      C	Get_DPB                         EQU 50  ; 50   
	 	 	 	  32
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 = 0033                      C	Set_CTRL_C_Trapping             EQU 51  ; 51   
	 	 	 	  33
 = 0034                      C	Get_InDOS_Flag                  EQU 52  ; 52   
	 	 	 	  34
 = 0035                      C	Get_Interrupt_Vector            EQU 53  ; 53   
	 	 	 	  35
 = 0036                      C	Get_Drive_Freespace             EQU 54  ; 54   
	 	 	 	  36
 = 0037                      C	Char_Oper                       EQU 55  ; 55   
	 	 	 	  37
 = 0038                      C	International                   EQU 56  ; 56   
	 	 	 	  38
                             C	;   Directory Group
 = 0039                      C	MKDir                           EQU 57  ; 57   
	 	 	 	  39
 = 003A                      C	RMDir                           EQU 58  ; 58   
	 	 	 	  3A
 = 003B                      C	CHDir                           EQU 59  ; 59   
	 	 	 	  3B
                             C	;   File Group
 = 003C                      C	Creat                           EQU 60  ; 60   
	 	 	 	  3C
 = 003D                      C	Open                            EQU 61  ; 61   
	 	 	 	  3D
 = 003E                      C	Close                           EQU 62  ; 62   
	 	 	 	  3E
 = 003F                      C	Read                            EQU 63  ; 63   
	 	 	 	  3F
 = 0040                      C	Write                           EQU 64  ; 64   
	 	 	 	  40
 = 0041                      C	Unlink                          EQU 65  ; 65   
	 	 	 	  41
 = 0042                      C	LSeek                           EQU 66  ; 66   
	 	 	 	  42
 = 0043                      C	CHMod                           EQU 67  ; 67   
	 	 	 	  43
 = 0044                      C	IOCtl                           EQU 68  ; 68   
	 	 	 	  44
 = 0045                      C	XDup                            EQU 69  ; 69   
	 	 	 	  45
 = 0046                      C	XDup2                           EQU 70  ; 70   
	 	 	 	  46
 = 0047                      C	Current_Dir                     EQU 71  ; 71   
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-58
	 	 	 	 	 	 	12-10-<1    
	 	 	 	system call definitions

	 	 	 	  47
                             C	;    Memory Group
 = 0048                      C	Alloc                           EQU 72  ; 72   
	 	 	 	  48
 = 0049                      C	Dealloc                         EQU 73  ; 73   
	 	 	 	  49
 = 004A                      C	Setblock                        EQU 74  ; 74   
	 	 	 	  4A
                             C	;    Process Group
 = 004B                      C	Exec                            EQU 75  ; 75   
	 	 	 	  4B
 = 004C                      C	Exit                            EQU 76  ; 76   
	 	 	 	  4C
 = 004D                      C	Wait                            EQU 77  ; 77   
	 	 	 	  4D
 = 004E                      C	Find_First                      EQU 78  ; 78   
	 	 	 	  4E
                             C	;   Special Group
 = 004F                      C	Find_Next                       EQU 79  ; 79   
	 	 	 	  4F
                             C	; SPECIAL SYSTEM GROUP
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 = 0050                      C	Set_Current_PDB                 EQU 80  ; 80   
	 	 	 	  50
 = 0051                      C	Get_Current_PDB                 EQU 81  ; 81   
	 	 	 	  51
 = 0052                      C	Get_In_Vars                     EQU 82  ; 82   
	 	 	 	  52
 = 0053                      C	SetDPB                          EQU 83  ; 83   
	 	 	 	  53
                             C	;                                              
	 	 	 	                            ;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 = 0054                      C	Get_Verify_On_Write             EQU 84  ; 84   
	 	 	 	  54
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;                                              
	 	 	 	                            ;
 = 0055                      C	Dup_PDB                         EQU 85  ; 85   
	 	 	 	  55
                             C	;                                              
	 	 	 	                            ;
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-59
	 	 	 	 	 	 	12-10-<1    
	 	 	 	system call definitions

                             C	;            C  A  V  E  A  T     P  R  O  G  R
	 	 	 	  A  M  M  E  R             ;
                             C	;----+----+----+----+----+----+----+----+----+-
	 	 	 	---+----+----+----+----+----;
 = 0056                      C	Rename                          EQU 86  ; 86   
	 	 	 	  56
 = 0057                      C	File_Times                      EQU 87  ; 87   
	 	 	 	  57
 = 0058                      C	AllocOper                       EQU 88  ; 88   
	 	 	 	  58
                             C	; Network extention system calls
 = 0059                      C	GetExtendedError                EQU 89  ; 89   
	 	 	 	  59
 = 005A                      C	CreateTempFile                  EQU 90  ; 90   
	 	 	 	  5A
 = 005B                      C	CreateNewFile                   EQU 91  ; 91   
	 	 	 	  5B
 = 005C                      C	LockOper                        EQU 92  ; 92   
	 	 	 	  5C Lock and Unlock
 = 005D                      C	ServerCall                      EQU 93  ; 93   
	 	 	 	  5D CommitAll, ServerDOSCall,
                             C	                                        ;      
	 	 	 	     CloseByName, CloseUser,
                             C	                                        ;      
	 	 	 	     CloseUserProcess,
                             C	                                        ;      
	 	 	 	     GetOpenFileList
 = 005E                      C	UserIDOper                      EQU 94  ; 94   
	 	 	 	  5E Get and Set
 = 005F                      C	AssignOper                      EQU 95  ; 95   
	 	 	 	  5F On, Off, Get, Set, Cancel
                             C	
 = 00F8                      C	Set_Oem_Handler                 EQU 248 ; 248  
	 	 	 	  F8
 = 00F9                      C	OEM_C1                          EQU 249 ; 249  
	 	 	 	  F9
 = 00FA                      C	OEM_C2                          EQU 250 ; 250  
	 	 	 	  FA
 = 00FB                      C	OEM_C3                          EQU 251 ; 251  
	 	 	 	  FB
 = 00FC                      C	OEM_C4                          EQU 252 ; 252  
	 	 	 	  FC
 = 00FD                      C	OEM_C5                          EQU 253 ; 253  
	 	 	 	  FD
 = 00FE                      C	OEM_C6                          EQU 254 ; 254  
	 	 	 	  FE
 = 00FF                      C	OEM_C7                          EQU 255 ; 255  
	 	 	 	  FF
                             C	SUBTTL
 	 	 	 	
 = 005C	 	 	 	FCB     EQU     5CH
 = 0080	 	 	 	PARMS   EQU     80H
 	 	 	 	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-60
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	DG      GROUP   CODE,DATA
 	 	 	 	
 0000	 	 	 	CODE    SEGMENT
 	 	 	 	ASSUME  CS:DG
 	 	 	 	
 0100	 	 	 	        ORG     100H
 0100	 	 	 	START:
 0100  E9 0AEA R	 	        JMP     TRANSIENT
 	 	 	 	
 0103  56 65 72 73 20 31	HEADER  DB      "Vers 1.00"
       2E 30 30	 	 	
 	 	 	 	
 010C     80 [	 	 	        DB      128 DUP (?)
                ??	 	
                    ]	 	
 	 	 	 	
 018C	 	 	 	ISTACK  LABEL   WORD            ;Stack starts h
	 	 	 	ere and grows down
 	 	 	 	
 	 	 	 	;Resident data
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 018C  00	 	 	CBUSY   DB      0               ;ME on com inte
	 	 	 	rrupt
 018D  ????????	 	 	SPNEXT  DD      ?               ;Chain location
	 	 	 	 for INT 28
 0191  00	 	 	PCANMES DB      0               ;Cancel message
	 	 	 	 flag
 0192  ????	 	 	SSsave  DW      ?               ;Stack save are
	 	 	 	a for INT 24
 0194  ????	 	 	SPsave  DW      ?
 0196  ????????	 	 	DMAADDR DD      ?               ;Place to save 
	 	 	 	DMA address
 019A  ????????	 	 	HERRINT DD      ?               ;Place to save 
	 	 	 	Hard error interrupt
 019E  ????????	 	 	LISTDEV DD      ?               ;Pointer to Dev
	 	 	 	ice
 01A2  00	 	 	COLPOS  DB      0               ;Column positio
	 	 	 	n for TAB processing
 01A3  04F8 R	 	 	NXTCHR  DW      OFFSET DG:BUFFER + BLKSIZ     ;
	 	 	 	Buffer pointer
 01A5  08D1 R	 	 	CURRFIL DW      OFFSET DG:SPLFCB    ;Current fi
	 	 	 	le being printed
 	 	 	 	
 01A7  ????	 	 	LASTFCB DW      ?               ;Back pointer
 01A9  ????	 	 	LASTFCB2 DW     ?               ;Another back p
	 	 	 	ointer
 01AB  00	 	 	PABORT  DB      0               ;Abort flag
 	 	 	 	
 	 	 	 	;Resident messages
 	 	 	 	
 01AC  0D 0A 0D 0A 2A 2A	ERRMES  DB      13,10,13,10,"**********",13,10,
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-61
	 	 	 	 	 	 	12-10-<1    


	 	 	 	"$"
       2A 2A 2A 2A 2A 2A	
       2A 2A 0D 0A 24	 	
 01BD  20 65 72 72 6F 72	ERRMEST DB      " error reading file",13,10
       20 72 65 61 64 69	
       6E 67 20 66 69 6C	
       65 0D 0A	 	 	
 01D2  20 3A 20 20 20 20	EMFILNAM DB     " :        .   "
       20 20 20 20 2E 20	
       20 20	 	 	
 01E0  0D 0C 07 24	 	BELMES  DB     13,0CH,7,"$"
 	 	 	 	
 01E4  0D 0A 0D 0A	 	CANMES  DB      13,10,13,10
 01E8  20 3A 20 20 20 20	CANFILNAM DB    " :        .   "
       20 20 20 20 2E 20	
       20 20	 	 	
 01F6  20 43 61 6E 63 65	        DB      " Canceled by operator$"
       6C 65 64 20 62 79	
       20 6F 70 65 72 61	
       74 6F 72 24	 	
 	 	 	 	
 020C  0D 0A 0D 0A 41 6C	ALLCAN  DB      13,10,13,10,"All files canceled
	 	 	 	 by operator$"
       6C 20 66 69 6C 65	
       73 20 63 61 6E 63	
       65 6C 65 64 20 62	
       79 20 6F 70 65 72	
       61 74 6F 72 24	 	
 	 	 	 	
 022F  0249 R	 	 	MESBAS  DW      OFFSET DG:ERR0
 0231  0257 R	 	 	        DW      OFFSET DG:ERR1
 0233  0260 R	 	 	        DW      OFFSET DG:ERR2
 0235  026A R	 	 	        DW      OFFSET DG:ERR3
 0237  0276 R	 	 	        DW      OFFSET DG:ERR4
 0239  027B R	 	 	        DW      OFFSET DG:ERR5
 023B  028B R	 	 	        DW      OFFSET DG:ERR6
 023D  0290 R	 	 	        DW      OFFSET DG:ERR7
 023F  029D R	 	 	        DW      OFFSET DG:ERR8
 0241  02AE R	 	 	        DW      OFFSET DG:ERR9
 0243  02B7 R	 	 	        DW      OFFSET DG:ERR10
 0245  02C3 R	 	 	        DW      OFFSET DG:ERR11
 0247  02CE R	 	 	        DW      OFFSET DG:ERR12
 	 	 	 	
 	 	 	 	;INT 24 messages A La COMMAND
 	 	 	 	
 0249  57 72 69 74 65 20	ERR0    DB      "Write protect$"
       70 72 6F 74 65 63	
       74 24	 	 	
 0257  42 61 64 20 75 6E	ERR1    DB      "Bad unit$"
       69 74 24	 	 	
 0260  4E 6F 74 20 72 65	ERR2    DB      "Not ready$"
       61 64 79 24	 	
 026A  42 61 64 20 63 6F	ERR3    DB      "Bad command$"
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-62
	 	 	 	 	 	 	12-10-<1    


       6D 6D 61 6E 64 24	
 0276  44 61 74 61 24	 	ERR4    DB      "Data$"
 027B  42 61 64 20 63 61	ERR5    DB      "Bad call format$"
       6C 6C 20 66 6F 72	
       6D 61 74 24	 	
 028B  53 65 65 6B 24	 	ERR6    DB      "Seek$"
 0290  4E 6F 6E 2D 44 4F	ERR7    DB      "Non-DOS disk$"
       53 20 64 69 73 6B	
       24	 	 	
 029D  53 65 63 74 6F 72	ERR8    DB      "Sector not found$"
       20 6E 6F 74 20 66	
       6F 75 6E 64 24	 	
 02AE  4E 6F 20 70 61 70	ERR9    DB      "No paper$"
       65 72 24	 	 	
 02B7  57 72 69 74 65 20	ERR10   DB      "Write fault$"
       66 61 75 6C 74 24	
 02C3  52 65 61 64 20 66	ERR11   DB      "Read fault$"
       61 75 6C 74 24	 	
 02CE  44 69 73 6B 24	 	ERR12   DB      "Disk$"
 	 	 	 	
 02D3  46 69 6C 65 20 61	FATMES  DB     "File allocation table bad drive
	 	 	 	 "
       6C 6C 6F 63 61 74	
       69 6F 6E 20 74 61	
       62 6C 65 20 62 61	
       64 20 64 72 69 76	
       65 20	 	 	
 02F3  41 2E 0D 0A 24	 	BADDRVM DB     "A.",13,10,"$"
 	 	 	 	
 	 	 	 	;The DATA buffer
 02F8  0200 [	 	 	BUFFER  DB      BLKSIZ DUP(0)
                00	 	
                    ]	 	
 	 	 	 	
 04F8  ??	 	 	        DB      ?
 04F9	 	 	 	CODE    ENDS
 	 	 	 	
 	 	 	 	;Transient data
 	 	 	 	
 0000	 	 	 	DATA    SEGMENT BYTE
 0000	 	 	 	        ORG     0
 0000  ??	 	 	SWITCHAR DB     ?               ;User switch ch
	 	 	 	aracter
 0001  00	 	 	FULLFLAG DB     0               ;Flag for print
	 	 	 	ing queue full message
 0002  00	 	 	MAKERES DB      0               ;Flag to indica
	 	 	 	te presence of resident
 0003  00	 	 	ARGSETUP DB     0               ;Flag to indica
	 	 	 	te a formatted FCB exists at 5C
 0004  00	 	 	DEFDRV  DB      0               ;Default drive
 0005  00	 	 	CANFLG  DB      0               ;Flag to indica
	 	 	 	te cancel
 0006  00	 	 	FILCNT  DB      0               ;Number of file
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-63
	 	 	 	 	 	 	12-10-<1    


	 	 	 	s
 0007  ????????	 	 	SPLIST  DD      ?               ;Pointer to FCB
	 	 	 	s in resident
 000B  ????????	 	 	CURFILE DD      ?               ;Pointer to cur
	 	 	 	rent FCB
 000F     26 [	 	 	SRCHFCB DB      38 DUP (0)      ;SEARCH-FIRST/N
	 	 	 	EXT FCB
                00	 	
                    ]	 	
 	 	 	 	
 0035  0A61 R	 	 	ENDRES  DW      OFFSET DG:DEF_ENDRES    ;Term-R
	 	 	 	es location
 	 	 	 	
 	 	 	 	;Messages
 	 	 	 	
 0037  50 52 49 4E 54 20	NOFILS  DB      "PRINT queue is empty",13,10,"$
	 	 	 	"
       71 75 65 75 65 20	
       69 73 20 65 6D 70	
       74 79 0D 0A 24	 	
 004E  0D 0A 20 20 20 20	CURMES  DB      13,10,"        "
       20 20 20 20	 	
 0058  20 3A 20 20 20 20	CURFNAM DB      " :        .    is currently be
	 	 	 	ing printed",13,10,"$"
       20 20 20 20 2E 20	
       20 20 20 69 73 20	
       63 75 72 72 65 6E	
       74 6C 79 20 62 65	
       69 6E 67 20 70 72	
       69 6E 74 65 64 0D	
       0A 24	 	 	
 0084  20 20 20 20 20 20	FILMES  DB      "        "
       20 20	 	 	
 008C  20 3A 20 20 20 20	FILFNAM DB      " :        .    is in queue"
       20 20 20 20 2E 20	
       20 20 20 69 73 20	
       69 6E 20 71 75 65	
       75 65	 	 	
 00A6  0D 0A 24	 	 	CRLF    DB      13,10,"$"
 00A9  43 61 6E 6E 6F 74	OPMES    DB     "Cannot open "
       20 6F 70 65 6E 20	
 00B5  20 3A 20 20 20 20	OPFILNAM DB     " :        .    ",13,10,"$"
       20 20 20 20 2E 20	
       20 20 20 0D 0A 24	
 00C7  50 52 49 4E 54 20	FULLMES DB      "PRINT queue is full",13,10,"$"
       71 75 65 75 65 20	
       69 73 20 66 75 6C	
       6C 0D 0A 24	 	
 00DD	 	 	 	SRCHMES LABEL   BYTE
 00DD  20 3A 20 20 20 20	SRCHFNAM DB     " :        .    "," File not fo
	 	 	 	und",13,10,"$"
       20 20 20 20 2E 20	
       20 20 20 20 46 69	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-64
	 	 	 	 	 	 	12-10-<1    


       6C 65 20 6E 6F 74	
       20 66 6F 75 6E 64	
       0D 0A 24	 	 	
 00FE  4C 69 73 74 20 6F	BADMES  DB      "List output is not assigned to
	 	 	 	 a device",13,10,"$"
       75 74 70 75 74 20	
       69 73 20 6E 6F 74	
       20 61 73 73 69 67	
       6E 65 64 20 74 6F	
       20 61 20 64 65 76	
       69 63 65 0D 0A 24	
 0128  52 65 73 69 64 65	GOODMES DB      "Resident part of PRINT install
	 	 	 	ed",13,10,"$"
       6E 74 20 70 61 72	
       74 20 6F 66 20 50	
       52 49 4E 54 20 69	
       6E 73 74 61 6C 6C	
       65 64 0D 0A 24	 	
 014B  4E 61 6D 65 20 6F	PROMPT  DB      "Name of list device [PRN]: $"
       66 20 6C 69 73 74	
       20 64 65 76 69 63	
       65 20 5B 50 52 4E	
       5D 3A 20 24	 	
 0167  45 72 72 6F 72 73	CNTMES  DB      "Errors on list device indicate
	 	 	 	 that it",13,10
       20 6F 6E 20 6C 69	
       73 74 20 64 65 76	
       69 63 65 20 69 6E	
       64 69 63 61 74 65	
       20 74 68 61 74 20	
       69 74 0D 0A	 	
 018F  6D 61 79 20 62 65	        DB      "may be off-line. Please check 
	 	 	 	it.",13,10,13,10,"$"
       20 6F 66 66 2D 6C	
       69 6E 65 2E 20 50	
       6C 65 61 73 65 20	
       63 68 65 63 6B 20	
       69 74 2E 0D 0A 0D	
       0A 24	 	 	
 01B5  49 6E 76 61 6C 69	BADSWT  DB      "Invalid parameter",13,10,"$"
       64 20 70 61 72 61	
       6D 65 74 65 72 0D	
       0A 24	 	 	
 	 	 	 	
 	 	 	 	
 01C9  49 6E 63 6F 72 72	BADVER  DB      "Incorrect DOS version",13,10,"
	 	 	 	$"
       65 63 74 20 44 4F	
       53 20 76 65 72 73	
       69 6F 6E 0D 0A 24	
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-65
	 	 	 	 	 	 	12-10-<1    


 01E1  0E 00	 	 	COMBUF  DB      14,0            ;Device name bu
	 	 	 	ffer
 01E3     0E [	 	 	        DB      14 DUP (?)
                ??	 	
                    ]	 	
 	 	 	 	
 01F1  00 50 52 4E 20 20	LISTFCB DB      0,"PRN        " ;Device name FC
	 	 	 	B
       20 20 20 20 20 20	
 01FD     19 [	 	 	        DB      25 DUP (0)
                00	 	
                    ]	 	
 	 	 	 	
 0216     50 [	 	 	PARSEBUF DB     80 DUP (?)      ;Parsing space
                ??	 	
                    ]	 	
 	 	 	 	
 	 	 	 	
 0266	 	 	 	DATA    ENDS
 	 	 	 	
 04F9	 	 	 	CODE    SEGMENT
 	 	 	 	ASSUME  CS:DG,DS:DG,ES:DG,SS:DG
 	 	 	 	
 	 	 	 	
 	 	 	 	;Interrupt routines
 	 	 	 	ASSUME  CS:DG,DS:NOTHING,ES:NOTHING,SS:NOTHING
 	 	 	 	        ENDIF
 	 	 	 	
 	 	 	 	
 04F9	 	 	 	SPINT:                          ;INT 28H entry 
	 	 	 	point
 	 	 	 	        ENDIF
 	 	 	 	
 04F9  FB	 	 	        STI                     ;Hardware inter
	 	 	 	rupts ok on INT 28H entry
 04FA  E8 0502 R	 	        CALL    DOINT
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 04FD  2E: FF 2E 018D R	 	NXTSP:  JMP     [SPNEXT]        ;Chain to next 
	 	 	 	INT 28
 	 	 	 	
 0502	 	 	 	DOINT:
 0502  56	 	 	        PUSH    SI
 0503  2E: 8B 36 01A5 R	 	        MOV     SI,[CURRFIL]
 0508  46	 	 	        INC     SI
 0509  46	 	 	        INC     SI
 050A  2E: 80 3C FF	 	        CMP     BYTE PTR CS:[SI],-1
 050E  5E	 	 	        POP     SI
 050F  75 03	 	 	        JNZ     GOAHEAD
 0511  E9 059E R	 	        JMP     SPRET           ;Nothing to do
 0514	 	 	 	GOAHEAD:
 0514  50	 	 	        PUSH    AX              ;Need a working
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-66
	 	 	 	 	 	 	12-10-<1    


	 	 	 	 register
 0515  2E: 8C 16 0192 R	 	        MOV     [SSsave],SS
 051A  2E: 89 26 0194 R	 	        MOV     [SPsave],SP
 051F  8C C8	 	 	        MOV     AX,CS
 0521  FA	 	 	        CLI
 	 	 	 	;Go to internal stack to prevent INT 24 overflo
	 	 	 	wing system stack
 0522  8E D0	 	 	        MOV     SS,AX
 0524  BC 018C R	 	        MOV     SP,OFFSET DG:ISTACK
 0527  FB	 	 	        STI
 0528  06	 	 	        PUSH    ES
 0529  1E	 	 	        PUSH    DS
 052A  53	 	 	        PUSH    BX
 052B  51	 	 	        PUSH    CX
 052C  52	 	 	        PUSH    DX
 052D  56	 	 	        PUSH    SI
 052E  57	 	 	        PUSH    DI
 052F  0E	 	 	        PUSH    CS
 0530  1F	 	 	        POP     DS
 	 	 	 	ASSUME  DS:DG
 	 	 	 	
 0531  8B 1E 01A3 R	 	        MOV     BX,[NXTCHR]
 0535  81 FB 04F8 R	 	        CMP     BX,OFFSET DG:BUFFER + BLKSIZ
 0539  75 03	 	 	        JNZ     PLOOP
 053B  EB 65 90	 	 	        JMP     READBUFF                ;Buffer
	 	 	 	 empty
 	 	 	 	
 053E	 	 	 	PLOOP:
 	 	 	 	        ENDIF
 	 	 	 	
 053E  E8 0864 R	 	        CALL    PSTAT
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 0541  75 47	 	 	        JNZ     DONEJMP                 ;If sof
	 	 	 	t int give up
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 0543	 	 	 	DOCHAR:
 0543  8A 07	 	 	        MOV     AL,BYTE PTR [BX]
 0545  3C 1A	 	 	        CMP     AL,1AH                  ;^Z?
 0547  74 56	 	 	        JZ      FILEOFJ                 ;CPM EO
	 	 	 	F
 0549  3C 0D	 	 	        CMP     AL,0DH                  ;CR?
 054B  75 05	 	 	        JNZ     NOTCR
 054D  C6 06 01A2 R 00	 	        MOV     [COLPOS],0
 0552	 	 	 	NOTCR:
 0552  3C 09	 	 	        CMP     AL,9                    ;TAB?
 0554  75 1D	 	 	        JNZ     NOTABDO
 0556  8A 0E 01A2 R	 	        MOV     CL,[COLPOS]
 055A  80 C9 F8	 	 	        OR      CL,0F8H
 055D  F6 D9	 	 	        NEG     CL
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-67
	 	 	 	 	 	 	12-10-<1    


 055F  32 ED	 	 	        XOR     CH,CH
 0561  E3 23	 	 	        JCXZ    TABDONE
 0563	 	 	 	TABLP:
 0563  B0 20	 	 	        MOV     AL," "
 0565  FE 06 01A2 R	 	        INC     [COLPOS]
 0569  51	 	 	        PUSH    CX
 056A  E8 088C R	 	        CALL    POUT
 056D  59	 	 	        POP     CX
 056E  E2 F3	 	 	        LOOP    TABLP
 0570  EB 14 90	 	 	        JMP     TABDONE
 	 	 	 	
 0573	 	 	 	NOTABDO:
 0573  3C 08	 	 	        CMP     AL,8                    ;Back s
	 	 	 	pace?
 0575  75 04	 	 	        JNZ     NOTBACK
 0577  FE 0E 01A2 R	 	        DEC     [COLPOS]
 057B	 	 	 	NOTBACK:
 057B  3C 20	 	 	        CMP     AL,20H                  ;Non Pr
	 	 	 	inting char?
 057D  72 04	 	 	        JB      NOCHAR
 057F  FE 06 01A2 R	 	        INC     [COLPOS]                ;Printi
	 	 	 	ng char
 0583	 	 	 	NOCHAR:
 0583  E8 088C R	 	        CALL    POUT                    ;Print 
	 	 	 	it
 0586	 	 	 	TABDONE:
 0586  FF 06 01A3 R	 	        INC     [NXTCHR]                ;Next c
	 	 	 	har
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 058A	 	 	 	DONEJMP:
 058A  5F	 	 	        POP     DI
 058B  5E	 	 	        POP     SI
 058C  5A	 	 	        POP     DX
 058D  59	 	 	        POP     CX
 058E  5B	 	 	        POP     BX
 058F  1F	 	 	        POP     DS
 0590  07	 	 	        POP     ES
 	 	 	 	ASSUME  DS:NOTHING,ES:NOTHING
 0591  FA	 	 	        CLI
 0592  2E: 8E 16 0192 R	 	        MOV     SS,[SSsave]             ;Restor
	 	 	 	e Entry Stack
 0597  2E: 8B 26 0194 R	 	        MOV     SP,[SPsave]
 059C  FB	 	 	        STI
 059D  58	 	 	        POP     AX
 059E	 	 	 	SPRET:
 059E  C3	 	 	        RET
 	 	 	 	
 059F  EB 65 90	 	 	FILEOFJ: JMP    FILEOF
 	 	 	 	
 05A2	 	 	 	READBUFF:
 	 	 	 	ASSUME  DS:DG,ES:NOTHING
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-68
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	
 05A2  B0 24	 	 	        MOV     AL,24H
 05A4  B4 35	 	 	        MOV     AH,GET_INTERRUPT_VECTOR
 05A6  CD 21	 	 	        INT     21H
 05A8  8C 06 019C R	 	        MOV     WORD PTR [HERRINT+2],ES        
	 	 	 	 ;Save current vector
 05AC  89 1E 019A R	 	        MOV     WORD PTR [HERRINT],BX
 05B0  BA 0611 R	 	        MOV     DX,OFFSET DG:DSKERR
 05B3  B0 24	 	 	        MOV     AL,24H
 05B5  B4 25	 	 	        MOV     AH,SET_INTERRUPT_VECTOR        
	 	 	 	 ;Install our own
 05B7  CD 21	 	 	        INT     21H             ;Spooler must c
	 	 	 	atch its errors
 05B9  B4 2F	 	 	        MOV     AH,GET_DMA
 05BB  CD 21	 	 	        INT     21H
 05BD  8C 06 0198 R	 	        MOV     WORD PTR [DMAADDR+2],ES        
	 	 	 	 ;Save DMA address
 05C1  89 1E 0196 R	 	        MOV     WORD PTR [DMAADDR],BX
 05C5  BA 02F8 R	 	        MOV     DX,OFFSET DG:BUFFER
 05C8  B4 1A	 	 	        MOV     AH,SET_DMA
 05CA  CD 21	 	 	        INT     21H             ;New DMA addres
	 	 	 	s
 05CC  C6 06 01AB R 00	 	        MOV     [PABORT],0      ;No abort
 05D1  8B 16 01A5 R	 	        MOV     DX,[CURRFIL]    ;Read
 05D5  42	 	 	        INC     DX
 05D6  42	 	 	        INC     DX              ;Skip over poin
	 	 	 	ter
 05D7  B4 14	 	 	        MOV     AH,FCB_SEQ_READ
 05D9  CD 21	 	 	        INT     21H
 05DB  50	 	 	        PUSH    AX
 05DC  C5 16 0196 R	 	        LDS     DX,[DMAADDR]
 	 	 	 	ASSUME  DS:NOTHING
 05E0  B4 1A	 	 	        MOV     AH,SET_DMA
 05E2  CD 21	 	 	        INT     21H             ;Restore DMA
 05E4  2E: C5 16 019A R	 	        LDS     DX,[HERRINT]
 05E9  B0 24	 	 	        MOV     AL,24H
 05EB  B4 25	 	 	        MOV     AH,SET_INTERRUPT_VECTOR
 05ED  CD 21	 	 	        INT     21H             ;Restore Error 
	 	 	 	INT
 05EF  58	 	 	        POP     AX
 05F0  0E	 	 	        PUSH    CS
 05F1  1F	 	 	        POP     DS
 	 	 	 	ASSUME  DS:DG
 05F2  80 3E 01AB R 00	 	        CMP     [PABORT],0
 05F7  75 12	 	 	        JNZ     TONEXTFIL       ;Barf on this f
	 	 	 	ile, got INT 24
 05F9  3C 01	 	 	        CMP     AL,01
 05FB  74 09	 	 	        JZ      FILEOF          ;Read EOF?
 05FD  BB 02F8 R	 	        MOV     BX,OFFSET DG:BUFFER     ;Buffer
	 	 	 	 full
 0600  89 1E 01A3 R	 	        MOV     [NXTCHR],BX
 0604  EB 84	 	 	        JMP     DONEJMP
 	 	 	 	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-69
	 	 	 	 	 	 	12-10-<1    


 0606	 	 	 	FILEOF:
 0606  B0 0C	 	 	        MOV     AL,0CH          ;Form feed
 0608  E8 0834 R	 	        CALL    LOUT
 060B	 	 	 	TONEXTFIL:
 060B  E8 080F R	 	        CALL    NEXTFIL
 060E  E9 058A R	 	        JMP     DONEJMP
 	 	 	 	
 	 	 	 	;INT 24 handler
 	 	 	 	
 0611	 	 	 	DSKERR:
 	 	 	 	ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
 0611  FB	 	 	        STI
 0612  2E: 80 3E 01AB R 00	        CMP     [PABORT],0
 0618  75 5B	 	 	        JNZ     IGNRET
 061A  53	 	 	        PUSH    BX
 061B  51	 	 	        PUSH    CX
 061C  52	 	 	        PUSH    DX
 061D  57	 	 	        PUSH    DI
 061E  56	 	 	        PUSH    SI
 061F  55	 	 	        PUSH    BP
 0620  06	 	 	        PUSH    ES
 0621  1E	 	 	        PUSH    DS
 0622  0E	 	 	        PUSH    CS
 0623  1F	 	 	        POP     DS
 0624  0E	 	 	        PUSH    CS
 0625  07	 	 	        POP     ES
 	 	 	 	ASSUME  DS:DG,ES:DG
 0626  00 06 02F3 R	 	        ADD     [BADDRVM],AL    ;Set correct dr
	 	 	 	ive letter
 062A  BE 01AC R	 	        MOV     SI,OFFSET DG:ERRMES
 062D  E8 0829 R	 	        CALL    LISTMES
 0630  F6 C4 80	 	 	        TEST    AH,080H
 0633  75 43	 	 	        JNZ     FATERR
 0635  81 E7 00FF	 	        AND     DI,0FFH
 0639  83 FF 0C	 	 	        CMP     DI,12
 063C  76 03	 	 	        JBE     HAVCOD
 063E  BF 000C	 	 	        MOV     DI,12
 0641	 	 	 	HAVCOD:
 0641  D1 E7	 	 	        SHL     DI,1
 0643  8B BD 022F R	 	        MOV     DI,WORD PTR [DI+MESBAS] ; Get p
	 	 	 	ointer to error message
 0647  8B F7	 	 	        MOV     SI,DI
 0649  E8 0829 R	 	        CALL    LISTMES          ; Print error 
	 	 	 	type
 064C  BF 01D2 R	 	        MOV     DI,OFFSET DG:EMFILNAM
 064F  8B 36 01A5 R	 	        MOV     SI,[CURRFIL]
 0653  83 C6 02	 	 	        ADD     SI,2             ;Get to file n
	 	 	 	ame
 0656  AC	 	 	        LODSB
 0657  04 40	 	 	        ADD     AL,'@'
 0659  AA	 	 	        STOSB
 065A  47	 	 	        INC     DI
 065B  B9 0004	 	 	        MOV     CX,4
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-70
	 	 	 	 	 	 	12-10-<1    


 065E  F3/ A5	 	 	        REP     MOVSW
 0660  47	 	 	        INC     DI
 0661  A5	 	 	        MOVSW
 0662  A4	 	 	        MOVSB
 0663  BE 01BD R	 	        MOV     SI,OFFSET DG:ERRMEST
 0666  E8 0829 R	 	        CALL    LISTMES
 0669	 	 	 	SETABORT:
 0669  FE 06 01AB R	 	        INC     [PABORT]                ;Indica
	 	 	 	te abort
 066D  1F	 	 	        POP     DS
 066E  07	 	 	        POP     ES
 066F  5D	 	 	        POP     BP
 0670  5E	 	 	        POP     SI
 0671  5F	 	 	        POP     DI
 0672  5A	 	 	        POP     DX
 0673  59	 	 	        POP     CX
 0674  5B	 	 	        POP     BX
 0675	 	 	 	IGNRET:
 0675  32 C0	 	 	        XOR     AL,AL                   ;Ignore
 0677  CF	 	 	        IRET
 	 	 	 	
 0678	 	 	 	FATERR:
 0678  BE 02D3 R	 	        MOV     SI,OFFSET DG:FATMES
 067B  E8 0829 R	 	        CALL    LISTMES
 067E  EB E9	 	 	        JMP     SHORT SETABORT
 	 	 	 	
 0680  E9 07D1 R	 	ADDFILJ: JMP    ADDFIL
 	 	 	 	
 0683	 	 	 	COMBUSY:
 0683  B8 FFFF	 	 	        MOV     AX,-1
 0686  CF	 	 	        IRET
 	 	 	 	
 	 	 	 	;Communications interrupt
 0687	 	 	 	SPCOMINT:
 	 	 	 	ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
 0687  2E: 80 3E 018C R 00	        CMP     [CBUSY],0
 068D  75 F4	 	 	        JNZ     COMBUSY
 068F  2E: FE 06 018C R	 	        INC     [CBUSY]                 ;Exclud
	 	 	 	e
 0694  FB	 	 	        STI                             ;Turn i
	 	 	 	nts back on
 0695  56	 	 	        PUSH    SI
 0696  57	 	 	        PUSH    DI
 0697  51	 	 	        PUSH    CX
 0698  1E	 	 	        PUSH    DS
 0699  0E	 	 	        PUSH    CS
 069A  1F	 	 	        POP     DS
 	 	 	 	ASSUME  DS:DG
 069B  C6 06 0191 R 00	 	        MOV     [PCANMES],0             ;Havn't
	 	 	 	 printed cancel message
 06A0  0A E4	 	 	        OR      AH,AH
 06A2  74 DC	 	 	        JZ      ADDFILJ                 ;Add fi
	 	 	 	le
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-71
	 	 	 	 	 	 	12-10-<1    


 06A4  80 FC 01	 	 	        CMP     AH,1
 06A7  74 38	 	 	        JZ      CANFIL                  ;Cancel
	 	 	 	 File(s)
 06A9  32 C0	 	 	        XOR     AL,AL
 06AB	 	 	 	SETCOUNT:
 06AB  50	 	 	        PUSH    AX              ;Save AL return
	 	 	 	 code
 06AC  32 E4	 	 	        XOR     AH,AH
 06AE  BE 08D1 R	 	        MOV     SI,OFFSET DG:SPLFCB
 06B1  8B 0E 08CD R	 	        MOV     CX,[NUMFCBS]
 06B5	 	 	 	CNTFILS:
 06B5  80 7C 02 FF	 	        CMP     BYTE PTR [SI+2],-1        ;Vali
	 	 	 	d?
 06B9  74 02	 	 	        JZ      LNEXT
 06BB  FE C4	 	 	        INC     AH
 06BD	 	 	 	LNEXT:
 06BD  83 C6 28	 	 	        ADD     SI,FCBSIZ
 06C0  E2 F3	 	 	        LOOP    CNTFILS
 06C2	 	 	 	COMRET:
 06C2  BB 08D1 R	 	        MOV     BX,OFFSET DG:SPLFCB
 06C5  8B 16 01A5 R	 	        MOV     DX,[CURRFIL]
 06C9  1E	 	 	        PUSH    DS
 06CA  07	 	 	        POP     ES
 	 	 	 	ASSUME  ES:NOTHING
 06CB  8A EC	 	 	        MOV     CH,AH
 06CD  58	 	 	        POP     AX                      ;Get AL
	 	 	 	 return
 06CE  8A E5	 	 	        MOV     AH,CH
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 06D0  E8 0864 R	 	        CALL    PSTAT                   ; Tweek
	 	 	 	 error counter
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 06D3  1F	 	 	        POP     DS
 	 	 	 	ASSUME  DS:NOTHING
 06D4  59	 	 	        POP     CX
 06D5  5F	 	 	        POP     DI
 06D6  5E	 	 	        POP     SI
 06D7  2E: C6 06 018C R 00	        MOV     [CBUSY],0
 06DD  CF	 	 	        IRET
 	 	 	 	
 06DE  E9 07A0 R	 	DELALLJ: JMP    DELALL
 	 	 	 	
 06E1	 	 	 	CANFIL:
 	 	 	 	ASSUME  DS:DG,ES:NOTHING
 06E1  8B 0E 08CD R	 	        MOV     CX,[NUMFCBS]
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 06E5  8B 36 01A5 R	 	        MOV     SI,[CURRFIL]
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-72
	 	 	 	 	 	 	12-10-<1    


 06E9  83 FA FF	 	 	        CMP     DX,-1
 06EC  74 F0	 	 	        JZ      DELALLJ
 06EE  8B 1C	 	 	        MOV     BX,[SI]
 06F0  53	 	 	        PUSH    BX
 06F1	 	 	 	LOOKEND:                        ;Set initial po
	 	 	 	inter values
 06F1  3B DE	 	 	        CMP     BX,SI
 06F3  74 06	 	 	        JZ      GOTLAST
 06F5  58	 	 	        POP     AX
 06F6  53	 	 	        PUSH    BX
 06F7  8B 1F	 	 	        MOV     BX,[BX]
 06F9  EB F6	 	 	        JMP     SHORT LOOKEND
 	 	 	 	
 06FB	 	 	 	GOTLAST:
 06FB  5B	 	 	        POP     BX
 06FC  89 1E 01A7 R	 	        MOV     [LASTFCB],BX
 0700  89 1E 01A9 R	 	        MOV     [LASTFCB2],BX
 0704  07	 	 	        POP     ES
 0705  06	 	 	        PUSH    ES
 0706  8B DE	 	 	        MOV     BX,SI
 0708	 	 	 	LOOKMATCH:
 0708  8B FA	 	 	        MOV     DI,DX
 070A  83 C6 02	 	 	        ADD     SI,2                    ;Skip p
	 	 	 	ointer
 070D  80 3C FF	 	 	        CMP     BYTE PTR [SI],-1
 0710  74 6A	 	 	        JZ      CANTERMJ                ;No mor
	 	 	 	e
 0712  A6	 	 	        CMPSB
 0713  75 5D	 	 	        JNZ     SKIPFIL                 ;DRIVE
 0715  51	 	 	        PUSH    CX
 0716  B9 000B	 	 	        MOV     CX,11
 0719	 	 	 	NXTCHAR:
 0719  26: 8A 05	 	        MOV     AL,ES:[DI]
 071C  47	 	 	        INC     DI
 071D  E8 07C6 R	 	        CALL    UPCONV
 0720  8A E0	 	 	        MOV     AH,AL
 0722  AC	 	 	        LODSB
 0723  E8 07C6 R	 	        CALL    UPCONV
 0726  80 FC 3F	 	 	        CMP     AH,"?"                  ;Wild c
	 	 	 	ard?
 0729  74 04	 	 	        JZ      NXTCHRLP                ;Yes
 072B  3A E0	 	 	        CMP     AH,AL
 072D  75 42	 	 	        JNZ     SKIPFILC
 072F	 	 	 	NXTCHRLP:
 072F  E2 E8	 	 	        LOOP    NXTCHAR
 0731	 	 	 	MATCH:
 0731  59	 	 	        POP     CX
 0732  B4 FF	 	 	        MOV     AH,-1
 0734  86 67 02	 	 	        XCHG    AH,[BX+2]               ;Zap it
 0737  3B 1E 01A5 R	 	        CMP     BX,[CURRFIL]            ;Is cur
	 	 	 	rent file?
 073B  75 41	 	 	        JNZ     REQUEUE                 ;No
 073D  B0 01	 	 	        MOV     AL,1
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-73
	 	 	 	 	 	 	12-10-<1    


 073F  86 06 0191 R	 	        XCHG    AL,[PCANMES]
 0743  0A C0	 	 	        OR      AL,AL
 0745  75 26	 	 	        JNZ     DIDCMES                 ;Only p
	 	 	 	rint cancel message once
 0747  06	 	 	        PUSH    ES
 0748  0E	 	 	        PUSH    CS
 0749  07	 	 	        POP     ES
 074A  BF 01E8 R	 	        MOV     DI,OFFSET DG:CANFILNAM
 074D  8B F3	 	 	        MOV     SI,BX
 074F  83 C6 03	 	 	        ADD     SI,3             ;Get to file n
	 	 	 	ame
 0752  8A C4	 	 	        MOV     AL,AH
 0754  04 40	 	 	        ADD     AL,'@'
 0756  AA	 	 	        STOSB
 0757  47	 	 	        INC     DI
 0758  B9 0004	 	 	        MOV     CX,4
 075B  F3/ A5	 	 	        REP     MOVSW
 075D  47	 	 	        INC     DI
 075E  A5	 	 	        MOVSW
 075F  A4	 	 	        MOVSB
 0760  07	 	 	        POP     ES
 0761  BE 01E4 R	 	        MOV     SI,OFFSET DG:CANMES
 0764  E8 0829 R	 	        CALL    LISTMES
 0767  BE 01E0 R	 	        MOV     SI,OFFSET DG:BELMES
 076A  E8 0829 R	 	        CALL    LISTMES
 076D	 	 	 	DIDCMES:
 076D  51	 	 	        PUSH    CX
 076E  E8 080F R	 	        CALL    NEXTFIL
 0771	 	 	 	SKIPFILC:
 0771  59	 	 	        POP     CX
 0772	 	 	 	SKIPFIL:
 0772  89 1E 01A9 R	 	        MOV     [LASTFCB2],BX
 0776  8B 1F	 	 	        MOV     BX,[BX]
 0778	 	 	 	NEXTFC:
 0778  8B F3	 	 	        MOV     SI,BX
 077A  E2 8C	 	 	        LOOP    LOOKMATCH
 077C  EB 43	 	 	CANTERMJ: JMP   SHORT CANTERM
 	 	 	 	
 077E	 	 	 	REQUEUE:
 077E  8B 07	 	 	        MOV     AX,[BX]
 0780  3B 06 01A5 R	 	        CMP     AX,[CURRFIL]            ;Is las
	 	 	 	t FCB?
 0784  74 EC	 	 	        JZ      SKIPFIL                 ;Yes, i
	 	 	 	s in right place
 0786  8B 36 01A9 R	 	        MOV     SI,[LASTFCB2]
 078A  89 04	 	 	        MOV     [SI],AX                 ;Unlink
	 	 	 	 FCB
 078C  8B 36 01A5 R	 	        MOV     SI,[CURRFIL]
 0790  89 37	 	 	        MOV     [BX],SI
 0792  8B 36 01A7 R	 	        MOV     SI,[LASTFCB]
 0796  89 1C	 	 	        MOV     [SI],BX                 ;Link F
	 	 	 	CB at end
 0798  89 1E 01A7 R	 	        MOV     [LASTFCB],BX            ;New en
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-74
	 	 	 	 	 	 	12-10-<1    


	 	 	 	d
 079C  8B D8	 	 	        MOV     BX,AX                   ;Proces
	 	 	 	s what it pointed to
 079E  EB D8	 	 	        JMP     SHORT NEXTFC
 	 	 	 	
 07A0	 	 	 	DELALL:
 07A0  2E: 80 7C 02 FF	 	        CMP     BYTE PTR CS:[SI+2],-1   ;Examin
	 	 	 	e current file
 07A5	 	 	 	DELALL2:
 07A5  C6 44 02 FF	 	        MOV     BYTE PTR [SI+2],-1      ;Zap it
 07A9  8B 34	 	 	        MOV     SI,[SI]
 07AB  E2 F8	 	 	        LOOP    DELALL2
 07AD  74 0C	 	 	        JZ      CANTERM1                ;No mes
	 	 	 	sage if nothing was in progress
 07AF  BE 020C R	 	        MOV     SI,OFFSET DG:ALLCAN
 07B2  E8 0829 R	 	        CALL    LISTMES
 07B5  BE 01E0 R	 	        MOV     SI,OFFSET DG:BELMES
 07B8  E8 0829 R	 	        CALL    LISTMES
 07BB	 	 	 	CANTERM1:
 07BB  C7 06 01A3 R 04F8 R	        MOV     [NXTCHR],OFFSET DG:BUFFER + BLK
	 	 	 	SIZ  ;Buffer empty
 07C1	 	 	 	CANTERM:
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 07C1  33 C0	 	 	        XOR     AX,AX
 07C3  E9 06AB R	 	        JMP     SETCOUNT
 	 	 	 	
 07C6	 	 	 	UPCONV:
 07C6  3C 61	 	 	        CMP     AL,'a'
 07C8  72 06	 	 	        JB      NOCONV
 07CA  3C 7A	 	 	        CMP     AL,'z'
 07CC  77 02	 	 	        JA      NOCONV
 07CE  2C 20	 	 	        SUB     AL,20H
 07D0	 	 	 	NOCONV:
 07D0  C3	 	 	        RET
 	 	 	 	
 07D1	 	 	 	ADDFIL:
 	 	 	 	ASSUME  DS:DG,ES:NOTHING
 07D1  8B 36 01A5 R	 	        MOV     SI,[CURRFIL]
 07D5  8B 0E 08CD R	 	        MOV     CX,[NUMFCBS]
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 07D9	 	 	 	LOOKSPOT:
 07D9  80 7C 02 FF	 	        CMP     BYTE PTR [SI+2],-1
 07DD  74 09	 	 	        JZ      GOTSPOT
 07DF  8B 34	 	 	        MOV     SI,[SI]
 07E1  E2 F6	 	 	        LOOP    LOOKSPOT
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 07E3  B0 01	 	 	        MOV     AL,1
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-75
	 	 	 	 	 	 	12-10-<1    


 07E5  E9 06AB R	 	        JMP     SETCOUNT
 	 	 	 	
 07E8	 	 	 	GOTSPOT:
 07E8  1E	 	 	        PUSH    DS
 07E9  07	 	 	        POP     ES
 07EA  1F	 	 	        POP     DS
 07EB  1E	 	 	        PUSH    DS
 	 	 	 	ASSUME  DS:NOTHING
 07EC  56	 	 	        PUSH    SI
 07ED  8B FE	 	 	        MOV     DI,SI
 07EF  83 C7 02	 	 	        ADD     DI,2
 07F2  8B F2	 	 	        MOV     SI,DX
 07F4  B9 0013	 	 	        MOV     CX,19
 07F7  F3/ A5	 	 	        REP     MOVSW           ;Copy in and se
	 	 	 	t FCB
 07F9  5E	 	 	        POP     SI
 07FA  06	 	 	        PUSH    ES
 07FB  1F	 	 	        POP     DS
 	 	 	 	ASSUME  DS:DG
 07FC  C7 44 0E 0000	 	        MOV     WORD PTR [SI+2+fcb_EXTENT],0
 0801  C6 44 22 00	 	        MOV     BYTE PTR [SI+2+fcb_NR],0
 0805  C7 44 10 0200	 	        MOV     WORD PTR [SI+2+fcb_RECSIZ],BLKS
	 	 	 	IZ
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 080A  32 C0	 	 	        XOR     AL,AL
 080C  E9 06AB R	 	        JMP     SETCOUNT
 	 	 	 	
 080F	 	 	 	NEXTFIL:
 	 	 	 	ASSUME  DS:DG,ES:NOTHING
 080F  8B 36 01A5 R	 	        MOV     SI,[CURRFIL]
 0813  C6 44 02 FF	 	        MOV     BYTE PTR [SI+2],-1      ;Done w
	 	 	 	ith current file
 0817  8B 34	 	 	        MOV     SI,[SI]
 0819  89 36 01A5 R	 	        MOV     [CURRFIL],SI
 081D  C7 06 01A3 R 04F8 R	        MOV     [NXTCHR],OFFSET DG:BUFFER + BLK
	 	 	 	SIZ  ;Buffer empty
 0823  C6 06 01A2 R 00	 	        MOV     [COLPOS],0                     
	 	 	 	     ;Start of line
 0828  C3	 	 	        RET
 	 	 	 	
 0829	 	 	 	LISTMES:
 	 	 	 	ASSUME  DS:DG,ES:NOTHING
 0829  AC	 	 	        LODSB
 082A  3C 24	 	 	        CMP     AL,"$"
 082C  74 05	 	 	        JZ      LMESDONE
 082E  E8 0834 R	 	        CALL    LOUT
 0831  EB F6	 	 	        JMP     LISTMES
 	 	 	 	
 0833	 	 	 	LMESDONE:
 0833  C3	 	 	        RET
 	 	 	 	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-76
	 	 	 	 	 	 	12-10-<1    


 0834	 	 	 	LOUT:
 0834  53	 	 	        PUSH    BX
 0835	 	 	 	LWAIT:
 0835  E8 0864 R	 	        CALL    PSTAT
 0838  74 0A	 	 	        JZ      PREADY
 083A  81 3E 08CF R 4E20	        CMP     [ERRCNT],ERRCNT2
 0840  77 05	 	 	        JA      POPRET                  ;Don't 
	 	 	 	get stuck
 0842  EB F1	 	 	        JMP     SHORT LWAIT
 0844	 	 	 	PREADY:
 0844  E8 088C R	 	        CALL    POUT
 0847	 	 	 	POPRET:
 0847  5B	 	 	        POP     BX
 0848  C3	 	 	        RET
 	 	 	 	
 	 	 	 	;Stuff for BIOS interface
 = 0200	 	 	 	IOBUSY  EQU     0200H
 = 8000	 	 	 	IOERROR EQU     8000H
 	 	 	 	
 0849  ??	 	 	BYTEBUF DB      ?
 	 	 	 	
 084A  ????????	 	 	CALLAD  DD      ?
 	 	 	 	
 084E  16	 	 	IOCALL  DB      22
 084F  00	 	 	        DB      0
 0850  ??	 	 	IOREQ   DB      ?
 0851  0000	 	 	IOSTAT  DW      0
 0853     08 [	 	 	        DB      8 DUP(?)
                ??	 	
                    ]	 	
 	 	 	 	
 085B  00	 	 	        DB      0
 085C  0849 R	 	 	        DW      OFFSET DG:BYTEBUF
 085E  ????	 	 	INTSEG  DW      ?
 0860  0001	 	 	IOCNT   DW      1
 0862  0000	 	 	        DW      0
 	 	 	 	
 0864	 	 	 	PSTAT:
 	 	 	 	ASSUME  DS:DG
 0864  53	 	 	        PUSH    BX
 0865  FF 06 08CF R	 	        INC     [ERRCNT]
 0869  B3 0A	 	 	        MOV     BL,10
 086B  E8 0891 R	 	        CALL    DOCALL
 086E  F7 06 0851 R 8000	        TEST    [IOSTAT],IOERROR
 0874  74 06	 	 	        JZ      NOSTATERR
 0876  81 0E 0851 R 0200	        OR      [IOSTAT],IOBUSY         ;If err
	 	 	 	or, show buisy
 087C	 	 	 	NOSTATERR:
 087C  F7 06 0851 R 0200	        TEST    [IOSTAT],IOBUSY
 0882  75 06	 	 	        JNZ     RET13P                  ;Shows 
	 	 	 	buisy
 0884  C7 06 08CF R 0000	        MOV     [ERRCNT],0
 088A	 	 	 	RET13P:
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-77
	 	 	 	 	 	 	12-10-<1    


 088A  5B	 	 	        POP     BX
 088B  C3	 	 	        RET
 	 	 	 	
 088C	 	 	 	POUT:
 	 	 	 	ASSUME  DS:DG
 088C  A2 0849 R	 	        MOV     [BYTEBUF],AL
 088F  B3 08	 	 	        MOV     BL,8
 0891	 	 	 	DOCALL:
 0891  06	 	 	        PUSH    ES
 0892  88 1E 0850 R	 	        MOV     [IOREQ],BL
 0896  8C CB	 	 	        MOV     BX,CS
 0898  8E C3	 	 	        MOV     ES,BX
 089A  BB 084E R	 	        MOV     BX,OFFSET DG:IOCALL
 089D  C7 06 0851 R 0000	        MOV     [IOSTAT],0
 08A3  C7 06 0860 R 0001	        MOV     [IOCNT],1
 08A9  1E	 	 	        PUSH    DS
 08AA  56	 	 	        PUSH    SI
 08AB  50	 	 	        PUSH    AX
 08AC  C5 36 019E R	 	        LDS     SI,[LISTDEV]
 	 	 	 	ASSUME  DS:NOTHING
 08B0  8B 44 06	 	 	        MOV     AX,[SI+6]
 08B3  2E: A3 084A R	 	        MOV     WORD PTR [CALLAD],AX
 08B7  2E: FF 1E 084A R	 	        CALL    [CALLAD]
 08BC  8B 44 08	 	 	        MOV     AX,[SI+8]
 08BF  2E: A3 084A R	 	        MOV     WORD PTR [CALLAD],AX
 08C3  2E: FF 1E 084A R	 	        CALL    [CALLAD]
 08C8  58	 	 	        POP     AX
 08C9  5E	 	 	        POP     SI
 08CA  1F	 	 	        POP     DS
 	 	 	 	ASSUME  DS:DG
 08CB  07	 	 	        POP     ES
 08CC  C3	 	 	        RET
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 	 	 	 	
 	 	 	 	;The following data is order and position depen
	 	 	 	dant
 08CD  000A	 	 	NUMFCBS DW      10
 08CF  0000	 	 	ERRCNT  DW      0
 	 	 	 	
 08D1  08F9 R	 	 	SPLFCB  DW      OFFSET DG:FC1
 08D3     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 08F9  0921 R	 	 	FC1     DW      OFFSET DG:FC2
 08FB     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-78
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	
 0921  0949 R	 	 	FC2     DW      OFFSET DG:FC3
 0923     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 0949  0971 R	 	 	FC3     DW      OFFSET DG:FC4
 094B     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 0971  0999 R	 	 	FC4     DW      OFFSET DG:FC5
 0973     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 0999  09C1 R	 	 	FC5     DW      OFFSET DG:FC6
 099B     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 09C1  09E9 R	 	 	FC6     DW      OFFSET DG:FC7
 09C3     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 09E9  0A11 R	 	 	FC7     DW      OFFSET DG:FC8
 09EB     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 0A11  0A39 R	 	 	FC8     DW      OFFSET DG:FC9
 0A13     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 0A39  08D1 R	 	 	FC9     DW      OFFSET DG:SPLFCB
 0A3B     26 [	 	 	        DB      (FCBSIZ - 2) DUP (-1)
                FF	 	
                    ]	 	
 	 	 	 	
 	 	 	 	
 0A61	 	 	 	DEF_ENDRES      LABEL   BYTE
 	 	 	 	
 	 	 	 	ASSUME  CS:DG,DS:DG,ES:DG,SS:DG
 	 	 	 	
 0A61	 	 	 	BADSPOOL:
 0A61  BA 00FE R	 	        MOV     DX,OFFSET DG:BADMES
 0A64  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0A66  CD 21	 	 	        INT     21H
 0A68  CD 20	 	 	        INT     20H
 	 	 	 	
 0A6A	 	 	 	SETUP:
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-79
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	;Called once to install resident
 0A6A  FC	 	 	        CLD
 0A6B  8C 0E 085E R	 	        MOV     [INTSEG],CS
 0A6F  BA 014B R	 	        MOV     DX,OFFSET DG:PROMPT
 0A72  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0A74  CD 21	 	 	        INT     21H
 0A76  BA 01E1 R	 	        MOV     DX,OFFSET DG:COMBUF
 0A79  B4 0A	 	 	        MOV     AH,STD_CON_STRING_INPUT
 0A7B  CD 21	 	 	        INT     21H                     ;Get de
	 	 	 	vice name
 0A7D  BA 00A6 R	 	        MOV     DX,OFFSET DG:CRLF
 0A80  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0A82  CD 21	 	 	        INT     21H
 0A84  8A 0E 01E2 R	 	        MOV     CL,[COMBUF+1]
 0A88  0A C9	 	 	        OR      CL,CL
 0A8A  74 0A	 	 	        JZ      DEFSPOOL                ;User d
	 	 	 	idn't specify one
 0A8C  32 ED	 	 	        XOR     CH,CH
 0A8E  BF 01F2 R	 	        MOV     DI,OFFSET DG:LISTFCB + 1
 0A91  BE 01E3 R	 	        MOV     SI,OFFSET DG:COMBUF + 2
 0A94  F3/ A4	 	 	        REP     MOVSB
 0A96	 	 	 	DEFSPOOL:
 0A96  BA 01F1 R	 	        MOV     DX,OFFSET DG:LISTFCB
 0A99  B4 0F	 	 	        MOV     AH,FCB_OPEN
 0A9B  CD 21	 	 	        INT     21H
 0A9D  0A C0	 	 	        OR      AL,AL
 0A9F  75 C0	 	 	        JNZ     BADSPOOL                ;Bad
 0AA1  F6 06 0209 R 80	 	        TEST    BYTE PTR [LISTFCB.fcb_DEVID],08
	 	 	 	0H
 0AA6  74 B9	 	 	        JZ      BADSPOOL                ;Must b
	 	 	 	e a device
 0AA8  C5 36 020A R	 	        LDS     SI,DWORD PTR [LISTFCB.fcb_FIRCL
	 	 	 	US]
 	 	 	 	ASSUME  DS:NOTHING
 0AAC  36: 8C 1E 084C R	 	        MOV     WORD PTR [CALLAD+2],DS     ;Get
	 	 	 	 I/O routines
 0AB1  36: 8C 1E 01A0 R	 	        MOV     WORD PTR [LISTDEV+2],DS    ;Get
	 	 	 	 I/O routines
 0AB6  36: 89 36 019E R	 	        MOV     WORD PTR [LISTDEV],SI
 0ABB  0E	 	 	        PUSH    CS
 0ABC  1F	 	 	        POP     DS
 	 	 	 	ASSUME  DS:DG
 0ABD  BA 04F9 R	 	        MOV     DX,OFFSET DG:SPINT
 0AC0  B0 28	 	 	        MOV     AL,SOFTINT
 0AC2  B4 35	 	 	        MOV     AH,GET_INTERRUPT_VECTOR
 0AC4  CD 21	 	 	        INT     21H                     ;Get so
	 	 	 	ft vector
 0AC6  8C 06 018F R	 	        MOV     WORD PTR [SPNEXT+2],ES
 0ACA  89 1E 018D R	 	        MOV     WORD PTR [SPNEXT],BX
 0ACE  B0 28	 	 	        MOV     AL,SOFTINT
 0AD0  B4 25	 	 	        MOV     AH,SET_INTERRUPT_VECTOR
 0AD2  CD 21	 	 	        INT     21H                     ;Set so
	 	 	 	ft vector
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-80
	 	 	 	 	 	 	12-10-<1    


 0AD4  BA 0687 R	 	        MOV     DX,OFFSET DG:SPCOMINT
 0AD7  B0 2F	 	 	        MOV     AL,COMINT
 0AD9  B4 25	 	 	        MOV     AH,SET_INTERRUPT_VECTOR        
	 	 	 	      ;Set communication vector
 0ADB  CD 21	 	 	        INT     21H
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 	 	 	 	        ENDIF
 	 	 	 	
 0ADD  C6 06 0002 R 01	 	        MOV     [MAKERES],1     ;Indicate to do
	 	 	 	 a terminate stay resident
 0AE2  BA 0128 R	 	        MOV     DX,OFFSET DG:GOODMES
 0AE5  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0AE7  CD 21	 	 	        INT     21H
 0AE9  C3	 	 	        RET
 	 	 	 	
 	 	 	 	ASSUME  CS:DG,DS:DG,ES:DG,SS:DG
 	 	 	 	
 0AEA	 	 	 	TRANSIENT:
 	 	 	 	;User interface
 0AEA  FC	 	 	        CLD
 	 	 	 	
 	 	 	 	;Code to print header
 	 	 	 	;       MOV     DX,OFFSET DG:HEADER
 	 	 	 	;       MOV     AH,STD_CON_STRING_OUTPUT
 	 	 	 	;       INT     21H
 	 	 	 	
 = 0136	 	 	 	DOSVER_LOW      EQU  0136H   ;1.54 in hex
 = 020B	 	 	 	DOSVER_HIGH     EQU  020BH   ;2.11 in hex
 0AEB  B4 30	 	 	        MOV     AH,GET_VERSION
 0AED  CD 21	 	 	        INT     21H
 0AEF  86 E0	 	 	        XCHG    AH,AL           ;Turn it around
	 	 	 	 to AH.AL
 0AF1  3D 0136	 	 	        CMP     AX,DOSVER_LOW
 0AF4  72 05	 	 	        JB      GOTBADDOS
 0AF6  3D 020B	 	 	        CMP     AX,DOSVER_HIGH
 0AF9  76 0B	 	 	        JBE     OKDOS
 0AFB	 	 	 	GOTBADDOS:
 0AFB  0E	 	 	        PUSH    CS
 0AFC  1F	 	 	        POP     DS
 0AFD  BA 01C9 R	 	        MOV     DX,OFFSET DG:BADVER
 0B00  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0B02  CD 21	 	 	        INT     21H
 0B04  CD 20	 	 	        INT     20H
 0B06	 	 	 	OKDOS:
 0B06  B8 3700	 	 	        MOV     AX,CHAR_OPER SHL 8
 0B09  CD 21	 	 	        INT     21H
 0B0B  88 16 0000 R	 	        MOV     [SWITCHAR],DL           ;Get us
	 	 	 	er switch character
 0B0F  B4 35	 	 	        MOV     AH,GET_INTERRUPT_VECTOR
 0B11  B0 2F	 	 	        MOV     AL,COMINT
 0B13  CD 21	 	 	        INT     21H
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-81
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	ASSUME  ES:NOTHING
 0B15  8B FB	 	 	        MOV     DI,BX
 0B17  BE 0687 R	 	        MOV     SI,OFFSET DG:SPCOMINT
 0B1A  B9 000D	 	 	        MOV     CX,13
 0B1D  F3/ A6	 	 	        REPE    CMPSB
 0B1F  74 05	 	 	        JZ      GOTRES          ;Signature matc
	 	 	 	hed
 0B21  0E	 	 	        PUSH    CS
 0B22  07	 	 	        POP     ES
 0B23  E8 0A6A R	 	        CALL    SETUP
 0B26	 	 	 	GOTRES:
 0B26  0E	 	 	        PUSH    CS
 0B27  07	 	 	        POP     ES
 0B28  B4 19	 	 	        MOV     AH,GET_DEFAULT_DRIVE
 0B2A  CD 21	 	 	        INT     21H
 0B2C  A2 0004 R	 	        MOV     [DEFDRV],AL
 0B2F  BE 0080	 	 	        MOV     SI,PARMS
 0B32  AC	 	 	        LODSB
 0B33  0A C0	 	 	        OR      AL,AL
 0B35  75 1E	 	 	        JNZ     GOTPARMS
 0B37	 	 	 	TRANEXIT:
 0B37  E8 0C89 R	 	        CALL    GETSPLIST
 0B3A  80 3E 0002 R 00	 	        CMP     [MAKERES],0
 0B3F  75 02	 	 	        JNZ     SETRES
 0B41  CD 20	 	 	        INT     20H
 	 	 	 	
 0B43	 	 	 	SETRES:
 0B43  8B 16 0035 R	 	        MOV     DX,[ENDRES]
 0B47  CD 27	 	 	        INT     27H
 	 	 	 	
 0B49	 	 	 	ARGSDONE:
 0B49  80 3E 0003 R 00	 	        CMP     [ARGSETUP],0
 0B4E  74 E7	 	 	        JZ      TRANEXIT
 0B50  E8 0BD4 R	 	        CALL    PROCESS
 0B53  EB E2	 	 	        JMP     SHORT TRANEXIT
 	 	 	 	
 0B55	 	 	 	GOTPARMS:
 0B55	 	 	 	PARSE:
 0B55  BF 0216 R	 	        MOV     DI,OFFSET DG:PARSEBUF
 0B58  E8 0D11 R	 	        CALL    CPARSE
 0B5B  72 EC	 	 	        JC      ARGSDONE
 0B5D  3D 0004	 	 	        CMP     AX,4            ;Switch?
 0B60  75 36	 	 	        JNZ     GOTNORMARG
 0B62  8A 05	 	 	        MOV     AL,[DI]         ;Get the switch
	 	 	 	 character
 0B64  3C 43	 	 	        CMP     AL,'C'
 0B66  74 04	 	 	        JZ      SETCAN
 0B68  3C 63	 	 	        CMP     AL,'c'
 0B6A  75 07	 	 	        JNZ     CHKSPL
 0B6C	 	 	 	SETCAN:
 0B6C  C6 06 0005 R 01	 	        MOV     [CANFLG],1
 0B71  EB E2	 	 	        JMP     SHORT PARSE
 0B73	 	 	 	CHKSPL:
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-82
	 	 	 	 	 	 	12-10-<1    


 0B73  3C 50	 	 	        CMP     AL,'P'
 0B75  74 04	 	 	        JZ      RESETCAN
 0B77  3C 70	 	 	        CMP     AL,'p'
 0B79  75 07	 	 	        JNZ     CHKTERM
 0B7B	 	 	 	RESETCAN:
 0B7B  C6 06 0005 R 00	 	        MOV     [CANFLG],0
 0B80  EB D3	 	 	        JMP     SHORT PARSE
 0B82	 	 	 	CHKTERM:
 0B82  3C 54	 	 	        CMP     AL,'T'
 0B84  74 0D	 	 	        JZ      SETTERM
 0B86  3C 74	 	 	        CMP     AL,'t'
 0B88  74 09	 	 	        JZ      SETTERM
 0B8A  BA 01B5 R	 	        MOV     DX,OFFSET DG:BADSWT
 0B8D  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0B8F  CD 21	 	 	        INT     21H
 0B91  EB C2	 	 	        JMP     SHORT PARSE
 	 	 	 	
 0B93	 	 	 	SETTERM:
 0B93  E8 0BC4 R	 	        CALL    TERMPROCESS
 0B96  EB 9F	 	 	        JMP     TRANEXIT        ; Ignore everyt
	 	 	 	hing after T switch
 	 	 	 	
 0B98	 	 	 	GOTNORMARG:
 0B98  32 C0	 	 	        XOR     AL,AL
 0B9A  86 06 0003 R	 	        XCHG    AL,[ARGSETUP]
 0B9E  0A C0	 	 	        OR      AL,AL
 0BA0  74 03	 	 	        JZ      PARSEARG
 0BA2  E8 0BDB R	 	        CALL    NORMPROC        ;Don't test ARG
	 	 	 	SETUP, it just got zeroed
 0BA5	 	 	 	PARSEARG:
 0BA5  56	 	 	        PUSH    SI
 0BA6  8B F7	 	 	        MOV     SI,DI
 0BA8  BF 005C	 	 	        MOV     DI,FCB
 0BAB  B8 2901	 	 	        MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8
	 	 	 	) OR 1
 0BAE  CD 21	 	 	        INT     21H             ;Parse the arg
 0BB0  80 3D 00	 	 	        CMP     BYTE PTR [DI],0
 0BB3  75 08	 	 	        JNZ     DRVOK
 0BB5  8A 16 0004 R	 	        MOV     DL,[DEFDRV]
 0BB9  FE C2	 	 	        INC     DL
 0BBB  88 15	 	 	        MOV     BYTE PTR [DI],DL        ;Set th
	 	 	 	e default drive
 0BBD	 	 	 	DRVOK:
 0BBD  5E	 	 	        POP     SI
 0BBE  FE 06 0003 R	 	        INC     [ARGSETUP]
 0BC2  EB 91	 	 	        JMP     SHORT PARSE
 	 	 	 	
 0BC4	 	 	 	TERMPROCESS:
 0BC4  BA FFFF	 	 	        MOV     DX,-1
 0BC7	 	 	 	PROCRET:
 0BC7  B4 01	 	 	        MOV     AH,1
 0BC9  E8 0C42 R	 	        CALL    DOSET
 0BCC	 	 	 	PROCRETNFUNC:
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-83
	 	 	 	 	 	 	12-10-<1    


 0BCC  C6 06 0003 R 00	 	        MOV     [ARGSETUP],0
 0BD1  0E	 	 	        PUSH    CS
 0BD2  07	 	 	        POP     ES
 0BD3  C3	 	 	RET14:  RET
 	 	 	 	
 0BD4	 	 	 	PROCESS:
 0BD4  80 3E 0003 R 00	 	        CMP     [ARGSETUP],0
 0BD9  74 F8	 	 	        JZ      RET14                   ;Nothin
	 	 	 	g to process
 0BDB	 	 	 	NORMPROC:
 0BDB  A0 005D	 	 	        MOV     AL,BYTE PTR DS:[FCB+1]
 0BDE  3C 20	 	 	        CMP     AL," "
 0BE0  74 2E	 	 	        JZ      SRCHBADJ
 0BE2  BA 005C	 	 	        MOV     DX,FCB
 0BE5  8A 26 0005 R	 	        MOV     AH,[CANFLG]
 0BE9  80 FC 00	 	 	        CMP     AH,0
 0BEC  75 D9	 	 	        JNZ     PROCRET
 0BEE  BA 000F R	 	        MOV     DX,OFFSET DG:SRCHFCB
 0BF1  B4 1A	 	 	        MOV     AH,SET_DMA
 0BF3  CD 21	 	 	        INT     21H
 0BF5  BA 005C	 	 	        MOV     DX,FCB
 0BF8  B4 11	 	 	        MOV     AH,DIR_SEARCH_FIRST
 0BFA  CD 21	 	 	        INT     21H
 0BFC  0A C0	 	 	        OR      AL,AL
 0BFE  75 10	 	 	        JNZ     SRCHBADJ
 0C00	 	 	 	SRCHLOOP:
 0C00  BA 000F R	 	        MOV     DX,OFFSET DG:SRCHFCB
 0C03  B4 0F	 	 	        MOV     AH,FCB_OPEN
 0C05  CD 21	 	 	        INT     21H
 0C07  0A C0	 	 	        OR      AL,AL
 0C09  74 08	 	 	        JZ      OPENOK
 0C0B  E8 0C59 R	 	        CALL    OPENERR
 0C0E  EB 1E	 	 	        JMP     SHORT NEXTSEARCH
 0C10  EB 5E 90	 	 	SRCHBADJ: JMP   SRCHBAD
 0C13	 	 	 	OPENOK:
 0C13  BA 000F R	 	        MOV     DX,OFFSET DG:SRCHFCB
 0C16  B4 00	 	 	        MOV     AH,0
 0C18  E8 0C42 R	 	        CALL    DOSET
 0C1B  0A C0	 	 	        OR      AL,AL
 0C1D  74 0F	 	 	        JZ      NEXTSEARCH
 0C1F  86 06 0001 R	 	        XCHG    AL,[FULLFLAG]           ;Know A
	 	 	 	L non-zero
 0C23  0A C0	 	 	        OR      AL,AL
 0C25  75 07	 	 	        JNZ     NEXTSEARCH              ;Only p
	 	 	 	rint message once
 0C27  BA 00C7 R	 	        MOV     DX,OFFSET DG:FULLMES    ;Queue 
	 	 	 	full
 0C2A  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0C2C  CD 21	 	 	        INT     21H
 0C2E	 	 	 	NEXTSEARCH:
 0C2E  BA 000F R	 	        MOV     DX,OFFSET DG:SRCHFCB
 0C31  B4 1A	 	 	        MOV     AH,SET_DMA
 0C33  CD 21	 	 	        INT     21H
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-84
	 	 	 	 	 	 	12-10-<1    


 0C35  BA 005C	 	 	        MOV     DX,FCB
 0C38  B4 12	 	 	        MOV     AH,DIR_SEARCH_NEXT
 0C3A  CD 21	 	 	        INT     21H
 0C3C  0A C0	 	 	        OR      AL,AL
 0C3E  75 8C	 	 	        JNZ     PROCRETNFUNC
 0C40  EB BE	 	 	        JMP     SRCHLOOP
 	 	 	 	
 0C42	 	 	 	DOSET:
 0C42  CD 2F	 	 	        INT     COMINT
 0C44  88 26 0006 R	 	        MOV     [FILCNT],AH             ;Suck u
	 	 	 	p return info
 0C48  8C 06 0009 R	 	        MOV     WORD PTR [SPLIST+2],ES
 0C4C  8C 06 000D R	 	        MOV     WORD PTR [CURFILE+2],ES
 0C50  89 1E 0007 R	 	        MOV     WORD PTR [SPLIST],BX
 0C54  89 16 000B R	 	        MOV     WORD PTR [CURFILE],DX
 0C58  C3	 	 	        RET
 	 	 	 	
 0C59	 	 	 	OPENERR:
 0C59  56	 	 	        PUSH    SI
 0C5A  57	 	 	        PUSH    DI
 0C5B  BE 00B5 R	 	        MOV     SI,OFFSET DG:OPFILNAM
 0C5E  1E	 	 	        PUSH    DS
 0C5F  07	 	 	        POP     ES
 0C60  BF 000F R	 	        MOV     DI,OFFSET DG:SRCHFCB
 0C63  E8 0CE5 R	 	        CALL    MVFNAM
 0C66  BA 00A9 R	 	        MOV     DX,OFFSET DG:OPMES
 0C69  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0C6B  CD 21	 	 	        INT     21H
 0C6D  5F	 	 	        POP     DI
 0C6E  5E	 	 	        POP     SI
 0C6F  C3	 	 	        RET
 	 	 	 	
 0C70	 	 	 	SRCHBAD:
 0C70  56	 	 	        PUSH    SI
 0C71  57	 	 	        PUSH    DI
 0C72  BE 00DD R	 	        MOV     SI,OFFSET DG:SRCHFNAM
 0C75  1E	 	 	        PUSH    DS
 0C76  07	 	 	        POP     ES
 0C77  BF 005C	 	 	        MOV     DI,FCB
 0C7A  E8 0CE5 R	 	        CALL    MVFNAM
 0C7D  BA 00DD R	 	        MOV     DX,OFFSET DG:SRCHMES
 0C80  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0C82  CD 21	 	 	        INT     21H
 0C84  5F	 	 	        POP     DI
 0C85  5E	 	 	        POP     SI
 0C86  E9 0BCC R	 	        JMP     PROCRETNFUNC
 	 	 	 	
 0C89	 	 	 	GETSPLIST:
 0C89  B4 FF	 	 	        MOV     AH,0FFH
 0C8B  E8 0C42 R	 	        CALL    DOSET
 0C8E  1E	 	 	        PUSH    DS
 0C8F  C5 3E 0007 R	 	        LDS     DI,[SPLIST]
 0C93  8B 7D FE	 	 	        MOV     DI,[DI-2]               ;Get th
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-85
	 	 	 	 	 	 	12-10-<1    


	 	 	 	e error count
 0C96  1F	 	 	        POP     DS
 0C97  81 FF 03E8	 	        CMP     DI,ERRCNT1
 0C9B  72 07	 	 	        JB      CNTOK
 0C9D  BA 0167 R	 	        MOV     DX,OFFSET DG:CNTMES
 0CA0  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0CA2  CD 21	 	 	        INT     21H
 0CA4	 	 	 	CNTOK:
 0CA4  8A 0E 0006 R	 	        MOV     CL,[FILCNT]
 0CA8  0A C9	 	 	        OR      CL,CL
 0CAA  74 31	 	 	        JZ      NOFILES
 0CAC  32 ED	 	 	        XOR     CH,CH
 0CAE  C4 3E 000B R	 	        LES     DI,[CURFILE]
 0CB2  57	 	 	        PUSH    DI
 0CB3  47	 	 	        INC     DI
 0CB4  47	 	 	        INC     DI
 0CB5  BE 0058 R	 	        MOV     SI,OFFSET DG:CURFNAM
 0CB8  E8 0CE5 R	 	        CALL    MVFNAM
 0CBB  5F	 	 	        POP     DI
 0CBC  BA 004E R	 	        MOV     DX,OFFSET DG:CURMES
 0CBF  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0CC1  CD 21	 	 	        INT     21H
 0CC3  49	 	 	        DEC     CX
 0CC4  E3 16	 	 	        JCXZ    RET12
 0CC6	 	 	 	FILOOP:
 0CC6  26: 8B 3D	 	        MOV     DI,ES:[DI]
 0CC9  57	 	 	        PUSH    DI
 0CCA  47	 	 	        INC     DI
 0CCB  47	 	 	        INC     DI
 0CCC  BE 008C R	 	        MOV     SI,OFFSET DG:FILFNAM
 0CCF  E8 0CE5 R	 	        CALL    MVFNAM
 0CD2  5F	 	 	        POP     DI
 0CD3  BA 0084 R	 	        MOV     DX,OFFSET DG:FILMES
 0CD6  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0CD8  CD 21	 	 	        INT     21H
 0CDA  E2 EA	 	 	        LOOP    FILOOP
 0CDC  C3	 	 	RET12:  RET
 	 	 	 	
 0CDD	 	 	 	NOFILES:
 0CDD  BA 0037 R	 	        MOV     DX,OFFSET DG:NOFILS
 0CE0  B4 09	 	 	        MOV     AH,STD_CON_STRING_OUTPUT
 0CE2  CD 21	 	 	        INT     21H
 0CE4  C3	 	 	        RET
 	 	 	 	
 	 	 	 	;Make a message with the file name
 0CE5	 	 	 	MVFNAM:
 	 	 	 	ASSUME  DS:NOTHING,ES:NOTHING
 0CE5  56	 	 	        PUSH    SI
 0CE6  57	 	 	        PUSH    DI
 0CE7  51	 	 	        PUSH    CX
 0CE8  8C C0	 	 	        MOV     AX,ES
 0CEA  1E	 	 	        PUSH    DS
 0CEB  07	 	 	        POP     ES
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-86
	 	 	 	 	 	 	12-10-<1    


 0CEC  8E D8	 	 	        MOV     DS,AX
 0CEE  87 F7	 	 	        XCHG    SI,DI
 0CF0  AC	 	 	        LODSB
 0CF1  04 40	 	 	        ADD     AL,"@"
 0CF3  3C 40	 	 	        CMP     AL,"@"
 0CF5  75 06	 	 	        JNZ     STCHR
 0CF7  36: A0 0004 R	 	        MOV     AL,[DEFDRV]
 0CFB  04 41	 	 	        ADD     AL,"A"
 0CFD	 	 	 	STCHR:
 0CFD  AA	 	 	        STOSB
 0CFE  47	 	 	        INC     DI
 0CFF  B9 0004	 	 	        MOV     CX,4
 0D02  F3/ A5	 	 	        REP     MOVSW
 0D04  47	 	 	        INC     DI
 0D05  A5	 	 	        MOVSW
 0D06  A4	 	 	        MOVSB
 0D07  8C C0	 	 	        MOV     AX,ES
 0D09  1E	 	 	        PUSH    DS
 0D0A  07	 	 	        POP     ES
 0D0B  8E D8	 	 	        MOV     DS,AX
 0D0D  59	 	 	        POP     CX
 0D0E  5F	 	 	        POP     DI
 0D0F  5E	 	 	        POP     SI
 0D10  C3	 	 	        RET
 	 	 	 	
 	 	 	 	;----------------------------------------------
	 	 	 	-------------------------;
 	 	 	 	; ENTRY:                                       
	 	 	 	                         ;
 	 	 	 	;       DS:SI   Points input buffer            
	 	 	 	                         ;
 	 	 	 	;       ES:DI   Points to the token buffer     
	 	 	 	                         ;
 	 	 	 	;                                              
	 	 	 	                         ;
 	 	 	 	; EXIT:                                        
	 	 	 	                         ;
 	 	 	 	;       DS:SI   Points to next char in the inpu
	 	 	 	t buffer                 ;
 	 	 	 	;       ES:DI   Points to the token buffer     
	 	 	 	                         ;
 	 	 	 	;       CX      Character count                
	 	 	 	                         ;
 	 	 	 	;       AX      Condition Code                 
	 	 	 	                         ;
 	 	 	 	;               =1 same as carry set           
	 	 	 	                         ;
 	 	 	 	;               =2 normal token                
	 	 	 	                         ;
 	 	 	 	;               =4 switch character, char in to
	 	 	 	ken buffer               ;
 	 	 	 	;       Carry Flag      Set if a CR was found, 
	 	 	 	Reset otherwise          ;
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-87
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	;                                              
	 	 	 	                         ;
 	 	 	 	; MODIFIES:                                    
	 	 	 	                         ;
 	 	 	 	;       CX, SI, AX and the Carry Flag          
	 	 	 	                         ;
 	 	 	 	;                                              
	 	 	 	                         ;
 	 	 	 	;----------------------------------------------
	 	 	 	-------------------------;
 	 	 	 	
 = 0009	 	 	 	TAB     equ     09h
 = 000D	 	 	 	CR      equ     0dh
 	 	 	 	
 0D11	 	 	 	CPARSE:
 	 	 	 	ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
 0D11  9C	 	 	        pushf                           ;save f
	 	 	 	lags
 0D12  57	 	 	        push    di                      ;save t
	 	 	 	he token buffer addrss
 0D13  33 C9	 	 	        xor     cx,cx                   ;no cha
	 	 	 	rs in token buffer
 0D15  E8 0D65 R	 	        call    kill_bl
 	 	 	 	
 0D18  3C 0D	 	 	        cmp     al,CR                   ;a CR?
 0D1A  75 08	 	 	        jne     sj2                     ;no, sk
	 	 	 	ip
 0D1C	 	 	 	sj1:
 0D1C  B8 0001	 	 	        mov     ax,1                    ;condit
	 	 	 	ion code
 0D1F  4E	 	 	        dec     si                      ;adjust
	 	 	 	 the pointer
 0D20  5F	 	 	        pop     di                      ;retriv
	 	 	 	e token buffer address
 0D21  9D	 	 	        popf                            ;restor
	 	 	 	e flags
 0D22  F9	 	 	        stc                             ;set th
	 	 	 	e carry bit
 0D23  C3	 	 	        ret
 	 	 	 	
 0D24	 	 	 	sj2:
 0D24  2E: 8A 16 0000 R	 	        mov     dl,[SWITCHAR]
 0D29  3A C2	 	 	        cmp     al,dl                   ;is the
	 	 	 	 char the switch char?
 0D2B  75 0F	 	 	        jne     anum_char               ;no, pr
	 	 	 	ocess...
 0D2D  E8 0D65 R	 	        call    kill_bl
 0D30  3C 0D	 	 	        cmp     al,CR                   ;a CR?
 0D32  74 E8	 	 	        je      sj1                     ;yes, e
	 	 	 	rror exit
 0D34  E8 0D77 R	 	        call    move_char               ;Put th
	 	 	 	e switch char in the token buffer
 0D37  B8 0004	 	 	        mov     ax,4                    ;Flag s
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-88
	 	 	 	 	 	 	12-10-<1    


	 	 	 	witch
 0D3A  EB 20	 	 	        jmp     short x_done2
 	 	 	 	
 0D3C	 	 	 	anum_char:
 0D3C  E8 0D77 R	 	        call    move_char               ;just a
	 	 	 	n alphanum string
 0D3F  AC	 	 	        lodsb
 0D40  3C 20	 	 	        cmp     al,' '
 0D42  74 14	 	 	        je      x_done
 0D44  3C 09	 	 	        cmp     al,tab
 0D46  74 10	 	 	        je      x_done
 0D48  3C 0D	 	 	        cmp     al,CR
 0D4A  74 0C	 	 	        je      x_done
 0D4C  3C 2C	 	 	        cmp     al,','
 0D4E  74 08	 	 	        je      x_done
 0D50  3C 3D	 	 	        cmp     al,'='
 0D52  74 04	 	 	        je      x_done
 0D54  3A C2	 	 	        cmp     al,dl                   ;Switch
	 	 	 	 character
 0D56  75 E4	 	 	        jne     anum_char
 0D58	 	 	 	x_done:
 0D58  4E	 	 	        dec     si                      ;adjust
	 	 	 	 for next round
 0D59  B8 0002	 	 	        mov     ax,2                    ;normal
	 	 	 	 token
 0D5C	 	 	 	x_done2:
 0D5C  50	 	 	        push    ax                      ;save c
	 	 	 	ondition code
 0D5D  B0 00	 	 	        mov     al,0
 0D5F  AA	 	 	        stosb                           ;null a
	 	 	 	t the end
 0D60  58	 	 	        pop     ax
 0D61  5F	 	 	        pop     di                      ;restor
	 	 	 	e token buffer pointer
 0D62  9D	 	 	        popf
 0D63  F8	 	 	        clc                             ;clear 
	 	 	 	carry flag
 0D64  C3	 	 	        ret
 	 	 	 	
 	 	 	 	
 0D65	 	 	 	kill_bl proc    near
 0D65  AC	 	 	        lodsb
 0D66  3C 20	 	 	        cmp     al,' '
 0D68  74 FB	 	 	        je      kill_bl
 0D6A  3C 09	 	 	        cmp     al,tab
 0D6C  74 F7	 	 	        je      kill_bl
 0D6E  3C 2C	 	 	        cmp     al,','                  ;a comm
	 	 	 	a?
 0D70  74 F3	 	 	        je      kill_bl
 0D72  3C 3D	 	 	        cmp     al,'='
 0D74  74 EF	 	 	        je      kill_bl
 0D76  C3	 	 	        ret
 0D77	 	 	 	kill_bl endp
 The Microsoft MACRO Assembler , Version 1.25          	Page	1-89
	 	 	 	 	 	 	12-10-<1    


 	 	 	 	
 	 	 	 	
 0D77	 	 	 	move_char proc  near
 0D77  AA	 	 	        stosb                           ;store 
	 	 	 	char in token buffer
 0D78  41	 	 	        inc     cx                      ;increm
	 	 	 	ent char count
 0D79  C3	 	 	        ret
 0D7A	 	 	 	move_char endp
 	 	 	 	
 0D7A	 	 	 	CODE    ENDS
 	 	 	 	        END     START

 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-1
	 	 	 	 	 	 	12-10-<1    


Macros:

	 	N a m e  	 	Length

BREAK. . . . . . . . . . . . . .	0001	
CONDRET. . . . . . . . . . . . .	0009	
CONTEXT. . . . . . . . . . . . .	0002	
DO_EXT . . . . . . . . . . . . .	0001	
ENTRY. . . . . . . . . . . . . .	0001	
ERROR. . . . . . . . . . . . . .	0002	
INVOKE . . . . . . . . . . . . .	0003	
I_AM . . . . . . . . . . . . . .	0005	
I_NEED . . . . . . . . . . . . .	0005	
JUMP . . . . . . . . . . . . . .	0005	
LONG_ADDR. . . . . . . . . . . .	0002	
MAKELAB. . . . . . . . . . . . .	0002	
PROCEDURE. . . . . . . . . . . .	0001	
RETC . . . . . . . . . . . . . .	0001	
RETNC. . . . . . . . . . . . . .	0001	
RETNZ. . . . . . . . . . . . . .	0001	
RETURN . . . . . . . . . . . . .	0002	
RETZ . . . . . . . . . . . . . .	0001	
SHORT_ADDR . . . . . . . . . . .	0004	
TRANSFER . . . . . . . . . . . .	0003	

Structures and records:

	 	N a m e	 	 	Width	# fields
	 	 	 	 	Shift	Width	Mask	Initial

ARENA. . . . . . . . . . . . . .	0005	0003
  ARENA_SIGNATURE. . . . . . . . .	0000
  ARENA_OWNER. . . . . . . . . . .	0001
  ARENA_SIZE . . . . . . . . . . .	0003
BPBLOCK. . . . . . . . . . . . .	000D	0008
  BPSECSZ. . . . . . . . . . . . .	0000
  BPCLUS . . . . . . . . . . . . .	0002
  BPRES. . . . . . . . . . . . . .	0003
  BPFTCNT. . . . . . . . . . . . .	0005
  BPDRCNT. . . . . . . . . . . . .	0006
  BPSCCNT. . . . . . . . . . . . .	0008
  BPMEDIA. . . . . . . . . . . . .	000A
  BPFTSEC. . . . . . . . . . . . .	000B
BUFFINFO . . . . . . . . . . . .	0010	0009
  NEXTBUF. . . . . . . . . . . . .	0000
  BUFDRV . . . . . . . . . . . . .	0004
  BUFDIRTY . . . . . . . . . . . .	0005
  BUFPRI . . . . . . . . . . . . .	0006
  VISIT. . . . . . . . . . . . . .	0007
  BUFSECNO . . . . . . . . . . . .	0008
  BUFWRTCNT. . . . . . . . . . . .	000A
  BUFWRTINC. . . . . . . . . . . .	000B
  BUFDRVDP . . . . . . . . . . . .	000C
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-2
	 	 	 	 	 	 	12-10-<1    


DIR_ENTRY. . . . . . . . . . . .	0020	0008
  DIR_NAME . . . . . . . . . . . .	0000
  DIR_ATTR . . . . . . . . . . . .	000B
  DIR_PAD. . . . . . . . . . . . .	000C
  DIR_TIME . . . . . . . . . . . .	0016
  DIR_DATE . . . . . . . . . . . .	0018
  DIR_FIRST. . . . . . . . . . . .	001A
  DIR_SIZE_L . . . . . . . . . . .	001C
  DIR_SIZE_H . . . . . . . . . . .	001E
DPB. . . . . . . . . . . . . . .	005E	0012
  DPB_DRIVE. . . . . . . . . . . .	0000
  DPB_UNIT . . . . . . . . . . . .	0001
  DPB_SECTOR_SIZE. . . . . . . . .	0002
  DPB_CLUSTER_MASK . . . . . . . .	0004
  DPB_CLUSTER_SHIFT. . . . . . . .	0005
  DPB_FIRST_FAT. . . . . . . . . .	0006
  DPB_FAT_COUNT. . . . . . . . . .	0008
  DPB_ROOT_ENTRIES . . . . . . . .	0009
  DPB_FIRST_SECTOR . . . . . . . .	000B
  DPB_MAX_CLUSTER. . . . . . . . .	000D
  DPB_FAT_SIZE . . . . . . . . . .	000F
  DPB_DIR_SECTOR . . . . . . . . .	0010
  DPB_DRIVER_ADDR. . . . . . . . .	0012
  DPB_MEDIA. . . . . . . . . . . .	0016
  DPB_FIRST_ACCESS . . . . . . . .	0017
  DPB_NEXT_DPB . . . . . . . . . .	0018
  DPB_CURRENT_DIR. . . . . . . . .	001C
  DPB_DIR_TEXT . . . . . . . . . .	001E
EXEC0. . . . . . . . . . . . . .	000E	0004
  EXEC0_ENVIRON. . . . . . . . . .	0000
  EXEC0_COM_LINE . . . . . . . . .	0002
  EXEC0_5C_FCB . . . . . . . . . .	0006
  EXEC0_6C_FCB . . . . . . . . . .	000A
EXEC1. . . . . . . . . . . . . .	0016	0008
  EXEC1_ENVIRON. . . . . . . . . .	0000
  EXEC1_COM_LINE . . . . . . . . .	0002
  EXEC1_5C_FCB . . . . . . . . . .	0006
  EXEC1_6C_FCB . . . . . . . . . .	000A
  EXEC1_SP . . . . . . . . . . . .	000E
  EXEC1_SS . . . . . . . . . . . .	0010
  EXEC1_IP . . . . . . . . . . . .	0012
  EXEC1_CS . . . . . . . . . . . .	0014
EXEC3. . . . . . . . . . . . . .	0004	0002
  EXEC3_LOAD_ADDR. . . . . . . . .	0000
  EXEC3_RELOC_FAC. . . . . . . . .	0002
EXE_FILE . . . . . . . . . . . .	0020	000F
  EXE_SIGNATURE. . . . . . . . . .	0000
  EXE_LEN_MOD_512. . . . . . . . .	0002
  EXE_PAGES. . . . . . . . . . . .	0004
  EXE_RLE_COUNT. . . . . . . . . .	0006
  EXE_PAR_DIR. . . . . . . . . . .	0008
  EXE_MIN_BSS. . . . . . . . . . .	000A
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-3
	 	 	 	 	 	 	12-10-<1    


  EXE_MAX_BSS. . . . . . . . . . .	000C
  EXE_SS . . . . . . . . . . . . .	000E
  EXE_SP . . . . . . . . . . . . .	0010
  EXE_CHKSUM . . . . . . . . . . .	0012
  EXE_IP . . . . . . . . . . . . .	0014
  EXE_CS . . . . . . . . . . . . .	0016
  EXE_RLE_TABLE. . . . . . . . . .	0018
  EXE_IOV. . . . . . . . . . . . .	001A
  EXE_SYM_TAB. . . . . . . . . . .	001C
FIND_BUF . . . . . . . . . . . .	002B	000C
  FIND_BUF_SATTR . . . . . . . . .	0000
  FIND_BUF_DRIVE . . . . . . . . .	0001
  FIND_BUF_NAME. . . . . . . . . .	0002
  FIND_BUF_LASTENT . . . . . . . .	000D
  FIND_BUF_THISDPB . . . . . . . .	000F
  FIND_BUF_DIRSTART. . . . . . . .	0013
  FIND_BUF_ATTR. . . . . . . . . .	0015
  FIND_BUF_TIME. . . . . . . . . .	0016
  FIND_BUF_DATE. . . . . . . . . .	0018
  FIND_BUF_SIZE_L. . . . . . . . .	001A
  FIND_BUF_SIZE_H. . . . . . . . .	001C
  FIND_BUF_PNAME . . . . . . . . .	001E
INTERNAT_BLOCK . . . . . . . . .	0018	0015
  DATE_TIM_FORMAT. . . . . . . . .	0000
  CURRENCY_SYM . . . . . . . . . .	0002
  THOUS_SEP. . . . . . . . . . . .	0007
  DECIMAL_SEP. . . . . . . . . . .	0009
  DATE_SEP . . . . . . . . . . . .	000B
  TIME_SEP . . . . . . . . . . . .	000D
  BIT_FEILD. . . . . . . . . . . .	000F
  CURRENCY_CENTS . . . . . . . . .	0010
  TIME_24. . . . . . . . . . . . .	0011
  MAP_CALL . . . . . . . . . . . .	0012
  DATA_SEP . . . . . . . . . . . .	0016
PROCESS_DATA_BLOCK . . . . . . .	005B	000E
  PDB_EXIT_CALL. . . . . . . . . .	0000
  PDB_BLOCK_LEN. . . . . . . . . .	0002
  PDB_CPM_CALL . . . . . . . . . .	0005
  PDB_EXIT . . . . . . . . . . . .	000A
  PDB_CTRL_C . . . . . . . . . . .	000E
  PDB_FATAL_ABORT. . . . . . . . .	0012
  PDB_PARENT_PID . . . . . . . . .	0016
  PDB_JFN_TABLE. . . . . . . . . .	0018
  PDB_ENVIRON. . . . . . . . . . .	002C
  PDB_USER_STACK . . . . . . . . .	002E
  PDB_PAD1 . . . . . . . . . . . .	0032
  PDB_CALL_SYSTEM. . . . . . . . .	0050
  PDB_PAD2 . . . . . . . . . . . .	0055
SFT. . . . . . . . . . . . . . .	0008	0003
  SFT_LINK . . . . . . . . . . . .	0000
  SFT_COUNT. . . . . . . . . . . .	0004
  SFT_TABLE. . . . . . . . . . . .	0006
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-4
	 	 	 	 	 	 	12-10-<1    


SF_ENTRY . . . . . . . . . . . .	0028	0004
  SF_REF_COUNT . . . . . . . . . .	0000
  SF_MODE. . . . . . . . . . . . .	0001
  SF_ATTR. . . . . . . . . . . . .	0002
  SF_FCB . . . . . . . . . . . . .	0003
SYMBOL_ENTRY . . . . . . . . . .	0106	0004
  SYM_VALUE. . . . . . . . . . . .	0000
  SYM_TYPE . . . . . . . . . . . .	0004
  SYM_LEN. . . . . . . . . . . . .	0006
  SYM_NAME . . . . . . . . . . . .	0007
SYS_FCB. . . . . . . . . . . . .	0025	0010
  FCB_DRIVE. . . . . . . . . . . .	0000
  FCB_NAME . . . . . . . . . . . .	0001
  FCB_EXT. . . . . . . . . . . . .	0009
  FCB_EXTENT . . . . . . . . . . .	000C
  FCB_RECSIZ . . . . . . . . . . .	000E
  FCB_FILSIZ . . . . . . . . . . .	0010
  FCB_DRVBP. . . . . . . . . . . .	0012
  FCB_FDATE. . . . . . . . . . . .	0014
  FCB_FTIME. . . . . . . . . . . .	0016
  FCB_DEVID. . . . . . . . . . . .	0018
  FCB_FIRCLUS. . . . . . . . . . .	0019
  FCB_CLUSPOS. . . . . . . . . . .	001B
  FCB_LSTCLUS. . . . . . . . . . .	001D
  FCB_NR . . . . . . . . . . . . .	0020
  FCB_RR . . . . . . . . . . . . .	0021
USER_ENVIRON . . . . . . . . . .	0018	000C
  USER_AX. . . . . . . . . . . . .	0000
  USER_BX. . . . . . . . . . . . .	0002
  USER_CX. . . . . . . . . . . . .	0004
  USER_DX. . . . . . . . . . . . .	0006
  USER_SI. . . . . . . . . . . . .	0008
  USER_DI. . . . . . . . . . . . .	000A
  USER_BP. . . . . . . . . . . . .	000C
  USER_DS. . . . . . . . . . . . .	000E
  USER_ES. . . . . . . . . . . . .	0010
  USER_IP. . . . . . . . . . . . .	0012
  USER_CS. . . . . . . . . . . . .	0014
  USER_F . . . . . . . . . . . . .	0016

Segments and groups:

	 	N a m e	 	 	Size	align	combine	class

DG . . . . . . . . . . . . . . .	GROUP
  CODE . . . . . . . . . . . . . .	0D7A	PARA  	NONE	
  DATA . . . . . . . . . . . . . .	0266	BYTE  	NONE	

Symbols:            

	 	N a m e	 	 	Type	Value	Attr         

 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-5
	 	 	 	 	 	 	12-10-<1    


ABORT. . . . . . . . . . . . . .	Number	0000	
ADDFIL . . . . . . . . . . . . .	L NEAR 	07D1	CODE
ADDFILJ. . . . . . . . . . . . .	L NEAR 	0680	CODE
ADDR_INT_ABORT . . . . . . . . .	Number	0080	
ADDR_INT_COMMAND . . . . . . . .	Number	0084	
ADDR_INT_CTRL_C. . . . . . . . .	Number	008C	
ADDR_INT_DISK_READ . . . . . . .	Number	0094	
ADDR_INT_DISK_WRITE. . . . . . .	Number	0098	
ADDR_INT_FASTCON . . . . . . . .	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .	Number	0090	
ADDR_INT_KEEP_PROCESS. . . . . .	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .	Number	0088	
AINT . . . . . . . . . . . . . .	Alias	FALSE	 	
ALLCAN . . . . . . . . . . . . .	L BYTE 	020C	CODE
ALLOC. . . . . . . . . . . . . .	Number	0048	
ALLOCOPER. . . . . . . . . . . .	Number	0058	
ALLOC_ARENA_TRASHED. . . . . . .	Alias	ERROR_ARENA_TRASHED	
 	 	 	 	 	
ALLOC_NOT_ENOUGH_MEMORY. . . . .	Alias	ERROR_NOT_ENOUGH_MEMORY	
 	 	 	 	 	
ALTVECT. . . . . . . . . . . . .	Number	0000	
ANUM_CHAR. . . . . . . . . . . .	L NEAR 	0D3C	CODE
ARENA_OWNER_SYSTEM . . . . . . .	Number	0000	
ARENA_SIGNATURE_END. . . . . . .	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .	Number	004D	
ARGSDONE . . . . . . . . . . . .	L NEAR 	0B49	CODE
ARGSETUP . . . . . . . . . . . .	L BYTE 	0003	DATA
ASSIGNOPER . . . . . . . . . . .	Number	005F	
ATTR_ALL . . . . . . . . . . . .	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .	Number	0020	
ATTR_CHANGEABLE. . . . . . . . .	Number	0027	
ATTR_DIRECTORY . . . . . . . . .	Number	0010	
ATTR_HIDDEN. . . . . . . . . . .	Number	0002	
ATTR_IGNORE. . . . . . . . . . .	Number	0021	
ATTR_READ_ONLY . . . . . . . . .	Number	0001	
ATTR_SYSTEM. . . . . . . . . . .	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .	Number	0008	
BADDRVM. . . . . . . . . . . . .	L BYTE 	02F3	CODE
BADMES . . . . . . . . . . . . .	L BYTE 	00FE	DATA
BADSPOOL . . . . . . . . . . . .	L NEAR 	0A61	CODE
BADSWT . . . . . . . . . . . . .	L BYTE 	01B5	DATA
BADVER . . . . . . . . . . . . .	L BYTE 	01C9	DATA
BELMES . . . . . . . . . . . . .	L BYTE 	01E0	CODE
BLKSIZ . . . . . . . . . . . . .	Number	0200	
BUFFER . . . . . . . . . . . . .	L BYTE 	02F8	CODE	Length =0200
BUFINSIZ . . . . . . . . . . . .	Number	0010	
BYTEBUF. . . . . . . . . . . . .	L BYTE 	0849	CODE
CALLAD . . . . . . . . . . . . .	L DWORD	084A	CODE
CANFIL . . . . . . . . . . . . .	L NEAR 	06E1	CODE
CANFILNAM. . . . . . . . . . . .	L BYTE 	01E8	CODE
CANFLG . . . . . . . . . . . . .	L BYTE 	0005	DATA
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-6
	 	 	 	 	 	 	12-10-<1    


CANMES . . . . . . . . . . . . .	L BYTE 	01E4	CODE
CANTERM. . . . . . . . . . . . .	L NEAR 	07C1	CODE
CANTERM1 . . . . . . . . . . . .	L NEAR 	07BB	CODE
CANTERMJ . . . . . . . . . . . .	L NEAR 	077C	CODE
CBUSY. . . . . . . . . . . . . .	L BYTE 	018C	CODE
CHAR_OPER. . . . . . . . . . . .	Number	0037	
CHDIR. . . . . . . . . . . . . .	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .	Alias	ERROR_PATH_NOT_FOUND	
 	 	 	 	 	
CHKSPL . . . . . . . . . . . . .	L NEAR 	0B73	CODE
CHKTERM. . . . . . . . . . . . .	L NEAR 	0B82	CODE
CHMOD. . . . . . . . . . . . . .	Number	0043	
CHMOD_ACCESS_DENIED. . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
CHMOD_INVALID_FUNCTION . . . . .	Alias	ERROR_INVALID_FUNCTION	
 	 	 	 	 	
CHMOD_PATH_NOT_FOUND . . . . . .	Alias	ERROR_PATH_NOT_FOUND	
 	 	 	 	 	
CLOSE. . . . . . . . . . . . . .	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .	Alias	ERROR_INVALID_FUNCTION	
 	 	 	 	 	
CLOSE_INVALID_HANDLE . . . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
CNTFILS. . . . . . . . . . . . .	L NEAR 	06B5	CODE
CNTMES . . . . . . . . . . . . .	L BYTE 	0167	DATA
CNTOK. . . . . . . . . . . . . .	L NEAR 	0CA4	CODE
COLPOS . . . . . . . . . . . . .	L BYTE 	01A2	CODE
COMBUF . . . . . . . . . . . . .	L BYTE 	01E1	DATA
COMBUSY. . . . . . . . . . . . .	L NEAR 	0683	CODE
COMINT . . . . . . . . . . . . .	Number	002F	
COMRET . . . . . . . . . . . . .	L NEAR 	06C2	CODE
COUNTRY_NOT_FOUND. . . . . . . .	Alias	ERROR_FILE_NOT_FOUND	
 	 	 	 	 	
CPARSE . . . . . . . . . . . . .	L NEAR 	0D11	CODE
CR . . . . . . . . . . . . . . .	Number	000D	
CREAT. . . . . . . . . . . . . .	Number	003C	
CREATENEWFILE. . . . . . . . . .	Number	005B	
CREATETEMPFILE . . . . . . . . .	Number	005A	
CREATE_PROCESS_DATA_BLOCK. . . .	Number	0026	
CREAT_ACCESS_DENIED. . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
CREAT_PATH_NOT_FOUND . . . . . .	Alias	ERROR_PATH_NOT_FOUND	
 	 	 	 	 	
CREAT_TOO_MANY_OPEN_FILES. . . .	Alias	ERROR_TOO_MANY_OPEN_FILES
	 	 	 	 	 	
CRLF . . . . . . . . . . . . . .	L BYTE 	00A6	DATA
CURDIR_INVALID_DRIVE . . . . . .	Alias	ERROR_INVALID_DRIVE	
 	 	 	 	 	
CURFILE. . . . . . . . . . . . .	L DWORD	000B	DATA
CURFNAM. . . . . . . . . . . . .	L BYTE 	0058	DATA
CURMES . . . . . . . . . . . . .	L BYTE 	004E	DATA
CURRENT_DIR. . . . . . . . . . .	Number	0047	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-7
	 	 	 	 	 	 	12-10-<1    


CURRFIL. . . . . . . . . . . . .	L WORD 	01A5	CODE
C_BS . . . . . . . . . . . . . .	Number	0008	
C_CR . . . . . . . . . . . . . .	Number	000D	
C_DEL. . . . . . . . . . . . . .	Number	007F	
C_ETB. . . . . . . . . . . . . .	Number	0017	
C_ETX. . . . . . . . . . . . . .	Number	0003	
C_HT . . . . . . . . . . . . . .	Number	0009	
C_LF . . . . . . . . . . . . . .	Number	000A	
C_NAK. . . . . . . . . . . . . .	Number	0015	
DEALLOC. . . . . . . . . . . . .	Number	0049	
DEALLOC_ARENA_TRASHED. . . . . .	Alias	ERROR_ARENA_TRASHED	
 	 	 	 	 	
DEALLOC_INVALID_BLOCK. . . . . .	Alias	ERROR_INVALID_BLOCK	
 	 	 	 	 	
DEFDRV . . . . . . . . . . . . .	L BYTE 	0004	DATA
DEFSPOOL . . . . . . . . . . . .	L NEAR 	0A96	CODE
DEF_ENDRES . . . . . . . . . . .	L BYTE 	0A61	CODE
DELALL . . . . . . . . . . . . .	L NEAR 	07A0	CODE
DELALL2. . . . . . . . . . . . .	L NEAR 	07A5	CODE
DELALLJ. . . . . . . . . . . . .	L NEAR 	06DE	CODE
DEVID_BLOCK_DEV. . . . . . . . .	Number	001F	
DEVID_DEVICE . . . . . . . . . .	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .	Number	0008	
DEVID_DEVICE_CON_IN. . . . . . .	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .	Number	0040	
DEVID_DEVICE_NULL. . . . . . . .	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .	Number	0010	
DEVID_EOF. . . . . . . . . . . .	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .	Number	0040	
DEVID_FILE_MASK_DRIVE. . . . . .	Number	003F	
DEVID_ISCIN. . . . . . . . . . .	Number	0001	
DEVID_ISCLK. . . . . . . . . . .	Number	0008	
DEVID_ISCOT. . . . . . . . . . .	Number	0002	
DEVID_ISDEV. . . . . . . . . . .	Number	0080	
DEVID_ISNUL. . . . . . . . . . .	Number	0004	
DEVID_RAW. . . . . . . . . . . .	Number	0020	
DEVID_SPECIAL. . . . . . . . . .	Number	0010	
DIDCMES. . . . . . . . . . . . .	L NEAR 	076D	CODE
DIRPRI . . . . . . . . . . . . .	Number	000F	
DIRSTRLEN. . . . . . . . . . . .	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .	Number	0011	
DIR_SEARCH_NEXT. . . . . . . . .	Number	0012	
DISK_RESET . . . . . . . . . . .	Number	000D	
DMAADDR. . . . . . . . . . . . .	L DWORD	0196	CODE
DOCALL . . . . . . . . . . . . .	L NEAR 	0891	CODE
DOCHAR . . . . . . . . . . . . .	L NEAR 	0543	CODE
DOINT. . . . . . . . . . . . . .	L NEAR 	0502	CODE
DONEJMP. . . . . . . . . . . . .	L NEAR 	058A	CODE
DOSET. . . . . . . . . . . . . .	L NEAR 	0C42	CODE
DOSVER_HIGH. . . . . . . . . . .	Number	020B	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-8
	 	 	 	 	 	 	12-10-<1    


DOSVER_LOW . . . . . . . . . . .	Number	0136	
DOS_MAJOR_VERSION. . . . . . . .	Number	0002	
DOS_MINOR_VERSION. . . . . . . .	Number	000B	
DPBSIZ . . . . . . . . . . . . .	Number	005E	
DRVOK. . . . . . . . . . . . . .	L NEAR 	0BBD	CODE
DSKERR . . . . . . . . . . . . .	L NEAR 	0611	CODE
DSKSIZ . . . . . . . . . . . . .	Number	000D	
DUP2_INVALID_HANDLE. . . . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
DUP_INVALID_HANDLE . . . . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
DUP_PDB. . . . . . . . . . . . .	Number	0055	
DUP_TOO_MANY_OPEN_FILES. . . . .	Alias	ERROR_TOO_MANY_OPEN_FILES
	 	 	 	 	 	
EMFILNAM . . . . . . . . . . . .	L BYTE 	01D2	CODE
ENDRES . . . . . . . . . . . . .	L WORD 	0035	DATA
ENTRYPOINT . . . . . . . . . . .	Number	00C0	
ERR0 . . . . . . . . . . . . . .	L BYTE 	0249	CODE
ERR1 . . . . . . . . . . . . . .	L BYTE 	0257	CODE
ERR10. . . . . . . . . . . . . .	L BYTE 	02B7	CODE
ERR11. . . . . . . . . . . . . .	L BYTE 	02C3	CODE
ERR12. . . . . . . . . . . . . .	L BYTE 	02CE	CODE
ERR2 . . . . . . . . . . . . . .	L BYTE 	0260	CODE
ERR3 . . . . . . . . . . . . . .	L BYTE 	026A	CODE
ERR4 . . . . . . . . . . . . . .	L BYTE 	0276	CODE
ERR5 . . . . . . . . . . . . . .	L BYTE 	027B	CODE
ERR6 . . . . . . . . . . . . . .	L BYTE 	028B	CODE
ERR7 . . . . . . . . . . . . . .	L BYTE 	0290	CODE
ERR8 . . . . . . . . . . . . . .	L BYTE 	029D	CODE
ERR9 . . . . . . . . . . . . . .	L BYTE 	02AE	CODE
ERRCNT . . . . . . . . . . . . .	L WORD 	08CF	CODE
ERRCNT1. . . . . . . . . . . . .	Number	03E8	
ERRCNT2. . . . . . . . . . . . .	Number	4E20	
ERRMES . . . . . . . . . . . . .	L BYTE 	01AC	CODE
ERRMEST. . . . . . . . . . . . .	L BYTE 	01BD	CODE
ERROR_ACCESS_DENIED. . . . . . .	Number	0005	
ERROR_ARENA_TRASHED. . . . . . .	Number	0007	
ERROR_BAD_ENVIRONMENT. . . . . .	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .	Number	000B	
ERROR_CURRENT_DIRECTORY. . . . .	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .	Number	0002	
ERROR_INVALID_ACCESS . . . . . .	Number	000C	
ERROR_INVALID_BLOCK. . . . . . .	Number	0009	
ERROR_INVALID_DATA . . . . . . .	Number	000D	
ERROR_INVALID_DRIVE. . . . . . .	Number	000F	
ERROR_INVALID_FUNCTION . . . . .	Number	0001	
ERROR_INVALID_HANDLE . . . . . .	Number	0006	
ERROR_NOT_ENOUGH_MEMORY. . . . .	Number	0008	
ERROR_NOT_SAME_DEVICE. . . . . .	Number	0011	
ERROR_NO_MORE_FILES. . . . . . .	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .	Number	0003	
ERROR_TOO_MANY_OPEN_FILES. . . .	Number	0004	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-9
	 	 	 	 	 	 	12-10-<1    


EXEC . . . . . . . . . . . . . .	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .	Alias	ERROR_BAD_ENVIRONMENT	
 	 	 	 	 	
EXEC_BAD_FORMAT. . . . . . . . .	Alias	ERROR_BAD_FORMAT	
 	 	 	 	 	
EXEC_FILE_NOT_FOUND. . . . . . .	Alias	ERROR_FILE_NOT_FOUND	
 	 	 	 	 	
EXEC_FUNC_NO_EXECUTE . . . . . .	Number	0001	
EXEC_FUNC_OVERLAY. . . . . . . .	Number	0002	
EXEC_INVALID_FUNCTION. . . . . .	Alias	ERROR_INVALID_FUNCTION	
 	 	 	 	 	
EXEC_NOT_ENOUGH_MEMORY . . . . .	Alias	ERROR_NOT_ENOUGH_MEMORY	
 	 	 	 	 	
EXE_VALID_OLD_SIGNATURE. . . . .	Number	4D5A	
EXE_VALID_SIGNATURE. . . . . . .	Number	5A4D	
EXIT . . . . . . . . . . . . . .	Number	004C	
EXIT_ABORT . . . . . . . . . . .	Number	0000	
EXIT_CTRL_C. . . . . . . . . . .	Number	0001	
EXIT_HARD_ERROR. . . . . . . . .	Number	0002	
EXIT_KEEP_PROCESS. . . . . . . .	Number	0003	
EXIT_TERMINATE . . . . . . . . .	Number	0000	
FALSE. . . . . . . . . . . . . .	Number	0000	
FATERR . . . . . . . . . . . . .	L NEAR 	0678	CODE
FATMES . . . . . . . . . . . . .	L BYTE 	02D3	CODE
FATPRI . . . . . . . . . . . . .	Number	001E	
FC1. . . . . . . . . . . . . . .	L WORD 	08F9	CODE
FC2. . . . . . . . . . . . . . .	L WORD 	0921	CODE
FC3. . . . . . . . . . . . . . .	L WORD 	0949	CODE
FC4. . . . . . . . . . . . . . .	L WORD 	0971	CODE
FC5. . . . . . . . . . . . . . .	L WORD 	0999	CODE
FC6. . . . . . . . . . . . . . .	L WORD 	09C1	CODE
FC7. . . . . . . . . . . . . . .	L WORD 	09E9	CODE
FC8. . . . . . . . . . . . . . .	L WORD 	0A11	CODE
FC9. . . . . . . . . . . . . . .	L WORD 	0A39	CODE
FCB. . . . . . . . . . . . . . .	Number	005C	
FCBSIZ . . . . . . . . . . . . .	Number	0028	
FCB_CLOSE. . . . . . . . . . . .	Number	0010	
FCB_CREATE . . . . . . . . . . .	Number	0016	
FCB_DELETE . . . . . . . . . . .	Number	0013	
FCB_OPEN . . . . . . . . . . . .	Number	000F	
FCB_RANDOM_READ. . . . . . . . .	Number	0021	
FCB_RANDOM_READ_BLOCK. . . . . .	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .	Number	0028	
FCB_RENAME . . . . . . . . . . .	Number	0017	
FCB_SEQ_READ . . . . . . . . . .	Number	0014	
FCB_SEQ_WRITE. . . . . . . . . .	Number	0015	
FILCNT . . . . . . . . . . . . .	L BYTE 	0006	DATA
FILDIRENT. . . . . . . . . . . .	Number	0010	
FILEOF . . . . . . . . . . . . .	L NEAR 	0606	CODE
FILEOFJ. . . . . . . . . . . . .	L NEAR 	059F	CODE
FILETIMES_INVALID_FUNCTION . . .	Alias	ERROR_INVALID_FUNCTION	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-10
	 	 	 	 	 	 	12-10-<1    


	 	 	 	 	
FILETIMES_INVALID_HANDLE . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
FILE_TIMES . . . . . . . . . . .	Number	0057	
FILFNAM. . . . . . . . . . . . .	L BYTE 	008C	DATA
FILMES . . . . . . . . . . . . .	L BYTE 	0084	DATA
FILOOP . . . . . . . . . . . . .	L NEAR 	0CC6	CODE
FILPERPROC . . . . . . . . . . .	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .	Alias	ERROR_FILE_NOT_FOUND	
 	 	 	 	 	
FINDFIRST_NO_MORE_FILES. . . . .	Alias	ERROR_NO_MORE_FILES	
 	 	 	 	 	
FINDNEXT_NO_MORE_FILES . . . . .	Alias	ERROR_NO_MORE_FILES	
 	 	 	 	 	
FIND_FIRST . . . . . . . . . . .	Number	004E	
FIND_NEXT. . . . . . . . . . . .	Number	004F	
FREEPRI. . . . . . . . . . . . .	Number	0000	
FULLFLAG . . . . . . . . . . . .	L BYTE 	0001	DATA
FULLMES. . . . . . . . . . . . .	L BYTE 	00C7	DATA
GETEXTENDEDERROR . . . . . . . .	Number	0059	
GETSPLIST. . . . . . . . . . . .	L NEAR 	0C89	CODE
GET_CURRENT_PDB. . . . . . . . .	Number	0051	
GET_DATE . . . . . . . . . . . .	Number	002A	
GET_DEFAULT_DPB. . . . . . . . .	Number	001F	
GET_DEFAULT_DRIVE. . . . . . . .	Number	0019	
GET_DMA. . . . . . . . . . . . .	Number	002F	
GET_DPB. . . . . . . . . . . . .	Number	0032	
GET_DRIVE_FREESPACE. . . . . . .	Number	0036	
GET_FCB_FILE_LENGTH. . . . . . .	Number	0023	
GET_FCB_POSITION . . . . . . . .	Number	0024	
GET_INDOS_FLAG . . . . . . . . .	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .	Number	0035	
GET_IN_VARS. . . . . . . . . . .	Number	0052	
GET_TIME . . . . . . . . . . . .	Number	002C	
GET_VERIFY_ON_WRITE. . . . . . .	Number	0054	
GET_VERSION. . . . . . . . . . .	Number	0030	
GOAHEAD. . . . . . . . . . . . .	L NEAR 	0514	CODE
GOODMES. . . . . . . . . . . . .	L BYTE 	0128	DATA
GOTBADDOS. . . . . . . . . . . .	L NEAR 	0AFB	CODE
GOTLAST. . . . . . . . . . . . .	L NEAR 	06FB	CODE
GOTNORMARG . . . . . . . . . . .	L NEAR 	0B98	CODE
GOTPARMS . . . . . . . . . . . .	L NEAR 	0B55	CODE
GOTRES . . . . . . . . . . . . .	L NEAR 	0B26	CODE
GOTSPOT. . . . . . . . . . . . .	L NEAR 	07E8	CODE
HARDINT. . . . . . . . . . . . .	Alias	FALSE	 	
HAVCOD . . . . . . . . . . . . .	L NEAR 	0641	CODE
HEADER . . . . . . . . . . . . .	L BYTE 	0103	CODE
HERRINT. . . . . . . . . . . . .	L DWORD	019A	CODE
IBM. . . . . . . . . . . . . . .	Alias	FALSE	 	
IBMVER . . . . . . . . . . . . .	Alias	IBM	 	
IGNRET . . . . . . . . . . . . .	L NEAR 	0675	CODE
INTBASE. . . . . . . . . . . . .	Number	0080	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-11
	 	 	 	 	 	 	12-10-<1    


INTERNATIONAL. . . . . . . . . .	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .	Alias	ERROR_INVALID_FUNCTION	
 	 	 	 	 	
INTERNAT_BLOCK_MAX . . . . . . .	Number	0020	
INTSEG . . . . . . . . . . . . .	L WORD 	085E	CODE
INTTAB . . . . . . . . . . . . .	Number	0020	
INT_ABORT. . . . . . . . . . . .	Alias	INTTAB	 	
INT_COMMAND. . . . . . . . . . .	Number	0021	
INT_CTRL_C . . . . . . . . . . .	Number	0023	
INT_DISK_READ. . . . . . . . . .	Number	0025	
INT_DISK_WRITE . . . . . . . . .	Number	0026	
INT_FASTCON. . . . . . . . . . .	Number	0029	
INT_FATAL_ABORT. . . . . . . . .	Number	0024	
INT_KEEP_PROCESS . . . . . . . .	Number	0027	
INT_SPOOLER. . . . . . . . . . .	Number	0028	
INT_TERMINATE. . . . . . . . . .	Number	0022	
IOBUSY . . . . . . . . . . . . .	Number	0200	
IOCALL . . . . . . . . . . . . .	L BYTE 	084E	CODE
IOCNT. . . . . . . . . . . . . .	L WORD 	0860	CODE
IOCTL. . . . . . . . . . . . . .	Number	0044	
IOCTL_INVALID_DATA . . . . . . .	Alias	ERROR_INVALID_DATA	
 	 	 	 	 	
IOCTL_INVALID_FUNCTION . . . . .	Alias	ERROR_INVALID_FUNCTION	
 	 	 	 	 	
IOCTL_INVALID_HANDLE . . . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
IOERROR. . . . . . . . . . . . .	Number	8000	
IOREQ. . . . . . . . . . . . . .	L BYTE 	0850	CODE
IOSTAT . . . . . . . . . . . . .	L WORD 	0851	CODE
ISTACK . . . . . . . . . . . . .	L WORD 	018C	CODE
KEEP_PROCESS . . . . . . . . . .	Number	0031	
KILL_BL. . . . . . . . . . . . .	N PROC	0D65	CODE	Length =0012
LASTFCB. . . . . . . . . . . . .	L WORD 	01A7	CODE
LASTFCB2 . . . . . . . . . . . .	L WORD 	01A9	CODE
LBRPRI . . . . . . . . . . . . .	Number	0002	
LBWPRI . . . . . . . . . . . . .	Number	0004	
LISTDEV. . . . . . . . . . . . .	L DWORD	019E	CODE
LISTFCB. . . . . . . . . . . . .	L BYTE 	01F1	DATA
LISTMES. . . . . . . . . . . . .	L NEAR 	0829	CODE
LMESDONE . . . . . . . . . . . .	L NEAR 	0833	CODE
LNEXT. . . . . . . . . . . . . .	L NEAR 	06BD	CODE
LOCKOPER . . . . . . . . . . . .	Number	005C	
LOOKEND. . . . . . . . . . . . .	L NEAR 	06F1	CODE
LOOKMATCH. . . . . . . . . . . .	L NEAR 	0708	CODE
LOOKSPOT . . . . . . . . . . . .	L NEAR 	07D9	CODE
LOUT . . . . . . . . . . . . . .	L NEAR 	0834	CODE
LSEEK. . . . . . . . . . . . . .	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .	Alias	ERROR_INVALID_FUNCTION	
 	 	 	 	 	
LSEEK_INVALID_HANDLE . . . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
LWAIT. . . . . . . . . . . . . .	L NEAR 	0835	CODE
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-12
	 	 	 	 	 	 	12-10-<1    


MAKERES. . . . . . . . . . . . .	L BYTE 	0002	DATA
MATCH. . . . . . . . . . . . . .	L NEAR 	0731	CODE
MESBAS . . . . . . . . . . . . .	L WORD 	022F	CODE
MI_INT . . . . . . . . . . . . .	Number	00CD	
MI_LONG_CALL . . . . . . . . . .	Number	009A	
MI_LONG_JMP. . . . . . . . . . .	Number	00EA	
MI_LONG_RET. . . . . . . . . . .	Number	00CB	
MKDIR. . . . . . . . . . . . . .	Number	0039	
MKDIR_ACCESS_DENIED. . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
MKDIR_PATH_NOT_FOUND . . . . . .	Alias	ERROR_PATH_NOT_FOUND	
 	 	 	 	 	
MOVE_CHAR. . . . . . . . . . . .	N PROC	0D77	CODE	Length =0003
MSVER. . . . . . . . . . . . . .	Alias	TRUE	 	
MVFNAM . . . . . . . . . . . . .	L NEAR 	0CE5	CODE
NEXTFC . . . . . . . . . . . . .	L NEAR 	0778	CODE
NEXTFIL. . . . . . . . . . . . .	L NEAR 	080F	CODE
NEXTSEARCH . . . . . . . . . . .	L NEAR 	0C2E	CODE
NOCHAR . . . . . . . . . . . . .	L NEAR 	0583	CODE
NOCONV . . . . . . . . . . . . .	L NEAR 	07D0	CODE
NOFILES. . . . . . . . . . . . .	L NEAR 	0CDD	CODE
NOFILS . . . . . . . . . . . . .	L BYTE 	0037	DATA
NORMPROC . . . . . . . . . . . .	L NEAR 	0BDB	CODE
NOSTATERR. . . . . . . . . . . .	L NEAR 	087C	CODE
NOTABDO. . . . . . . . . . . . .	L NEAR 	0573	CODE
NOTBACK. . . . . . . . . . . . .	L NEAR 	057B	CODE
NOTCR. . . . . . . . . . . . . .	L NEAR 	0552	CODE
NO_ERROR_OCCURRED. . . . . . . .	Text	0                              
	 	 	 	                                ?	
 	 	 	 	 	
NUMFCBS. . . . . . . . . . . . .	L WORD 	08CD	CODE
NXTCHAR. . . . . . . . . . . . .	L NEAR 	0719	CODE
NXTCHR . . . . . . . . . . . . .	L WORD 	01A3	CODE
NXTCHRLP . . . . . . . . . . . .	L NEAR 	072F	CODE
NXTSP. . . . . . . . . . . . . .	L NEAR 	04FD	CODE
OEM_C1 . . . . . . . . . . . . .	Number	00F9	
OEM_C2 . . . . . . . . . . . . .	Number	00FA	
OEM_C3 . . . . . . . . . . . . .	Number	00FB	
OEM_C4 . . . . . . . . . . . . .	Number	00FC	
OEM_C5 . . . . . . . . . . . . .	Number	00FD	
OEM_C6 . . . . . . . . . . . . .	Number	00FE	
OEM_C7 . . . . . . . . . . . . .	Number	00FF	
OKDOS. . . . . . . . . . . . . .	L NEAR 	0B06	CODE
OPEN . . . . . . . . . . . . . .	Number	003D	
OPENERR. . . . . . . . . . . . .	L NEAR 	0C59	CODE
OPENOK . . . . . . . . . . . . .	L NEAR 	0C13	CODE
OPEN_ACCESS_DENIED . . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
OPEN_FILE_NOT_FOUND. . . . . . .	Alias	ERROR_FILE_NOT_FOUND	
 	 	 	 	 	
OPEN_FOR_BOTH. . . . . . . . . .	Number	0002	
OPEN_FOR_READ. . . . . . . . . .	Number	0000	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-13
	 	 	 	 	 	 	12-10-<1    


OPEN_FOR_WRITE . . . . . . . . .	Number	0001	
OPEN_INVALID_ACCESS. . . . . . .	Alias	ERROR_INVALID_ACCESS	
 	 	 	 	 	
OPEN_TOO_MANY_OPEN_FILES . . . .	Alias	ERROR_TOO_MANY_OPEN_FILES
	 	 	 	 	 	
OPFILNAM . . . . . . . . . . . .	L BYTE 	00B5	DATA
OPMES. . . . . . . . . . . . . .	L BYTE 	00A9	DATA
PABORT . . . . . . . . . . . . .	L BYTE 	01AB	CODE
PARMS. . . . . . . . . . . . . .	Number	0080	
PARSE. . . . . . . . . . . . . .	L NEAR 	0B55	CODE
PARSEARG . . . . . . . . . . . .	L NEAR 	0BA5	CODE
PARSEBUF . . . . . . . . . . . .	L BYTE 	0216	DATA	Length =0050
PARSE_FILE_DESCRIPTOR. . . . . .	Number	0029	
PCANMES. . . . . . . . . . . . .	L BYTE 	0191	CODE
PLOOP. . . . . . . . . . . . . .	L NEAR 	053E	CODE
POPRET . . . . . . . . . . . . .	L NEAR 	0847	CODE
POUT . . . . . . . . . . . . . .	L NEAR 	088C	CODE
PREADY . . . . . . . . . . . . .	L NEAR 	0844	CODE
PROCESS. . . . . . . . . . . . .	L NEAR 	0BD4	CODE
PROCRET. . . . . . . . . . . . .	L NEAR 	0BC7	CODE
PROCRETNFUNC . . . . . . . . . .	L NEAR 	0BCC	CODE
PROMPT . . . . . . . . . . . . .	L BYTE 	014B	DATA
PSTAT. . . . . . . . . . . . . .	L NEAR 	0864	CODE
RAW_CON_INPUT. . . . . . . . . .	Number	0007	
RAW_CON_IO . . . . . . . . . . .	Number	0006	
READ . . . . . . . . . . . . . .	Number	003F	
READBUFF . . . . . . . . . . . .	L NEAR 	05A2	CODE
READ_ACCESS_DENIED . . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
READ_INVALID_HANDLE. . . . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
RENAME . . . . . . . . . . . . .	Number	0056	
RENAME_ACCESS_DENIED . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
RENAME_FILE_NOT_FOUND. . . . . .	Alias	ERROR_FILE_NOT_FOUND	
 	 	 	 	 	
RENAME_NOT_SAME_DEVICE . . . . .	Alias	ERROR_NOT_SAME_DEVICE	
 	 	 	 	 	
REQUEUE. . . . . . . . . . . . .	L NEAR 	077E	CODE
RESETCAN . . . . . . . . . . . .	L NEAR 	0B7B	CODE
RET12. . . . . . . . . . . . . .	L NEAR 	0CDC	CODE
RET13P . . . . . . . . . . . . .	L NEAR 	088A	CODE
RET14. . . . . . . . . . . . . .	L NEAR 	0BD3	CODE
RMDIR. . . . . . . . . . . . . .	Number	003A	
RMDIR_ACCESS_DENIED. . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
RMDIR_CURRENT_DIRECTORY. . . . .	Alias	ERROR_CURRENT_DIRECTORY	
 	 	 	 	 	
RMDIR_PATH_NOT_FOUND . . . . . .	Alias	ERROR_PATH_NOT_FOUND	
 	 	 	 	 	
RPRI . . . . . . . . . . . . . .	Number	0006	
SERVERCALL . . . . . . . . . . .	Number	005D	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-14
	 	 	 	 	 	 	12-10-<1    


SETABORT . . . . . . . . . . . .	L NEAR 	0669	CODE
SETBLOCK . . . . . . . . . . . .	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .	Alias	ERROR_ARENA_TRASHED	
 	 	 	 	 	
SETBLOCK_INVALID_BLOCK . . . . .	Alias	ERROR_INVALID_BLOCK	
 	 	 	 	 	
SETBLOCK_INVALID_FUNCTION. . . .	Alias	ERROR_INVALID_FUNCTION	
 	 	 	 	 	
SETBLOCK_NOT_ENOUGH_MEMORY . . .	Alias	ERROR_NOT_ENOUGH_MEMORY	
 	 	 	 	 	
SETCAN . . . . . . . . . . . . .	L NEAR 	0B6C	CODE
SETCOUNT . . . . . . . . . . . .	L NEAR 	06AB	CODE
SETDPB . . . . . . . . . . . . .	Number	0053	
SETRES . . . . . . . . . . . . .	L NEAR 	0B43	CODE
SETTERM. . . . . . . . . . . . .	L NEAR 	0B93	CODE
SETUP. . . . . . . . . . . . . .	L NEAR 	0A6A	CODE
SET_CTRL_C_TRAPPING. . . . . . .	Number	0033	
SET_CURRENT_PDB. . . . . . . . .	Number	0050	
SET_DATE . . . . . . . . . . . .	Number	002B	
SET_DEFAULT_DRIVE. . . . . . . .	Number	000E	
SET_DMA. . . . . . . . . . . . .	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .	Number	0025	
SET_OEM_HANDLER. . . . . . . . .	Number	00F8	
SET_TIME . . . . . . . . . . . .	Number	002D	
SET_VERIFY_ON_WRITE. . . . . . .	Number	002E	
SF_DEFAULT_NUMBER. . . . . . . .	Number	0005	
SJ1. . . . . . . . . . . . . . .	L NEAR 	0D1C	CODE
SJ2. . . . . . . . . . . . . . .	L NEAR 	0D24	CODE
SKIPFIL. . . . . . . . . . . . .	L NEAR 	0772	CODE
SKIPFILC . . . . . . . . . . . .	L NEAR 	0771	CODE
SOFTINT. . . . . . . . . . . . .	Number	0028	
SPCOMINT . . . . . . . . . . . .	L NEAR 	0687	CODE
SPINT. . . . . . . . . . . . . .	L NEAR 	04F9	CODE
SPLFCB . . . . . . . . . . . . .	L WORD 	08D1	CODE
SPLIST . . . . . . . . . . . . .	L DWORD	0007	DATA
SPNEXT . . . . . . . . . . . . .	L DWORD	018D	CODE
SPRET. . . . . . . . . . . . . .	L NEAR 	059E	CODE
SPSAVE . . . . . . . . . . . . .	L WORD 	0194	CODE
SRCHBAD. . . . . . . . . . . . .	L NEAR 	0C70	CODE
SRCHBADJ . . . . . . . . . . . .	L NEAR 	0C10	CODE
SRCHFCB. . . . . . . . . . . . .	L BYTE 	000F	DATA	Length =0026
SRCHFNAM . . . . . . . . . . . .	L BYTE 	00DD	DATA
SRCHLOOP . . . . . . . . . . . .	L NEAR 	0C00	CODE
SRCHMES. . . . . . . . . . . . .	L BYTE 	00DD	DATA
SSSAVE . . . . . . . . . . . . .	L WORD 	0192	CODE
START. . . . . . . . . . . . . .	L NEAR 	0100	CODE
STCHR. . . . . . . . . . . . . .	L NEAR 	0CFD	CODE
STDAUX . . . . . . . . . . . . .	Number	0003	
STDERR . . . . . . . . . . . . .	Number	0002	
STDIN. . . . . . . . . . . . . .	Number	0000	
STDOUT . . . . . . . . . . . . .	Number	0001	
STDPRN . . . . . . . . . . . . .	Number	0004	
 The Microsoft MACRO Assembler , Version 1.25          	Page	Symbols
	 	 	 	-15
	 	 	 	 	 	 	12-10-<1    


STD_AUX_INPUT. . . . . . . . . .	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .	Number	0004	
STD_CON_INPUT. . . . . . . . . .	Number	0001	
STD_CON_INPUT_FLUSH. . . . . . .	Number	000C	
STD_CON_INPUT_NO_ECHO. . . . . .	Number	0008	
STD_CON_INPUT_STATUS . . . . . .	Number	000B	
STD_CON_OUTPUT . . . . . . . . .	Number	0002	
STD_CON_STRING_INPUT . . . . . .	Number	000A	
STD_CON_STRING_OUTPUT. . . . . .	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .	Number	0005	
SWITCHAR . . . . . . . . . . . .	L BYTE 	0000	DATA
TAB. . . . . . . . . . . . . . .	Number	0009	
TABDONE. . . . . . . . . . . . .	L NEAR 	0586	CODE
TABLP. . . . . . . . . . . . . .	L NEAR 	0563	CODE
TERMPROCESS. . . . . . . . . . .	L NEAR 	0BC4	CODE
TONEXTFIL. . . . . . . . . . . .	L NEAR 	060B	CODE
TRANEXIT . . . . . . . . . . . .	L NEAR 	0B37	CODE
TRANSIENT. . . . . . . . . . . .	L NEAR 	0AEA	CODE
TRUE . . . . . . . . . . . . . .	Number	- 0001	
UNLINK . . . . . . . . . . . . .	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
UNLINK_FILE_NOT_FOUND. . . . . .	Alias	ERROR_FILE_NOT_FOUND	
 	 	 	 	 	
UPCONV . . . . . . . . . . . . .	L NEAR 	07C6	CODE
USERIDOPER . . . . . . . . . . .	Number	005E	
WAIT . . . . . . . . . . . . . .	Number	004D	
WPRI . . . . . . . . . . . . . .	Number	0008	
WRITE. . . . . . . . . . . . . .	Number	0040	
WRITE_ACCESS_DENIED. . . . . . .	Alias	ERROR_ACCESS_DENIED	
 	 	 	 	 	
WRITE_INVALID_HANDLE . . . . . .	Alias	ERROR_INVALID_HANDLE	
 	 	 	 	 	
XDUP . . . . . . . . . . . . . .	Number	0045	
XDUP2. . . . . . . . . . . . . .	Number	0046	
X_DONE . . . . . . . . . . . . .	L NEAR 	0D58	CODE
X_DONE2. . . . . . . . . . . . .	L NEAR 	0D5C	CODE

Warning Severe
Errors	Errors 
0	0
